     1                                  ; Project name	:	XTIDE Universal BIOS Configurator v2
     2                                  ; Description	:	Program start and exit.
     3                                  
     4                                  ;
     5                                  ; XTIDE Universal BIOS and Associated Tools
     6                                  ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
     7                                  ;
     8                                  ; This program is free software; you can redistribute it and/or modify
     9                                  ; it under the terms of the GNU General Public License as published by
    10                                  ; the Free Software Foundation; either version 2 of the License, or
    11                                  ; (at your option) any later version.
    12                                  ;
    13                                  ; This program is distributed in the hope that it will be useful,
    14                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    15                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    16                                  ; GNU General Public License for more details.
    17                                  ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
    18                                  ;
    19                                  
    20                                  ; Modified by JJP for XT-CFv3 support, Mar-13
    21                                  
    22                                  ; Include .inc files
    23                                  
    24                                  %define INCLUDE_MENU_DIALOGS
    25                                  %define INCLUDE_SERIAL_LIBRARY
    26                                  
    27                                  %include "AssemblyLibrary.inc"	; Assembly Library. Must be included first!
    28                              <1> ; Project name	:	Assembly Library
    29                              <1> ; Description	:	Common defines for all library functions.
    30                              <1> %ifndef ASSEMBLY_LIBRARY_INC
    31                              <1> %define ASSEMBLY_LIBRARY_INC
    32                              <1> 
    33                              <1> ; Include .inc files
    34                              <1> %include "Emulate.inc"			; Must be included first!
    35                              <2> ; Project name	:	Emulation library
    36                              <2> ; Description	:	Macros for emulating later x86 instructions with older
    37                              <2> ;					processors.
    38                              <2> ;					Macros are used so optimized builds can be done
    39                              <2> ;					easily for different processors.
    40                              <2> ;
    41                              <2> ;					This file must be first to be included to
    42                              <2> ;					any source file.
    43                              <2> %ifndef EMULATE_INC
    44                              <2> %define EMULATE_INC
    45                              <2> 
    46                              <2> ; Defines for processor support (should be set in makefile).
    47                              <2> ; Unsupported instructions will be emulated using macros.
    48                              <2> ; If AT class PC is used (instead of XT), define USE_AT
    49                              <2> 
    50                              <2> ;%define USE_186				; Define to use 18x/V20/V30 instructions
    51                              <2> ;%define USE_286				; Define to use 286 instructions
    52                              <2> ;%define USE_386				; Define to use 386 instructions
    53                              <2> ;%define USE_AT					; Define for AT class machine
    54                              <2> 
    55                              <2> %ifdef USE_386
    56                              <2> 	%define USE_286				; Define to use 286 instructions
    57                              <2> %endif
    58                              <2> %ifdef USE_286
    59                              <2> 	%define USE_186				; Define to use 18x/V20/V30 instructions
    60                              <2> 	%define USE_UNDOC_INTEL		; Not supported by NEC V20/V30
    61                              <2> %endif
    62                              <2> 
    63                              <2> %ifdef USE_386
    64                              <2> 	CPU 386						; Allow instructions up to 386
    65                              <2> %elifdef USE_286
    66                              <2> 	CPU 286						; Allow instructions up to 286
    67                              <2> %elifdef USE_186
    68                              <2> 	CPU 186						; Allow instructions up to 188/186/V20/V30
    69                              <2> %else
    70                              <2> 	CPU 8086					; Allow 8088/8086 instructions only
    71                              <2> %endif
    72                              <2> 
    73                              <2> BITS 16							; Set 16 bit code generation
    74                              <2> 
    75                              <2> ; Alignments for jump targets.
    76                              <2> ; Following values are optimal for different processor types:
    77                              <2> ; 286 and 386SX			WORD (16-bit, 2 bytes)
    78                              <2> ; 386DX and 486			DWORD (32-bit, 4 bytes)
    79                              <2> ; Pentium and later		QWORD (64-bit, 8 bytes)
    80                              <2> %ifdef USE_AT
    81                              <2> 	%ifdef USE_386
    82                              <2> 		JUMP_ALIGN		EQU		4
    83                              <2> 		WORD_ALIGN		EQU		2
    84                              <2> 	%else ; USE_286
    85                              <2> 		JUMP_ALIGN		EQU		2
    86                              <2> 		WORD_ALIGN		EQU		2
    87                              <2> 	%endif
    88                              <2> %else ; XT
    89                              <2> 	JUMP_ALIGN		EQU		1
    90                              <2> 	WORD_ALIGN		EQU		1
    91                              <2> %endif
    92                              <2> 
    93                              <2> ;==========================================================================
    94                              <2> 
    95                              <2> ;--------------------------------------------------------------------
    96                              <2> ; The undocumented instruction SALC (Set AL According to CF).
    97                              <2> ; Available on all Intel processors and truly compatible clones.
    98                              <2> ; Does not work on the NEC V20/V30 or Sony CXQ70108 processors.
    99                              <2> ;
   100                              <2> ; eSALC
   101                              <2> ;	Parameters:
   102                              <2> ;		Nothing
   103                              <2> ;	Returns:
   104                              <2> ;		AL:		FFh if CF=1
   105                              <2> ;				00h if CF=0
   106                              <2> ;	Corrupts registers:
   107                              <2> ;		Nothing
   108                              <2> ;--------------------------------------------------------------------
   109                              <2> %macro eSALC 0
   110                              <2> 	db		0D6h
   111                              <2> %endmacro
   112                              <2> 
   113                              <2> 
   114                              <2> ;--------------------------------------------------------------------
   115                              <2> ; The AAD instruction (ASCII Adjust before Division).
   116                              <2> ; Available on all Intel processors and truly compatible clones.
   117                              <2> ; Does not work on the NEC V20/V30 or Sony CXQ70108 processors
   118                              <2> ; unless %1 is 10 (0Ah).
   119                              <2> ;
   120                              <2> ; eAAD
   121                              <2> ;	Parameters:
   122                              <2> ;		%1:		Any 8 bit number (0...255)
   123                              <2> ;	Returns:
   124                              <2> ;		AL:		AH * %1 + AL
   125                              <2> ;		AH:		0
   126                              <2> ;		Flags:	Set according to result
   127                              <2> ;	Corrupts registers:
   128                              <2> ;		Nothing
   129                              <2> ;--------------------------------------------------------------------
   130                              <2> %macro eAAD 1
   131                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
   132                              <2> 	%if %1 > 255
   133                              <2> 		%error Invalid parameter passed to eAAD (%1 > 255)
   134                              <2> 	%else
   135                              <2> 		db		0D5h, %1
   136                              <2> 	%endif
   137                              <2> %endif
   138                              <2> %endmacro
   139                              <2> 
   140                              <2> 
   141                              <2> ;--------------------------------------------------------------------
   142                              <2> ; The AAM instruction (ASCII Adjust after Multiplication).
   143                              <2> ; Available on all Intel processors and truly compatible clones.
   144                              <2> ; Does not work on the NEC V20/V30 or Sony CXQ70108 processors
   145                              <2> ; unless %1 is 10 (0Ah).
   146                              <2> ;
   147                              <2> ; eAAM
   148                              <2> ;	Parameters:
   149                              <2> ;		%1:		Any 8 bit number except 0 (1...255)
   150                              <2> ;	Returns:
   151                              <2> ;		AL:		AL MOD %1
   152                              <2> ;		AH:		AL / %1
   153                              <2> ;		Flags:	Set according to result
   154                              <2> ;	Corrupts registers:
   155                              <2> ;		Nothing
   156                              <2> ;--------------------------------------------------------------------
   157                              <2> %macro eAAM 1
   158                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
   159                              <2> 	%if %1 > 255
   160                              <2> 		%error Invalid parameter passed to eAAM (%1 > 255)
   161                              <2> 	%elif %1 = 0
   162                              <2> 		%error Invalid parameter passed to eAAM (%1 = 0). This would cause a divide-by-zero exception!
   163                              <2> 	%else
   164                              <2> 		db		0D4h, %1
   165                              <2> 	%endif
   166                              <2> %endif
   167                              <2> %endmacro
   168                              <2> 
   169                              <2> 
   170                              <2> ;--------------------------------------------------------------------
   171                              <2> ; Emulates BSF (Bit Scan Forward) instruction when necessary.
   172                              <2> ; BSF is used to find index of least significant bit.
   173                              <2> ;
   174                              <2> ; eBSF
   175                              <2> ;	Parameters:
   176                              <2> ;		%1:		Destination WORD Register for bit index (not CX or same as %2!)
   177                              <2> ;		%2:		Source WORD operand where to search bit (not CX or same as %1!)
   178                              <2> ;	Returns:
   179                              <2> ;		%1:		Index of highest order bit from %2
   180                              <2> ;		ZF:		Set if %2 is zero
   181                              <2> ;				Cleared if %2 is non-zero
   182                              <2> ;	Corrupts registers:
   183                              <2> ;		Nothing
   184                              <2> ;--------------------------------------------------------------------
   185                              <2> %macro eBSF 2
   186                              <2> %ifndef USE_386
   187                              <2> 	push	cx
   188                              <2> 	cmp		WORD %2, BYTE 0		; Source operand is zero?
   189                              <2> 	je		SHORT %%Return		;  If so, return with ZF set
   190                              <2> 
   191                              <2> 	; Set destination to zero and load mask for bit 0
   192                              <2> 	xor		%1, %1
   193                              <2> 	mov		cx, 1
   194                              <2> 
   195                              <2> ALIGN JUMP_ALIGN
   196                              <2> %%BitLoop:
   197                              <2> 	test	%2, cx				; Bit set?
   198                              <2> 	jnz		SHORT %%Return		;  If so, return with ZF cleared
   199                              <2> 	shl		cx, 1				; Prepare to test next bit
   200                              <2> 	inc		%1					; Increment bit index
   201                              <2> 	jmp		SHORT %%BitLoop		; Loop until bit found
   202                              <2> %%Return:
   203                              <2> 	pop		cx
   204                              <2> ;-----------------------------------
   205                              <2> %else
   206                              <2> 	bsf		%1, %2
   207                              <2> %endif
   208                              <2> %endmacro
   209                              <2> 
   210                              <2> 
   211                              <2> ;--------------------------------------------------------------------
   212                              <2> ; Emulates BSR (Bit Scan Reverse) instruction when necessary.
   213                              <2> ; BSR is used to find index of most significant bit.
   214                              <2> ;
   215                              <2> ; eBSR
   216                              <2> ;	Parameters:
   217                              <2> ;		%1:		Destination WORD Register for bit index (not CX or same as %2!)
   218                              <2> ;		%2:		Source WORD operand where to search bit (not CX or same as %1!)
   219                              <2> ;	Returns:
   220                              <2> ;		%1:		Index of highest order bit from %2
   221                              <2> ;		ZF:		Set if %2 is zero
   222                              <2> ;				Cleared if %2 is non-zero
   223                              <2> ;	Corrupts registers:
   224                              <2> ;		Nothing
   225                              <2> ;--------------------------------------------------------------------
   226                              <2> %macro eBSR 2
   227                              <2> %ifndef USE_386
   228                              <2> 	push	cx
   229                              <2> 	cmp		WORD %2, BYTE 0		; Source operand is zero?
   230                              <2> 	je		SHORT %%Return		;  If so, return with ZF set
   231                              <2> 
   232                              <2> 	; Load mask for highest order bit
   233                              <2> 	mov		cx, 1<<15
   234                              <2> 	mov		%1, 15
   235                              <2> 
   236                              <2> ALIGN JUMP_ALIGN
   237                              <2> %%BitLoop:
   238                              <2> 	test	%2, cx				; Bit set?
   239                              <2> 	jnz		SHORT %%Return		;  If so, return with ZF cleared
   240                              <2> 	shr		cx, 1				; Prepare to test next bit
   241                              <2> 	dec		%1					; Decrement bit index
   242                              <2> 	jmp		SHORT %%BitLoop		; Loop until bit found
   243                              <2> %%Return:
   244                              <2> 	pop		cx
   245                              <2> ;-----------------------------------
   246                              <2> %else
   247                              <2> 	bsr		%1, %2
   248                              <2> %endif
   249                              <2> %endmacro
   250                              <2> 
   251                              <2> 
   252                              <2> ;--------------------------------------------------------------------
   253                              <2> ; Conditional Move.
   254                              <2> ;
   255                              <2> ; eCMOVcc
   256                              <2> ;	Parameters:
   257                              <2> ;		%1:		Destination data
   258                              <2> ;		%2:		Source data
   259                              <2> ;	Returns:
   260                              <2> ;		Nothing
   261                              <2> ;	Corrupts registers:
   262                              <2> ;		Nothing
   263                              <2> ;--------------------------------------------------------------------
   264                              <2> %macro eCMOVA 2
   265                              <2> 	jbe		SHORT %%Return
   266                              <2> 	mov		%1, %2
   267                              <2> %%Return:
   268                              <2> %endmacro
   269                              <2> 
   270                              <2> %macro eCMOVC 2
   271                              <2> 	jnc		SHORT %%Return
   272                              <2> 	mov		%1, %2
   273                              <2> %%Return:
   274                              <2> %endmacro
   275                              <2> 
   276                              <2> %macro eCMOVNC 2
   277                              <2> 	jc		SHORT %%Return
   278                              <2> 	mov		%1, %2
   279                              <2> %%Return:
   280                              <2> %endmacro
   281                              <2> 
   282                              <2> %macro eCMOVZ 2
   283                              <2> 	jnz		SHORT %%Return
   284                              <2> 	mov		%1, %2
   285                              <2> %%Return:
   286                              <2> %endmacro
   287                              <2> 
   288                              <2> %macro eCMOVNZ 2
   289                              <2> 	jz		SHORT %%Return
   290                              <2> 	mov		%1, %2
   291                              <2> %%Return:
   292                              <2> %endmacro
   293                              <2> 
   294                              <2> %macro eCMOVE 2
   295                              <2> 	eCMOVZ %1, %2
   296                              <2> %endmacro
   297                              <2> 
   298                              <2> %macro eCMOVNE 2
   299                              <2> 	eCMOVNZ %1, %2
   300                              <2> %endmacro
   301                              <2> 
   302                              <2> %macro eCMOVB 2
   303                              <2> 	jnb		SHORT %%Return
   304                              <2> 	mov		%1, %2
   305                              <2> %%Return:
   306                              <2> %endmacro
   307                              <2> 
   308                              <2> %macro eCMOVS 2
   309                              <2> 	jns		SHORT %%Return
   310                              <2> 	mov		%1, %2
   311                              <2> %%Return:
   312                              <2> %endmacro
   313                              <2> 
   314                              <2> %macro eCMOVNS 2
   315                              <2> 	js		SHORT %%Return
   316                              <2> 	mov		%1, %2
   317                              <2> %%Return:
   318                              <2> %endmacro
   319                              <2> 
   320                              <2> 
   321                              <2> ;--------------------------------------------------------------------
   322                              <2> ; Conditional Set.
   323                              <2> ;
   324                              <2> ; eCSETcc
   325                              <2> ;	Parameters:
   326                              <2> ;		%1:		Destination data
   327                              <2> ;	Returns:
   328                              <2> ;		Nothing
   329                              <2> ;	Corrupts registers:
   330                              <2> ;		Flags
   331                              <2> ;--------------------------------------------------------------------
   332                              <2> %macro eCSETZ 1
   333                              <2> 	mov		%1, 0			; Clear while preserving flags
   334                              <2> 	jnz		SHORT %%Return	; Nothing to set
   335                              <2> 	inc		%1
   336                              <2> %%Return:
   337                              <2> %endmacro
   338                              <2> 
   339                              <2> 
   340                              <2> ;--------------------------------------------------------------------
   341                              <2> ; Moves byte with zero-extending to any Register.
   342                              <2> ;
   343                              <2> ; eMOVZX
   344                              <2> ;	Parameters:
   345                              <2> ;		%1:		Destination Register (SP not supported)
   346                              <2> ;		%2:		Byte register or byte address
   347                              <2> ;	Returns:
   348                              <2> ;		Nothing
   349                              <2> ;	Corrupts registers:
   350                              <2> ;		FLAGS
   351                              <2> ;--------------------------------------------------------------------
   352                              <2> %macro eMOVZX 2
   353                              <2> %ifndef USE_386
   354                              <2> 	%ifidni %1, ax
   355                              <2> 		mov		al, %2
   356                              <2> 		xor		ah, ah
   357                              <2> 	%elifidni %1, bx
   358                              <2> 		mov		bl, %2
   359                              <2> 		xor		bh, bh		; %2 may use BX in effective address
   360                              <2> 	%elifidni %1, cx
   361                              <2> 		mov		cl, %2
   362                              <2> 		xor		ch, ch
   363                              <2> 	%elifidni %1, dx
   364                              <2> 		mov		dl, %2
   365                              <2> 		xor		dh, dh
   366                              <2> 	%else	; SI, DI, BP (all may be used in effective address)
   367                              <2> 		push	ax
   368                              <2> 		mov		al, %2
   369                              <2> 		xor		ah, ah
   370                              <2> 		xchg	ax, %1
   371                              <2> 		pop		ax
   372                              <2> 	%endif
   373                              <2> ;-----------------------------------
   374                              <2> %else
   375                              <2> 	movzx	%1, %2
   376                              <2> %endif
   377                              <2> %endmacro
   378                              <2> 
   379                              <2> 
   380                              <2> ;--------------------------------------------------------------------
   381                              <2> ; Emulates PUSHA instruction when necessary.
   382                              <2> ;
   383                              <2> ; ePUSHA
   384                              <2> ;	Parameters:
   385                              <2> ;		Nothing
   386                              <2> ;	Returns:
   387                              <2> ;		Nothing
   388                              <2> ;	Corrupts registers:
   389                              <2> ;		Nothing
   390                              <2> ;--------------------------------------------------------------------
   391                              <2> %macro ePUSHA 0
   392                              <2> %ifndef USE_186
   393                              <2> 	push	ax
   394                              <2> 	push	cx
   395                              <2> 	push	dx
   396                              <2> 	push	bx
   397                              <2> 	push	sp
   398                              <2> 	push	bp
   399                              <2> 	push	si
   400                              <2> 	push	di
   401                              <2> ;-----------------------------------
   402                              <2> %else
   403                              <2> 	pusha
   404                              <2> %endif
   405                              <2> %endmacro
   406                              <2> 
   407                              <2> 
   408                              <2> ;--------------------------------------------------------------------
   409                              <2> ; Emulates POPA instruction when necessary.
   410                              <2> ;
   411                              <2> ; ePOPA
   412                              <2> ;	Parameters:
   413                              <2> ;		Nothing
   414                              <2> ;	Returns:
   415                              <2> ;		Nothing
   416                              <2> ;	Corrupts registers:
   417                              <2> ;		Nothing
   418                              <2> ;--------------------------------------------------------------------
   419                              <2> %macro ePOPA 0
   420                              <2> %ifndef USE_186
   421                              <2> 	pop		di
   422                              <2> 	pop		si
   423                              <2> 	pop		bp
   424                              <2> 	pop		ax		; Skip SP
   425                              <2> 	pop		bx
   426                              <2> 	pop		dx
   427                              <2> 	pop		cx
   428                              <2> 	pop		ax
   429                              <2> ;-----------------------------------
   430                              <2> %else
   431                              <2> 	popa
   432                              <2> %endif
   433                              <2> %endmacro
   434                              <2> 
   435                              <2> 
   436                              <2> ;--------------------------------------------------------------------
   437                              <2> ; Emulates ENTER instruction when necessary.
   438                              <2> ;
   439                              <2> ; eENTER
   440                              <2> ;	Parameters:
   441                              <2> ;		%1:		Number of bytes to reserve from stack
   442                              <2> ;		%2:		The lexical nesting level (not emulated, set to 0)
   443                              <2> ;	Returns:
   444                              <2> ;		SS:BP:	Ptr to old BP
   445                              <2> ;				([bp-2] points to highest local stack frame word)
   446                              <2> ;	Corrupts registers:
   447                              <2> ;		FLAGS
   448                              <2> ;--------------------------------------------------------------------
   449                              <2> %macro eENTER 2
   450                              <2> %ifndef USE_186
   451                              <2> 	push	bp
   452                              <2> 	mov		bp, sp
   453                              <2> 	sub		sp, %1
   454                              <2> ;-----------------------------------
   455                              <2> %else
   456                              <2> 	enter	%1, %2
   457                              <2> %endif
   458                              <2> %endmacro
   459                              <2> 
   460                              <2> ;--------------------------------------------------------------------
   461                              <2> ; Emulates LEAVE instruction when necessary.
   462                              <2> ;
   463                              <2> ; eLEAVE
   464                              <2> ;	Parameters:
   465                              <2> ;		Nothing
   466                              <2> ;	Returns:
   467                              <2> ;		BP:		What it was before eENTER
   468                              <2> ;	Corrupts registers:
   469                              <2> ;		Nothing
   470                              <2> ;--------------------------------------------------------------------
   471                              <2> %macro eLEAVE 0
   472                              <2> %ifndef USE_186
   473                              <2> 	mov		sp, bp
   474                              <2> 	pop		bp
   475                              <2> ;-----------------------------------
   476                              <2> %else
   477                              <2> 	leave
   478                              <2> %endif
   479                              <2> %endmacro
   480                              <2> 
   481                              <2> 
   482                              <2> ;--------------------------------------------------------------------
   483                              <2> ; Emulates LSS instruction when necessary.
   484                              <2> ;
   485                              <2> ; eLSS
   486                              <2> ;	Parameters:
   487                              <2> ;		%1:		Destination register
   488                              <2> ;		%2:		Source memory address without brackets
   489                              <2> ;	Returns:
   490                              <2> ;		IF:		0 (interrupts disabled)
   491                              <2> ;	Corrupts registers:
   492                              <2> ;		Nothing
   493                              <2> ;--------------------------------------------------------------------
   494                              <2> %macro eLSS 2
   495                              <2> %ifndef USE_386
   496                              <2> 	cli							; Disable interrupts
   497                              <2> 	mov		%1, [%2]			; Load offset
   498                              <2> 	mov		ss, [%2+2]			; Load segment
   499                              <2> ;-----------------------------------
   500                              <2> %else
   501                              <2> 	lss		%1, [%2]
   502                              <2> %endif
   503                              <2> %endmacro
   504                              <2> 
   505                              <2> 
   506                              <2> ;--------------------------------------------------------------------
   507                              <2> ; Repeats string instruction with segment override.
   508                              <2> ; This macro prevents 8088/8086 restart bug.
   509                              <2> ;
   510                              <2> ; eSEG_STR
   511                              <2> ;	Parameters:
   512                              <2> ;		%1:		REP/REPNE or REPE prefix
   513                              <2> ;		%2:		Source segment override (destination is always ES)
   514                              <2> ;		%3:		String instruction
   515                              <2> ;		CX:		Repeat count
   516                              <2> ;	Returns:
   517                              <2> ;		FLAGS for cmps and scas only
   518                              <2> ;	Corrupts registers:
   519                              <2> ;		Nothing
   520                              <2> ;--------------------------------------------------------------------
   521                              <2> %macro eSEG_STR 3
   522                              <2> %ifndef USE_186	; 8088/8086 has string instruction restart bug when more than one prefix
   523                              <2> 	%%Loop:
   524                              <2> 		%1						; REP is the prefix that can be lost
   525                              <2> 		%2						; SEG is the prefix that won't be lost
   526                              <2> 		%3						; String instruction
   527                              <2> 		jcxz	%%End			; Jump to end if no repeats left (preserves FLAGS)
   528                              <2> 		jmp		SHORT %%Loop	; Loop while repeats left
   529                              <2> 	%%End:
   530                              <2> %else	; No bug on V20/V30 and later, don't know about 188/186
   531                              <2> 	%2
   532                              <2> 	%1 %3
   533                              <2> %endif
   534                              <2> %endmacro
   535                              <2> 
   536                              <2> 
   537                              <2> ;--------------------------------------------------------------------
   538                              <2> ; Bit shifts and rotates with immediate.
   539                              <2> ;
   540                              <2> ; eSHIFT_IM
   541                              <2> ;	Parameters:
   542                              <2> ;		%1:		Shift target
   543                              <2> ;		%2:		Number of bits to shift
   544                              <2> ;		%3:		Instruction (SHL, SHR, ROL, ROR, RCL, RCR)
   545                              <2> ;	Returns:
   546                              <2> ;		FLAGS
   547                              <2> ;	Corrupts registers:
   548                              <2> ;		Nothing
   549                              <2> ;--------------------------------------------------------------------
   550                              <2> %macro eSHIFT_IM 3
   551                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
   552                              <2> %ifndef USE_186
   553                              <2> 	%ifidni %1, cl
   554                              <2> 		times %2	%3		%1, 1
   555                              <2> 	%elifidni %1, ch
   556                              <2> 		times %2	%3		%1, 1
   557                              <2> 	%elifidni %1, cx
   558                              <2> 		times %2	%3		%1, 1
   559                              <2> 	%else
   560                              <2> 		%if %2 > 3	; Size optimized value
   561                              <2> 			push	cx
   562                              <2> 			mov		cl, %2
   563                              <2> 			%3		%1, cl
   564                              <2> 			pop		cx
   565                              <2> 		%else
   566                              <2> 			times %2	%3		%1, 1
   567                              <2> 		%endif
   568                              <2> 	%endif
   569                              <2> ;-----------------------------------
   570                              <2> %else
   571                              <2> 	%3		%1, %2
   572                              <2> %endif
   573                              <2> %endif
   574                              <2> %endmacro
   575                              <2> 
   576                              <2> %macro eSHR_IM 2
   577                              <2> 	eSHIFT_IM	%1, %2, shr
   578                              <2> %endmacro
   579                              <2> 
   580                              <2> %macro eSHL_IM 2
   581                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
   582                              <2> %ifdef USE_386
   583                              <2> 	%if %2 = 1
   584                              <2> 		add		%1, %1	; Same size but faster on 386 and 486. Fails if %1 is a memory operand.
   585                              <2> 	%else
   586                              <2> 		eSHIFT_IM	%1, %2, shl
   587                              <2> 	%endif
   588                              <2> %else
   589                              <2> 	eSHIFT_IM	%1, %2, shl
   590                              <2> %endif
   591                              <2> %endif
   592                              <2> %endmacro
   593                              <2> 
   594                              <2> %macro eROR_IM 2
   595                              <2> 	eSHIFT_IM	%1, %2, ror
   596                              <2> %endmacro
   597                              <2> 
   598                              <2> %macro eROL_IM 2
   599                              <2> 	eSHIFT_IM	%1, %2, rol
   600                              <2> %endmacro
   601                              <2> 
   602                              <2> %macro eRCR_IM 2
   603                              <2> 	eSHIFT_IM	%1, %2, rcr
   604                              <2> %endmacro
   605                              <2> 
   606                              <2> %macro eRCL_IM 2
   607                              <2> 	eSHIFT_IM	%1, %2, rcl
   608                              <2> %endmacro
   609                              <2> 
   610                              <2> 
   611                              <2> ;--------------------------------------------------------------------
   612                              <2> ; Emulates PUSH imm instruction when necessary.
   613                              <2> ;
   614                              <2> ; ePUSH_I
   615                              <2> ;	Parameters:
   616                              <2> ;		%1:		Immediate to push
   617                              <2> ;	Returns:
   618                              <2> ;		Nothing
   619                              <2> ;	Corrupts registers:
   620                              <2> ;		Nothing
   621                              <2> ;--------------------------------------------------------------------
   622                              <2> %macro ePUSH_I 1
   623                              <2> %ifndef USE_186
   624                              <2> 	push	bp					; Immediate goes here
   625                              <2> 	push	bp
   626                              <2> 	mov		bp, sp
   627                              <2> 	mov		WORD [bp+2], %1
   628                              <2> 	pop		bp
   629                              <2> ;-----------------------------------
   630                              <2> %else
   631                              <2> 	push	%1
   632                              <2> %endif
   633                              <2> %endmacro
   634                              <2> 
   635                              <2> 
   636                              <2> ;--------------------------------------------------------------------
   637                              <2> ; Emulates PUSH imm instruction when necessary.
   638                              <2> ; ePUSH_T uses temporary register for faster performance
   639                              <2> ; and smaller code size than ePUSH_I.
   640                              <2> ;
   641                              <2> ; ePUSH_T
   642                              <2> ;	Parameters:
   643                              <2> ;		%1:		Temporary Register
   644                              <2> ;		%2:		Immediate to push
   645                              <2> ;	Returns:
   646                              <2> ;		Nothing
   647                              <2> ;	Corrupts registers:
   648                              <2> ;		%1
   649                              <2> ;--------------------------------------------------------------------
   650                              <2> %macro ePUSH_T 2
   651                              <2> %ifndef USE_186
   652                              <2> 	%ifidni %2, 0
   653                              <2> 		xor		%1, %1
   654                              <2> 	%else
   655                              <2> 		mov		%1, %2
   656                              <2> 	%endif
   657                              <2> 	push	%1
   658                              <2> ;-----------------------------------
   659                              <2> %else
   660                              <2> 	push	%2
   661                              <2> %endif
   662                              <2> %endmacro
   663                              <2> 
   664                              <2> 
   665                              <2> %endif ; EMULATE_INC
   666                              <1> %include "Macros.inc"
   667                              <2> ; Project name	:	Assembly Library
   668                              <2> ; Description	:	This is the place to put various generic macros.
   669                              <2> ;					Should be included immediately after emulate.inc
   670                              <2> %ifndef MACROS_INC
   671                              <2> %define MACROS_INC
   672                              <2> 
   673                              <2> ;--------------------------------------------------------------------
   674                              <2> ; Skips the immediately following 2 byte instruction by using it
   675                              <2> ; as an immediate value to a dummy instruction.
   676                              <2> ; Destroys the contents of %1.
   677                              <2> ;
   678                              <2> ; SKIP2B
   679                              <2> ;	Parameters:
   680                              <2> ;		%1:		Any 16 bit general purpose register or F for flags.
   681                              <2> ;	Returns:
   682                              <2> ;		Nothing
   683                              <2> ;	Corrupts registers:
   684                              <2> ;		%1
   685                              <2> ;--------------------------------------------------------------------
   686                              <2> %macro SKIP2B 1
   687                              <2> 	%ifidni		%1, f
   688                              <2> 		db	03Dh					; Opcode byte for CMP AX, <immed>
   689                              <2> 		;db	0A9h					; Alt. version TEST AX, <immed>
   690                              <2> 	%elifidni	%1, ax
   691                              <2> 		db	0B8h					; Opcode byte for MOV AX, <immed>
   692                              <2> 	%elifidni	%1, cx
   693                              <2> 		db	0B9h					; Opcode byte for MOV CX, <immed>
   694                              <2> 	%elifidni	%1, dx
   695                              <2> 		db	0BAh					; Opcode byte for MOV DX, <immed>
   696                              <2> 	%elifidni	%1, bx
   697                              <2> 		db	0BBh					; Opcode byte for MOV BX, <immed>
   698                              <2> 	%elifidni	%1, sp
   699                              <2> 		db	0BCh					; Opcode byte for MOV SP, <immed>
   700                              <2> 	%elifidni	%1, bp
   701                              <2> 		db	0BDh					; Opcode byte for MOV BP, <immed>
   702                              <2> 	%elifidni	%1, si
   703                              <2> 		db	0BEh					; Opcode byte for MOV SI, <immed>
   704                              <2> 	%elifidni	%1, di
   705                              <2> 		db	0BFh					; Opcode byte for MOV DI, <immed>
   706                              <2> 	%else
   707                              <2> 		%error "Invalid parameter passed to SKIP2B"
   708                              <2> 	%endif
   709                              <2> %endmacro
   710                              <2> 
   711                              <2> 
   712                              <2> ;--------------------------------------------------------------------
   713                              <2> ; Load BDA (Bios Data Area) segment to wanted segment register.
   714                              <2> ;
   715                              <2> ; Use an exclamation point (!) as the third parameter when you want
   716                              <2> ; to force the use of the register in the second parameter. This is
   717                              <2> ; useful when that register needs to be zeroed in subsequent code or
   718                              <2> ; when stack usage is undesirable (ie speed is critical).
   719                              <2> ;
   720                              <2> ; The PRESERVE_FLAGS version will zero the register with a MOV instead
   721                              <2> ; of an XOR, thus preserving the flags.  It is one byte larger on
   722                              <2> ; non-186 or higher systems.
   723                              <2> ;
   724                              <2> ; LOAD_BDA_SEGMENT_TO
   725                              <2> ; LOAD_BDA_SEGMENT_PRESERVE_FLAGS_TO
   726                              <2> ;	Parameters:
   727                              <2> ;		%1:		Destination Segment Register
   728                              <2> ;		%2:		Temporary WORD Register
   729                              <2> ;		%3:		Can be ! or empty
   730                              <2> ;	Returns:
   731                              <2> ;		%1:		BDA segment (zero)
   732                              <2> ;	Corrupts registers:
   733                              <2> ;		%2
   734                              <2> ;--------------------------------------------------------------------
   735                              <2> %macro LOAD_BDA_SEGMENT_TO 2-3
   736                              <2> %ifndef USE_186
   737                              <2> 	xor		%2, %2
   738                              <2> 	mov		%1, %2
   739                              <2> %elifidn %3, !
   740                              <2> 	xor		%2, %2
   741                              <2> 	mov		%1, %2
   742                              <2> %else
   743                              <2> 	push	BYTE 0
   744                              <2> 	pop		%1
   745                              <2> %endif
   746                              <2> %endmacro
   747                              <2> 
   748                              <2> %macro LOAD_BDA_SEGMENT_PRESERVE_FLAGS_TO 2-3
   749                              <2> %ifndef USE_186
   750                              <2> 	mov		%2, 0
   751                              <2> 	mov		%1, %2
   752                              <2> %elifidn %3, !
   753                              <2> 	mov		%2, 0
   754                              <2> 	mov		%1, %2
   755                              <2> %else
   756                              <2> 	push	BYTE 0
   757                              <2> 	pop		%1
   758                              <2> %endif
   759                              <2> %endmacro
   760                              <2> 
   761                              <2> 
   762                              <2> ;--------------------------------------------------------------------
   763                              <2> ; eENTER_STRUCT
   764                              <2> ;	Parameters:
   765                              <2> ;		%1:		Number of bytes to reserve from stack
   766                              <2> ;	Returns:
   767                              <2> ;		SS:BP:	Ptr to beginning of struct reserved from stack
   768                              <2> ;	Corrupts registers:
   769                              <2> ;		FLAGS
   770                              <2> ;--------------------------------------------------------------------
   771                              <2> %macro eENTER_STRUCT 1
   772                              <2> 	push	bp
   773                              <2> 	sub		sp, %1
   774                              <2> 	mov		bp, sp
   775                              <2> %endmacro
   776                              <2> 
   777                              <2> ;--------------------------------------------------------------------
   778                              <2> ; eLEAVE_STRUCT
   779                              <2> ;	Parameters:
   780                              <2> ;		%1:		Number of bytes reserved with eENTER_STRUCT
   781                              <2> ;	Returns:
   782                              <2> ;		BP:		What it was before eENTER_STRUCT
   783                              <2> ;	Corrupts registers:
   784                              <2> ;		FLAGS
   785                              <2> ;--------------------------------------------------------------------
   786                              <2> %macro eLEAVE_STRUCT 1
   787                              <2> 	add		sp, %1
   788                              <2> 	pop		bp
   789                              <2> %endmacro
   790                              <2> 
   791                              <2> 
   792                              <2> %endif ; MACROS_INC
   793                              <1> %include "BiosData.inc"
   794                              <2> ; Project name	:	XTIDE Universal BIOS
   795                              <2> ; Description	:	Equates for BIOS Data Area.
   796                              <2> %ifndef BIOSDATA_INC
   797                              <2> %define BIOSDATA_INC
   798                              <2> 
   799                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   800                              <2> ; BIOS DATA AREA VARIABLES ;
   801                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   802                              <2> 
   803                              <2> ; BIOS Data Area (related to floppy drives and hard disks)
   804                              <2> struc BDA
   805 00000000 <res 00000400>      <2> 					resb	400h	; 40:0h, Start of BDA
   806 00000400 <res 00000002>      <2> 	.wCOM1			resb	2		; 0:400h, Serial I/O Address, Port 1
   807 00000402 <res 00000002>      <2> 	.wCOM2			resb	2		; 0:402h, Serial I/O Address, Port 2
   808 00000404 <res 00000002>      <2> 	.wCOM3			resb	2		; 0:404h, Serial I/O Address, Port 3
   809 00000406 <res 00000002>      <2> 	.wCOM4			resb	2		; 0:406h, Serial I/O Address, Port 4
   810 00000408 <res 00000002>      <2> 	.wLPT1			resb	2		; 0:408h, Parallel I/O Address, Port 1
   811 0000040A <res 00000002>      <2> 	.wLPT2			resb	2		; 0:40Ah, Parallel I/O Address, Port 2
   812 0000040C <res 00000002>      <2> 	.wLPT3			resb	2		; 0:40Ch, Parallel I/O Address, Port 3
   813                              <2> 	.wLPT4:							; 0:40Eh, Parallel I/O Address, Port 4 (PC/XT)
   814 0000040E <res 00000002>      <2> 	.wSegEBDA		resb	2		; 0:40Eh, Extended BIOS Data Area segment (AT+)
   815                              <2> 
   816 00000410 <res 00000002>      <2> 	.wEquipment		resb	2		; 0:410h, Equipment Word
   817 00000412 <res 00000001>      <2> 	.bTest			resb	1		; 0:412h, Manufacturing test
   818 00000413 <res 00000002>      <2> 	.wBaseMem		resb	2		; 0:413h, Base Memory Size in kB
   819                              <2> 	.wAdptrMem:						; 0:415h, Adapter Memory Size (PC/XT)
   820 00000415 <res 00000002>      <2> 	.wError			resb	2		; 0:415h, Error Codes (AT+)
   821 00000417 <res 00000001>      <2> 	.bKBFlgs1		resb	1		; 0:417h, Keyboard, Shift Flags, Set 1
   822 00000418 <res 00000001>      <2> 	.bKBFlgs2		resb	1		; 0:418h, Keyboard, Shift Flags, Set 2
   823 00000419 <res 00000001>      <2> 	.bKBNumpad		resb	1		; 0:419h, Keyboard, ALT+Numpad work area
   824 0000041A <res 00000002>      <2> 	.wKBHead		resb	2		; 0:41Ah, Keyboard, Head of buffer pointer
   825 0000041C <res 00000002>      <2> 	.wKBTail		resb	2		; 0:41Ch, Keyboard, Tail of buffer pointer
   826 0000041E <res 00000020>      <2> 	.rgwKBBuff		resb	32		; 0:41Eh, Keyboard, 16-word buffer
   827                              <2> 
   828 0000043E <res 00000001>      <2> 	.bFDRecal		resb	1		; 0:43Eh, Diskette, Recalibrate status
   829 0000043F <res 00000001>      <2> 	.bFDMotor		resb	1		; 0:43Fh, Diskette, Motor status
   830                              <2> 
   831 00000440 <res 00000001>      <2> 	.bFDMotTime		resb	1		; 0:440h, Diskette, Motor timeout counter
   832 00000441 <res 00000001>      <2> 	.bFDRetST		resb	1		; 0:441h, Diskette, Controller status return code
   833 00000442 <res 00000007>      <2> 	.rgbFDStatus	resb	7		; 0:442h, Diskette, Diskette and Disk Controller status bytes
   834 00000449 <res 00000001>      <2> 	.bVidMode		resb	1		; 0:449h, Video, Mode
   835 0000044A <res 00000002>      <2> 	.wVidColumns	resb	2		; 0:44Ah, Video, Number of columns
   836 0000044C <res 00000002>      <2> 	.wVidBpP		resb	2		; 0:44Ch, Video, Total number of bytes per page
   837 0000044E <res 00000002>      <2> 	.wVidPageOff	resb	2		; 0:44Eh, Video, Current page offset
   838                              <2> 
   839 00000450 <res 00000010>      <2> 	.rgwVidCurPos	resb	16		; 0:450h, Video, Cursor position, pages 0...7
   840                              <2> 
   841 00000460 <res 00000002>      <2> 	.wVidCurShape	resb	2		; 0:460h, Video, Cursor shape
   842 00000462 <res 00000001>      <2> 	.bVidPageIdx	resb	1		; 0:462h, Video, Active display page
   843 00000463 <res 00000002>      <2> 	.wVidPort		resb	2		; 0:463h, Video, I/O Port number base
   844 00000465 <res 00000001>      <2> 	.bVidModeReg	resb	1		; 0:465h, Video, Internal mode register
   845 00000466 <res 00000001>      <2> 	.bVidPalette	resb	1		; 0:466h, Video, Color palette
   846                              <2> 	.wCasTimeCnt:					; 0:467h, Cassette, Time count at data edge (PC)
   847 00000467 <res 00000002>      <2> 	.wGenOff		resb	2		; 0:467h, General use offset (XT+)
   848                              <2> 	.wCasCRC:						; 0:469h, Cassette, CRC register (PC)
   849 00000469 <res 00000002>      <2> 	.wGenSeg		resb	2		; 0:469h, General use segment (XT+)
   850                              <2> 	.bCasLast:						; 0:46Bh, Cassette, Last value read
   851 0000046B <res 00000001>      <2> 	.bLastIRQ		resb	1		; 0:46Bh, Last interrupt that occurred (XT+)
   852 0000046C <res 00000004>      <2> 	.dwTimerTicks	resb	4		; 0:46Ch, Timer ticks count
   853                              <2> 
   854 00000470 <res 00000001>      <2> 	.bTimer24h		resb	1		; 0:470h, Timer ticks rollover flag
   855 00000471 <res 00000001>      <2> 	.bKBCtrlBrk		resb	1		; 0:471h, Keyboard, Ctrl+Break flag
   856 00000472 <res 00000002>      <2> 	.wBoot			resb	2		; 0:472h, Warm boot flag
   857 00000474 <res 00000001>      <2> 	.bHDLastSt		resb	1		; 0:474h, Hard Disk, Status of Last Operation (XT+)
   858 00000475 <res 00000001>      <2> 	.bHDCount		resb	1		; 0:475h, Hard Disk, Number of HDs Attached (XT+)
   859 00000476 <res 00000001>      <2> 	.bHDCtrl		resb	1		; 0:476h, Hard Disk, Control Byte (temp, XT+)
   860 00000477 <res 00000001>      <2> 	.bHDPortOff		resb	1		; 0:477h, Hard Disk, Port Offset (XT)
   861 00000478 <res 00000001>      <2> 	.bLPT1Timeout	resb	1		; 0:478h, Parallel Printer 1, Timeout (XT+)
   862 00000479 <res 00000001>      <2> 	.bLPT2Timeout	resb	1		; 0:479h, Parallel Printer 2, Timeout (XT+)
   863 0000047A <res 00000001>      <2> 	.bLPT3Timeout	resb	1		; 0:47Ah, Parallel Printer 3, Timeout (XT+)
   864 0000047B <res 00000001>      <2> 	.bLPT4Timeout	resb	1		; 0:47Bh, Parallel Printer 4, Timeout (XT+)
   865 0000047C <res 00000001>      <2> 	.bCOM1Timeout	resb	1		; 0:47Ch, Serial 1, Timeout (XT+)
   866 0000047D <res 00000001>      <2> 	.bCOM2Timeout	resb	1		; 0:47Dh, Serial 2, Timeout (XT+)
   867 0000047E <res 00000001>      <2> 	.bCOM3Timeout	resb	1		; 0:47Eh, Serial 3, Timeout (XT+)
   868 0000047F <res 00000001>      <2> 	.bCOM4Timeout	resb	1		; 0:47Fh, Serial 4, Timeout (XT+)
   869                              <2> 
   870 00000480 <res 00000002>      <2> 	.wKBPtrStart	resb	2		; 0:480h, Keyboard, Pointer to start of buffer (XT+)
   871 00000482 <res 00000002>      <2> 	.wKBPtrEnd		resb	2		; 0:482h, Keyboard, Pointer to end of buffer (XT+)
   872 00000484 <res 00000001>      <2> 	.bVidRows		resb	1		; 0:484h, Video, Number of rows (EGA+)
   873 00000485 <res 00000002>      <2> 	.wVidPpC		resb	2		; 0:485h, Video, Pixels per character (EGA+)
   874 00000487 <res 00000001>      <2> 	.bVidOptns		resb	1		; 0:487h, Video, Options (EGA+)
   875 00000488 <res 00000001>      <2> 	.bVidSwitches	resb	1		; 0:488h, Video, Switches (EGA+)
   876 00000489 <res 00000001>      <2> 	.bVidSave1		resb	1		; 0:489h, Video, Save area 1 (VGA+)
   877 0000048A <res 00000001>      <2> 	.bVidSave2		resb	1		; 0:48Ah, Video, Save area 2 (VGA+)
   878 0000048B <res 00000001>      <2> 	.bFDCfgData		resb	1		; 0:48Bh, Diskette, Configuration data (AT+)
   879 0000048C <res 00000001>      <2> 	.bHDStatus		resb	1		; 0:48Ch, Hard Disk, Status Register (AT+)
   880 0000048D <res 00000001>      <2> 	.bHDError		resb	1		; 0:48Dh, Hard Disk, Error Register (AT+)
   881 0000048E <res 00000001>      <2> 	.bHDTaskFlg		resb	1		; 0:48Eh, Hard Disk, Task Complete Flag (AT+)
   882 0000048F <res 00000001>      <2> 	.bFDCtrlInfo	resb	1		; 0:48Fh, Diskette, Controller information (AT+)
   883                              <2> 
   884 00000490 <res 00000001>      <2> 	.bFDMedia0		resb	1		; 0:490h, Diskette 0, Media state (AT+)
   885 00000491 <res 00000001>      <2> 	.bFDMedia1		resb	1		; 0:491h, Diskette 1, Media state (AT+)
   886 00000492 <res 00000001>      <2> 	.bFDOpStart0	resb	1		; 0:492h, Diskette 0, Operational starting state (AT+)
   887 00000493 <res 00000001>      <2> 	.bFDOpStart1	resb	1		; 0:493h, Diskette 1, Operational starting state (AT+)
   888 00000494 <res 00000001>      <2> 	.bFDCurCyl0		resb	1		; 0:494h, Diskette 0, Current cylinder (AT+)
   889 00000495 <res 00000001>      <2> 	.bFDCurCyl1		resb	1		; 0:495h, Diskette 1, Current cylinder (AT+)
   890 00000496 <res 00000001>      <2> 	.bKBFlgs3		resb	1		; 0:496h, Keyboard, Status flags 3 (AT+)
   891 00000497 <res 00000001>      <2> 	.bKBFlgs4		resb	1		; 0:497h, Keyboard, Status flags 4 (AT+)
   892 00000498 <res 00000004>      <2> 	.dwWaitPtr		resb	4		; 0:498h, User's wait flag pointer (AT+)
   893 0000049C <res 00000004>      <2> 	.dwWaitCnt		resb	4		; 0:49Ch, User's wait count (AT+)
   894                              <2> 
   895 000004A0 <res 00000001>      <2> 	.bWaitFlg		resb	1		; 0:4A0h, Wait flag (AT+)
   896 000004A1 <res 00000007>      <2> 	.rgbLAN			resb	7		; 0:4A1h, Local Area Network (AT+)
   897 000004A8 <res 00000004>      <2> 	.dwVidPtr		resb	4		; 0:4A8h, Video, Parameter Control Block Pointer (EGA+)
   898 000004AC <res 00000022>      <2> 					resb	22h		; Reserved from 0:4ACh...0:4CDh
   899                              <2> 
   900 000004CE <res 00000004>      <2> 	.dwDays			resb	4		; 0:4CEh, Clock, Days since 1980 (some BIOSes, AT+)
   901 000004D2 <res 0000002E>      <2> 					resb	2Eh		; Reserved from 0:4D2h...0:4FFh
   902                              <2> 
   903 00000500 <res 00000001>      <2> 	.bPrntScrn		resb	1		; 0:500, Print screen status
   904                              <2> endstruc
   905                              <2> 
   906                              <2> ; BDA struct with only Hard Disk related locations
   907                              <2> struc HDBDA
   908 00000000 <res 00000474>      <2> 					resb	474h
   909 00000474 <res 00000001>      <2> 	.bHDLastSt		resb	1		; 0:474h, Status of Last Operation (XT+)
   910 00000475 <res 00000001>      <2> 	.bHDCount		resb	1		; 0:475h, Number of HDs Attached (XT+)
   911 00000476 <res 00000001>      <2> 	.bHDCtrl		resb	1		; 0:476h, Control Byte (temp, XT+)
   912 00000477 <res 00000001>      <2> 	.bHDPortOff		resb	1		; 0:477h, Port Offset (XT)
   913 00000478 <res 00000015>      <2> 					resb	15h
   914                              <2> 	.bHDStatus:						; 0:48Ch, Status Register (AT+)
   915                              <2> 	.bHDError:						; 0:48Dh, Error Register (AT+)
   916 0000048D <res 00000002>      <2> 	.wHDStAndErr	resb	2
   917 0000048F <res 00000001>      <2> 	.bHDTaskFlg		resb	1		; 0:48Eh, Task Complete Flag (AT+)
   918                              <2> endstruc
   919                              <2> 
   920                              <2> 
   921                              <2> ; Warm Boot Flags for BDA.wBoot
   922                              <2> BOOT_FLAG_COLD			EQU	0
   923                              <2> BOOT_FLAG_WARM			EQU	1234h	; Same effect as CTRL + ALT + DEL, skips memory tests
   924                              <2> BOOT_FLAG_PRESERVE_RAM	EQU	4321h	; No mem test, leave memory unchanged (AT+)
   925                              <2> 
   926                              <2> 
   927                              <2> %endif ; BIOSDATA_INC
   928                              <1> %include "BiosFunctions.inc"
   929                              <2> ; Project name	:	AssemblyLibrary
   930                              <2> ; Description	:	Defines for BIOS functions.
   931                              <2> %ifndef BIOS_FUNCTIONS_INC
   932                              <2> %define BIOS_FUNCTIONS_INC
   933                              <2> 
   934                              <2> ; BIOS interrupts
   935                              <2> BIOS_VIDEO_INTERRUPT_10h		EQU		10h
   936                              <2> BIOS_DISK_INTERRUPT_13h			EQU		13h
   937                              <2> BIOS_SYSTEM_INTERRUPT_15h		EQU		15h
   938                              <2> BIOS_KEYBOARD_INTERRUPT_16h		EQU		16h
   939                              <2> BIOS_BOOT_FAILURE_INTERRUPT_18h	EQU		18h
   940                              <2> BIOS_BOOT_LOADER_INTERRUPT_19h	EQU		19h
   941                              <2> BIOS_DISKETTE_INTERRUPT_40h		EQU		40h
   942                              <2> HD0_DPT_POINTER_41h				EQU		41h
   943                              <2> HD1_DPT_POINTER_46h				EQU		46h
   944                              <2> 
   945                              <2> ; Hardware interrupts
   946                              <2> HARDWARE_IRQ_0_INTERRUPT_08h	EQU		08h		; System timer
   947                              <2> HARDWARE_IRQ_1_INTERRUPT_09h	EQU		09h		; Keyboard
   948                              <2> HARDWARE_IRQ_2_INTERRUPT_0Ah	EQU		0Ah
   949                              <2> HARDWARE_IRQ_3_INTERRUPT_0Bh	EQU		0Bh
   950                              <2> HARDWARE_IRQ_4_INTERRUPT_0Ch	EQU		0Ch
   951                              <2> HARDWARE_IRQ_5_INTERRUPT_0Dh	EQU		0Dh
   952                              <2> HARDWARE_IRQ_6_INTERRUPT_0Eh	EQU		0Eh
   953                              <2> HARDWARE_IRQ_7_INTERRUPT_0Fh	EQU		0Fh
   954                              <2> HARDWARE_IRQ_8_INTERRUPT_70h	EQU		70h
   955                              <2> HARDWARE_IRQ_9_INTERRUPT_71h	EQU		71h
   956                              <2> HARDWARE_IRQ_10_INTERRUPT_72h	EQU		72h
   957                              <2> HARDWARE_IRQ_11_INTERRUPT_73h	EQU		73h
   958                              <2> HARDWARE_IRQ_12_INTERRUPT_74h	EQU		74h
   959                              <2> HARDWARE_IRQ_13_INTERRUPT_75h	EQU		75h
   960                              <2> HARDWARE_IRQ_14_INTERRUPT_76h	EQU		76h
   961                              <2> HARDWARE_IRQ_15_INTERRUPT_77h	EQU		77h
   962                              <2> 
   963                              <2> 
   964                              <2> ; BIOS video functions
   965                              <2> SET_VIDEO_MODE					EQU		00h
   966                              <2> SET_TEXT_MODE_CURSOR_SHAPE		EQU		01h
   967                              <2> SET_CURSOR_POSITION				EQU		02h
   968                              <2> GET_CURSOR_POSITION_AND_SIZE	EQU		03h
   969                              <2> SELECT_ACTIVE_DISPLAY_PAGE		EQU		05h
   970                              <2> TELETYPE_OUTPUT					EQU		0Eh
   971                              <2> 
   972                              <2> ; BIOS disk functions
   973                              <2> READ_SECTORS_INTO_MEMORY		EQU		02h
   974                              <2> GET_DRIVE_PARAMETERS			EQU		08h
   975                              <2> RESET_HARD_DISK					EQU		0Dh
   976                              <2> GET_DISK_TYPE					EQU		15h
   977                              <2> LOTECH_XTCF_FEATURES			EQU		1Eh
   978                              <2> GET_DRIVE_INFORMATION			EQU		25h
   979                              <2> CHECK_EXTENSIONS_PRESENT		EQU		41h
   980                              <2> GET_EXTENDED_DRIVE_INFORMATION	EQU		48h
   981                              <2> 
   982                              <2> ; BIOS system functions
   983                              <2> OS_HOOK_DEVICE_BUSY				EQU		90h
   984                              <2> OS_HOOK_DEVICE_POST				EQU		91h
   985                              <2> 
   986                              <2> ; BIOS keyboard functions
   987                              <2> GET_KEYSTROKE					EQU		00h
   988                              <2> CHECK_FOR_KEYSTROKE				EQU		01h
   989                              <2> 
   990                              <2> ; BIOS system functions
   991                              <2> EVENT_WAIT						EQU		86h
   992                              <2> 
   993                              <2> 
   994                              <2> %endif ; BIOS_FUNCTIONS_INC
   995                              <1> %include "CgaSnow.inc"
   996                              <2> ; File name		:	CgaSnow.inc
   997                              <2> ; Project name	:	AssemblyLibrary
   998                              <2> ; Created date	:	8.10.2010
   999                              <2> ; Last update	:	11.10.2010
  1000                              <2> ; Author		:	Tomi Tilli
  1001                              <2> ; Description	:	Macros for preventing CGA snow.
  1002                              <2> %ifndef CGASNOW_INC
  1003                              <2> %define CGASNOW_INC
  1004                              <2> 
  1005                              <2> ;--------------------------------------------------------------------
  1006                              <2> ; WAIT_RETRACE_IF_NECESSARY_THEN
  1007                              <2> ;	Parameters:
  1008                              <2> ;		%1:		Instruction that accessed CGA memory
  1009                              <2> ;		AL:		Character to output
  1010                              <2> ;		AH:		Attribute to output (stosw only)
  1011                              <2> ;		DS:		BDA segment (zero)
  1012                              <2> ;		ES:SI:	Ptr to video memory where to read from (if %1 reads)
  1013                              <2> ;		ES:DI:	Ptr to video memory where to output (if %1 writes)
  1014                              <2> ;	Returns:
  1015                              <2> ;		SI, DI:	Updated according to instruction
  1016                              <2> ;	Corrupts registers:
  1017                              <2> ;		AX, DX
  1018                              <2> ;--------------------------------------------------------------------
  1019                              <2> %macro WAIT_RETRACE_IF_NECESSARY_THEN 1
  1020                              <2> %ifdef ELIMINATE_CGA_SNOW
  1021                              <2> 	%ifidn %1, stosb
  1022                              <2> 		call	CgaSnow_Stosb
  1023                              <2> 	%elifidn %1, stosw
  1024                              <2> 		call	CgaSnow_Stosw
  1025                              <2> 	%elifidn %1, rep movsb
  1026                              <2> 		call	CgaSnow_RepMovsb
  1027                              <2> 	%else
  1028                              <2> 		%error	"Invalid instruction passed to WAIT_RETRACE_IF_NECESSARY_THEN"
  1029                              <2> 	%endif
  1030                              <2> %else	; No CGA snow prevention
  1031                              <2> 	%ifidn %1, rep movsb
  1032                              <2> 		eSEG_STR rep, es, movsb
  1033                              <2> 	%else
  1034                              <2> 		%1	; Single instruction
  1035                              <2> 	%endif
  1036                              <2> %endif
  1037                              <2> %endmacro
  1038                              <2> 
  1039                              <2> 
  1040                              <2> ;--------------------------------------------------------------------
  1041                              <2> ; WAIT_UNTIL_SAFE_CGA_WRITE
  1042                              <2> ;	Parameters:
  1043                              <2> ;		DX:		CGA Status Register Address (3DAh)
  1044                              <2> ;	Returns:
  1045                              <2> ;		Nothing
  1046                              <2> ;	Corrupts registers:
  1047                              <2> ;		AL
  1048                              <2> ;--------------------------------------------------------------------
  1049                              <2> %macro WAIT_UNTIL_SAFE_CGA_WRITE 0
  1050                              <2> %%WaitUntilNotInRetrace:
  1051                              <2> 	in		al, dx
  1052                              <2> 	shr		al, 1	; 1 = Bit 0: A 1 indicates that regen-buffer memory access can be
  1053                              <2> 					; made without interfering with the display. (H or V retrace)
  1054                              <2> 	jc		SHORT %%WaitUntilNotInRetrace
  1055                              <2> %%WaitUntilNextRetraceStarts:
  1056                              <2> 	in		al, dx
  1057                              <2> 	shr		al, 1
  1058                              <2> 	jnc		SHORT %%WaitUntilNextRetraceStarts
  1059                              <2> %endmacro
  1060                              <2> 
  1061                              <2> 
  1062                              <2> %endif ; CGASNOW_INC
  1063                              <1> %include "Debug.inc"
  1064                              <2> ; Project name	:	Assembly Library
  1065                              <2> ; Description	:	Debugging macros.
  1066                              <2> %ifndef DEBUG_INC
  1067                              <2> %define DEBUG_INC
  1068                              <2> 
  1069                              <2> 
  1070                              <2> ;--------------------------------------------------------------------
  1071                              <2> ; DISPLAY_DEBUG_WORD_AND_WAIT_ANY_KEY
  1072                              <2> ;	Parameters:
  1073                              <2> ;		%1:		Debug word
  1074                              <2> ;		%2:		Numeric base (2, 10, 16)
  1075                              <2> ;	Returns:
  1076                              <2> ;		Nothing
  1077                              <2> ;	Corrupts registers:
  1078                              <2> ;		Nothing
  1079                              <2> ;--------------------------------------------------------------------
  1080                              <2> %macro DISPLAY_DEBUG_WORD_AND_WAIT_ANY_KEY 2
  1081                              <2> 	pushf
  1082                              <2> 	push	di
  1083                              <2> 	push	bx
  1084                              <2> 	push	ax
  1085                              <2> 
  1086                              <2> 	mov		ax, %1
  1087                              <2> 	mov		bx, %2
  1088                              <2> 	CALL_DISPLAY_LIBRARY PrintWordFromAXwithBaseInBX
  1089                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  1090                              <2> 	call	Keyboard_RemoveAllKeystrokesFromBuffer
  1091                              <2> %endif
  1092                              <2> 	call	Keyboard_GetKeystrokeToAXandWaitIfNecessary
  1093                              <2> 
  1094                              <2> 	pop		ax
  1095                              <2> 	pop		bx
  1096                              <2> 	pop		di
  1097                              <2> 	popf
  1098                              <2> %endmacro
  1099                              <2> 
  1100                              <2> 
  1101                              <2> ;--------------------------------------------------------------------
  1102                              <2> ; DISPLAY_DEBUG_CHARACTER_AND_WAIT_ANY_KEY
  1103                              <2> ;	Parameters:
  1104                              <2> ;		%1:		Character to print
  1105                              <2> ;	Returns:
  1106                              <2> ;		Nothing
  1107                              <2> ;	Corrupts registers:
  1108                              <2> ;		Nothing
  1109                              <2> ;--------------------------------------------------------------------
  1110                              <2> %macro DISPLAY_DEBUG_CHARACTER_AND_WAIT_ANY_KEY 1
  1111                              <2> 	pushf
  1112                              <2> 	push	di
  1113                              <2> 	push	ax
  1114                              <2> 
  1115                              <2> 	mov		al, %1
  1116                              <2> 	CALL_DISPLAY_LIBRARY PrintCharacterFromAL
  1117                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  1118                              <2> 	call	Keyboard_RemoveAllKeystrokesFromBuffer
  1119                              <2> %endif
  1120                              <2> 	call	Keyboard_GetKeystrokeToAXandWaitIfNecessary
  1121                              <2> 
  1122                              <2> 	pop		ax
  1123                              <2> 	pop		di
  1124                              <2> 	popf
  1125                              <2> %endmacro
  1126                              <2> 
  1127                              <2> 
  1128                              <2> ;--------------------------------------------------------------------
  1129                              <2> ; DISPLAY_DEBUG_CHARACTER
  1130                              <2> ;	Parameters:
  1131                              <2> ;		%1:		Character to print
  1132                              <2> ;	Returns:
  1133                              <2> ;		Nothing
  1134                              <2> ;	Corrupts registers:
  1135                              <2> ;		Nothing
  1136                              <2> ;--------------------------------------------------------------------
  1137                              <2> %macro DISPLAY_DEBUG_CHARACTER 1
  1138                              <2> 	pushf
  1139                              <2> 	push	di
  1140                              <2> 	push	ax
  1141                              <2> 	mov		al, %1
  1142                              <2> 	CALL_DISPLAY_LIBRARY PrintCharacterFromAL
  1143                              <2> 	pop		ax
  1144                              <2> 	pop		di
  1145                              <2> 	popf
  1146                              <2> %endmacro
  1147                              <2> 
  1148                              <2> 
  1149                              <2> ;--------------------------------------------------------------------
  1150                              <2> ; WAIT_ANY_KEY_TO_CONTINUE
  1151                              <2> ;	Parameters:
  1152                              <2> ;		Nothing
  1153                              <2> ;	Returns:
  1154                              <2> ;		Nothing
  1155                              <2> ;	Corrupts registers:
  1156                              <2> ;		Nothing
  1157                              <2> ;--------------------------------------------------------------------
  1158                              <2> %macro WAIT_ANY_KEY_TO_CONTINUE 0
  1159                              <2> 	push	ax
  1160                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  1161                              <2> 	call	Keyboard_RemoveAllKeystrokesFromBuffer
  1162                              <2> %endif
  1163                              <2> 	call	Keyboard_GetKeystrokeToAXandWaitIfNecessary
  1164                              <2> 	pop		ax
  1165                              <2> %endmacro
  1166                              <2> 
  1167                              <2> 
  1168                              <2> %endif ; DEBUG_INC
  1169                              <1> %include "Delay.inc"
  1170                              <2> ; Project name	:	Assembly Library
  1171                              <2> ; Description	:	Delay macros.
  1172                              <2> %ifndef DELAY_INC
  1173                              <2> %define DELAY_INC
  1174                              <2> 
  1175                              <2> ;--------------------------------------------------------------------
  1176                              <2> ; Clears prefetch queue by jumping to next instruction.
  1177                              <2> ; This delays much more than nop instruction of fast systems.
  1178                              <2> ;
  1179                              <2> ; JMP_DELAY
  1180                              <2> ;	Parameters
  1181                              <2> ;		Nothing
  1182                              <2> ;	Returns:
  1183                              <2> ;		Nothing
  1184                              <2> ;	Corrupts registers:
  1185                              <2> ;		Nothing
  1186                              <2> ;--------------------------------------------------------------------
  1187                              <2> %macro JMP_DELAY 0
  1188                              <2> 	jmp		SHORT %%NextInstruction
  1189                              <2> %%NextInstruction:
  1190                              <2> %endmacro
  1191                              <2> 
  1192                              <2> 
  1193                              <2> ;--------------------------------------------------------------------
  1194                              <2> ; Mimimun delays (without fetching) with some CPU architectures:
  1195                              <2> ;	8088/8086:	17 cycles for jump + 5 cycles for last comparison
  1196                              <2> ;	286:		10 cycles for jump + 4 cycles for last comparison
  1197                              <2> ;	386:		13 cycles for jump + ? cycles for last comparison
  1198                              <2> ;	486:		 7 cycles for jump + 6 cycles for last comparison
  1199                              <2> ;
  1200                              <2> ; LOOP instruction uses two bytes so aligned fetching will require:
  1201                              <2> ;   8088:		8 cycles (two BYTE reads)
  1202                              <2> ;   8086:		4 cycles (one WORD read)
  1203                              <2> ;   286:		2 cycles + wait states (usually 1)
  1204                              <2> ;   386:		?
  1205                              <2> ;	486:		Fetched only once to internal cache
  1206                              <2> ;
  1207                              <2> ; DELAY_WITH_LOOP_INSTRUCTION_NA	; No JUMP_ALIGN
  1208                              <2> ; DELAY_WITH_LOOP_INSTRUCTION
  1209                              <2> ;	Parameters
  1210                              <2> ;		CX:		Loop iterations (0 is maximum delay with 65536 iterations)
  1211                              <2> ;	Returns:
  1212                              <2> ;		CX:		Zero
  1213                              <2> ;	Corrupts registers:
  1214                              <2> ;		Nothing
  1215                              <2> ;--------------------------------------------------------------------
  1216                              <2> %macro DELAY_WITH_LOOP_INSTRUCTION_NA 0
  1217                              <2> %%StartOfLoop:
  1218                              <2> 	loop	%%StartOfLoop
  1219                              <2> %endmacro
  1220                              <2> 
  1221                              <2> %macro DELAY_WITH_LOOP_INSTRUCTION 0
  1222                              <2> ALIGN JUMP_ALIGN
  1223                              <2> %%StartOfLoop:
  1224                              <2> 	loop	%%StartOfLoop
  1225                              <2> %endmacro
  1226                              <2> 
  1227                              <2> 
  1228                              <2> %endif ; DELAY_INC
  1229                              <1> %include "DosFunctions.inc"
  1230                              <2> ; Project name	:	AssemblyLibrary
  1231                              <2> ; Description	:	Defines for MS-DOS functions.
  1232                              <2> %ifndef DOS_FUNCTIONS_INC
  1233                              <2> %define DOS_FUNCTIONS_INC
  1234                              <2> 
  1235                              <2> ; DOS interrupts
  1236                              <2> DOS_INTERRUPT_21h									EQU		21h
  1237                              <2> DOS_CRITICAL_ERROR_HANDLER_24h						EQU		24h
  1238                              <2> DOS_TSR_MULTIPLEX_INTERRUPT_2Fh						EQU		2Fh
  1239                              <2> 
  1240                              <2> ; DOS drive and file functions
  1241                              <2> SELECT_DEFAULT_DRIVE								EQU		0Eh
  1242                              <2> GET_CURRENT_DEFAULT_DRIVE							EQU		19h
  1243                              <2> GET_DISK_TRANSFER_AREA_ADDRESS						EQU		2Fh
  1244                              <2> GET_DOS_DRIVE_PARAMETER_BLOCK_FOR_SPECIFIC_DRIVE	EQU		32h
  1245                              <2> SET_CURRENT_DIRECTORY								EQU		3Bh
  1246                              <2> CREATE_OR_TRUNCATE_FILE								EQU		3Ch
  1247                              <2> OPEN_EXISTING_FILE									EQU		3Dh
  1248                              <2> CLOSE_FILE											EQU		3Eh
  1249                              <2> READ_FROM_FILE_OR_DEVICE							EQU		3Fh
  1250                              <2> WRITE_TO_FILE_OR_DEVICE								EQU		40h
  1251                              <2> SET_CURRENT_FILE_POSITION							EQU		42h
  1252                              <2> GET_CURRENT_DIRECTORY								EQU		47h
  1253                              <2> FIND_FIRST_MATCHING_FILE							EQU		4Eh
  1254                              <2> FIND_NEXT_MATCHING_FILE								EQU		4Fh
  1255                              <2> 
  1256                              <2> ; DOS functions for TSRs
  1257                              <2> SET_INTERRUPT_VECTOR								EQU		25h
  1258                              <2> GET_INTERRUPT_VECTOR								EQU		35h
  1259                              <2> 
  1260                              <2> ; DOS errors
  1261                              <2> ERR_DOS_DRIVE_NOT_READY								EQU		15h
  1262                              <2> 
  1263                              <2> 
  1264                              <2> 
  1265                              <2> ; DOS Program Segment Prefix (PSP, first 256 (100h) bytes on top of program)
  1266                              <2> struc PSP
  1267 00000000 <res 00000002>      <2> 	.int20hInstruction				resb	2
  1268 00000002 <res 00000002>      <2> 	.wSizeOfMemoryInParagraphs		resb	2
  1269 00000004 <res 00000001>      <2> 	.reservedAt4h					resb	1
  1270 00000005 <res 00000005>      <2> 	.callToDosFunctionDispatcher	resb	5
  1271 0000000A <res 00000004>      <2> 	.fpInt22hTerminate				resb	4
  1272 0000000E <res 00000004>      <2> 	.fpInt23hCtrlC					resb	4
  1273 00000012 <res 00000004>      <2> 	.fpInt24hCriticalError			resb	4
  1274 00000016 <res 00000016>      <2> 	.reservedAt16h					resb	22
  1275 0000002C <res 00000002>      <2> 	.wEnvironmentSegment			resb	2
  1276 0000002E <res 00000022>      <2> 	.reservedAt2Eh					resb	34
  1277 00000050 <res 00000003>      <2> 	.int21hAndRetfInstructions		resb	3
  1278 00000053 <res 00000009>      <2> 	.reservedAt53h					resb	9
  1279 0000005C <res 00000010>      <2> 	.FCB1							resb	16
  1280 0000006C <res 00000014>      <2> 	.FCB2							resb	20
  1281                              <2> 	.DiskTransferArea:
  1282 00000080 <res 00000001>      <2> 	.bCommandLineLength				resb	1
  1283 00000081 <res 0000007F>      <2> 	.szCommandLine					resb	127
  1284                              <2> endstruc
  1285                              <2> 
  1286                              <2> 
  1287                              <2> ; DOS DTA (Disk Transfer Area)
  1288                              <2> struc DTA
  1289                              <2> 	; Undocumented fields
  1290 00000000 <res 00000015>      <2> 	.reservedAt0h		resb	21
  1291                              <2> 	; Documented fields
  1292 00000015 <res 00000001>      <2> 	.bFileAttributes	resb	1	; 15h, Attribute of matching file
  1293 00000016 <res 00000002>      <2> 	.wFileTime			resb	2	; 16h, File time
  1294 00000018 <res 00000002>      <2> 	.wFileDate			resb	2	; 18h, File date
  1295 0000001A <res 00000004>      <2> 	.dwFileSize			resb	4	; 1Ah, File size in bytes
  1296 0000001E <res 0000000D>      <2> 	.szFile				resb	13	; 1Eh, ASCIZ filename + extension
  1297                              <2> endstruc
  1298                              <2> 
  1299                              <2> 
  1300                              <2> %endif ; DOS_FUNCTIONS_INC
  1301                              <1> %include "File.inc"
  1302                              <2> ; File name		:	File.inc
  1303                              <2> ; Project name	:	Assembly Library
  1304                              <2> ; Created date	:	8.10.2010
  1305                              <2> ; Last update	:	6.12.2010
  1306                              <2> ; Author		:	Tomi Tilli
  1307                              <2> ; Description	:	File library defines.
  1308                              <2> %ifndef FILE_INC
  1309                              <2> %define FILE_INC
  1310                              <2> 
  1311                              <2> ; File access and sharing modes
  1312                              <2> struc FILE_ACCESS
  1313 00000000 <res 00000001>      <2> 	.ReadOnly		resb	1
  1314 00000001 <res 00000001>      <2> 	.WriteOnly		resb	1
  1315 00000002 <res 00000001>      <2> 	.ReadAndWrite	resb	1
  1316                              <2> endstruc
  1317                              <2> 
  1318                              <2> ; Origin of file seek
  1319                              <2> struc SEEK_FROM
  1320 00000000 <res 00000001>      <2> 	.startOfFile			resb	1	; 00h
  1321 00000001 <res 00000001>      <2> 	.currentFilePosition	resb	1	; 01h
  1322 00000002 <res 00000001>      <2> 	.endOfFile				resb	1	; 02h
  1323                              <2> endstruc
  1324                              <2> 
  1325                              <2> ; File attribute flags
  1326                              <2> FLG_FILEATTR_READ_ONLY			EQU		(1<<0)
  1327                              <2> FLG_FILEATTR_HIDDEN				EQU		(1<<1)
  1328                              <2> FLG_FILEATTR_SYSTEM				EQU		(1<<2)
  1329                              <2> FLG_FILEATTR_VOLUME_LABEL		EQU		(1<<3)
  1330                              <2> FLG_FILEATTR_DIRECTORY			EQU		(1<<4)
  1331                              <2> FLG_FILEATTR_ARCHIVE			EQU		(1<<5)
  1332                              <2> 
  1333                              <2> 
  1334                              <2> ; Max number of bytes to read/write per DOS call when transferring DX:CX bytes
  1335                              <2> SPLIT_SIZE_FOR_LARGE_TRANSFERS	EQU		(32<<10)
  1336                              <2> 
  1337                              <2> 
  1338                              <2> %endif ; FILE_INC
  1339                              <1> %include "Math.inc"
  1340                              <2> ; Project name	:	Assembly Library
  1341                              <2> ; Description	:	Math related macros.
  1342                              <2> %ifndef MATH_INC
  1343                              <2> %define MATH_INC
  1344                              <2> 
  1345                              <2> FALSE		EQU		0
  1346                              <2> TRUE		EQU		1
  1347                              <2> 
  1348                              <2> 
  1349                              <2> ;--------------------------------------------------------------------
  1350                              <2> ; MIN_U		Unsigned comparison
  1351                              <2> ; MIN_S		Signed comparison
  1352                              <2> ;	Parameters:
  1353                              <2> ;		%1:		Operand 1
  1354                              <2> ;		%2:		Operand 2
  1355                              <2> ;	Returns:
  1356                              <2> ;		%1:		Lesser operand
  1357                              <2> ;	Corrupts registers:
  1358                              <2> ;		Nothing
  1359                              <2> ;--------------------------------------------------------------------
  1360                              <2> %macro MIN_U 2
  1361                              <2> 	cmp		%1, %2				; Is %1 smaller?
  1362                              <2> 	jb		%%Return			;  If so, return
  1363                              <2> 	mov		%1, %2				; Copy %2 to %1
  1364                              <2> ALIGN JUMP_ALIGN
  1365                              <2> %%Return:
  1366                              <2> %endmacro
  1367                              <2> 
  1368                              <2> %macro MIN_S 2
  1369                              <2> 	cmp		%1, %2				; Is %1 smaller?
  1370                              <2> 	jl		%%Return			;  If so, return
  1371                              <2> 	mov		%1, %2				; Copy %2 to %1
  1372                              <2> ALIGN JUMP_ALIGN
  1373                              <2> %%Return:
  1374                              <2> %endmacro
  1375                              <2> 
  1376                              <2> 
  1377                              <2> ;--------------------------------------------------------------------
  1378                              <2> ; MAX_U		Unsigned comparison
  1379                              <2> ; MAX_S		Signed comparison
  1380                              <2> ;	Parameters:
  1381                              <2> ;		%1:		Operand 1
  1382                              <2> ;		%2:		Operand 2
  1383                              <2> ;	Returns:
  1384                              <2> ;		%1:		Greater operand
  1385                              <2> ;	Corrupts registers:
  1386                              <2> ;		Nothing
  1387                              <2> ;--------------------------------------------------------------------
  1388                              <2> %macro MAX_U 2
  1389                              <2> 	cmp		%1, %2				; Is %1 greater?
  1390                              <2> 	ja		%%Return			;  If so, return
  1391                              <2> 	mov		%1, %2				; Copy %2 to %1
  1392                              <2> ALIGN JUMP_ALIGN
  1393                              <2> %%Return:
  1394                              <2> %endmacro
  1395                              <2> 
  1396                              <2> %macro MAX_S 2
  1397                              <2> 	cmp		%1, %2				; Is %1 greater?
  1398                              <2> 	jg		%%Return			;  If so, return
  1399                              <2> 	mov		%1, %2				; Copy %2 to %1
  1400                              <2> ALIGN JUMP_ALIGN
  1401                              <2> %%Return:
  1402                              <2> %endmacro
  1403                              <2> 
  1404                              <2> 
  1405                              <2> ;--------------------------------------------------------------------
  1406                              <2> ; SHL_DXAX
  1407                              <2> ;	Parameters:
  1408                              <2> ;		%1:		Number of bits to shift
  1409                              <2> ;	Returns:
  1410                              <2> ;		DX:AX	Shifted value
  1411                              <2> ;	Corrupts registers:
  1412                              <2> ;		CX
  1413                              <2> ;--------------------------------------------------------------------
  1414                              <2> %macro SHL_DXAX 1
  1415                              <2> 	%ifnidni %1, cx
  1416                              <2> 		mov		cx, %1
  1417                              <2> 	%endif
  1418                              <2> ALIGN JUMP_ALIGN
  1419                              <2> .ShiftNextBit:
  1420                              <2> 	eSHL_IM	ax, 1
  1421                              <2> 	rcl		dx, 1
  1422                              <2> 	loop	.ShiftNextBit
  1423                              <2> %endmacro
  1424                              <2> 
  1425                              <2> 
  1426                              <2> ;--------------------------------------------------------------------
  1427                              <2> ; SHR_DXAX
  1428                              <2> ;	Parameters:
  1429                              <2> ;		%1:		Number of bits to shift
  1430                              <2> ;	Returns:
  1431                              <2> ;		DX:AX	Shifted value
  1432                              <2> ;	Corrupts registers:
  1433                              <2> ;		CX
  1434                              <2> ;--------------------------------------------------------------------
  1435                              <2> %macro SHR_DXAX 1
  1436                              <2> 	%ifnidni %1, cx
  1437                              <2> 		mov		cx, %1
  1438                              <2> 	%endif
  1439                              <2> ALIGN JUMP_ALIGN
  1440                              <2> .ShiftNextBit:
  1441                              <2> 	shr		dx, 1
  1442                              <2> 	rcr		ax, 1
  1443                              <2> 	loop	.ShiftNextBit
  1444                              <2> %endmacro
  1445                              <2> 
  1446                              <2> 
  1447                              <2> %endif ; MATH_INC
  1448                              <1> %include "Registers.inc"
  1449                              <2> ; Project name	:	Assembly Library
  1450                              <2> ; Description	:	Register related macros.
  1451                              <2> %ifndef REGISTERS_INC
  1452                              <2> %define REGISTERS_INC
  1453                              <2> 
  1454                              <2> struc INTPACK
  1455                              <2> %ifdef USE_386
  1456                              <2> ;	.gs				resb	2
  1457                              <2> ;	.fs				resb	2
  1458                              <2> %endif
  1459 00000000 <res 00000002>      <2> 	.es				resb	2
  1460 00000002 <res 00000002>      <2> 	.ds				resb	2
  1461 00000004 <res 00000002>      <2> 	.di				resb	2
  1462 00000006 <res 00000002>      <2> 	.si				resb	2
  1463 00000008 <res 00000002>      <2> 	.bp				resb	2
  1464 0000000A <res 00000002>      <2> 	.sp				resb	2
  1465                              <2> 	.bx:
  1466 0000000C <res 00000001>      <2> 	.bl				resb	1
  1467 0000000D <res 00000001>      <2> 	.bh				resb	1
  1468                              <2> 	.dx:
  1469 0000000E <res 00000001>      <2> 	.dl				resb	1
  1470 0000000F <res 00000001>      <2> 	.dh				resb	1
  1471                              <2> 	.cx:
  1472 00000010 <res 00000001>      <2> 	.cl				resb	1
  1473 00000011 <res 00000001>      <2> 	.ch				resb	1
  1474                              <2> 	.ax:
  1475 00000012 <res 00000001>      <2> 	.al				resb	1
  1476 00000013 <res 00000001>      <2> 	.ah				resb	1
  1477 00000014 <res 00000002>      <2> 	.ip				resb	2
  1478 00000016 <res 00000002>      <2> 	.cs				resb	2
  1479 00000018 <res 00000002>      <2> 	.flags			resb	2
  1480                              <2> endstruc
  1481                              <2> 
  1482                              <2> ; 8086/8088 FLAGS
  1483                              <2> FLG_FLAGS_CF		EQU (1<<0)
  1484                              <2> FLG_FLAGS_PF		EQU (1<<2)
  1485                              <2> FLG_FLAGS_AF		EQU (1<<4)
  1486                              <2> FLG_FLAGS_ZF		EQU (1<<6)
  1487                              <2> FLG_FLAGS_SF		EQU (1<<7)
  1488                              <2> FLG_FLAGS_TF		EQU (1<<8)
  1489                              <2> FLG_FLAGS_IF		EQU (1<<9)
  1490                              <2> FLG_FLAGS_DF		EQU (1<<10)
  1491                              <2> FLG_FLAGS_OF		EQU (1<<11)
  1492                              <2> 
  1493                              <2> 
  1494                              <2> ;--------------------------------------------------------------------
  1495                              <2> ; This macro must be the first thing to call on Interrupt Service Routine.
  1496                              <2> ;
  1497                              <2> ; CREATE_INTPACK_TO_SSBP
  1498                              <2> ;	Parameters
  1499                              <2> ;		Nothing
  1500                              <2> ;	Returns:
  1501                              <2> ;		SS:BP:	Points to INTPACK
  1502                              <2> ;	Corrupts registers:
  1503                              <2> ;		Nothing
  1504                              <2> ;--------------------------------------------------------------------
  1505                              <2> %macro CREATE_INTPACK_TO_SSBP 0
  1506                              <2> 	ePUSHA
  1507                              <2> 	push	ds
  1508                              <2> 	push	es
  1509                              <2> %ifdef USE_386
  1510                              <2> ;	push	fs
  1511                              <2> ;	push	gs
  1512                              <2> %endif
  1513                              <2> 	mov		bp, sp
  1514                              <2> %endmacro
  1515                              <2> 
  1516                              <2> ;--------------------------------------------------------------------
  1517                              <2> ; This macro must be the last thing to call on Interrupt Service Routine.
  1518                              <2> ;
  1519                              <2> ; RESTORE_INTPACK_FROM_SSBP
  1520                              <2> ;	Parameters
  1521                              <2> ;		SS:BP:	Ptr to INTPACK
  1522                              <2> ;	Returns:
  1523                              <2> ;		All Registers will be loaded from INTPACK
  1524                              <2> ;--------------------------------------------------------------------
  1525                              <2> %macro RESTORE_INTPACK_FROM_SSBP 0
  1526                              <2> %ifdef USE_386
  1527                              <2> ;	pop		gs
  1528                              <2> ;	pop		fs
  1529                              <2> %endif
  1530                              <2> 	pop		es
  1531                              <2> 	pop		ds
  1532                              <2> 	ePOPA
  1533                              <2> 	iret
  1534                              <2> %endmacro
  1535                              <2> 
  1536                              <2> 
  1537                              <2> ;--------------------------------------------------------------------
  1538                              <2> ; This macro must be the first thing to call on Interrupt Service Routine.
  1539                              <2> ;
  1540                              <2> ; CREATE_FRAME_INTPACK_TO_SSBP
  1541                              <2> ;	Parameters
  1542                              <2> ;		%1:		Number of extra bytes to reserve before INTPACK
  1543                              <2> ;	Returns:
  1544                              <2> ;		SS:BP:	Points to INTPACK
  1545                              <2> ;	Corrupts registers:
  1546                              <2> ;		Nothing
  1547                              <2> ;--------------------------------------------------------------------
  1548                              <2> %macro CREATE_FRAME_INTPACK_TO_SSBP 1
  1549                              <2> 	ePUSHA
  1550                              <2> 	push	ds
  1551                              <2> 	push	es
  1552                              <2> %ifdef USE_386
  1553                              <2> ;	push	fs
  1554                              <2> ;	push	gs
  1555                              <2> %endif
  1556                              <2> 	sub		sp, BYTE %1
  1557                              <2> 	mov		bp, sp
  1558                              <2> %endmacro
  1559                              <2> 
  1560                              <2> ;--------------------------------------------------------------------
  1561                              <2> ; This macro must be the last thing to call on Interrupt Service Routine.
  1562                              <2> ;
  1563                              <2> ; RESTORE_FRAME_INTPACK_FROM_SSBP
  1564                              <2> ;	Parameters
  1565                              <2> ;		%1:		Number of extra bytes in INTPACK
  1566                              <2> ;		SS:BP:	Ptr to INTPACK
  1567                              <2> ;	Returns:
  1568                              <2> ;		All Registers will be loaded from INTPACK
  1569                              <2> ;--------------------------------------------------------------------
  1570                              <2> %macro RESTORE_FRAME_INTPACK_FROM_SSBP 1
  1571                              <2> 	add		sp, BYTE %1
  1572                              <2> %ifdef USE_386
  1573                              <2> ;	pop		gs
  1574                              <2> ;	pop		fs
  1575                              <2> %endif
  1576                              <2> 	pop		es
  1577                              <2> 	pop		ds
  1578                              <2> 	ePOPA
  1579                              <2> 	iret
  1580                              <2> %endmacro
  1581                              <2> 
  1582                              <2> 
  1583                              <2> ;--------------------------------------------------------------------
  1584                              <2> ; NORMALIZE_FAR_POINTER
  1585                              <2> ;	Parameters:
  1586                              <2> ;		%1:%2:		Far pointer to normalize
  1587                              <2> ;		%3:			Scratch register
  1588                              <2> ;		%4:			Scratch register
  1589                              <2> ;	Returns:
  1590                              <2> ;		%1:%2:		Normalized far pointer
  1591                              <2> ;	Corrupts registers:
  1592                              <2> ;		%3, %4
  1593                              <2> ;--------------------------------------------------------------------
  1594                              <2> %macro NORMALIZE_FAR_POINTER 4
  1595                              <2> 	mov		%4, %2				; Copy offset to scratch reg
  1596                              <2> 	and		%2, BYTE 0Fh		; Clear offset bits 15...4
  1597                              <2> 	eSHR_IM	%4, 4				; Divide offset by 16
  1598                              <2> 	mov		%3, %1				; Copy segment to scratch reg
  1599                              <2> 	add		%3, %4				; Add shifted offset to segment
  1600                              <2> 	mov		%1, %3				; Set normalized segment
  1601                              <2> %endmacro
  1602                              <2> 
  1603                              <2> 
  1604                              <2> ;--------------------------------------------------------------------
  1605                              <2> ; COPY_SSBP_TO_ESDI
  1606                              <2> ; COPY_SSBP_TO_DSSI
  1607                              <2> ; COPY_DSSI_TO_ESDI
  1608                              <2> ; COPY_ESDI_to_DSSI
  1609                              <2> ;	Parameters
  1610                              <2> ;		Nothing
  1611                              <2> ;	Returns:
  1612                              <2> ;		Copies farm pointer to different segment/pointer register pair
  1613                              <2> ;	Corrupts registers:
  1614                              <2> ;		Nothing
  1615                              <2> ;--------------------------------------------------------------------
  1616                              <2> %macro COPY_SSBP_TO_ESDI 0
  1617                              <2> 	push	ss
  1618                              <2> 	pop		es
  1619                              <2> 	mov		di, bp
  1620                              <2> %endmacro
  1621                              <2> 
  1622                              <2> %macro COPY_SSBP_TO_DSSI 0
  1623                              <2> 	push	ss
  1624                              <2> 	pop		ds
  1625                              <2> 	mov		si, bp
  1626                              <2> %endmacro
  1627                              <2> 
  1628                              <2> %macro COPY_DSSI_TO_ESDI 0
  1629                              <2> 	push	ds
  1630                              <2> 	pop		es
  1631                              <2> 	mov		di, si
  1632                              <2> %endmacro
  1633                              <2> 
  1634                              <2> %macro COPY_ESDI_to_DSSI 0
  1635                              <2> 	push	es
  1636                              <2> 	pop		ds
  1637                              <2> 	mov		si, di
  1638                              <2> %endmacro
  1639                              <2> 
  1640                              <2> 
  1641                              <2> 
  1642                              <2> %endif ; REGISTERS_INC
  1643                              <1> %include "SystemTimer.inc"
  1644                              <2> ; Project name	:	Assembly Library
  1645                              <2> ; Description	:	System Timer (8254) relates equates and macros.
  1646                              <2> %ifndef SYSTEMTIMER_INC
  1647                              <2> %define SYSTEMTIMER_INC
  1648                              <2> 
  1649                              <2> ; Timer/Counter to program
  1650                              <2> TIMER_0									EQU	(0<<6)
  1651                              <2> TIMER_1									EQU	(1<<6)
  1652                              <2> TIMER_2									EQU	(2<<6)
  1653                              <2> 
  1654                              <2> ; Counter commands
  1655                              <2> LATCH									EQU	(0<<4)	; Counter Latch Command (latches the count for reading)
  1656                              <2> READ_OR_WRITE_LSB_ONLY					EQU	(1<<4)	; MSB is always zero
  1657                              <2> READ_OR_WRITE_MSB_ONLY					EQU	(2<<4)	; LSB is always zero
  1658                              <2> READ_OR_WRITE_LSB_THEN_MSB				EQU	(3<<4)
  1659                              <2> 
  1660                              <2> ; Timer modes
  1661                              <2> MODE_0_SINGLE_TIMEOUT					EQU	(0<<1)	; Interrupt on Terminal Count
  1662                              <2> MODE_1_ONE_SHOT							EQU	(1<<1)	; Hardware Retriggerable One-Shot
  1663                              <2> MODE_2_RATE_GENERATOR					EQU	(2<<1)
  1664                              <2> MODE_3_SQUARE_WAVE_MODE					EQU	(3<<1)
  1665                              <2> MODE_4_SOFTWARE_TRIGGERED_STROBE		EQU	(4<<1)
  1666                              <2> MODE_5_HARDWARE_RETRIGGERABLE_STROBE	EQU	(5<<1)
  1667                              <2> 
  1668                              <2> ; Binary / BCD Mode
  1669                              <2> BINARY_COUNTER							EQU	0
  1670                              <2> BCD_COUNTER								EQU	1
  1671                              <2> 
  1672                              <2> 
  1673                              <2> ; Ports
  1674                              <2> COUNT_REGISTER_0						EQU	40h		; Timer 0 Count Register (System Timer Ticks)
  1675                              <2> COUNT_REGISTER_1						EQU	41h		; Timer 1 Count Register (DRAM Refresh)
  1676                              <2> COUNT_REGISTER_2						EQU	42h		; Timer 2 Count Register (General Use)
  1677                              <2> CONTROL_WORD_REGISTER_out				EQU	43h
  1678                              <2> 
  1679                              <2> ; Timer 2 is connected to PC Speaker that can be controller from port 61h.
  1680                              <2> SPEAKER_CONTROL_REGISTER				EQU	61h
  1681                              <2> FLG_TIMER_2_OUTPUT_in					EQU	(1<<5)	; AT+ only
  1682                              <2> FLG_SPEAKER_DATA_ENABLED				EQU	(1<<1)
  1683                              <2> FLG_SPEAKER_GATE_TIMER_2_ON				EQU	(1<<0)
  1684                              <2> 
  1685                              <2> 
  1686                              <2> ; The duration of one tick
  1687                              <2> TIMER_CYCLE_TIME						EQU	838		; nanosecs
  1688                              <2> 
  1689                              <2> 
  1690                              <2> 
  1691                              <2> 
  1692                              <2> ;--------------------------------------------------------------------
  1693                              <2> ; OUTPUT_COUNTER_COMMAND_TO
  1694                              <2> ;	Parameters:
  1695                              <2> ;		%1:		TIMER_0, TIMER_1 or TIMER_2
  1696                              <2> ;		%2:		Command to counter
  1697                              <2> ;		%3:		Timer mode
  1698                              <2> ;		%4:		BINARY_COUNTER or BCD_COUNTER
  1699                              <2> ;	Returns:
  1700                              <2> ;		Nothing
  1701                              <2> ;	Corrupts registers:
  1702                              <2> ;		AL
  1703                              <2> ;--------------------------------------------------------------------
  1704                              <2> %macro OUTPUT_COUNTER_COMMAND_TO 4
  1705                              <2> 	mov		al, %1 | %2 | %3 | %4
  1706                              <2> 	out		CONTROL_WORD_REGISTER_out, al
  1707                              <2> %endmacro
  1708                              <2> 
  1709                              <2> 
  1710                              <2> ;--------------------------------------------------------------------
  1711                              <2> ; WRITE_COUNT_FROM_AL_TO
  1712                              <2> ; WRITE_COUNT_FROM_AX_TO
  1713                              <2> ;	Parameters:
  1714                              <2> ;		%1:		TIMER_0, TIMER_1 or TIMER_2
  1715                              <2> ;		AX:		Count to write to timer
  1716                              <2> ;	Returns:
  1717                              <2> ;		Nothing
  1718                              <2> ;	Corrupts registers:
  1719                              <2> ;		AL (WRITE_COUNT_FROM_AX_TO only)
  1720                              <2> ;--------------------------------------------------------------------
  1721                              <2> %macro WRITE_COUNT_FROM_AL_TO 1
  1722                              <2> 	%ifidni %1, TIMER_0
  1723                              <2> 		out		COUNT_REGISTER_0, al
  1724                              <2> 	%elifidni %1, TIMER_1
  1725                              <2> 		out		COUNT_REGISTER_1, al
  1726                              <2> 	%elifidni %1, TIMER_2
  1727                              <2> 		out		COUNT_REGISTER_2, al
  1728                              <2> 	%else
  1729                              <2> 		%error "Invalid timer name passed to WRITE_COUNT_FROM_AL_TO"
  1730                              <2> 	%endif
  1731                              <2> %endmacro
  1732                              <2> 
  1733                              <2> %macro WRITE_COUNT_FROM_AX_TO 1
  1734                              <2> 	%ifidni %1, TIMER_0
  1735                              <2> 		out		COUNT_REGISTER_0, al
  1736                              <2> 		mov		al, ah
  1737                              <2> 		out		COUNT_REGISTER_0, al
  1738                              <2> 	%elifidni %1, TIMER_1
  1739                              <2> 		out		COUNT_REGISTER_1, al
  1740                              <2> 		mov		al, ah
  1741                              <2> 		out		COUNT_REGISTER_1, al
  1742                              <2> 	%elifidni %1, TIMER_2
  1743                              <2> 		out		COUNT_REGISTER_2, al
  1744                              <2> 		mov		al, ah
  1745                              <2> 		out		COUNT_REGISTER_2, al
  1746                              <2> 	%else
  1747                              <2> 		%error "Invalid timer name passed to WRITE_COUNT_FROM_AX_TO"
  1748                              <2> 	%endif
  1749                              <2> %endmacro
  1750                              <2> 
  1751                              <2> 
  1752                              <2> ;--------------------------------------------------------------------
  1753                              <2> ; READ_COUNT_TO_AL_FROM
  1754                              <2> ; READ_COUNT_TO_AX_FROM
  1755                              <2> ;	Parameters:
  1756                              <2> ;		%1:		TIMER_0, TIMER_1 or TIMER_2
  1757                              <2> ;	Returns:
  1758                              <2> ;		AL/AX:	Counter value
  1759                              <2> ;	Corrupts registers:
  1760                              <2> ;		Nothing
  1761                              <2> ;--------------------------------------------------------------------
  1762                              <2> %macro READ_COUNT_TO_AL_FROM 1
  1763                              <2> 	%ifidni %1, TIMER_0
  1764                              <2> 		in		al, COUNT_REGISTER_0
  1765                              <2> 	%elifidni %1, TIMER_1
  1766                              <2> 		in		al, COUNT_REGISTER_1
  1767                              <2> 	%elifidni %1, TIMER_2
  1768                              <2> 		in		al, COUNT_REGISTER_2
  1769                              <2> 	%else
  1770                              <2> 		%error "Invalid timer name passed to READ_COUNT_TO_AL_FROM"
  1771                              <2> 	%endif
  1772                              <2> %endmacro
  1773                              <2> 
  1774                              <2> %macro READ_COUNT_TO_AX_FROM 1
  1775                              <2> 	%ifidni %1, TIMER_0
  1776                              <2> 		in		al, COUNT_REGISTER_0
  1777                              <2> 		mov		ah, al
  1778                              <2> 		in		al, COUNT_REGISTER_0
  1779                              <2> 	%elifidni %1, TIMER_1
  1780                              <2> 		in		al, COUNT_REGISTER_1
  1781                              <2> 		mov		ah, al
  1782                              <2> 		in		al, COUNT_REGISTER_1
  1783                              <2> 	%elifidni %1, TIMER_2
  1784                              <2> 		in		al, COUNT_REGISTER_2
  1785                              <2> 		mov		ah, al
  1786                              <2> 		in		al, COUNT_REGISTER_2
  1787                              <2> 	%else
  1788                              <2> 		%error "Invalid timer name passed to READ_COUNT_TO_AX_FROM"
  1789                              <2> 	%endif
  1790                              <2> 		xchg	al, ah
  1791                              <2> %endmacro
  1792                              <2> 
  1793                              <2> 
  1794                              <2> ;--------------------------------------------------------------------
  1795                              <2> ; START_PRECISE_EVENT_TIMER
  1796                              <2> ;	Parameters:
  1797                              <2> ;		Nothing
  1798                              <2> ;	Returns:
  1799                              <2> ;		Nothing
  1800                              <2> ;	Corrupts registers:
  1801                              <2> ;		AL
  1802                              <2> ;--------------------------------------------------------------------
  1803                              <2> %macro START_PRECISE_EVENT_TIMER 0
  1804                              <2> 	in		al, SPEAKER_CONTROL_REGISTER
  1805                              <2> 	or		al, FLG_SPEAKER_GATE_TIMER_2_ON
  1806                              <2> 	out		SPEAKER_CONTROL_REGISTER, al
  1807                              <2> %endmacro
  1808                              <2> 
  1809                              <2> 
  1810                              <2> ;--------------------------------------------------------------------
  1811                              <2> ; STOP_PRECISE_EVENT_TIMER
  1812                              <2> ;	Parameters:
  1813                              <2> ;		Nothing
  1814                              <2> ;	Returns:
  1815                              <2> ;		Nothing
  1816                              <2> ;	Corrupts registers:
  1817                              <2> ;		AL
  1818                              <2> ;--------------------------------------------------------------------
  1819                              <2> %macro STOP_PRECISE_EVENT_TIMER 0
  1820                              <2> 	in		al, SPEAKER_CONTROL_REGISTER
  1821                              <2> 	and		al, ~(FLG_SPEAKER_DATA_ENABLED | FLG_SPEAKER_GATE_TIMER_2_ON)
  1822                              <2> 	out		SPEAKER_CONTROL_REGISTER, al
  1823                              <2> %endmacro
  1824                              <2> 
  1825                              <2> 
  1826                              <2> %endif ; SYSTEMTIMER_INC
  1827                              <1> 
  1828                              <1> 
  1829                              <1> ; Library dependencies
  1830                              <1> %ifdef INCLUDE_MENU_DIALOGS
  1831                              <1> 	%include "Dialog.inc"
  1832                              <2> ; File name		:	Dialog.inc
  1833                              <2> ; Project name	:	Assembly Library
  1834                              <2> ; Created date	:	15.9.2010
  1835                              <2> ; Last update	:	22.10.2010
  1836                              <2> ; Author		:	Tomi Tilli
  1837                              <2> ; Description	:	Defines for Menu library dialogs.
  1838                              <2> %ifndef DIALOG_INC
  1839                              <2> %define DIALOG_INC
  1840                              <2> 
  1841                              <2> ; Struct and defines for all dialogs
  1842                              <2> struc DIALOG
  1843 00000000 <res 00000014>      <2> 	.menu					resb	MENU_size
  1844 00000014 <res 00000004>      <2> 	.fpDialogIO				resb	4	; Ptr to DIALOG_INPUT + dialog specific data
  1845 00000018 <res 00000002>      <2> 	.pParentMenu			resb	2
  1846                              <2> endstruc
  1847                              <2> 
  1848                              <2> DIALOG_DELTA_WIDTH_FROM_PARENT		EQU		5
  1849                              <2> DIALOG_MAX_WIDTH					EQU		60
  1850                              <2> DIALOG_MAX_HEIGHT					EQU		25
  1851                              <2> 
  1852                              <2> 
  1853                              <2> ; Dialog parameter and return value structs
  1854                              <2> struc DIALOG_INPUT
  1855 00000000 <res 00000004>      <2> 	.fszTitle			resb	4
  1856 00000004 <res 00000004>      <2> 	.fszItems			resb	4
  1857 00000008 <res 00000004>      <2> 	.fszInfo			resb	4
  1858                              <2> endstruc
  1859                              <2> 
  1860                              <2> struc WORD_DIALOG_IO
  1861 00000000 <res 0000000C>      <2> 	.dialogInput		resb	DIALOG_INPUT_size
  1862 0000000C <res 00000001>      <2> 	.bUserCancellation	resb	1
  1863 0000000D <res 00000001>      <2> 	.bNumericBase		resb	1
  1864 0000000E <res 00000002>      <2> 	.wMin				resb	2
  1865 00000010 <res 00000002>      <2> 	.wMax				resb	2
  1866 00000012 <res 00000002>      <2> 	.wReturnWord		resb	2
  1867                              <2> endstruc
  1868                              <2> 
  1869                              <2> struc STRING_DIALOG_IO
  1870 00000000 <res 0000000C>      <2> 	.dialogInput		resb	DIALOG_INPUT_size
  1871 0000000C <res 00000001>      <2> 	.bUserCancellation	resb	1
  1872 0000000D <res 00000001>      <2> 						resb	1
  1873 0000000E <res 00000002>      <2> 	.fnCharFilter		resb	2	; Optional, can be NULL to accept all
  1874                              <2> 	.wBufferSize:
  1875 00000010 <res 00000002>      <2> 	.wReturnLength		resb	2	; String length without NULL
  1876 00000012 <res 00000004>      <2> 	.fpReturnBuffer		resb	4
  1877                              <2> endstruc
  1878                              <2> 
  1879                              <2> struc PROGRESS_DIALOG_IO
  1880 00000000 <res 0000000C>      <2> 	.dialogInput					resb	DIALOG_INPUT_size
  1881 0000000C <res 00000002>      <2> 									resb	2
  1882 0000000E <res 00000002>      <2> 	.wCurrentProgressValue			resb	2
  1883 00000010 <res 00000002>      <2> 	.wMaxProgressValue				resb	2
  1884 00000012 <res 00000002>      <2> 	.wMinProgressValue				resb	2
  1885 00000014 <res 00000002>      <2> 	.fnTaskWithParamInDSSI			resb	2
  1886                              <2> 
  1887                              <2> 	; Progress Dialog internal values
  1888 00000016 <res 00000002>      <2> 	.wProgressPerCharacter			resb	2
  1889 00000018 <res 00000002>      <2> 	.wStartTimeTicks				resb	2
  1890                              <2> endstruc
  1891                              <2> 
  1892                              <2> struc DRIVE_DIALOG_IO
  1893 00000000 <res 0000000C>      <2> 	.dialogInput		resb	DIALOG_INPUT_size
  1894 0000000C <res 00000001>      <2> 	.bUserCancellation	resb	1
  1895 0000000D <res 00000001>      <2> 						resb	1
  1896 0000000E <res 00000001>      <2> 	.cReturnDriveLetter	resb	1
  1897 0000000F <res 00000001>      <2> 	.bReturnDriveNumber	resb	1
  1898                              <2> endstruc
  1899                              <2> 
  1900                              <2> struc FILE_DIALOG_IO
  1901                              <2> 	; DIALOG_INPUT adjusted for File Dialog
  1902 00000000 <res 00000004>      <2> 	.fszTitle			resb	4
  1903 00000004 <res 00000004>      <2> 	.fszItemBuffer		resb	4	; For generating file strings
  1904 00000008 <res 00000004>      <2> 						resb	4
  1905                              <2> 
  1906 0000000C <res 00000001>      <2> 	.bUserCancellation	resb	1
  1907 0000000D <res 00000001>      <2> 						resb	1
  1908 0000000E <res 00000001>      <2> 	.bDialogFlags		resb	1
  1909 0000000F <res 00000001>      <2> 	.bFileAttributes	resb	1
  1910 00000010 <res 00000002>      <2> 						resb	2
  1911                              <2> 	.fpFileFilterString:			; Ptr to NULL terminated search string (may include path and wildcards)
  1912 00000012 <res 0000000E>      <2> 	.szFile				resb	FILENAME_BUFFER_SIZE
  1913                              <2> endstruc
  1914                              <2> 
  1915                              <2> 
  1916                              <2> ; Progress bar dialog
  1917                              <2> PROGRESS_COMPLETE_CHARACTER			EQU		BLOCK_FULL_FOREGROUND
  1918                              <2> PROGRESS_INCOMPLETE_CHARACTER		EQU		BLOCK_MOSTLY_BACKGROUND
  1919                              <2> 
  1920                              <2> ; File dialog
  1921                              <2> FILENAME_BUFFER_SIZE				EQU		14	; 8+1+3+NULL+alignment
  1922                              <2> MAX_FILE_DIALOG_INFO_LINES			EQU		3
  1923                              <2> FLG_FILEDIALOG_DRIVES				EQU		(1<<0)	; Allow changing drive
  1924                              <2> FLG_FILEDIALOG_DIRECTORY			EQU		(1<<1)	; Select directory instead of file
  1925                              <2> FLG_FILEDIALOG_NEW					EQU		(1<<2)	; Allow creating new file or directory
  1926                              <2> 
  1927                              <2> KEY_FILEDIALOG_CHANGE_DRIVE			EQU		3Ch		; F2
  1928                              <2> KEY_FILEDIALOG_SELECT_DIRECTORY		EQU		3Dh		; F3
  1929                              <2> KEY_FILEDIALOG_NEW_FILE_OR_DIR		EQU		3Eh		; F4
  1930                              <2> 
  1931                              <2> 
  1932                              <2> %endif ; DIALOG_INC
  1933                              <1> 	%define INCLUDE_MENU_LIBRARY
  1934                              <1> 	%define INCLUDE_FILE_LIBRARY
  1935                              <1> %endif
  1936                              <1> 
  1937                              <1> %ifdef INCLUDE_MENU_LIBRARY
  1938                              <1> 	%include "Menu.inc"
  1939                              <2> ; Project name	:	Assembly Library
  1940                              <2> ; Description	:	Defines for Menu library.
  1941                              <2> %ifndef MENU_INC
  1942                              <2> %define MENU_INC
  1943                              <2> 
  1944                              <2> ;--------------------------------------------------------------------
  1945                              <2> ; Menu Library users need to use these macros since it will provide
  1946                              <2> ; compatibility with future library versions.
  1947                              <2> ;
  1948                              <2> ; CALL_MENU_LIBRARY
  1949                              <2> ; JMP_MENU_LIBRARY
  1950                              <2> ;	Parameters:
  1951                              <2> ;		%1:			Function to call (functionName from MENU_LIB)
  1952                              <2> ;		BP:			Menu handle
  1953                              <2> ;		Registers:	Depends on function to call
  1954                              <2> ;	Returns:
  1955                              <2> ;		Depends on function to call
  1956                              <2> ;	Corrupts registers:
  1957                              <2> ;		AX (unless used as a return register), DI
  1958                              <2> ;--------------------------------------------------------------------
  1959                              <2> %macro CALL_MENU_LIBRARY 1
  1960                              <2> 	%ifidn %1, CloseMenuIfExitEventAllows
  1961                              <2> 		call	MenuInit_CloseMenuIfExitEventAllows
  1962                              <2> 	%elifidn %1, Close
  1963                              <2> 		call	MenuInit_CloseMenuWindow
  1964                              <2> 	%elifidn %1, SetUserDataFromDSSI
  1965                              <2> 		call	MenuInit_SetUserDataFromDSSI
  1966                              <2> 	%elifidn %1, GetUserDataToDSSI
  1967                              <2> 		call	MenuInit_GetUserDataToDSSI
  1968                              <2> 	%elifidn %1, SetTitleHeightFromAL
  1969                              <2> 		call	MenuInit_SetTitleHeightFromAL
  1970                              <2> 	%elifidn %1, GetHighlightedItemToAX
  1971                              <2> 		call	MenuInit_GetHighlightedItemToAX
  1972                              <2> 	%elifidn %1, SetTotalItemsFromAX
  1973                              <2> 		call	MenuInit_SetTotalItemsFromAX
  1974                              <2> 	%elifidn %1, SetInformationHeightFromAL
  1975                              <2> 		call	MenuInit_SetInformationHeightFromAL
  1976                              <2> 	%elifidn %1, SetTimeoutValueFromAX
  1977                              <2> 		call	MenuTime_SetSelectionTimeoutValueFromAX
  1978                              <2> 	%else
  1979                              <2> 		mov		di, %1
  1980                              <2> 		call	Menu_FunctionFromDI
  1981                              <2> 	%endif
  1982                              <2> %endmacro
  1983                              <2> 
  1984                              <2> %macro JMP_MENU_LIBRARY 1
  1985                              <2> 	%ifidn %1, CloseMenuIfExitEventAllows
  1986                              <2> 		jmp		MenuInit_CloseMenuIfExitEventAllows
  1987                              <2> 	%elifidn %1, Close
  1988                              <2> 		jmp		MenuInit_CloseMenuWindow
  1989                              <2> 	%elifidn %1, SetUserDataFromDSSI
  1990                              <2> 		jmp		MenuInit_SetUserDataFromDSSI
  1991                              <2> 	%elifidn %1, GetUserDataToDSSI
  1992                              <2> 		jmp		MenuInit_GetUserDataToDSSI
  1993                              <2> 	%elifidn %1, SetTitleHeightFromAL
  1994                              <2> 		jmp		MenuInit_SetTitleHeightFromAL
  1995                              <2> 	%elifidn %1, GetHighlightedItemToAX
  1996                              <2> 		jmp		MenuInit_GetHighlightedItemToAX
  1997                              <2> 	%elifidn %1, SetTotalItemsFromAX
  1998                              <2> 		jmp		MenuInit_SetTotalItemsFromAX
  1999                              <2> 	%elifidn %1, SetInformationHeightFromAL
  2000                              <2> 		jmp		MenuInit_SetInformationHeightFromAL
  2001                              <2> 	%elifidn %1, SetTimeoutValueFromAX
  2002                              <2> 		jmp		MenuTime_SetSelectionTimeoutValueFromAX
  2003                              <2> 	%else
  2004                              <2> 		mov		di, %1
  2005                              <2> 		jmp		Menu_FunctionFromDI
  2006                              <2> 	%endif
  2007                              <2> %endmacro
  2008                              <2> 
  2009                              <2> %if 0
  2010                              <2> ;;;
  2011                              <2> ;;; struc no longer needed with direct call to function
  2012                              <2> ;;;
  2013                              <2> 
  2014                              <2> ; Menu library functions
  2015                              <2> struc MENU_LIB
  2016                              <2> 	.DisplayWithHandlerInBXandUserDataInDXAX	resb	2
  2017                              <2> 	.SendExitMenuEvent:
  2018                              <2> 	.Close:
  2019                              <2> 	.RefreshWindow								resb	2
  2020                              <2> 
  2021                              <2> 	.SetUserDataFromDSSI:
  2022                              <2> 	.GetUserDataToDSSI:
  2023                              <2> 
  2024                              <2> 	.SetTitleHeightFromAL:
  2025                              <2> 	.ClearTitleArea								resb	2
  2026                              <2> 	.RefreshTitle								resb	2
  2027                              <2> 
  2028                              <2> 	.GetHighlightedItemToAX:
  2029                              <2> 	.HighlightItemFromAX						resb	2
  2030                              <2> 	.SetTotalItemsFromAX:
  2031                              <2> 	.RefreshItemFromAX							resb	2
  2032                              <2> 
  2033                              <2> 	.SetInformationHeightFromAL:
  2034                              <2> 	.ClearInformationArea						resb	2
  2035                              <2> 	.RefreshInformation							resb	2
  2036                              <2> 
  2037                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
  2038                              <2> 	.StartSelectionTimeoutWithTicksInAX			resb	2
  2039                              <2> %endif
  2040                              <2> 
  2041                              <2> %ifdef INCLUDE_MENU_DIALOGS
  2042                              <2> 	.StartProgressTaskWithIoInDSSIandParamInDXAX	resb	2
  2043                              <2> 	.SetProgressValueFromAX							resb	2
  2044                              <2> 
  2045                              <2> 	.DisplayMessageWithInputInDSSI					resb	2
  2046                              <2> 	.GetSelectionToAXwithInputInDSSI				resb	2
  2047                              <2> 	.GetWordWithIoInDSSI							resb	2
  2048                              <2> 	.GetStringWithIoInDSSI							resb	2
  2049                              <2> 	.GetFileNameWithIoInDSSI						resb	2
  2050                              <2> 	.GetDriveWithIoInDSSI							resb	2
  2051                              <2> %endif
  2052                              <2> endstruc
  2053                              <2> %endif
  2054                              <2> 
  2055                              <2> ; Menu initialization parameters
  2056                              <2> struc MENUINIT
  2057 00000000 <res 00000002>      <2> 	.wItems							resb	2	; Number of items in menu
  2058 00000002 <res 00000002>      <2> 	.wHighlightedItem				resb	2	; Index for highlighted item
  2059                              <2> 
  2060                              <2> 	.wTitleAndInfoLines:
  2061 00000004 <res 00000001>      <2> 	.bTitleLines					resb	1	; Number of title lines
  2062 00000005 <res 00000001>      <2> 	.bInfoLines						resb	1	; Number of information lines
  2063                              <2> 
  2064                              <2> 	.wWidthAndHeight:
  2065 00000006 <res 00000001>      <2> 	.bWidth							resb	1	; Menu width in characters
  2066 00000007 <res 00000001>      <2> 	.bHeight						resb	1	; Menu height in characters
  2067                              <2> endstruc
  2068                              <2> 
  2069                              <2> 
  2070                              <2> ; All menu parameters
  2071                              <2> struc MENU
  2072 00000000 <res 00000008>      <2> 	.menuInit						resb	MENUINIT_size	; Must be first
  2073 00000008 <res 00000002>      <2> 	.fnEventHandler					resb	2	; Offset to Menu event handler
  2074 0000000A <res 00000004>      <2> 	.dwUserData						resb	4	; User specified data
  2075                              <2> 
  2076 0000000E <res 00000001>      <2> 	.bFlags							resb	1	; Menu flags
  2077 0000000F <res 00000001>      <2> 									resb	1
  2078 00000010 <res 00000002>      <2> 	.wTimeoutCounter				resb	2
  2079 00000012 <res 00000002>      <2> 	.wFirstVisibleItem				resb	2	; Index for first visible item on the menu
  2080                              <2> endstruc
  2081                              <2> 
  2082                              <2> ; Flags for MENU.wFlags
  2083                              <2> FLG_MENU_EXIT						EQU		(1<<0)	; Close and exit menu
  2084                              <2> FLG_MENU_NOHIGHLIGHT				EQU		(1<<1)	; Never highlight items
  2085                              <2> FLG_MENU_USER_HANDLES_SCROLLING		EQU		(1<<2)
  2086                              <2> FLG_MENU_TIMEOUT_COUNTDOWN			EQU		(1<<3)	; Timeout countdown in progress
  2087                              <2> 
  2088                              <2> 
  2089                              <2> MENU_VERTICAL_BORDER_LINES			EQU		5	; Title top and bottom + Info top and bottom + bottom shadow
  2090                              <2> MENU_HORIZONTAL_BORDER_LINES		EQU		3	; Left + Right borders + Right shadow
  2091                              <2> MENU_TEXT_ROW_OFFSET				EQU		1
  2092                              <2> MENU_TEXT_COLUMN_OFFSET				EQU		2
  2093                              <2> MENU_TIMEOUT_STRING_CHARACTERS		EQU		19
  2094                              <2> MENU_TIMEOUT_SECONDS_FOR_HURRY		EQU		3
  2095                              <2> 
  2096                              <2> SCROLL_TRACK_CHARACTER				EQU		BLOCK_EVEN_BACKGROUND_AND_FOREGROUND
  2097                              <2> SCROLL_THUMB_CHARACTER				EQU		BLOCK_FULL_FOREGROUND
  2098                              <2> 
  2099                              <2> NO_ITEM_SELECTED					EQU		-1
  2100                              <2> NO_ITEM_HIGHLIGHTED					EQU		-1
  2101                              <2> NO_TIMEOUT_USED						EQU		0
  2102                              <2> 
  2103                              <2> 
  2104                              <2> ; Keyboard keys (scan codes) used by menu library
  2105                              <2> ;MENU_KEY_ENTER		EQU		1Ch
  2106                              <2> ;MENU_KEY_ESC		EQU		01h
  2107                              <2> MENU_KEY_UP			EQU		48h
  2108                              <2> MENU_KEY_DOWN		EQU		50h
  2109                              <2> MENU_KEY_PGUP		EQU		49h
  2110                              <2> MENU_KEY_PGDN		EQU		51h
  2111                              <2> MENU_KEY_HOME		EQU		47h
  2112                              <2> MENU_KEY_END		EQU		4Fh
  2113                              <2> 
  2114                              <2> 
  2115                              <2> %endif ; MENU_INC
  2116                              <1> 	%include "MenuEvents.inc"
  2117                              <2> ; Project name	:	Assembly Library
  2118                              <2> ; Description	:	Defines for Menu events send to the user.
  2119                              <2> %ifndef MENUEVENTS_INC
  2120                              <2> %define MENUEVENTS_INC
  2121                              <2> 
  2122                              <2> ;--------------------------------------------------------------------
  2123                              <2> ; Events to be processed in user implemented handler.
  2124                              <2> ;	Common parameters for all events:
  2125                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
  2126                              <2> ;		SS:BP:		Menu library handle
  2127                              <2> ;	Common return values for all events:
  2128                              <2> ;		CF:			Set if event processed
  2129                              <2> ;					Cleared if event not processed
  2130                              <2> ;	Corrupts registers:
  2131                              <2> ;		All
  2132                              <2> ;--------------------------------------------------------------------
  2133                              <2> 
  2134                              <2> ;
  2135                              <2> ; There are two ways to use MENUEVENT:
  2136                              <2> ;
  2137                              <2> ; 1. If the program needs two different menus, include the definition of the MENUEVENT structure below,
  2138                              <2> ;    instantiate with members that point to the routines that make up the menu.
  2139                              <2> ;
  2140                              <2> ; 2. If the program needs only one menu, %define MENUEVENT_INLINE_OFFSETS before this include file,
  2141                              <2> ;    and define (through EQU statements) each of the entry points as offsets from a base address.
  2142                              <2> ;
  2143                              <2> 
  2144                              <2> ;
  2145                              <2> ; If user level idle processing is desired, %define this symbol and .IdleProcessing will be called.
  2146                              <2> ; Otherwise, the code and structure entry will be omitted.  Note that INCLUDE_MENU_DIALOGS requires
  2147                              <2> ; the idle processing (if that is the case, it is turned on here).
  2148                              <2> ;
  2149                              <2> ;%define MENUEVENT_IDLEPROCESSING_ENABLE
  2150                              <2> ;
  2151                              <2> 
  2152                              <2> %ifdef INCLUDE_MENU_DIALOGS
  2153                              <2> %define MENUEVENT_IDLEPROCESSING_ENABLE
  2154                              <2> %endif
  2155                              <2> 
  2156                              <2> %ifndef MENUEVENT_INLINE_OFFSETS
  2157                              <2> 
  2158                              <2> struc MENUEVENT
  2159                              <2> 	; Parameters:
  2160                              <2> 	;	DS:SI:		Ptr to MENUINIT struct to initialize
  2161                              <2> 	; Returns:
  2162                              <2> 	;	DS:SI:		Ptr to initialized MENUINIT struct
  2163 00000000 <res 00000002>      <2> 	.InitializeMenuinitFromDSSI	resb	2
  2164                              <2> %define MENUEVENT_InitializeMenuinitFromDSSI	MENUEVENT.InitializeMenuinitFromDSSI
  2165                              <2> 
  2166                              <2> 	; Parameters:
  2167                              <2> 	;	None
  2168                              <2> 	; Returns:
  2169                              <2> 	;	CF:			Set to exit menu
  2170                              <2> 	;				Clear to cancel exit
  2171 00000002 <res 00000002>      <2> 	.ExitMenu					resb	2
  2172                              <2> %define MENUEVENT_ExitMenu						MENUEVENT.ExitMenu
  2173                              <2> 
  2174                              <2> %ifdef MENUEVENT_IDLEPROCESSING_ENABLE
  2175                              <2> 	; Parameters:
  2176                              <2> 	;	None
  2177                              <2> 	; See the definition of MENUEVENT_IDLEPROCESSING_ENABLE below.
  2178 00000004 <res 00000002>      <2> 	.IdleProcessing				resb	2
  2179                              <2> %define MENUEVENT_IdleProcessing				MENUEVENT.IdleProcessing
  2180                              <2> %endif
  2181                              <2> 
  2182                              <2> 	; Parameters:
  2183                              <2> 	;	CX:			Index of new highlighted item
  2184                              <2> 	;	DX:			Index of previously highlighted item or NO_ITEM_HIGHLIGHTED
  2185 00000006 <res 00000002>      <2> 	.ItemHighlightedFromCX		resb	2
  2186                              <2> %define MENUEVENT_ItemHighlightedFromCX			MENUEVENT.ItemHighlightedFromCX
  2187                              <2> 
  2188                              <2> 	; Parameters:
  2189                              <2> 	;	CX:			Index of selected item
  2190 00000008 <res 00000002>      <2> 	.ItemSelectedFromCX			resb	2
  2191                              <2> %define MENUEVENT_ItemSelectedFromCX			MENUEVENT.ItemSelectedFromCX
  2192                              <2> 
  2193                              <2> 	; Parameters:
  2194                              <2> 	;	AL:			ASCII character for the key
  2195                              <2> 	;	AH:			Keyboard library scan code for the key
  2196 0000000A <res 00000002>      <2> 	.KeyStrokeInAX				resb	2
  2197                              <2> %define MENUEVENT_KeyStrokeInAX					MENUEVENT.KeyStrokeInAX
  2198                              <2> 
  2199                              <2> 	; Parameters:
  2200                              <2> 	;	CX:			Index of highlighted item
  2201                              <2> 	;	Cursor has been positioned to the beginning of first line
  2202 0000000C <res 00000002>      <2> 	.RefreshTitle				resb	2
  2203 0000000E <res 00000002>      <2> 	.RefreshInformation			resb	2
  2204                              <2> %define MENUEVENT_RefreshTitle					MENUEVENT.RefreshTitle
  2205                              <2> %define MENUEVENT_RefreshInformation			MENUEVENT.RefreshInformation
  2206                              <2> 
  2207                              <2> 	; Parameters:
  2208                              <2> 	;	CX:			Index of item to refresh
  2209                              <2> 	;	Cursor has been positioned to the beginning of item line
  2210 00000010 <res 00000002>      <2> 	.RefreshItemFromCX			resb	2
  2211                              <2> %define MENUEVENT_RefreshItemFromCX				MENUEVENT.RefreshItemFromCX
  2212                              <2> endstruc
  2213                              <2> 
  2214                              <2> %endif ; MENUEVENT_INLINE_OFFSETS
  2215                              <2> 
  2216                              <2> %endif ; MENUEVENTS_INC
  2217                              <1> 	%define INCLUDE_KEYBOARD_LIBRARY
  2218                              <1> 	%define INCLUDE_TIME_LIBRARY
  2219                              <1> %endif
  2220                              <1> 
  2221                              <1> %ifdef INCLUDE_KEYBOARD_LIBRARY
  2222                              <1> 	%define INCLUDE_DISPLAY_LIBRARY
  2223                              <1> 	%define INCLUDE_UTIL_LIBRARY
  2224                              <1> %endif
  2225                              <1> 
  2226                              <1> %ifdef INCLUDE_DISPLAY_LIBRARY
  2227                              <1> 	%include "Display.inc"
  2228                              <2> ; Project name	:	AssemblyLibrary
  2229                              <2> ; Description	:	Defines for display library.
  2230                              <2> %ifndef DISPLAY_INC
  2231                              <2> %define DISPLAY_INC
  2232                              <2> 
  2233                              <2> %ifndef MODULE_STRINGS_COMPRESSED_PRECOMPRESS
  2234                              <2> ;--------------------------------------------------------------------
  2235                              <2> ; Display Library users need to use these macros since it will provide
  2236                              <2> ; compatibility with future library versions.
  2237                              <2> ;
  2238                              <2> ; CALL_DISPLAY_LIBRARY
  2239                              <2> ; JMP_DISPLAY_LIBRARY
  2240                              <2> ;	Parameters:
  2241                              <2> ;		%1:			Function to call (functionName from DISPLAY_LIB)
  2242                              <2> ;		Registers:	Depends on function to call
  2243                              <2> ;	Returns:
  2244                              <2> ;		Depends on function to call
  2245                              <2> ;	Corrupts registers:
  2246                              <2> ;		AX (unless used as a return register), DI
  2247                              <2> ;--------------------------------------------------------------------
  2248                              <2> %macro CALL_DISPLAY_LIBRARY 1
  2249                              <2> 	%ifidn %1, PushDisplayContext
  2250                              <2> 		call	DisplayContext_Push
  2251                              <2> 	%elifidn %1, PopDisplayContext
  2252                              <2> 		call	DisplayContext_Pop
  2253                              <2> 	%elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  2254                              <2> 		call	DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  2255                              <2> 	%else
  2256                              <2> 		mov		di, %1
  2257                              <2> 		call	Display_FunctionFromDI
  2258                              <2> 	%endif
  2259                              <2> %endmacro
  2260                              <2> 
  2261                              <2> %macro JMP_DISPLAY_LIBRARY 1
  2262                              <2> 	%ifidn %1, PushDisplayContext
  2263                              <2> 		jmp		DisplayContext_Push
  2264                              <2> 	%elifidn %1, PopDisplayContext
  2265                              <2> 		call	DisplayContext_Pop
  2266                              <2> 		ret
  2267                              <2> 	%elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  2268                              <2> 		jmp		DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  2269                              <2> 	%elifidn %1, FormatNullTerminatedStringFromCSSI
  2270                              <2> 		mov		di, %1
  2271                              <2> 		call	Display_FunctionFromDI
  2272                              <2> 		ret
  2273                              <2> 	%else
  2274                              <2> 		mov		di, %1
  2275                              <2> 		jmp		Display_FunctionFromDI
  2276                              <2> 	%endif
  2277                              <2> %endmacro
  2278                              <2> 
  2279                              <2> %if 0
  2280                              <2> ;;;
  2281                              <2> ;;; struc no longer needed with direct calls to functions
  2282                              <2> ;;;
  2283                              <2> 
  2284                              <2> ; Display library functions
  2285                              <2> struc DISPLAY_LIB
  2286                              <2> 	.PushDisplayContext:
  2287                              <2> 	.PopDisplayContext:
  2288                              <2> 	.InitializeDisplayContext						resb	2
  2289                              <2> 
  2290                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  2291                              <2> 	.SetCharacterPointerFromBXAX					resb	2
  2292                              <2> %endif
  2293                              <2> 	.SetCharOutputFunctionFromAXwithAttribFlagInBL	resb	2
  2294                              <2> 	.SetCharacterOutputParameterFromAX				resb	2
  2295                              <2> 	.SetCharacterAttributeFromAL					resb	2
  2296                              <2> 	.SetCursorShapeFromAX							resb	2
  2297                              <2> 	.SetCursorCoordinatesFromAX						resb	2
  2298                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
  2299                              <2> 	.SetNewPageFromAL								resb	2
  2300                              <2> %endif
  2301                              <2> 	.SynchronizeDisplayContextToHardware			resb	2
  2302                              <2> 
  2303                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  2304                              <2> 	.GetCharacterPointerToBXAX						resb	2
  2305                              <2> %endif
  2306                              <2> 	.GetSoftwareCoordinatesToAX						resb	2
  2307                              <2> 	.GetColumnsToALandRowsToAH						resb	2
  2308                              <2> 
  2309                              <2> 	.FormatNullTerminatedStringFromCSSI				resb	2
  2310                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  2311                              <2> 	.PrintSignedWordFromAXWithBaseInBX				resb	2
  2312                              <2> %endif
  2313                              <2> 	.PrintWordFromAXwithBaseInBX					resb	2
  2314                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
  2315                              <2> 	.PrintQWordFromSSBPwithBaseInBX					resb	2
  2316                              <2> %endif
  2317                              <2> 	.PrintCharBufferFromBXSIwithLengthInCX			resb	2
  2318                              <2> 	.PrintNullTerminatedStringFromBXSI				resb	2
  2319                              <2> 	.PrintNullTerminatedStringFromCSSI				resb	2
  2320                              <2> 	.PrintRepeatedCharacterFromALwithCountInCX		resb	2
  2321                              <2> 	.PrintCharacterFromAL							resb	2
  2322                              <2> 	.PrintNewlineCharacters							resb	2
  2323                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  2324                              <2> 	.ClearAreaWithHeightInAHandWidthInAL			resb	2
  2325                              <2> %endif
  2326                              <2> 	.ClearScreenWithCharInALandAttrInAH				resb	2
  2327                              <2> endstruc
  2328                              <2> %endif
  2329                              <2> 
  2330                              <2> ; Attribute flags for DISPLAY_LIB.SetCharacterOutputFunctionFromAXwithAttributeFlagInBL
  2331                              <2> ATTRIBUTES_NOT_USED							EQU		0
  2332                              <2> ATTRIBUTES_ARE_USED							EQU		FLG_CONTEXT_ATTRIBUTES
  2333                              <2> 
  2334                              <2> ; Character output functions for DISPLAY_LIB.SetCharacterOutputFunctionFromAXwithAttributeFlagInBL
  2335                              <2> TELETYPE_OUTPUT_WITH_ATTRIBUTE				EQU		DisplayCharOut_TeletypeOutputWithAttribute
  2336                              <2> TELETYPE_OUTPUT_WITHOUT_ATTRIBUTE			EQU		DisplayCharOut_TeletypeOutput
  2337                              <2> TELETYPE_OUTPUT_USING_BIOS					EQU		DisplayCharOut_BiosTeletypeOutput
  2338                              <2> FAST_OUTPUT_WITH_ATTRIBUTE_ONLY				EQU		DisplayCharOut_Attribute
  2339                              <2> FAST_OUTPUT_WITH_CHAR_ONLY					EQU		DisplayCharOut_Character
  2340                              <2> FAST_OUTPUT_WITH_CHAR_AND_ATTRIBUTE			EQU		DisplayCharOut_CharacterWithAttribute
  2341                              <2> BUFFER_OUTPUT_WITH_CHAR_ONLY				EQU		DisplayCharOut_WriteCharacterToBuffer
  2342                              <2> 
  2343                              <2> DEFAULT_CHARACTER_OUTPUT					EQU		TELETYPE_OUTPUT_WITH_ATTRIBUTE
  2344                              <2> 
  2345                              <2> 
  2346                              <2> struc VIDEO_BDA
  2347 00000000 <res 00000449>      <2> 						resb	449h
  2348 00000449 <res 00000001>      <2> 	.bMode				resb	1		; 0:449h, Video, Mode
  2349 0000044A <res 00000002>      <2> 	.wColumns			resb	2		; 0:44Ah, Video, Number of columns
  2350 0000044C <res 00000002>      <2> 	.wBytesPerPage		resb	2		; 0:44Ch, Video, Total number of bytes per page
  2351 0000044E <res 00000002>      <2> 	.wPageOffset		resb	2		; 0:44Eh, Video, Current page offset
  2352 00000450 <res 00000004>      <2> 	.rgwCursors			resb	4		; 0:450h, Video, Cursor position, pages 0...1
  2353 00000454 <res 0000000C>      <2> 	.displayContext		resb	12		; Our own display context (normally cursors for pages 2...7)
  2354 00000460 <res 00000002>      <2> 	.wCursorShape		resb	2		; 0:460h, Video, Cursor shape
  2355 00000462 <res 00000001>      <2> 	.bActivePage		resb	1		; 0:462h, Video, Active display page
  2356 00000463 <res 00000002>      <2> 	.wVideoPort			resb	2		; 0:463h, Video, I/O Port number base
  2357 00000465 <res 00000001>      <2> 	.bInternalModeReg	resb	1		; 0:465h, Video, Internal mode register
  2358 00000466 <res 00000001>      <2> 	.bColorPalette		resb	1		; 0:466h, Video, Color palette
  2359                              <2> endstruc
  2360                              <2> 
  2361                              <2> struc DISPLAY_CONTEXT
  2362 00000000 <res 00000004>      <2> 	.fpCursorPosition	resb	4	; Far pointer to cursor position in video memory
  2363 00000004 <res 00000002>      <2> 	.fnCharOut			resb	2	; Function to draw character with
  2364 00000006 <res 00000002>      <2> 	.wCharOutParam		resb	2	; User parameter for custom character output function
  2365 00000008 <res 00000002>      <2> 	.wCursorShape		resb	2	; Current cursor shape
  2366 0000000A <res 00000001>      <2> 	.bAttribute			resb	1	; Selected character attribute
  2367 0000000B <res 00000001>      <2> 	.bFlags				resb	1	; Display context flags
  2368                              <2> endstruc
  2369                              <2> 
  2370                              <2> ; Display context flags
  2371                              <2> FLG_CONTEXT_ATTRIBUTES		EQU		(1<<0)	; Character output function uses attributes
  2372                              <2> FLG_CONTEXT_CGA				EQU		(1<<1)	; CGA detected so prevent CGA snow
  2373                              <2> 
  2374                              <2> 
  2375                              <2> ; Text mode character attribute byte bits for CGA+ (color adapters)
  2376                              <2> FLG_COLOR_FORE_BLUE			EQU		(1<<0)
  2377                              <2> FLG_COLOR_FORE_GREEN		EQU		(1<<1)
  2378                              <2> FLG_COLOR_FORE_RED			EQU		(1<<2)
  2379                              <2> FLG_COLOR_FORE_INTENSITY	EQU		(1<<3)
  2380                              <2> FLG_COLOR_FORE_FONT_B		EQU		(1<<3)	; Select font set B (if available, EGA+)
  2381                              <2> FLG_COLOR_BACK_BLUE			EQU		(1<<4)
  2382                              <2> FLG_COLOR_BACK_GREEN		EQU		(1<<5)
  2383                              <2> FLG_COLOR_BACK_RED			EQU		(1<<6)
  2384                              <2> FLG_COLOR_BACK_INTENSITY	EQU		(1<<7)	; Intensity when blinking is disabled
  2385                              <2> FLG_COLOR_BLINK				EQU		(1<<7)	; Blinking color when enabled (enabled by default)
  2386                              <2> 
  2387                              <2> ; CGA colors
  2388                              <2> %define COLOR_ATTRIBUTE(foreground, background)	( (foreground) | ((background)<<4) )
  2389                              <2> COLOR_BLACK					EQU		0
  2390                              <2> COLOR_BLUE					EQU		1
  2391                              <2> COLOR_GREEN					EQU		2
  2392                              <2> COLOR_CYAN					EQU		3
  2393                              <2> COLOR_RED					EQU		4
  2394                              <2> COLOR_MAGENTA				EQU		5
  2395                              <2> COLOR_BROWN					EQU		6
  2396                              <2> COLOR_WHITE					EQU		7		; Last background color if blinking enabled
  2397                              <2> COLOR_GRAY					EQU		8
  2398                              <2> COLOR_LIGHT_BLUE			EQU		9
  2399                              <2> COLOR_LIGHT_GREEN			EQU		10
  2400                              <2> COLOR_LIGHT_CYAN			EQU		11
  2401                              <2> COLOR_LIGHT_RED				EQU		12
  2402                              <2> COLOR_LIGHT_MAGENTA			EQU		13
  2403                              <2> COLOR_YELLOW				EQU		14
  2404                              <2> COLOR_BRIGHT_WHITE			EQU		15
  2405                              <2> 
  2406                              <2> 
  2407                              <2> ; Text mode character attribute byte bits for MDA (monochrome adapters)
  2408                              <2> ; (attributes 00h, 08h, 80h, 88h, 70h, 78h, F0h and F8h are exceptions)
  2409                              <2> FLG_MONO_UNDERLINE			EQU		(1<<1)
  2410                              <2> FLG_MONO_INTENSITY			EQU		(1<<3)
  2411                              <2> FLG_MONO_BLINK				EQU		(1<<7)
  2412                              <2> 
  2413                              <2> ; Text mode character attribute bytes for MDA/Hercules (monochrome adapters)
  2414                              <2> ; *Not displayed on some monitors
  2415                              <2> MONO_HIDDEN					EQU		00h		; Not displayed (same for 08h, 80h and 88h)
  2416                              <2> MONO_UNDERLINE				EQU		01h		; Underlined
  2417                              <2> MONO_NORMAL					EQU		07h		; Normal (white on black)
  2418                              <2> MONO_BRIGHT_UNDERLINE		EQU		09h		; High intensity, underlined
  2419                              <2> MONO_BRIGHT					EQU		0Fh		; High intensity
  2420                              <2> MONO_REVERSE				EQU		70h		; Reverse video (black on white)
  2421                              <2> MONO_REVERSE_DARK			EQU		78h		; (dark green on green)
  2422                              <2> MONO_BLINK					EQU		87h		; Blinking white on black*
  2423                              <2> MONO_BRIGHT_BLINK			EQU		8Fh		; Blinking high intensity*
  2424                              <2> MONO_REVERSE_BLINK			EQU		0F0h	; Blinking reverse video
  2425                              <2> MONO_REVERSE_DARK_BLINK		EQU		0F8h	; (blinking dark green on green)
  2426                              <2> 
  2427                              <2> 
  2428                              <2> ; Cursor position macro for DX register
  2429                              <2> %define CURSOR_XY(x, y)	( (x) | ((y)<<8) )
  2430                              <2> 
  2431                              <2> ; Cursor shapes
  2432                              <2> CURSOR_NORMAL_COLOR			EQU		0607h		; Two line cursor near or at the bottom of cell (not valid for IBM MDA)
  2433                              <2> CURSOR_NORMAL_MDA			EQU		0B0Ch		; Scanlines 11 and 12
  2434                              <2> CURSOR_HIDDEN				EQU		2000h
  2435                              <2> 
  2436                              <2> 
  2437                              <2> ; Display modes
  2438                              <2> CGA_TEXT_MODE_BW40			EQU		0		; Applications should use...
  2439                              <2> CGA_TEXT_MODE_CO40			EQU		1
  2440                              <2> CGA_TEXT_MODE_BW80			EQU		2		; ..black, white and bright white attributes only
  2441                              <2> CGA_TEXT_MODE_CO80			EQU		3
  2442                              <2> MDA_TEXT_MODE				EQU		7		; Real monochrome attributes available
  2443                              <2> 
  2444                              <2> 
  2445                              <2> ; Display segments
  2446                              <2> COLOR_TEXT_SEGMENT			EQU		0B800h	; Text modes 0...3 (CGA+)
  2447                              <2> MONO_TEXT_SEGMENT			EQU		0B000h	; Text mode 7 (MDA, Hercules)
  2448                              <2> 
  2449                              <2> OFFSET_TO_CGA_STATUS_REGISTER	EQU		6	; Base port 3D4h + 6 = 3DAh
  2450                              <2> CGA_STATUS_REGISTER				EQU		3DAh
  2451                              <2> 
  2452                              <2> %endif ; MODULE_STRINGS_COMPRESS_PRECOMPRESS
  2453                              <2> 
  2454                              <2> ; Control characters for teletype output
  2455                              <2> NULL						EQU		00h
  2456                              <2> SOH							EQU		01h		; Start of heading
  2457                              <2> STX							EQU		02h		; Start of text
  2458                              <2> BELL						EQU		07h		; Bell
  2459                              <2> BS							EQU		08h		; Backspace
  2460                              <2> TAB							EQU		09h		; Horizontal TAB
  2461                              <2> LF							EQU		0Ah		; Line feed (newline)
  2462                              <2> CR							EQU		0Dh		; Carriage return
  2463                              <2> ESC							EQU		1Bh		; Escape
  2464                              <2> 
  2465                              <2> ; Non ASCII characters (code page 437)
  2466                              <2> BETA										EQU		225
  2467                              <2> QUOTATION_MARK								EQU		34
  2468                              <2> DOUBLE_TOP_RIGHT_CORNER						EQU		187
  2469                              <2> DOUBLE_TOP_LEFT_CORNER						EQU		201
  2470                              <2> DOUBLE_BOTTOM_RIGHT_CORNER					EQU		188
  2471                              <2> DOUBLE_BOTTOM_LEFT_CORNER					EQU		200
  2472                              <2> DOUBLE_VERTICAL								EQU		186
  2473                              <2> DOUBLE_HORIZONTAL							EQU		205
  2474                              <2> DOUBLE_VERTICAL_TO_RIGHT_SINGLE				EQU		199
  2475                              <2> DOUBLE_VERTICAL_TO_LEFT_SINGLE				EQU		182
  2476                              <2> DOUBLE_LEFT_HORIZONTAL_TO_SINGLE_VERTICAL	EQU		181
  2477                              <2> DOUBLE_RIGHT_HORIZONTAL_TO_SINGLE_VERTICAL	EQU		198
  2478                              <2> SINGLE_VERTICAL								EQU		179
  2479                              <2> SINGLE_HORIZONTAL							EQU		196
  2480                              <2> SINGLE_LEFT_HORIZONTAL_TO_VERTICAL			EQU		180
  2481                              <2> SINGLE_RIGHT_HORIZONTAL_TO_VERTICAL			EQU		195
  2482                              <2> ANGLE_QUOTE_LEFT							EQU		174
  2483                              <2> ANGLE_QUOTE_RIGHT							EQU		175
  2484                              <2> BLOCK_MOSTLY_BACKGROUND						EQU		176
  2485                              <2> BLOCK_EVEN_BACKGROUND_AND_FOREGROUND		EQU		177
  2486                              <2> BLOCK_MOSTLY_FOREGROUND						EQU		178
  2487                              <2> BLOCK_FULL_FOREGROUND						EQU		219
  2488                              <2> ONE_HALF									EQU		171
  2489                              <2> ONE_QUARTER									EQU		172
  2490                              <2> 
  2491                              <2> 
  2492                              <2> ; Background character for clearing screen
  2493                              <2> %ifndef SCREEN_BACKGROUND_CHARACTER
  2494                              <2> 	%define	SCREEN_BACKGROUND_CHARACTER		BLOCK_MOSTLY_BACKGROUND
  2495                              <2> %endif
  2496                              <2> %ifndef SCREEN_BACKGROUND_ATTRIBUTE
  2497                              <2> 	%define	SCREEN_BACKGROUND_ATTRIBUTE		MONO_NORMAL
  2498                              <2> %endif
  2499                              <2> %define SCREEN_BACKGROUND_CHARACTER_AND_ATTRIBUTE	(SCREEN_BACKGROUND_CHARACTER | (SCREEN_BACKGROUND_ATTRIBUTE<<8))
  2500                              <2> %define DOS_BACKGROUND_CHARACTER_AND_ATTRIBUTE		(' ' | (MONO_NORMAL<<8))
  2501                              <2> 
  2502                              <2> %endif ; DISPLAY_INC
  2503                              <1> 	%define INCLUDE_STRING_LIBRARY
  2504                              <1> %endif
  2505                              <1> 
  2506                              <1> %ifdef INCLUDE_STRING_LIBRARY
  2507                              <1> 	%define INCLUDE_UTIL_LIBRARY
  2508                              <1> %endif
  2509                              <1> 
  2510                              <1> %ifdef INCLUDE_FILE_LIBRARY
  2511                              <1> 	%define INCLUDE_UTIL_LIBRARY
  2512                              <1> %endif
  2513                              <1> 
  2514                              <1> 
  2515                              <1> %endif ; ASSEMBLY_LIBRARY_INC
  2516                                  %include "RomVars.inc"			; XTIDE Universal BIOS variables
  2517                              <1> ; Project name	:	XTIDE Universal BIOS
  2518                              <1> ; Description	:	Defines for ROMVARS struct containing variables stored
  2519                              <1> ;			in BIOS ROM.
  2520                              <1> 
  2521                              <1> ;
  2522                              <1> ; XTIDE Universal BIOS and Associated Tools
  2523                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  2524                              <1> ;
  2525                              <1> ; This program is free software; you can redistribute it and/or modify
  2526                              <1> ; it under the terms of the GNU General Public License as published by
  2527                              <1> ; the Free Software Foundation; either version 2 of the License, or
  2528                              <1> ; (at your option) any later version.
  2529                              <1> ;
  2530                              <1> ; This program is distributed in the hope that it will be useful,
  2531                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  2532                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  2533                              <1> ; GNU General Public License for more details.
  2534                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  2535                              <1> ;
  2536                              <1> 
  2537                              <1> ; Modified by JJP for XT-CFv3 support, Mar-13
  2538                              <1> 
  2539                              <1> 
  2540                              <1> %ifndef ROMVARS_INC
  2541                              <1> %define ROMVARS_INC
  2542                              <1> 
  2543                              <1> ; ROM Variables. Written to the ROM image before flashing.
  2544                              <1> struc ROMVARS
  2545 00000000 <res 00000002>      <1> 	.wRomSign			resb	2	; ROM Signature (AA55h)
  2546 00000002 <res 00000001>      <1> 	.bRomSize			resb	1	; ROM size in 512 byte blocks
  2547 00000003 <res 00000003>      <1> 	.rgbJump			resb	3	; First instruction to ROM init (jmp)
  2548                              <1> 
  2549 00000006 <res 00000008>      <1> 	.rgbSign			resb	8	; Signature for XTIDE Configurator Program
  2550 0000000E <res 0000001F>      <1> 	.szTitle			resb	31	; BIOS title string
  2551 0000002D <res 00000019>      <1> 	.szVersion			resb	25	; BIOS version string
  2552                              <1> 
  2553 00000046 <res 00000002>      <1> 	.wFlags				resb	2	; Word for ROM flags
  2554 00000048 <res 00000002>      <1> 	.wDisplayMode			resb	2	; Display mode for boot menu
  2555 0000004A <res 00000002>      <1> 	.wBootTimeout			resb	2	; Boot Menu selection timeout in system timer ticks
  2556 0000004C <res 00000001>      <1> 	.bIdeCnt			resb	1	; Number of available IDE controllers
  2557 0000004D <res 00000001>      <1> 	.bBootDrv			resb	1	; Default drive to boot from
  2558 0000004E <res 00000001>      <1> 	.bMinFddCnt			resb	1	; Minimum number of Floppy Drives
  2559 0000004F <res 00000001>      <1> 	.bStealSize			resb	1	; Number of 1kB blocks stolen from 640kB base RAM
  2560 00000050 <res 00000001>      <1> 	.bIdleTimeout			resb	1	; Standby timer value
  2561                              <1> 
  2562                              <1> 	.ideVarsBegin:
  2563 00000051 <res 00000012>      <1> 	.ideVars0			resb	IDEVARS_size
  2564 00000063 <res 00000012>      <1> 	.ideVars1			resb	IDEVARS_size
  2565 00000075 <res 00000012>      <1> 	.ideVars2			resb	IDEVARS_size
  2566 00000087 <res 00000012>      <1> 	.ideVars3			resb	IDEVARS_size
  2567                              <1> 
  2568                              <1> %ifdef MODULE_SERIAL
  2569                              <1> 	.ideVarsSerialAuto		resb	IDEVARS_size
  2570                              <1> %endif
  2571                              <1> 
  2572                              <1> 	.ideVarsEnd:
  2573                              <1> endstruc
  2574                              <1> 
  2575                              <1> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  2576                              <1> 	%if ROMVARS.ideVarsEnd & 0xff00 <> 0
  2577                              <1> 		%error ".ideVars structures must fit within the first 256 bytes of the ROM image"
  2578                              <1> 	%endif
  2579                              <1> 	%if (ROMVARS.ideVarsEnd - ROMVARS.ideVarsBegin) = 0
  2580                              <1> 		%error "there must be at least one .ideVars structure, it would be bizarre if this were not true, but it is assumed in the ah0h reset code."
  2581                              <1> 	%endif
  2582                              <1> %endif
  2583                              <1> 
  2584                              <1> NUMBER_OF_IDEVARS					EQU	((ROMVARS.ideVarsEnd - ROMVARS.ideVarsBegin) / IDEVARS_size)
  2585                              <1> 
  2586                              <1> ; Bit defines for ROMVARS.wFlags
  2587                              <1> FLG_ROMVARS_FULLMODE					EQU	(1<<0)	; Full operating mode (steals base RAM, supports EBIOS etc.)
  2588                              <1> FLG_ROMVARS_SERIAL_SCANDETECT 				EQU	(1<<3)	; Scan COM ports at the end of drive detection.  Can also be invoked
  2589                              <1> 									; by holding down the ALT key at the end of drive detection.
  2590                              <1> 									; (Conveniently, this is 8, a fact we exploit when testing the bit)
  2591                              <1> 
  2592                              <1> ; Here in case the configuration needs to know functionality is present
  2593                              <1> FLG_ROMVARS_MODULE_FEATURE_SETS				EQU	(1<<5)
  2594                              <1> FLG_ROMVARS_MODULE_8BIT_IDE				EQU	(1<<6)
  2595                              <1> FLG_ROMVARS_MODULE_8BIT_IDE_ADVANCED			EQU	(1<<7)
  2596                              <1> FLG_ROMVARS_MODULE_ADVANCED_ATA				EQU	(1<<8)
  2597                              <1> FLG_ROMVARS_MODULE_BOOT_MENU				EQU	(1<<9)
  2598                              <1> FLG_ROMVARS_MODULE_EBIOS				EQU	(1<<10)
  2599                              <1> FLG_ROMVARS_MODULE_HOTKEYS				EQU	(1<<11)
  2600                              <1> FLG_ROMVARS_MODULE_IRQ					EQU	(1<<12)
  2601                              <1> FLG_ROMVARS_MODULE_SERIAL				EQU	(1<<13)
  2602                              <1> FLG_ROMVARS_MODULE_SERIAL_FLOPPY			EQU	(1<<14)
  2603                              <1> FLG_ROMVARS_MODULE_STRINGS_COMPRESSED			EQU	(1<<15)
  2604                              <1> 
  2605                              <1> 
  2606                              <1> ; Boot Menu Display Modes (see Assembly Library Display.inc for standard modes)
  2607                              <1> DEFAULT_TEXT_MODE					EQU	4
  2608                              <1> 
  2609                              <1> 
  2610                              <1> ; Controller specific variables
  2611                              <1> struc IDEVARS
  2612                              <1> ;;; Word 0
  2613                              <1> 	.wSerialPortAndBaud:						; Serial connection port (low, divided by 4) and baud rate divisor (high)
  2614                              <1> 	.wBasePort:							; IDE Base Port for Command Block (usual) Registers
  2615 00000000 <res 00000001>      <1> 	.bSerialPort					resb	1
  2616 00000001 <res 00000001>      <1> 	.bSerialBaud					resb	1
  2617                              <1> 
  2618                              <1> ;;; Word 1
  2619                              <1> 	.wControlBlockPort:
  2620                              <1> 	.bXTCFcontrolRegister:						; XT-CFv3 port used to initiate a DMA transfer
  2621 00000002 <res 00000001>      <1> 	.bSerialUnused					resb	1	; IDE Base Port for Control Block Registers
  2622                              <1> 
  2623                              <1> 	.wSerialCOMPortCharAndDevice:					; In DetectPrint, we grab the COM Port char and Device at the same time
  2624 00000003 <res 00000001>      <1> 	.bSerialCOMPortChar				resb	1	; Serial connection COM port number/letter
  2625                              <1> 
  2626                              <1> ;;; Word 2
  2627 00000004 <res 00000001>      <1> 	.bDevice					resb	1	; Device type
  2628 00000005 <res 00000001>      <1> 	.bIRQ						resb	1	; Interrupt Request Number
  2629                              <1> 
  2630                              <1> ;;; And more...
  2631 00000006 <res 00000006>      <1> 	.drvParamsMaster				resb	DRVPARAMS_size
  2632 0000000C <res 00000006>      <1> 	.drvParamsSlave					resb	DRVPARAMS_size
  2633                              <1> endstruc
  2634                              <1> 
  2635                              <1> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  2636                              <1> 	%if IDEVARS.bSerialCOMPortChar+1 != IDEVARS.bDevice
  2637                              <1> 		%error "IDEVARS.bSerialCOMPortChar needs to come immediately before IDEVARS.bDevice so that both bytes can be fetched at the same time inside DetectPrint.asm"
  2638                              <1> 	%endif
  2639                              <1> %endif
  2640                              <1> 
  2641                              <1> STANDARD_CONTROL_BLOCK_OFFSET				EQU		200h
  2642                              <1> XTIDE_CONTROL_BLOCK_OFFSET				EQU		8h	; for XTIDE, A3 is used to control selected register (CS0 vs CS1)
  2643                              <1> XTCF_CONTROL_BLOCK_OFFSET				EQU		10h	; and for XT-CF (all varients), it's A4
  2644                              <1> 
  2645                              <1> ; Default values for Port and PortCtrl, shared with the configurator
  2646                              <1> ;
  2647                              <1> DEVICE_XTIDE_DEFAULT_PORT				EQU		300h	; Also the default port for XT-CF
  2648                              <1> DEVICE_XTIDE_DEFAULT_PORTCTRL				EQU		(DEVICE_XTIDE_DEFAULT_PORT + XTIDE_CONTROL_BLOCK_OFFSET)
  2649                              <1> DEVICE_XTCF_DEFAULT_PORTCTRL				EQU		(DEVICE_XTIDE_DEFAULT_PORT + XTCF_CONTROL_BLOCK_OFFSET)
  2650                              <1> 
  2651                              <1> DEVICE_ATA_PRIMARY_PORT					EQU		1F0h
  2652                              <1> DEVICE_ATA_PRIMARY_PORTCTRL				EQU		(DEVICE_ATA_PRIMARY_PORT + STANDARD_CONTROL_BLOCK_OFFSET)
  2653                              <1> 
  2654                              <1> DEVICE_ATA_SECONDARY_PORT				EQU		170h
  2655                              <1> DEVICE_ATA_SECONDARY_PORTCTRL				EQU		(DEVICE_ATA_SECONDARY_PORT + STANDARD_CONTROL_BLOCK_OFFSET)
  2656                              <1> 
  2657                              <1> DEVICE_ATA_TERTIARY_PORT				EQU		1E8h
  2658                              <1> DEVICE_ATA_TERTIARY_PORTCTRL				EQU		(DEVICE_ATA_TERTIARY_PORT + STANDARD_CONTROL_BLOCK_OFFSET)
  2659                              <1> 
  2660                              <1> DEVICE_ATA_QUATERNARY_PORT				EQU		168h
  2661                              <1> DEVICE_ATA_QUATERNARY_PORTCTRL				EQU		(DEVICE_ATA_QUATERNARY_PORT + STANDARD_CONTROL_BLOCK_OFFSET)
  2662                              <1> 
  2663                              <1> 
  2664                              <1> ; Device types for IDEVARS.bDevice
  2665                              <1> ; IDE Devices are grouped so device numbers cannot be changed without modifying code elsewhere!
  2666                              <1> ;
  2667                              <1> COUNT_OF_STANDARD_IDE_DEVICES				EQU	2	; 16- and 32-bit controllers
  2668                              <1> COUNT_OF_8BIT_IDE_DEVICES				EQU	7
  2669                              <1> COUNT_OF_ALL_IDE_DEVICES				EQU	(COUNT_OF_8BIT_IDE_DEVICES + COUNT_OF_STANDARD_IDE_DEVICES)
  2670                              <1> ; Standard port mapped I/O
  2671                              <1> DEVICE_16BIT_ATA					EQU	(0<<1)
  2672                              <1> DEVICE_32BIT_ATA					EQU	(1<<1)
  2673                              <1> DEVICE_8BIT_ATA						EQU	((COUNT_OF_STANDARD_IDE_DEVICES+0)<<1)	; 16- or 32-bit controller in 8-bit mode
  2674                              <1> DEVICE_8BIT_XTIDE_REV1					EQU	((COUNT_OF_STANDARD_IDE_DEVICES+1)<<1)
  2675                              <1> ; Address lines A0 and A3 are swapped
  2676                              <1> DEVICE_8BIT_XTIDE_REV2					EQU	((COUNT_OF_STANDARD_IDE_DEVICES+2)<<1)	; Or rev 1 with swapped A0 and A3
  2677                              <1> ; IDE Register offsets are SHL 1
  2678                              <1> ; Note: ordering swapped to support XT-CFv3 and all other XT-CF derivatives
  2679                              <1> DEVICE_8BIT_XTCF_PIO8					EQU	((COUNT_OF_STANDARD_IDE_DEVICES+3)<<1)	; XT-CF using 8-bit PIO mode
  2680                              <1> DEVICE_8BIT_XTCF_PIO8_WITH_BIU_OFFLOAD			EQU	((COUNT_OF_STANDARD_IDE_DEVICES+4)<<1)	; XT-CF using 8-bit PIO mode, but with 16-bit instructions
  2681                              <1> DEVICE_8BIT_XTCF_DMA					EQU	((COUNT_OF_STANDARD_IDE_DEVICES+5)<<1)	; XT-CFv3 using DMA
  2682                              <1> ; Memory Mapped I/O
  2683                              <1> DEVICE_8BIT_JRIDE_ISA					EQU	((COUNT_OF_STANDARD_IDE_DEVICES+6)<<1)	; JR-IDE/ISA (Memory Mapped I/O)
  2684                              <1> ; Virtual devices
  2685                              <1> DEVICE_SERIAL_PORT					EQU	(COUNT_OF_ALL_IDE_DEVICES<<1)
  2686                              <1> 
  2687                              <1> 
  2688                              <1> 
  2689                              <1> ; Master/Slave drive specific parameters
  2690                              <1> struc DRVPARAMS
  2691 00000000 <res 00000002>      <1> 	.wFlags						resb	2	; Drive flags
  2692                              <1> 	.dwMaximumLBA:							; User specified maximum number of sectors
  2693 00000002 <res 00000002>      <1> 	.wCylinders					resb	2	; User specified cylinders (1...16383)
  2694                              <1> 	.wHeadsAndSectors:
  2695 00000004 <res 00000001>      <1> 	.bHeads						resb	1	; User specified Heads (1...16)
  2696 00000005 <res 00000001>      <1> 	.bSect						resb	1	; User specified Sectors per track (1...63)
  2697                              <1> endstruc
  2698                              <1> 
  2699                              <1> ; Bit defines for DRVPARAMS.wFlags
  2700                              <1> 	MASK_DRVPARAMS_WRITECACHE			EQU	(3<<0)	; Bits 0...1, Drive internal write cache settings (must start at bit 0)
  2701                              <1> 	DEFAULT_WRITE_CACHE				EQU	0	; Must be 0
  2702                              <1> 	DISABLE_WRITE_CACHE				EQU	1
  2703                              <1> 	ENABLE_WRITE_CACHE				EQU	2
  2704                              <1> 	MASK_DRVPARAMS_TRANSLATEMODE			EQU	(3<<TRANSLATEMODE_FIELD_POSITION)	; Bits 2...3, Position shared with DPT
  2705                              <1> 	TRANSLATEMODE_FIELD_POSITION			EQU	2
  2706                              <1> 	TRANSLATEMODE_NORMAL				EQU	0
  2707                              <1> 	TRANSLATEMODE_LARGE				EQU	1
  2708                              <1> 	TRANSLATEMODE_ASSISTED_LBA			EQU	2	; 28-bit or 48-bit LBA
  2709                              <1> 	TRANSLATEMODE_AUTO				EQU	3	; Only available in ROMVARS, not in DPTs
  2710                              <1> 	FLG_DRVPARAMS_BLOCKMODE				EQU	(1<<4)	; Enable Block mode transfers
  2711                              <1> 	FLG_DRVPARAMS_USERCHS				EQU	(1<<5)	; User specified P-CHS values
  2712                              <1> 	MAX_USER_CYLINDERS				EQU	16383
  2713                              <1> 	MAX_USER_HEADS					EQU	16
  2714                              <1> 	MAX_USER_SECTORS_PER_TRACK			EQU	63
  2715                              <1> 	FLG_DRVPARAMS_USERLBA				EQU	(1<<6)	; User specified LBA value
  2716                              <1> 	MIN_USER_LBA_COUNT				EQU	((MAX_USER_CYLINDERS*MAX_USER_HEADS*MAX_USER_SECTORS_PER_TRACK)+1)
  2717                              <1> 	MAX_USER_LBA_COUNT				EQU	((2^28)-1)
  2718                              <1> 
  2719                              <1> 
  2720                              <1> %endif ; ROMVARS_INC
  2721                                  %include "IdeRegisters.inc"		; Needed for port and device autodetection
  2722                              <1> ; Project name	:	XTIDE Universal BIOS
  2723                              <1> ; Description	:	Equates for IDE registers, flags and commands.
  2724                              <1> 
  2725                              <1> ;
  2726                              <1> ; XTIDE Universal BIOS and Associated Tools
  2727                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  2728                              <1> ;
  2729                              <1> ; This program is free software; you can redistribute it and/or modify
  2730                              <1> ; it under the terms of the GNU General Public License as published by
  2731                              <1> ; the Free Software Foundation; either version 2 of the License, or
  2732                              <1> ; (at your option) any later version.
  2733                              <1> ;
  2734                              <1> ; This program is distributed in the hope that it will be useful,
  2735                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  2736                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  2737                              <1> ; GNU General Public License for more details.
  2738                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  2739                              <1> ;
  2740                              <1> 
  2741                              <1> %ifndef IDEREGISTERS_INC
  2742                              <1> %define IDEREGISTERS_INC
  2743                              <1> 
  2744                              <1> ; IDE Register offsets from Command Block base port
  2745                              <1> DATA_REGISTER					EQU		0
  2746                              <1> ERROR_REGISTER_in				EQU		1		; Read only
  2747                              <1> FEATURES_REGISTER_out			EQU		1		; Write only, ATA1+
  2748                              <1> ;WRITE_PRECOMPENSATION_out		EQU		1		; Write only, Obsolete on ATA1+
  2749                              <1> SECTOR_COUNT_REGISTER			EQU		2
  2750                              <1> SECTOR_NUMBER_REGISTER			EQU		3		; LBA Low Register
  2751                              <1> LOW_CYLINDER_REGISTER			EQU		4		; LBA Middle Register
  2752                              <1> HIGH_CYLINDER_REGISTER			EQU		5		; LBA High Register
  2753                              <1> LBA_LOW_REGISTER				EQU		3		; LBA 7...0, LBA48 31...24
  2754                              <1> LBA_MIDDLE_REGISTER				EQU		4		; LBA 15...8, LBA48 39...32
  2755                              <1> LBA_HIGH_REGISTER				EQU		5		; LBA 23...16, LBA48 47...40
  2756                              <1> DRIVE_AND_HEAD_SELECT_REGISTER	EQU		6		; LBA28 27...24
  2757                              <1> STATUS_REGISTER_in				EQU		7		; Read only
  2758                              <1> COMMAND_REGISTER_out			EQU		7		; Write only
  2759                              <1> ;XTIDE_DATA_HIGH_REGISTER		EQU		8		; Non-standard (actually first Control Block reg)
  2760                              <1> 
  2761                              <1> ; IDE Register offsets from Control Block base port
  2762                              <1> ; (usually Command Block base port + 200h)
  2763                              <1> ALTERNATE_STATUS_REGISTER_in	EQU		6		; Read only
  2764                              <1> DEVICE_CONTROL_REGISTER_out		EQU		6		; Write only
  2765                              <1> ;DRIVE_ADDRESS_REGISTER			EQU		7		; Obsolete on ATA2+
  2766                              <1> 
  2767                              <1> ; Bit mask for XTIDE mod with reversed A0 and A3 address lines
  2768                              <1> MASK_A3_AND_A0_ADDRESS_LINES	EQU		((1<<3) | (1<<0))
  2769                              <1> 
  2770                              <1> ; Bit definitions for IDE Error Register
  2771                              <1> FLG_ERROR_BBK			EQU		(1<<7)	; Bad Block Detected (reserved on ATA2+, command dependent on ATA4+)
  2772                              <1> FLG_ERROR_UNC			EQU		(1<<6)	; Uncorrectable Data Error (command dependent on ATA4+)
  2773                              <1> FLG_ERROR_MC			EQU		(1<<5)	; Media Changed (command dependent on ATA4+)
  2774                              <1> FLG_ERROR_IDNF			EQU		(1<<4)	; ID Not Found (command dependent on ATA4+)
  2775                              <1> FLG_ERROR_MCR			EQU		(1<<3)	; Media Change Request (command dependent on ATA4+)
  2776                              <1> FLG_ERROR_ABRT			EQU		(1<<2)	; Command Aborted
  2777                              <1> FLG_ERROR_TK0NF			EQU		(1<<1)	; Track 0 Not Found (command dependent on ATA4+)
  2778                              <1> FLG_ERROR_AMNF			EQU		(1<<0)	; Address Mark Not Found (command dependent on ATA4+)
  2779                              <1> 
  2780                              <1> ; Bit definitions for IDE Drive and Head Select Register
  2781                              <1> FLG_DRVNHEAD_LBA		EQU		(1<<6)	; LBA Addressing enabled (instead of CHS)
  2782                              <1> FLG_DRVNHEAD_DRV		EQU		(1<<4)	; Drive Select (0=Master, 1=Slave)
  2783                              <1> MASK_DRVNHEAD_HEAD		EQU		0Fh		; Head select bits (bits 0...3)
  2784                              <1> MASK_DRVNHEAD_SET		EQU		0A0h	; Bits that must be set to 1 on ATA1 (reserved on ATA2+)
  2785                              <1> 
  2786                              <1> ; Bit definitions for IDE Status Register
  2787                              <1> FLG_STATUS_BSY			EQU		(1<<7)	; Busy (other flags undefined when set)
  2788                              <1> FLG_STATUS_DRDY			EQU		(1<<6)	; Device Ready
  2789                              <1> FLG_STATUS_DF			EQU		(1<<5)	; Device Fault (command dependent on ATA4+)
  2790                              <1> FLG_STATUS_DSC			EQU		(1<<4)	; Device Seek Complete (command dependent on ATA4+)
  2791                              <1> FLG_STATUS_DRQ			EQU		(1<<3)	; Data Request
  2792                              <1> FLG_STATUS_CORR			EQU		(1<<2)	; Corrected Data (obsolete on ATA4+)
  2793                              <1> FLG_STATUS_IDX			EQU		(1<<1)	; Index (vendor specific on ATA2+, obsolete on ATA4+)
  2794                              <1> FLG_STATUS_ERR			EQU		(1<<0)	; Error
  2795                              <1> 
  2796                              <1> ; Bit definitions for IDE Device Control Register
  2797                              <1> ; Bit 0 must be zero, unlisted bits are reserved.
  2798                              <1> ;FLG_DEVCONTROL_HOB		EQU		(1<<7)	; High Order Byte (ATA6+)
  2799                              <1> ;FLG_DEVCONTROL_O8H		EQU		(1<<3)	; Drive has more than 8 heads (pre-ATA only, 1 on ATA1, reserved on ATA2+)
  2800                              <1> FLG_DEVCONTROL_SRST		EQU		(1<<2)	; Software Reset
  2801                              <1> FLG_DEVCONTROL_nIEN		EQU		(1<<1)	; Negated Interrupt Enable (IRQ disabled when set)
  2802                              <1> 
  2803                              <1> ; Commands for IDE Controller
  2804                              <1> COMMAND_RECALIBRATE						EQU		10h
  2805                              <1> COMMAND_READ_SECTORS					EQU		20h
  2806                              <1> COMMAND_READ_SECTORS_EXT				EQU		24h		; LBA48
  2807                              <1> COMMAND_WRITE_SECTORS					EQU		30h
  2808                              <1> COMMAND_WRITE_SECTORS_EXT				EQU		34h		; LBA48
  2809                              <1> COMMAND_VERIFY_SECTORS					EQU		40h
  2810                              <1> COMMAND_VERIFY_SECTORS_EXT				EQU		42h		; LBA48
  2811                              <1> COMMAND_SEEK							EQU		70h
  2812                              <1> COMMAND_INITIALIZE_DEVICE_PARAMETERS	EQU		91h
  2813                              <1> COMMAND_SET_MULTIPLE_MODE				EQU		0C6h	; Block mode
  2814                              <1> COMMAND_READ_MULTIPLE					EQU		0C4h	; Block mode
  2815                              <1> COMMAND_READ_MULTIPLE_EXT				EQU		29h		; LBA48, Block mode
  2816                              <1> COMMAND_WRITE_MULTIPLE					EQU		0C5h	; Block mode
  2817                              <1> COMMAND_WRITE_MULTIPLE_EXT				EQU		39h		; LBA48, Block mode
  2818                              <1> COMMAND_IDENTIFY_DEVICE					EQU		0ECh
  2819                              <1> COMMAND_SET_FEATURES					EQU		0EFh
  2820                              <1> COMMAND_IDLE							EQU		0E3h
  2821                              <1> 
  2822                              <1> 
  2823                              <1> ; Subcommands for COMMAND_SET_FEATURES
  2824                              <1> FEATURE_ENABLE_8BIT_PIO_TRANSFER_MODE	EQU		01h		; CFA feature set only
  2825                              <1> FEATURE_ENABLE_WRITE_CACHE				EQU		02h
  2826                              <1> FEATURE_DISABLE_8BIT_PIO_TRANSFER_MODE	EQU		81h		; CFA feature set only
  2827                              <1> FEATURE_DISABLE_WRITE_CACHE				EQU		82h		; Can also be used to flush cache
  2828                              <1> FEATURE_SET_TRANSFER_MODE				EQU		03h		; Transfer mode goes to the Sector Count Register
  2829                              <1> 	PIO_DEFAULT_MODE					EQU		0h
  2830                              <1> 	PIO_DEFAULT_MODE_DISABLE_IORDY		EQU		1h
  2831                              <1> 	PIO_FLOW_CONTROL_MODE_xxx			EQU		(1<<3)	; Bits 2...0 hold the PIO mode
  2832                              <1> 
  2833                              <1> 
  2834                              <1> %endif ; IDEREGISTERS_INC
  2835                                  %include "JRIDE_ISA.inc"		; For JR-IDE/ISA default segment
  2836                              <1> ; Project name	:	XTIDE Universal BIOS
  2837                              <1> ; Description	:	JR-IDE/ISA specifications.
  2838                              <1> 
  2839                              <1> ;
  2840                              <1> ; XTIDE Universal BIOS and Associated Tools
  2841                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  2842                              <1> ;
  2843                              <1> ; This program is free software; you can redistribute it and/or modify
  2844                              <1> ; it under the terms of the GNU General Public License as published by
  2845                              <1> ; the Free Software Foundation; either version 2 of the License, or
  2846                              <1> ; (at your option) any later version.
  2847                              <1> ;
  2848                              <1> ; This program is distributed in the hope that it will be useful,
  2849                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  2850                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  2851                              <1> ; GNU General Public License for more details.
  2852                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  2853                              <1> ;
  2854                              <1> 
  2855                              <1> %ifndef JRIDEISA_INC
  2856                              <1> %define JRIDEISA_INC
  2857                              <1> 
  2858                              <1> JRIDE_DEFAULT_SEGMENT_ADDRESS				EQU	0D800h
  2859                              <1> JRIDE_SECTOR_ACCESS_WINDOW_OFFSET			EQU	3C00h	; 512 byte IDE Sector Access Window
  2860                              <1> JRIDE_COMMAND_BLOCK_REGISTER_WINDOW_OFFSET	EQU	3E00h	; 8 byte CS0 IDE Register Window
  2861                              <1> JRIDE_CONTROL_BLOCK_REGISTER_WINDOW_OFFSET	EQU	3E08h	; 8 byte CS1 IDE Register Window
  2862                              <1> 
  2863                              <1> 
  2864                              <1> %endif ; JRIDEISA_INC
  2865                                  %include "XTCF.inc"			; For XT-CF modes
  2866                              <1> ; Project name	:	XTIDE Universal BIOS
  2867                              <1> ; Description	:	Lo-tech XT-CFv2 board specifications.
  2868                              <1> ;
  2869                              <1> ; More information at http://www.lo-tech.co.uk/XT-CF
  2870                              <1> 
  2871                              <1> ;
  2872                              <1> ; XTIDE Universal BIOS and Associated Tools
  2873                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  2874                              <1> ;
  2875                              <1> ; This program is free software; you can redistribute it and/or modify
  2876                              <1> ; it under the terms of the GNU General Public License as published by
  2877                              <1> ; the Free Software Foundation; either version 2 of the License, or
  2878                              <1> ; (at your option) any later version.
  2879                              <1> ;
  2880                              <1> ; This program is distributed in the hope that it will be useful,
  2881                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  2882                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  2883                              <1> ; GNU General Public License for more details.
  2884                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  2885                              <1> ;
  2886                              <1> 
  2887                              <1> ; Modified by JJP for XT-CFv3 support, Mar-13
  2888                              <1> 
  2889                              <1> 
  2890                              <1> %ifndef XTCF_INC
  2891                              <1> %define XTCF_INC
  2892                              <1> 
  2893                              <1> ; XT-CF requires that block must be less than 128 sectors (64 kiB) for DMA
  2894                              <1> ; transfers.
  2895                              <1> ; 
  2896                              <1> ; Note: XT-CFv3 DMA will not interfere with PC & PC/XT memory refresh,
  2897                              <1> ; since the XT-CFv3 detaches itself from the bus every 16 bytes transferred.
  2898                              <1> ;
  2899                              <1> XTCF_DMA_MODE_MAX_BLOCK_SIZE		EQU		64		; Sectors
  2900                              <1> 
  2901                              <1> ; Possible base addresses. Note that all XT-CF IDE registers are SHL 1 compared
  2902                              <1> ; to standard IDE registers.
  2903                              <1> XTCF_BASE_PORT_DETECTION_SEED		EQU		140h		; Not a valid base address but needed for autodetection
  2904                              <1> XTCF_BASE_PORT_1			EQU		200h
  2905                              <1> XTCF_BASE_PORT_2			EQU		240h
  2906                              <1> XTCF_BASE_PORT_3			EQU		300h		; Default setting
  2907                              <1> XTCF_BASE_PORT_4			EQU		340h
  2908                              <1> 
  2909                              <1> 
  2910                              <1> ; XT-CF Control Register (do not SHL 1 these!)
  2911                              <1> ; Note: XT-CFv3 control register is used *only* to raise DRQ.  The register cannot be read.
  2912                              <1> ;
  2913                              <1> XTCF_CONTROL_REGISTER			EQU		1Fh
  2914                              <1> 
  2915                              <1> ; Transfer Mode Constants
  2916                              <1> ;
  2917                              <1> ; Available transfer modes depend on the controller.  All XT-CF controllers
  2918                              <1> ; support 8-bit PIO, either with 8-bit or 16-bit instructions (i.e., data
  2919                              <1> ; can be fetched from the controller with REP INSW or REP INSB since A0 is
  2920                              <1> ; not decoded).  However, errors in the implementation of the BIU on some
  2921                              <1> ; machines will prevent 16-bit instructions delivering data correctly.
  2922                              <1> ;
  2923                              <1> ; For XT-CFv3 adapter, DMA transfers are also supported via channel 3.
  2924                              <1> ;
  2925                              <1> ; XT-CFv3 cannot be distinguised by software, so user must decide and set
  2926                              <1> ; the mode via a call to Int 13h function 1Eh accordingly (see AH1E_XTCF.asm).
  2927                              <1> ;;
  2928                              <1> XTCF_8BIT_PIO_MODE			EQU		00h
  2929                              <1> XTCF_8BIT_PIO_MODE_WITH_BIU_OFFLOAD	EQU		01h
  2930                              <1> XTCF_DMA_MODE				EQU		02h
  2931                              <1> 
  2932                              <1> ; Subcommands for AH=1Eh, Lo-tech XT-CF features.
  2933                              <1> ; Return values common for all subcommands:
  2934                              <1> ;		AH:		RET_HD_SUCCESS if drive is XT-CF
  2935                              <1> ;				RET_HD_INVALID if drive is not XT-CF
  2936                              <1> ;		CF:		0 if successful, 1 if error
  2937                              <1> 
  2938                              <1> ;--------------------------------------------------------------------
  2939                              <1> ; IS_THIS_DRIVE_XTCF
  2940                              <1> ;	Parameters:
  2941                              <1> ;		DL:		Drive Number
  2942                              <1> ;--------------------------------------------------------------------
  2943                              <1> IS_THIS_DRIVE_XTCF			EQU		0
  2944                              <1> 
  2945                              <1> ;--------------------------------------------------------------------
  2946                              <1> ; GET_XTCF_TRANSFER_MODE
  2947                              <1> ;	Parameters:
  2948                              <1> ;		DL:		Drive Number
  2949                              <1> ;	Returns:
  2950                              <1> ;		DH:		One of the mode values listed above,
  2951                              <1> ;                               i.e. XTCF_8BIT_PIO_MODE
  2952                              <1> ;--------------------------------------------------------------------
  2953                              <1> GET_XTCF_TRANSFER_MODE			EQU		1
  2954                              <1> 
  2955                              <1> ;--------------------------------------------------------------------
  2956                              <1> ; SET_XTCF_TRANSFER_MODE
  2957                              <1> ;	Parameters:
  2958                              <1> ;		DH:		Mode to select,
  2959                              <1> ;                               i.e. XTCF_8BIT_PIO_MODE
  2960                              <1> ;				Note there's no way to know if an
  2961                              <1> ;				XT-CF adapter supports DMA, so the
  2962                              <1> ;				user should enable DMA only if a
  2963                              <1> ;				DMA-enabled XT-CFv3 is fitted.
  2964                              <1> ;		DL:		Drive Number
  2965                              <1> ;--------------------------------------------------------------------
  2966                              <1> SET_XTCF_TRANSFER_MODE			EQU		2
  2967                              <1> 
  2968                              <1> 
  2969                              <1> %endif ; XTCF_INC
  2970                              <1> 
  2971                                  
  2972                                  %include "Version.inc"
  2973                              <1> ; /*
  2974                              <1> ; Project name	:	XTIDE Universal BIOS
  2975                              <1> ; Description	:	Version information.
  2976                              <1> 
  2977                              <1> ;
  2978                              <1> ; XTIDE Universal BIOS and Associated Tools
  2979                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  2980                              <1> ;
  2981                              <1> ; This program is free software; you can redistribute it and/or modify
  2982                              <1> ; it under the terms of the GNU General Public License as published by
  2983                              <1> ; the Free Software Foundation; either version 2 of the License, or
  2984                              <1> ; (at your option) any later version.
  2985                              <1> ;
  2986                              <1> ; This program is distributed in the hope that it will be useful,
  2987                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  2988                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  2989                              <1> ; GNU General Public License for more details.
  2990                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  2991                              <1> ;
  2992                              <1> 
  2993                              <1> ;--------------------------------------------------------------------------------
  2994                              <1> ;
  2995                              <1> ; Assembler Version
  2996                              <1> ;
  2997                              <1> 
  2998                              <1> %ifndef VERSION_INC
  2999                              <1> %define VERSION_INC
  3000                              <1> 
  3001                              <1> 
  3002                              <1> %define TITLE_STRING_START	"-=XTIDE Universal BIOS "
  3003                              <1> %ifdef USE_AT
  3004                              <1> 	%ifdef USE_386
  3005                              <1> 		%define	TITLE_STRING_END	"(386)=-",NULL
  3006                              <1> 	%else
  3007                              <1> 		%define	TITLE_STRING_END	"(AT)=-",NULL
  3008                              <1> 	%endif
  3009                              <1> %elifdef USE_186
  3010                              <1> 	%define	TITLE_STRING_END	"(XT+)=-",NULL
  3011                              <1> %else
  3012                              <1> 	%define	TITLE_STRING_END	"(XT)=-",NULL
  3013                              <1> %endif
  3014                              <1> 
  3015                              <1> %define	TITLE_STRING			TITLE_STRING_START, TITLE_STRING_END
  3016                              <1> %define	ROM_VERSION_STRING		"v2.0.0",BETA,"3+ (",__DATE__,")",NULL
  3017                              <1> %define	FLASH_SIGNATURE			"XTIDE203"	; Do not terminate with NULL
  3018                              <1> 
  3019                              <1> 
  3020                              <1> %endif ; VERSION_INC
  3021                              <1> 
  3022                              <1> %if 0			; equivalent of a NASM comment block
  3023                              <1> ;*/
  3024                              <1> 
  3025                              <1> //--------------------------------------------------------------------------------
  3026                              <1> //
  3027                              <1> // C/C++ Version
  3028                              <1> //
  3029                              <1> 
  3030                              <1> #define BETA " Beta "
  3031                              <1> 
  3032                              <1> #define ROM_VERSION_STRING		"v2.0.0" BETA "3 (" __DATE__ ")"
  3033                              <1> 
  3034                              <1> /*
  3035                              <1> %endif
  3036                              <1> ;*/
  3037                                  %include "MenuCfg.inc"
  3038                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
  3039                              <1> ; Description	:	Menu configuration.
  3040                              <1> 
  3041                              <1> ;
  3042                              <1> ; XTIDE Universal BIOS and Associated Tools
  3043                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3044                              <1> ;
  3045                              <1> ; This program is free software; you can redistribute it and/or modify
  3046                              <1> ; it under the terms of the GNU General Public License as published by
  3047                              <1> ; the Free Software Foundation; either version 2 of the License, or
  3048                              <1> ; (at your option) any later version.
  3049                              <1> ;
  3050                              <1> ; This program is distributed in the hope that it will be useful,
  3051                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3052                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3053                              <1> ; GNU General Public License for more details.
  3054                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3055                              <1> ;
  3056                              <1> 
  3057                              <1> %ifndef MENUCFG_INC
  3058                              <1> %define MENUCFG_INC
  3059                              <1> 
  3060                              <1> TITLE_LINES_IN_MENU			EQU		3
  3061                              <1> INFO_LINES_IN_MENU			EQU		6
  3062                              <1> MENU_WIDTH					EQU		40
  3063                              <1> MAX_VALUE_STRING_LENGTH		EQU		12
  3064                              <1> 
  3065                              <1> 
  3066                              <1> KEY_BACK_TO_PREVIOUS_MENU	EQU		ESC
  3067                              <1> KEY_DISPLAY_ITEM_HELP		EQU		3Bh		; F1
  3068                              <1> 
  3069                              <1> 
  3070                              <1> %endif ; MENUCFG_INC
  3071                                  %include "MenuStructs.inc"
  3072                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
  3073                              <1> ; Description	:	Menu page and item structs.
  3074                              <1> 
  3075                              <1> ;
  3076                              <1> ; XTIDE Universal BIOS and Associated Tools
  3077                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3078                              <1> ;
  3079                              <1> ; This program is free software; you can redistribute it and/or modify
  3080                              <1> ; it under the terms of the GNU General Public License as published by
  3081                              <1> ; the Free Software Foundation; either version 2 of the License, or
  3082                              <1> ; (at your option) any later version.
  3083                              <1> ;
  3084                              <1> ; This program is distributed in the hope that it will be useful,
  3085                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3086                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3087                              <1> ; GNU General Public License for more details.
  3088                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3089                              <1> ;
  3090                              <1> 
  3091                              <1> %ifndef MENU_STRUCTS_INC
  3092                              <1> %define MENU_STRUCTS_INC
  3093                              <1> 
  3094                              <1> struc MENUPAGE
  3095 00000000 <res 00000002>      <1> 	.fnEnter			resb	2	; Function to initialize MENUPAGE
  3096 00000002 <res 00000002>      <1> 	.fnBack				resb	2	; Function to initialize previous MENUPAGE
  3097 00000004 <res 00000002>      <1> 	.wMenuitems			resb	2	; Number of MENUITEM structs
  3098                              <1> 	.rgMenuitem:					; All MENUITEM structs in this MENUPAGE
  3099                              <1> endstruc
  3100                              <1> 
  3101                              <1> struc MENUITEM
  3102 00000000 <res 00000002>      <1> 	.fnActivate			resb	2	; Offset to item activation function
  3103 00000002 <res 00000002>      <1> 	.fnFormatValue		resb	2	; Offset to item value formatting function
  3104                              <1> 
  3105 00000004 <res 00000002>      <1> 	.szName				resb	2	; Offset to item name string
  3106 00000006 <res 00000002>      <1> 	.szQuickInfo		resb	2	; Offset to item quick information string
  3107 00000008 <res 00000002>      <1> 	.szHelp				resb	2	; Offset to item help string
  3108                              <1> 
  3109 0000000A <res 00000001>      <1> 	.bFlags				resb	1	; Item flags
  3110 0000000B <res 00000001>      <1> 	.bType				resb	1	; Item type
  3111 0000000C <res 00000011>      <1> 	.itemValue			resb	ITEM_VALUE_size		; ITEM_VALUE for automated item handling
  3112                              <1> endstruc
  3113                              <1> 
  3114                              <1> ; Bit defines for MENUITEM.bFlags
  3115                              <1> FLG_MENUITEM_VISIBLE		EQU	(1<<0)	; Item is visible
  3116                              <1> FLG_MENUITEM_MODIFY_MENU	EQU	(1<<1)	; Item modifies visibility of other items
  3117                              <1> FLG_MENUITEM_FLAGVALUE		EQU	(1<<2)	; Item value is single bit
  3118                              <1> FLG_MENUITEM_BYTEVALUE		EQU	(1<<3)	; Item value is single byte
  3119                              <1> FLG_MENUITEM_PROGRAMVAR		EQU	(1<<4)	; Item is for configuring program, not BIOS
  3120                              <1> FLG_MENUITEM_CHOICESTRINGS  EQU (1<<5)  ; ChoiceToStringLookup table is 1-1 with ChoiceToValueLookup table,
  3121                              <1> 										; ChoiceToStringLookup table must also be NULL terminated
  3122                              <1> FLG_MENUITEM_MASKVALUE		EQU	(1<<6)	; Item value is more than one bit among other bits
  3123                              <1> 
  3124                              <1> 
  3125                              <1> ; Values for MENUITEM.bType
  3126                              <1> TYPE_MENUITEM_PAGEBACK		EQU	(0<<1)	; Item returns to previous MENUPAGE
  3127                              <1> TYPE_MENUITEM_PAGENEXT		EQU	(1<<1)	; Item changes to next MENUPAGE
  3128                              <1> TYPE_MENUITEM_ACTION		EQU	(2<<1)	; Non-configurable item
  3129                              <1> TYPE_MENUITEM_MULTICHOICE	EQU	(3<<1)	; Item with multiple predefined choices
  3130                              <1> TYPE_MENUITEM_UNSIGNED		EQU	(4<<1)	; Menuitem with user inputted unsigned decimal value
  3131                              <1> TYPE_MENUITEM_HEX			EQU	(5<<1)	; Menuitem with user inputted hexadecimal value
  3132                              <1> 
  3133                              <1> 
  3134                              <1> struc ITEM_VALUE
  3135 00000000 <res 00000002>      <1> 	.wRomvarsValueOffset	resb	2	; ROMVARS offset to actual value to be configured
  3136 00000002 <res 00000002>      <1> 	.szDialogTitle			resb	2	; Dialog title string
  3137                              <1> 
  3138 00000004 <res 00000002>      <1> 	.szMultichoice			resb	2	; Multiple choices in one string
  3139 00000006 <res 00000002>      <1> 	.rgwChoiceToValueLookup	resb	2	; Ptr to lookup table for translating selected choice to actual value
  3140                              <1> 	.rgszValueToStringLookup:			; Ptr to lookup table for translating value to string
  3141                              <1> 	.rgszChoiceToStringLookup:
  3142 00000008 <res 00000002>      <1> 	.wMinValue				resb	2	; Minimum allowed integer value
  3143                              <1> 	.wMaxValue:
  3144 0000000A <res 00000002>      <1> 	.wValueBitmask			resb	2	; Bitmask for item value flag or field
  3145 0000000C <res 00000002>      <1> 	.fnValueReader			resb	2	; Called just after ROMVARS is read, providing a hook for further action
  3146 0000000E <res 00000002>      <1> 	.fnValueWriter			resb	2	; Called just before ROMVARS is written, providing a hook for further action
  3147 00000010 <res 00000001>      <1> 	.bFieldPosition			resb	1	; Bit field position
  3148                              <1> endstruc
  3149                              <1> 
  3150                              <1> 
  3151                              <1> %endif ; MENU_STRUCTS_INC
  3152                                  %include "Variables.inc"
  3153                              <1> ; Project name	:	XTIDE Univeral BIOS Configurator v2
  3154                              <1> ; Description	:	Global variables for configuration program.
  3155                              <1> 
  3156                              <1> ;
  3157                              <1> ; XTIDE Universal BIOS and Associated Tools
  3158                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3159                              <1> ;
  3160                              <1> ; This program is free software; you can redistribute it and/or modify
  3161                              <1> ; it under the terms of the GNU General Public License as published by
  3162                              <1> ; the Free Software Foundation; either version 2 of the License, or
  3163                              <1> ; (at your option) any later version.
  3164                              <1> ;
  3165                              <1> ; This program is distributed in the hope that it will be useful,
  3166                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3167                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3168                              <1> ; GNU General Public License for more details.
  3169                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3170                              <1> ;
  3171                              <1> 
  3172                              <1> %ifndef VARIABLES_INC
  3173                              <1> %define VARIABLES_INC
  3174                              <1> 
  3175                              <1> ; Equates and defines
  3176                              <1> BOOT_MENU_DEFAULT_TIMEOUT			EQU	(30 * TICKS_PER_SECOND)
  3177                              <1> MAX_ALLOWED_IDE_CONTROLLERS			EQU		4	; Maximum number of IDE controllers
  3178                              <1> MAX_LITE_MODE_CONTROLLERS			EQU		2
  3179                              <1> EEPROM_POLLING_TIMEOUT_TICKS		EQU		3	; 1 tick = 54.9 ms
  3180                              <1> XTIDE_SIGNATURE_LENGTH				EQU		8	; XTIDE Universal BIOS signature string length
  3181                              <1> NUMBER_OF_EEPROM_TYPES				EQU		5
  3182                              <1> MAX_EEPROM_SIZE_IN_BYTES			EQU		65536
  3183                              <1> 
  3184                              <1> 
  3185                              <1> ; Program global variables
  3186                              <1> struc CFGVARS
  3187 00000000 <res 00000002>      <1> 	.pMenupage			resb	2			; Offset to MENUPAGE to display
  3188 00000002 <res 00000002>      <1> 	.wFlags				resb	2			; Program flags
  3189 00000004 <res 00000002>      <1> 	.wImageSizeInWords	resb	2			; Size in words for loaded ROM or FILE
  3190 00000006 <res 00000002>      <1> 	.wEepromSegment		resb	2			; Segment where EEPROM is located
  3191 00000008 <res 00000001>      <1> 	.bEepromType		resb	1			; EEPROM type
  3192 00000009 <res 00000001>      <1> 	.bEepromPage		resb	1			; EEPROM page size (EEPROM_PAGE)
  3193 0000000A <res 00000001>      <1> 	.bSdpCommand		resb	1			; Command for Software Data Protection
  3194 0000000B <res 00000001>      <1> 						resb	1
  3195 0000000C <res 0000000E>      <1> 	.szOpenedFile		resb	FILENAME_BUFFER_SIZE
  3196                              <1> endstruc
  3197                              <1> 
  3198                              <1> ; Bit defines for CFGVARS.wFlags
  3199                              <1> FLG_CFGVARS_FILELOADED	EQU		(1<<0)	; BIOS is loaded from file
  3200                              <1> FLG_CFGVARS_ROMLOADED	EQU		(1<<1)	; BIOS is loaded from EEPROM
  3201                              <1> FLG_CFGVARS_UNSAVED		EQU		(1<<2)	; BIOS has unsaved changes
  3202                              <1> FLG_CFGVARS_CHECKSUM	EQU		(1<<3)	; Generate checksum byte
  3203                              <1> 
  3204                              <1> ; EEPROM types
  3205                              <1> struc EEPROM_TYPE
  3206 00000000 <res 00000002>      <1> 	.2816_2kiB			resb	2
  3207 00000002 <res 00000002>      <1> 	.2864_8kiB			resb	2
  3208 00000004 <res 00000002>      <1> 	.2864_8kiB_MOD		resb	2	; Reversed A0 and A3 address lines
  3209 00000006 <res 00000002>      <1> 	.28256_32kiB		resb	2
  3210 00000008 <res 00000002>      <1> 	.28512_64kiB		resb	2
  3211                              <1> endstruc
  3212                              <1> 
  3213                              <1> ; Software Data Protection commands
  3214                              <1> struc SDP_COMMAND
  3215 00000000 <res 00000002>      <1> 	.none				resb	2	; Do not use any SDP command
  3216 00000002 <res 00000002>      <1> 	.enable				resb	2	; Flash with SDP enable command
  3217 00000004 <res 00000002>      <1> 	.disable			resb	2	; Flash with SDP disable command
  3218                              <1> endstruc
  3219                              <1> 
  3220                              <1> ; Page sizes
  3221                              <1> struc EEPROM_PAGE
  3222 00000000 <res 00000002>      <1> 	.1_byte				resb	2
  3223 00000002 <res 00000002>      <1> 	.2_bytes			resb	2
  3224 00000004 <res 00000002>      <1> 	.4_bytes			resb	2
  3225 00000006 <res 00000002>      <1> 	.8_bytes			resb	2
  3226 00000008 <res 00000002>      <1> 	.16_bytes			resb	2
  3227 0000000A <res 00000002>      <1> 	.32_bytes			resb	2
  3228 0000000C <res 00000002>      <1> 	.64_bytes			resb	2
  3229                              <1> endstruc
  3230                              <1> 
  3231                              <1> ; Default CFGVARS settings
  3232                              <1> DEFAULT_CFGVARS_FLAGS	EQU		FLG_CFGVARS_CHECKSUM
  3233                              <1> DEFAULT_EEPROM_SEGMENT	EQU		0D000h
  3234                              <1> DEFAULT_EEPROM_TYPE		EQU		EEPROM_TYPE.2864_8kiB
  3235                              <1> DEFAULT_PAGE_SIZE		EQU		EEPROM_PAGE.1_byte
  3236                              <1> DEFAULT_SDP_COMMAND		EQU		SDP_COMMAND.enable
  3237                              <1> 
  3238                              <1> 
  3239                              <1> ; Variables required for flashing
  3240                              <1> struc FLASHVARS
  3241 00000000 <res 00000004>      <1> 	.fpNextSourcePage			resb	4
  3242 00000004 <res 00000004>      <1> 	.fpNextComparisonPage		resb	4
  3243 00000008 <res 00000004>      <1> 	.fpNextDestinationPage		resb	4
  3244 0000000C <res 00000002>      <1> 	.wPagesToFlash				resb	2	; 0 = 65536
  3245 0000000E <res 00000002>      <1> 	.wEepromPageSize			resb	2	; 1, 2, 4, 8, 16, 32 or 64
  3246 00000010 <res 00000001>      <1> 	.bEepromSdpCommand			resb	1
  3247 00000011 <res 00000001>      <1> 	.bEepromType				resb	1
  3248                              <1> 
  3249 00000012 <res 00000002>      <1> 	.wProgressUpdateParam		resb	2
  3250 00000014 <res 00000002>      <1> 	.wTimeoutCounter			resb	2
  3251 00000016 <res 00000002>      <1> 	.wLastOffsetWritten			resb	2
  3252 00000018 <res 00000001>      <1> 	.bLastByteWritten			resb	1
  3253 00000019 <res 00000001>      <1> 	.flashResult				resb	1
  3254                              <1> endstruc
  3255                              <1> 
  3256                              <1> ; Flashing results
  3257                              <1> struc FLASH_RESULT
  3258 00000000 <res 00000002>      <1> 	.success					resb	2
  3259 00000002 <res 00000002>      <1> 	.PollingTimeoutError		resb	2
  3260 00000004 <res 00000002>      <1> 	.DataVerifyError			resb	2
  3261                              <1> endstruc
  3262                              <1> 
  3263                              <1> 
  3264                              <1> %endif ; VARIABLES_INC
  3265                                  
  3266                                  
  3267                                  ; Section containing code
  3268                                  SECTION .text
  3269                                  
  3270                                  
  3271                                  ; Program first instruction.
  3272                                  ORG	100h						; Code starts at offset 100h (DOS .COM)
  3273                                  Start:
  3274 00000000 E94127                  	jmp		Main_Start
  3275                                  
  3276                                  ; Include library sources
  3277                                  %include "AssemblyLibrary.asm"
  3278                              <1> ; Project name	:	Assembly Library
  3279                              <1> ; Description	:	Assembly Library main file. This is the only file that
  3280                              <1> ;					needs to be included.
  3281                              <1> 
  3282                              <1> ;
  3283                              <1> ; XTIDE Universal BIOS and Associated Tools
  3284                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3285                              <1> ;
  3286                              <1> ; This program is free software; you can redistribute it and/or modify
  3287                              <1> ; it under the terms of the GNU General Public License as published by
  3288                              <1> ; the Free Software Foundation; either version 2 of the License, or
  3289                              <1> ; (at your option) any later version.
  3290                              <1> ;
  3291                              <1> ; This program is distributed in the hope that it will be useful,
  3292                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3293                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3294                              <1> ; GNU General Public License for more details.
  3295                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3296                              <1> ;
  3297                              <1> 
  3298                              <1> ; Section containing code
  3299                              <1> SECTION .text
  3300                              <1> 
  3301                              <1> %ifdef INCLUDE_DISPLAY_LIBRARY
  3302                              <1>   %ifndef DISPLAY_JUMP_ALIGN
  3303                              <1> 	%define DISPLAY_JUMP_ALIGN 1
  3304                              <1>   %endif
  3305                              <1> 	%include "CgaSnow.asm"
  3306                              <2> ; Project name	:	Assembly Library
  3307                              <2> ; Description	:	Functions for preventing CGA snow.
  3308                              <2> 
  3309                              <2> ;
  3310                              <2> ; XTIDE Universal BIOS and Associated Tools
  3311                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3312                              <2> ;
  3313                              <2> ; This program is free software; you can redistribute it and/or modify
  3314                              <2> ; it under the terms of the GNU General Public License as published by
  3315                              <2> ; the Free Software Foundation; either version 2 of the License, or
  3316                              <2> ; (at your option) any later version.
  3317                              <2> ;
  3318                              <2> ; This program is distributed in the hope that it will be useful,
  3319                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3320                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3321                              <2> ; GNU General Public License for more details.
  3322                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3323                              <2> ;
  3324                              <2> 
  3325                              <2> ; Section containing code
  3326                              <2> SECTION .text
  3327                              <2> 
  3328                              <2> ;--------------------------------------------------------------------
  3329                              <2> ; CgaSnow_IsCgaPresent
  3330                              <2> ;	Parameters:
  3331                              <2> ;		DS:		BDA segment (zero)
  3332                              <2> ;	Returns:
  3333                              <2> ;		CF:		Set if CGA detected
  3334                              <2> ;				Cleared if CGA not detected
  3335                              <2> ;	Corrupts registers:
  3336                              <2> ;		AX
  3337                              <2> ;--------------------------------------------------------------------
  3338                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3339                              <2> CgaSnow_IsCgaPresent:
  3340 00000003 813E6304D403        <2> 	cmp		WORD [BDA.wVidPort], CGA_STATUS_REGISTER - OFFSET_TO_CGA_STATUS_REGISTER
  3341 00000009 7509                <2> 	jne		SHORT .CgaNotFound
  3342                              <2> 
  3343                              <2> 	; All standard CGA modes use 25 rows but only EGA and later store it to BDA.
  3344 0000000B 803E840419          <2> 	cmp		BYTE [BDA.bVidRows], 25
  3345 00000010 7D02                <2> 	jge		SHORT .CgaNotFound
  3346 00000012 F9                  <2> 	stc
  3347 00000013 C3                  <2> 	ret
  3348                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3349                              <2> .CgaNotFound:
  3350 00000014 F8                  <2> 	clc
  3351 00000015 C3                  <2> 	ret
  3352                              <2> 
  3353                              <2> 
  3354                              <2> ; CGA snow prevention must be kept optional to avoid unnecessary
  3355                              <2> ; overhead when building programs meant for non-CGA systems.
  3356                              <2> %ifdef ELIMINATE_CGA_SNOW
  3357                              <2> 
  3358                              <2> ;--------------------------------------------------------------------
  3359                              <2> ; CgaSnow_Stosb
  3360                              <2> ; CgaSnow_Stosw
  3361                              <2> ;	Parameters:
  3362                              <2> ;		AL:		Character to output
  3363                              <2> ;		AH:		Attribute to output (CgaSnow_StoswWithoutCgaSnow only)
  3364                              <2> ;		DS:		BDA segment (zero)
  3365                              <2> ;		ES:DI:	Ptr to video memory where to output
  3366                              <2> ;	Returns:
  3367                              <2> ;		DI:		Incremented for next character
  3368                              <2> ;	Corrupts registers:
  3369                              <2> ;		AX, DX
  3370                              <2> ;--------------------------------------------------------------------
  3371                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3372                              <2> CgaSnow_Stosb:
  3373 00000016 E84900              <2> 	call	LoadCgaStatusRegisterAddressToDXifCgaPresent
  3374 00000019 740F                <2> 	jz		SHORT .StosbWithoutWaitSinceUnknownPort
  3375                              <2> 
  3376 0000001B 88C4                <2> 	mov		ah, al
  3377 0000001D FA                  <2> 	cli				; Interrupt request would mess up timing
  3378                              <2> 	WAIT_UNTIL_SAFE_CGA_WRITE
  3379                              <3> %%WaitUntilNotInRetrace:
  3380 0000001E EC                  <3>  in al, dx
  3381 0000001F D0E8                <3>  shr al, 1
  3382                              <3> 
  3383 00000021 72FB                <3>  jc SHORT %%WaitUntilNotInRetrace
  3384                              <3> %%WaitUntilNextRetraceStarts:
  3385 00000023 EC                  <3>  in al, dx
  3386 00000024 D0E8                <3>  shr al, 1
  3387 00000026 73FB                <3>  jnc SHORT %%WaitUntilNextRetraceStarts
  3388 00000028 88E0                <2> 	mov		al, ah
  3389                              <2> .StosbWithoutWaitSinceUnknownPort:
  3390 0000002A AA                  <2> 	stosb
  3391 0000002B FB                  <2> 	sti
  3392 0000002C C3                  <2> 	ret
  3393                              <2> 
  3394                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3395                              <2> CgaSnow_Stosw:
  3396 0000002D 53                  <2> 	push	bx
  3397 0000002E E83100              <2> 	call	LoadCgaStatusRegisterAddressToDXifCgaPresent
  3398 00000031 740D                <2> 	jz		SHORT .StoswWithoutWaitSinceUnknownPort
  3399                              <2> 
  3400 00000033 93                  <2> 	xchg	bx, ax
  3401 00000034 FA                  <2> 	cli				; Interrupt request would mess up timing
  3402                              <2> 	WAIT_UNTIL_SAFE_CGA_WRITE
  3403                              <3> %%WaitUntilNotInRetrace:
  3404 00000035 EC                  <3>  in al, dx
  3405 00000036 D0E8                <3>  shr al, 1
  3406                              <3> 
  3407 00000038 72FB                <3>  jc SHORT %%WaitUntilNotInRetrace
  3408                              <3> %%WaitUntilNextRetraceStarts:
  3409 0000003A EC                  <3>  in al, dx
  3410 0000003B D0E8                <3>  shr al, 1
  3411 0000003D 73FB                <3>  jnc SHORT %%WaitUntilNextRetraceStarts
  3412 0000003F 93                  <2> 	xchg	ax, bx
  3413                              <2> .StoswWithoutWaitSinceUnknownPort:
  3414 00000040 AB                  <2> 	stosw
  3415 00000041 FB                  <2> 	sti
  3416 00000042 5B                  <2> 	pop		bx
  3417 00000043 C3                  <2> 	ret
  3418                              <2> 
  3419                              <2> 
  3420                              <2> ;--------------------------------------------------------------------
  3421                              <2> ; CgaSnow_RepMovsb
  3422                              <2> ;	Parameters:
  3423                              <2> ;		CX:		Number of characters to copy
  3424                              <2> ;		DS:		BDA segment (zero)
  3425                              <2> ;		ES:SI:	Ptr to video memory where to read from
  3426                              <2> ;		ES:DI:	Ptr to video memory where to write to
  3427                              <2> ;	Returns:
  3428                              <2> ;		SI, DI:	Updated for next character
  3429                              <2> ;	Corrupts registers:
  3430                              <2> ;		AX, CX, DX
  3431                              <2> ;--------------------------------------------------------------------
  3432                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  3433                              <2> 	%ifdef MODULE_STRINGS_COMPRESSED
  3434                              <2> 		%define EXCLUDE
  3435                              <2> 	%endif
  3436                              <2> 	%ifdef MODULE_BOOT_MENU
  3437                              <2> 		%undef EXCLUDE
  3438                              <2> 	%endif
  3439                              <2> %endif
  3440                              <2> 
  3441                              <2> %ifndef EXCLUDE
  3442                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3443                              <2> CgaSnow_RepMovsb:
  3444 00000044 E81B00              <2> 	call	LoadCgaStatusRegisterAddressToDXifCgaPresent
  3445 00000047 7411                <2> 	jz		SHORT .RepMovsbWithoutWaitSinceUnknownPort
  3446                              <2> 
  3447                              <2> .MovsbNextByte:
  3448 00000049 FA                  <2> 	cli				; Interrupt request would mess up timing
  3449                              <2> 	WAIT_UNTIL_SAFE_CGA_WRITE
  3450                              <3> %%WaitUntilNotInRetrace:
  3451 0000004A EC                  <3>  in al, dx
  3452 0000004B D0E8                <3>  shr al, 1
  3453                              <3> 
  3454 0000004D 72FB                <3>  jc SHORT %%WaitUntilNotInRetrace
  3455                              <3> %%WaitUntilNextRetraceStarts:
  3456 0000004F EC                  <3>  in al, dx
  3457 00000050 D0E8                <3>  shr al, 1
  3458 00000052 73FB                <3>  jnc SHORT %%WaitUntilNextRetraceStarts
  3459 00000054 26A4                <2> 	es movsb
  3460 00000056 FB                  <2> 	sti
  3461 00000057 E2F0                <2> 	loop	.MovsbNextByte
  3462 00000059 C3                  <2> 	ret
  3463                              <2> .RepMovsbWithoutWaitSinceUnknownPort:
  3464                              <2> 	eSEG_STR rep, es, movsb
  3465                              <3> %ifndef USE_186
  3466                              <3>  %%Loop:
  3467 0000005A F3                  <3>  %1
  3468 0000005B 26                  <3>  %2
  3469 0000005C A4                  <3>  %3
  3470 0000005D E302                <3>  jcxz %%End
  3471 0000005F EBF9                <3>  jmp SHORT %%Loop
  3472                              <3>  %%End:
  3473                              <3> %else
  3474                              <3>  %2
  3475                              <3>  %1 %3
  3476                              <3> %endif
  3477 00000061 C3                  <2> 	ret
  3478                              <2> %endif
  3479                              <2> %undef EXCLUDE
  3480                              <2> 
  3481                              <2> 
  3482                              <2> ;--------------------------------------------------------------------
  3483                              <2> ; LoadCgaStatusRegisterAddressToDXifCgaPresent
  3484                              <2> ;	Parameters:
  3485                              <2> ;		DS:		BDA segment (zero)
  3486                              <2> ;	Returns:
  3487                              <2> ;		DX:		CGA Status Register Address
  3488                              <2> ;		ZF:		Set if CGA not present
  3489                              <2> ;				Cleared if CGA present
  3490                              <2> ;	Corrupts registers:
  3491                              <2> ;		Nothing
  3492                              <2> ;--------------------------------------------------------------------
  3493                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3494                              <2> LoadCgaStatusRegisterAddressToDXifCgaPresent:
  3495 00000062 F6065F0402          <2> 	test	BYTE [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bFlags], FLG_CONTEXT_CGA
  3496 00000067 7403                <2> 	jz		SHORT .NoCgaDetected
  3497 00000069 BADA03              <2> 	mov		dx, CGA_STATUS_REGISTER
  3498                              <2> ALIGN DISPLAY_JUMP_ALIGN, ret
  3499                              <2> .NoCgaDetected:
  3500 0000006C C3                  <2> 	ret
  3501                              <2> 
  3502                              <2> 
  3503                              <2> %endif ; ELIMINATE_CGA_SNOW
  3504                              <1> 	%include "Display.asm"
  3505                              <2> ; Project name	:	Assembly Library
  3506                              <2> ; Description	:	Display Library functions for CALL_DISPLAY_LIBRARY macro
  3507                              <2> ;					that users should use to make library call.
  3508                              <2> 
  3509                              <2> ;
  3510                              <2> ; XTIDE Universal BIOS and Associated Tools
  3511                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3512                              <2> ;
  3513                              <2> ; This program is free software; you can redistribute it and/or modify
  3514                              <2> ; it under the terms of the GNU General Public License as published by
  3515                              <2> ; the Free Software Foundation; either version 2 of the License, or
  3516                              <2> ; (at your option) any later version.
  3517                              <2> ;
  3518                              <2> ; This program is distributed in the hope that it will be useful,
  3519                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3520                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3521                              <2> ; GNU General Public License for more details.
  3522                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3523                              <2> ;
  3524                              <2> 
  3525                              <2> ; Section containing code
  3526                              <2> SECTION .text
  3527                              <2> 
  3528                              <2> ;--------------------------------------------------------------------
  3529                              <2> ; DisplayFunctionFromDI
  3530                              <2> ;	Parameters:
  3531                              <2> ;		DI:		Function to call (DISPLAY_LIB.functionName)
  3532                              <2> ;		Others:	Depends on function to call (DX cannot be parameter)
  3533                              <2> ;	Returns:
  3534                              <2> ;		Depends on function to call
  3535                              <2> ;	Corrupts registers:
  3536                              <2> ;		AX (unless used as a return register), DI
  3537                              <2> ;--------------------------------------------------------------------
  3538                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3539                              <2> Display_FunctionFromDI:
  3540 0000006D 06                  <2> 	push	es
  3541 0000006E 1E                  <2> 	push	ds
  3542 0000006F 52                  <2> 	push	dx
  3543                              <2> 
  3544 00000070 FC                  <2> 	cld
  3545                              <2> 	LOAD_BDA_SEGMENT_TO	ds, dx
  3546                              <3> %ifndef USE_186
  3547 00000071 31D2                <3>  xor %2, %2
  3548 00000073 8EDA                <3>  mov %1, %2
  3549                              <3> %elifidn %3, !
  3550                              <3>  xor %2, %2
  3551                              <3>  mov %1, %2
  3552                              <3> %else
  3553                              <3>  push BYTE 0
  3554                              <3>  pop %1
  3555                              <3> %endif
  3556 00000075 89FA                <2> 	mov		dx, di
  3557 00000077 C43E5404            <2> 	les		di, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition]
  3558 0000007B FFD2                <2> 	call	dx
  3559 0000007D 893E5404            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition], di
  3560                              <2> 
  3561 00000081 5A                  <2> 	pop		dx
  3562 00000082 1F                  <2> 	pop		ds
  3563 00000083 07                  <2> 	pop		es
  3564 00000084 C3                  <2> 	ret
  3565                              <2> 
  3566                              <2> ;--------------------------------------------------------------------
  3567                              <2> ; Display_FormatNullTerminatedStringFromCSSI
  3568                              <2> ;	Parameters:
  3569                              <2> ;		Same as DisplayPrint_FormattedNullTerminatedStringFromCSSI
  3570                              <2> ;	Returns:
  3571                              <2> ;		Stack variables will be cleaned
  3572                              <2> ;	Corrupts registers:
  3573                              <2> ;		AX
  3574                              <2> ;--------------------------------------------------------------------
  3575                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3576                              <2> Display_FormatNullTerminatedStringFromCSSI:
  3577 00000085 58                  <2> 	pop		ax					; Discard return address to inside Display_FunctionFromDI
  3578 00000086 E8B001              <2> 	call	DisplayPrint_FormattedNullTerminatedStringFromCSSI
  3579 00000089 893E5404            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition], di
  3580                              <2> 
  3581 0000008D 5A                  <2> 	pop		dx
  3582 0000008E 1F                  <2> 	pop		ds
  3583 0000008F 07                  <2> 	pop		es
  3584                              <2> 
  3585 00000090 58                  <2> 	pop		ax					; Pop return address
  3586 00000091 89EC                <2> 	mov		sp, bp				; Clean stack variables
  3587 00000093 FFE0                <2> 	jmp		ax
  3588                              <2> 
  3589                              <2> 
  3590                              <2> 	%define InitializeDisplayContext						DisplayContext_Initialize
  3591                              <2> 
  3592                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  3593                              <2> 	%define SetCharacterPointerFromBXAX						DisplayContext_SetCharacterPointerFromBXAX
  3594                              <2> %endif
  3595                              <2> 	%define SetCharOutputFunctionFromAXwithAttribFlagInBL	DisplayContext_SetCharOutputFunctionFromAXwithAttribFlagInBL
  3596                              <2> 	%define SetCharacterOutputParameterFromAX				DisplayContext_SetCharacterOutputParameterFromAX
  3597                              <2> 	%define SetCharacterAttributeFromAL						DisplayContext_SetCharacterAttributeFromAL
  3598                              <2> 	%define SetCursorShapeFromAX							DisplayCursor_SetShapeFromAX
  3599                              <2> 	%define SetCursorCoordinatesFromAX						DisplayCursor_SetCoordinatesFromAX
  3600                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
  3601                              <2> 	%define SetNewPageFromAL								DisplayPage_SetFromAL
  3602                              <2> %endif
  3603                              <2> 	%define SynchronizeDisplayContextToHardware				DisplayContext_SynchronizeToHardware
  3604                              <2> 
  3605                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  3606                              <2> 	%define GetCharacterPointerToBXAX						DisplayContext_GetCharacterPointerToBXAX
  3607                              <2> %endif
  3608                              <2> 	%define GetSoftwareCoordinatesToAX						DisplayCursor_GetSoftwareCoordinatesToAX
  3609                              <2> 	%define GetColumnsToALandRowsToAH						DisplayPage_GetColumnsToALandRowsToAH
  3610                              <2> 
  3611                              <2> 	%define FormatNullTerminatedStringFromCSSI				Display_FormatNullTerminatedStringFromCSSI
  3612                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  3613                              <2> 	%define PrintSignedWordFromAXWithBaseInBX				DisplayPrint_SignedWordFromAXWithBaseInBX
  3614                              <2> %endif
  3615                              <2> 	%define PrintWordFromAXwithBaseInBX						DisplayPrint_WordFromAXWithBaseInBX
  3616                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
  3617                              <2> 	%define PrintQWordFromSSBPwithBaseInBX					DisplayPrint_QWordFromSSBPwithBaseInBX
  3618                              <2> %endif
  3619                              <2> 	%define PrintCharBufferFromBXSIwithLengthInCX			DisplayPrint_CharacterBufferFromBXSIwithLengthInCX
  3620                              <2> 	%define PrintNullTerminatedStringFromBXSI				DisplayPrint_NullTerminatedStringFromBXSI
  3621                              <2> 	%define PrintNullTerminatedStringFromCSSI				DisplayPrint_NullTerminatedStringFromCSSI
  3622                              <2> 	%define PrintRepeatedCharacterFromALwithCountInCX		DisplayPrint_RepeatCharacterFromALwithCountInCX
  3623                              <2> 	%define PrintCharacterFromAL							DisplayPrint_CharacterFromAL
  3624                              <2> 	%define PrintNewlineCharacters							DisplayPrint_Newline
  3625                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  3626                              <2> 	%define ClearAreaWithHeightInAHandWidthInAL				DisplayPrint_ClearAreaWithHeightInAHandWidthInAL
  3627                              <2> %endif
  3628                              <2> 	%define ClearScreenWithCharInALandAttrInAH				DisplayPrint_ClearScreenWithCharInALandAttributeInAH
  3629                              <2> 
  3630                              <1> 	%include "DisplayCharOut.asm"
  3631                              <2> ; Project name	:	Assembly Library
  3632                              <2> ; Description	:	Functions for outputting characters to video memory.
  3633                              <2> ;					These functions are meant to be called by Display_CharacterFromAL
  3634                              <2> ;					and Display_RepeatCharacterFromAL using function pointer
  3635                              <2> ;					stored in DISPLAY_CONTEXT.
  3636                              <2> 
  3637                              <2> ;
  3638                              <2> ; XTIDE Universal BIOS and Associated Tools
  3639                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3640                              <2> ;
  3641                              <2> ; This program is free software; you can redistribute it and/or modify
  3642                              <2> ; it under the terms of the GNU General Public License as published by
  3643                              <2> ; the Free Software Foundation; either version 2 of the License, or
  3644                              <2> ; (at your option) any later version.
  3645                              <2> ;
  3646                              <2> ; This program is distributed in the hope that it will be useful,
  3647                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3648                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3649                              <2> ; GNU General Public License for more details.
  3650                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3651                              <2> ;
  3652                              <2> 
  3653                              <2> ; Section containing code
  3654                              <2> SECTION .text
  3655                              <2> 
  3656                              <2> ;--------------------------------------------------------------------
  3657                              <2> ; DisplayCharOut_TeletypeOutputWithAttribute
  3658                              <2> ; DisplayCharOut_TeletypeOutput
  3659                              <2> ;	Parameters:
  3660                              <2> ;		AL:		Character to output
  3661                              <2> ;		AH:		Attribute to output
  3662                              <2> ;		DS:		BDA segment (zero)
  3663                              <2> ;		ES:DI:	Ptr to video memory where to output
  3664                              <2> ;	Returns:
  3665                              <2> ;		DI:		Incremented for next character
  3666                              <2> ;	Corrupts registers:
  3667                              <2> ;		AX, DX
  3668                              <2> ;--------------------------------------------------------------------
  3669                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3670                              <2> DisplayCharOut_TeletypeOutputWithAttribute:
  3671 00000095 3C20                <2> 	cmp		al, ' '							; Printable character?
  3672 00000097 7208                <2> 	jb		SHORT DisplayCharOut_BiosTeletypeOutput
  3673                              <2> 	WAIT_RETRACE_IF_NECESSARY_THEN stosw
  3674                              <3> %ifdef ELIMINATE_CGA_SNOW
  3675                              <3>  %ifidn %1, stosb
  3676                              <3>  call CgaSnow_Stosb
  3677                              <3>  %elifidn %1, stosw
  3678 00000099 E891FF              <3>  call CgaSnow_Stosw
  3679                              <3>  %elifidn %1, rep movsb
  3680                              <3>  call CgaSnow_RepMovsb
  3681                              <3>  %else
  3682                              <3>  %error "Invalid instruction passed to WAIT_RETRACE_IF_NECESSARY_THEN"
  3683                              <3>  %endif
  3684                              <3> %else
  3685                              <3>  %ifidn %1, rep movsb
  3686                              <3>  eSEG_STR rep, es, movsb
  3687                              <3>  %else
  3688                              <3>  %1
  3689                              <3>  %endif
  3690                              <3> %endif
  3691 0000009C C3                  <2> 	ret
  3692                              <2> 
  3693                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3694                              <2> DisplayCharOut_TeletypeOutput:
  3695 0000009D 3C20                <2> 	cmp		al, ' '							; Printable character?
  3696 0000009F 731C                <2> 	jae		SHORT DisplayCharOut_Character
  3697                              <2> 	; Fall to DisplayCharOut_BiosTeletypeOutput
  3698                              <2> 
  3699                              <2> ;--------------------------------------------------------------------
  3700                              <2> ; DisplayCharOut_BiosTeletypeOutput
  3701                              <2> ;	Parameters:
  3702                              <2> ;		AL:		Control character
  3703                              <2> ;		DS:		BDA segment (zero)
  3704                              <2> ;		ES:DI:	Ptr to video memory where to output
  3705                              <2> ;	Returns:
  3706                              <2> ;		DI:		Incremented for next character
  3707                              <2> ;	Corrupts registers:
  3708                              <2> ;		AX, DX
  3709                              <2> ;--------------------------------------------------------------------
  3710                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3711                              <2> DisplayCharOut_BiosTeletypeOutput:
  3712 000000A1 50                  <2> 	push	ax
  3713 000000A2 E86B01              <2> 	call	DisplayCursor_SynchronizeCoordinatesToHardware
  3714 000000A5 58                  <2> 	pop		ax
  3715                              <2> 
  3716                              <2> 	; Output character with BIOS
  3717 000000A6 53                  <2> 	push	bx
  3718 000000A7 B40E                <2> 	mov		ah, TELETYPE_OUTPUT
  3719 000000A9 8A3E6204            <2> 	mov		bh, [VIDEO_BDA.bActivePage]
  3720 000000AD CD10                <2> 	int		BIOS_VIDEO_INTERRUPT_10h
  3721 000000AF 5B                  <2> 	pop		bx
  3722                              <2> 
  3723 000000B0 E83901              <2> 	call	DisplayCursor_GetHardwareCoordinatesToAX
  3724 000000B3 E91101              <2> 	jmp		DisplayCursor_SetCoordinatesFromAX
  3725                              <2> 
  3726                              <2> 
  3727                              <2> ;--------------------------------------------------------------------
  3728                              <2> ; DisplayCharOut_Attribute
  3729                              <2> ; DisplayCharOut_Character
  3730                              <2> ; DisplayCharOut_CharacterWithAttribute
  3731                              <2> ;	Parameters:
  3732                              <2> ;		AL:		Character to output
  3733                              <2> ;		AH:		Attribute to output
  3734                              <2> ;		DS:		BDA segment (zero)
  3735                              <2> ;		ES:DI:	Ptr to video memory where to output
  3736                              <2> ;	Returns:
  3737                              <2> ;		DI:		Incremented for next character
  3738                              <2> ;	Corrupts registers:
  3739                              <2> ;		AX, DX
  3740                              <2> ;--------------------------------------------------------------------
  3741                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3742                              <2> DisplayCharOut_Attribute:
  3743 000000B6 86C4                <2> 	xchg	al, ah				; Swap character and attribute
  3744 000000B8 47                  <2> 	inc		di					; Skip character
  3745                              <2> 	WAIT_RETRACE_IF_NECESSARY_THEN stosb
  3746                              <3> %ifdef ELIMINATE_CGA_SNOW
  3747                              <3>  %ifidn %1, stosb
  3748 000000B9 E85AFF              <3>  call CgaSnow_Stosb
  3749                              <3>  %elifidn %1, stosw
  3750                              <3>  call CgaSnow_Stosw
  3751                              <3>  %elifidn %1, rep movsb
  3752                              <3>  call CgaSnow_RepMovsb
  3753                              <3>  %else
  3754                              <3>  %error "Invalid instruction passed to WAIT_RETRACE_IF_NECESSARY_THEN"
  3755                              <3>  %endif
  3756                              <3> %else
  3757                              <3>  %ifidn %1, rep movsb
  3758                              <3>  eSEG_STR rep, es, movsb
  3759                              <3>  %else
  3760                              <3>  %1
  3761                              <3>  %endif
  3762                              <3> %endif
  3763 000000BC C3                  <2> 	ret
  3764                              <2> 
  3765                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3766                              <2> DisplayCharOut_Character:
  3767                              <2> 	WAIT_RETRACE_IF_NECESSARY_THEN stosb
  3768                              <3> %ifdef ELIMINATE_CGA_SNOW
  3769                              <3>  %ifidn %1, stosb
  3770 000000BD E856FF              <3>  call CgaSnow_Stosb
  3771                              <3>  %elifidn %1, stosw
  3772                              <3>  call CgaSnow_Stosw
  3773                              <3>  %elifidn %1, rep movsb
  3774                              <3>  call CgaSnow_RepMovsb
  3775                              <3>  %else
  3776                              <3>  %error "Invalid instruction passed to WAIT_RETRACE_IF_NECESSARY_THEN"
  3777                              <3>  %endif
  3778                              <3> %else
  3779                              <3>  %ifidn %1, rep movsb
  3780                              <3>  eSEG_STR rep, es, movsb
  3781                              <3>  %else
  3782                              <3>  %1
  3783                              <3>  %endif
  3784                              <3> %endif
  3785 000000C0 47                  <2> 	inc		di					; Skip attribute
  3786 000000C1 C3                  <2> 	ret
  3787                              <2> 
  3788                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3789                              <2> DisplayCharOut_CharacterWithAttribute:
  3790                              <2> 	WAIT_RETRACE_IF_NECESSARY_THEN stosw
  3791                              <3> %ifdef ELIMINATE_CGA_SNOW
  3792                              <3>  %ifidn %1, stosb
  3793                              <3>  call CgaSnow_Stosb
  3794                              <3>  %elifidn %1, stosw
  3795 000000C2 E868FF              <3>  call CgaSnow_Stosw
  3796                              <3>  %elifidn %1, rep movsb
  3797                              <3>  call CgaSnow_RepMovsb
  3798                              <3>  %else
  3799                              <3>  %error "Invalid instruction passed to WAIT_RETRACE_IF_NECESSARY_THEN"
  3800                              <3>  %endif
  3801                              <3> %else
  3802                              <3>  %ifidn %1, rep movsb
  3803                              <3>  eSEG_STR rep, es, movsb
  3804                              <3>  %else
  3805                              <3>  %1
  3806                              <3>  %endif
  3807                              <3> %endif
  3808 000000C5 C3                  <2> 	ret
  3809                              <2> 
  3810                              <2> 
  3811                              <2> ;--------------------------------------------------------------------
  3812                              <2> ; DisplayCharOut_WriteCharacterToBuffer
  3813                              <2> ;	Parameters:
  3814                              <2> ;		AL:		Character to output
  3815                              <2> ;		DS:		BDA segment (zero)
  3816                              <2> ;		ES:DI:	Ptr to destination string buffer
  3817                              <2> ;		DISPLAY_CONTEXT.wCharOutParam:	Characters left in buffer
  3818                              <2> ;	Returns:
  3819                              <2> ;		ES:DI:	Updated for next character
  3820                              <2> ;	Corrupts registers:
  3821                              <2> ;		AX, DX
  3822                              <2> ;--------------------------------------------------------------------
  3823                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3824                              <2> DisplayCharOut_WriteCharacterToBuffer:
  3825 000000C6 833E5A0400          <2> 	cmp		WORD [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCharOutParam], BYTE 0
  3826 000000CB 7405                <2> 	je		SHORT .BufferFull
  3827 000000CD AA                  <2> 	stosb
  3828 000000CE FF0E5A04            <2> 	dec		WORD [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCharOutParam]
  3829                              <2> .BufferFull:
  3830 000000D2 C3                  <2> 	ret
  3831                              <1> 	%include "DisplayContext.asm"
  3832                              <2> ; Project name	:	Assembly Library
  3833                              <2> ; Description	:	Functions for managing display context.
  3834                              <2> 
  3835                              <2> ;
  3836                              <2> ; XTIDE Universal BIOS and Associated Tools
  3837                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  3838                              <2> ;
  3839                              <2> ; This program is free software; you can redistribute it and/or modify
  3840                              <2> ; it under the terms of the GNU General Public License as published by
  3841                              <2> ; the Free Software Foundation; either version 2 of the License, or
  3842                              <2> ; (at your option) any later version.
  3843                              <2> ;
  3844                              <2> ; This program is distributed in the hope that it will be useful,
  3845                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  3846                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  3847                              <2> ; GNU General Public License for more details.
  3848                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  3849                              <2> ;
  3850                              <2> 
  3851                              <2> ; Section containing code
  3852                              <2> SECTION .text
  3853                              <2> 
  3854                              <2> ;--------------------------------------------------------------------
  3855                              <2> ; DisplayContext_Initialize
  3856                              <2> ;	Parameters:
  3857                              <2> ;		DS:		BDA segment (zero)
  3858                              <2> ;	Returns:
  3859                              <2> ;		Nothing
  3860                              <2> ;	Corrupts registers:
  3861                              <2> ;		AX, DX, DI
  3862                              <2> ;--------------------------------------------------------------------
  3863                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3864                              <2> DisplayContext_Initialize:
  3865 000000D3 C7065804[9500]      <2> 	mov		WORD [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fnCharOut], DEFAULT_CHARACTER_OUTPUT
  3866 000000D9 C6065E0407          <2> 	mov		BYTE [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute], SCREEN_BACKGROUND_ATTRIBUTE
  3867 000000DE E8D400              <2> 	call	DisplayCursor_GetDefaultCursorShapeToAX
  3868 000000E1 A35C04              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCursorShape], ax
  3869                              <2> 	; Fall to .DetectAndSetDisplaySegment
  3870                              <2> 
  3871                              <2> ;--------------------------------------------------------------------
  3872                              <2> ; .DetectAndSetDisplaySegment
  3873                              <2> ;	Parameters:
  3874                              <2> ;		DS:		BDA segment (zero)
  3875                              <2> ;	Returns:
  3876                              <2> ;		Nothing
  3877                              <2> ;	Corrupts registers:
  3878                              <2> ;		AX, DX
  3879                              <2> ;--------------------------------------------------------------------
  3880                              <2> .DetectAndSetDisplaySegment:
  3881 000000E4 B800B8              <2> 	mov		ax, COLOR_TEXT_SEGMENT
  3882 000000E7 803E490407          <2> 	cmp		BYTE [VIDEO_BDA.bMode], MDA_TEXT_MODE
  3883                              <2> 	eCMOVE	ah, MONO_TEXT_SEGMENT >> 8
  3884                              <3>  eCMOVZ %1, %2
  3885 000000EC 7502                <4>  jnz SHORT %%Return
  3886 000000EE B4B0                <4>  mov %1, %2
  3887                              <4> %%Return:
  3888 000000F0 A35604              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition+2], ax
  3889                              <2> 	; Fall to .InitializeFlags
  3890                              <2> 
  3891                              <2> ;--------------------------------------------------------------------
  3892                              <2> ; .InitializeFlags
  3893                              <2> ;	Parameters:
  3894                              <2> ;		DS:		BDA segment (zero)
  3895                              <2> ;	Returns:
  3896                              <2> ;		Nothing
  3897                              <2> ;	Corrupts registers:
  3898                              <2> ;		AX, DX
  3899                              <2> ;--------------------------------------------------------------------
  3900                              <2> .InitializeFlags:
  3901 000000F3 B201                <2> 	mov		dl, FLG_CONTEXT_ATTRIBUTES
  3902 000000F5 E80BFF              <2> 	call	CgaSnow_IsCgaPresent
  3903 000000F8 7303                <2> 	jnc		SHORT .DoNotSetCgaFlag
  3904 000000FA 80CA02              <2> 	or		dl, FLG_CONTEXT_CGA
  3905                              <2> .DoNotSetCgaFlag:
  3906 000000FD 88165F04            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bFlags], dl
  3907                              <2> 	; Fall to .InitializeCursor
  3908                              <2> 
  3909                              <2> ;--------------------------------------------------------------------
  3910                              <2> ; .InitializeCursor
  3911                              <2> ;	Parameters:
  3912                              <2> ;		DS:		BDA segment (zero)
  3913                              <2> ;	Returns:
  3914                              <2> ;		Nothing
  3915                              <2> ;	Corrupts registers:
  3916                              <2> ;		AX, DX
  3917                              <2> ;--------------------------------------------------------------------
  3918                              <2> .InitializeCursor:
  3919 00000101 E8E800              <2> 	call	DisplayCursor_GetHardwareCoordinatesToAX	; Coordinates before init
  3920 00000104 E8C000              <2> 	call	DisplayCursor_SetCoordinatesFromAX			; Cursor to Display Context
  3921                              <2> 	; Fall to DisplayContext_SynchronizeToHardware
  3922                              <2> 
  3923                              <2> ;--------------------------------------------------------------------
  3924                              <2> ; DisplayContext_SynchronizeToHardware
  3925                              <2> ;	Parameters:
  3926                              <2> ;		DS:		BDA segment (zero)
  3927                              <2> ;	Returns:
  3928                              <2> ;		Nothing
  3929                              <2> ;	Corrupts registers:
  3930                              <2> ;		AX, DX
  3931                              <2> ;--------------------------------------------------------------------
  3932                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3933                              <2> DisplayContext_SynchronizeToHardware:
  3934 00000107 E81B01              <2> 	call	DisplayPage_SynchronizeToHardware
  3935 0000010A E8ED00              <2> 	call	DisplayCursor_SynchronizeShapeToHardware
  3936 0000010D E90001              <2> 	jmp		DisplayCursor_SynchronizeCoordinatesToHardware
  3937                              <2> 
  3938                              <2> 
  3939                              <2> ;--------------------------------------------------------------------
  3940                              <2> ; DisplayContext_Push
  3941                              <2> ; DisplayContext_Pop
  3942                              <2> ;	Parameters:
  3943                              <2> ;		Nothing
  3944                              <2> ;	Returns:
  3945                              <2> ;		Nothing
  3946                              <2> ;	Corrupts registers:
  3947                              <2> ;		AX, DI
  3948                              <2> ;--------------------------------------------------------------------
  3949                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  3950                              <2> 	%ifndef MODULE_BOOT_MENU
  3951                              <2> 		%define EXCLUDE
  3952                              <2> 	%endif
  3953                              <2> %endif
  3954                              <2> 
  3955                              <2> %ifndef EXCLUDE
  3956                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3957                              <2> DisplayContext_Push:
  3958 00000110 8CDF                <2> 	mov		di, ds					; Backup DS
  3959                              <2> 	LOAD_BDA_SEGMENT_TO	ds, ax
  3960                              <3> %ifndef USE_186
  3961 00000112 31C0                <3>  xor %2, %2
  3962 00000114 8ED8                <3>  mov %1, %2
  3963                              <3> %elifidn %3, !
  3964                              <3>  xor %2, %2
  3965                              <3>  mov %1, %2
  3966                              <3> %else
  3967                              <3>  push BYTE 0
  3968                              <3>  pop %1
  3969                              <3> %endif
  3970 00000116 58                  <2> 	pop		ax						; Pop return address
  3971                              <2> 
  3972                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  3973                              <2> 	%assign i 0
  3974                              <2> 	%rep DISPLAY_CONTEXT_size / 2
  3975                              <2> 		push	WORD [VIDEO_BDA.displayContext + i]
  3976                              <2> 	%assign i i+2
  3977                              <2> 	%endrep
  3978 00000117 FF365404            <3>  push WORD [VIDEO_BDA.displayContext + i]
  3979                              <3>  %assign i i+2
  3980 0000011B FF365604            <3>  push WORD [VIDEO_BDA.displayContext + i]
  3981                              <3>  %assign i i+2
  3982 0000011F FF365804            <3>  push WORD [VIDEO_BDA.displayContext + i]
  3983                              <3>  %assign i i+2
  3984 00000123 FF365A04            <3>  push WORD [VIDEO_BDA.displayContext + i]
  3985                              <3>  %assign i i+2
  3986 00000127 FF365C04            <3>  push WORD [VIDEO_BDA.displayContext + i]
  3987                              <3>  %assign i i+2
  3988 0000012B FF365E04            <3>  push WORD [VIDEO_BDA.displayContext + i]
  3989                              <3>  %assign i i+2
  3990                              <2> %endif
  3991                              <2> 
  3992 0000012F 8EDF                <2> 	mov		ds, di					; Restore DS
  3993 00000131 FFE0                <2> 	jmp		ax
  3994                              <2> 
  3995                              <2> 
  3996                              <2> ALIGN DISPLAY_JUMP_ALIGN
  3997                              <2> DisplayContext_Pop:
  3998 00000133 8CDF                <2> 	mov		di, ds					; Backup DS
  3999                              <2> 	LOAD_BDA_SEGMENT_TO	ds, ax
  4000                              <3> %ifndef USE_186
  4001 00000135 31C0                <3>  xor %2, %2
  4002 00000137 8ED8                <3>  mov %1, %2
  4003                              <3> %elifidn %3, !
  4004                              <3>  xor %2, %2
  4005                              <3>  mov %1, %2
  4006                              <3> %else
  4007                              <3>  push BYTE 0
  4008                              <3>  pop %1
  4009                              <3> %endif
  4010 00000139 58                  <2> 	pop		ax						; Pop return address
  4011                              <2> 
  4012                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  4013                              <2> 	%assign i DISPLAY_CONTEXT_size-2
  4014                              <2> 	%rep DISPLAY_CONTEXT_size / 2
  4015                              <2> 		pop		WORD [VIDEO_BDA.displayContext + i]
  4016                              <2> 	%assign i i-2
  4017                              <2> 	%endrep
  4018 0000013A 8F065E04            <3>  pop WORD [VIDEO_BDA.displayContext + i]
  4019                              <3>  %assign i i-2
  4020 0000013E 8F065C04            <3>  pop WORD [VIDEO_BDA.displayContext + i]
  4021                              <3>  %assign i i-2
  4022 00000142 8F065A04            <3>  pop WORD [VIDEO_BDA.displayContext + i]
  4023                              <3>  %assign i i-2
  4024 00000146 8F065804            <3>  pop WORD [VIDEO_BDA.displayContext + i]
  4025                              <3>  %assign i i-2
  4026 0000014A 8F065604            <3>  pop WORD [VIDEO_BDA.displayContext + i]
  4027                              <3>  %assign i i-2
  4028 0000014E 8F065404            <3>  pop WORD [VIDEO_BDA.displayContext + i]
  4029                              <3>  %assign i i-2
  4030                              <2> %endif
  4031                              <2> 
  4032 00000152 50                  <2> 	push	ax						; Push return address
  4033 00000153 52                  <2> 	push	dx
  4034 00000154 E8B0FF              <2> 	call	DisplayContext_SynchronizeToHardware
  4035 00000157 5A                  <2> 	pop		dx
  4036 00000158 8EDF                <2> 	mov		ds, di					; Restore DS
  4037 0000015A C3                  <2> 	ret
  4038                              <2> %endif ; EXCLUDE
  4039                              <2> %undef EXCLUDE
  4040                              <2> 
  4041                              <2> 
  4042                              <2> ;--------------------------------------------------------------------
  4043                              <2> ; DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  4044                              <2> ;	Parameters:
  4045                              <2> ;		CX:		Off screen buffer length in characters
  4046                              <2> ;		ES:BX:	Ptr to off screen buffer
  4047                              <2> ;	Returns:
  4048                              <2> ;		Nothing
  4049                              <2> ;	Corrupts registers:
  4050                              <2> ;		AX, DI
  4051                              <2> ;--------------------------------------------------------------------
  4052                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4053                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4054                              <2> DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX:
  4055 0000015B 1E                  <2> 	push	ds
  4056                              <2> 
  4057                              <2> 	LOAD_BDA_SEGMENT_TO	ds, di
  4058                              <3> %ifndef USE_186
  4059 0000015C 31FF                <3>  xor %2, %2
  4060 0000015E 8EDF                <3>  mov %1, %2
  4061                              <3> %elifidn %3, !
  4062                              <3>  xor %2, %2
  4063                              <3>  mov %1, %2
  4064                              <3> %else
  4065                              <3>  push BYTE 0
  4066                              <3>  pop %1
  4067                              <3> %endif
  4068 00000160 93                  <2> 	xchg	ax, bx
  4069 00000161 8CC3                <2> 	mov		bx, es
  4070 00000163 E81000              <2> 	call	DisplayContext_SetCharacterPointerFromBXAX	; ES:DI now has the pointer
  4071                              <2> 
  4072 00000166 B300                <2> 	mov		bl, ATTRIBUTES_NOT_USED
  4073 00000168 B8[C600]            <2> 	mov		ax, BUFFER_OUTPUT_WITH_CHAR_ONLY
  4074 0000016B E81B00              <2> 	call	DisplayContext_SetCharOutputFunctionFromAXwithAttribFlagInBL
  4075 0000016E 890E5A04            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCharOutParam], cx
  4076                              <2> 
  4077 00000172 89FB                <2> 	mov		bx, di
  4078 00000174 1F                  <2> 	pop		ds
  4079 00000175 C3                  <2> 	ret
  4080                              <2> %endif ; EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4081                              <2> 
  4082                              <2> 
  4083                              <2> ;--------------------------------------------------------------------
  4084                              <2> ; DisplayContext_SetCharacterPointerFromBXAX
  4085                              <2> ;	Parameters:
  4086                              <2> ;		BX:AX:	Ptr to destination for next character to output
  4087                              <2> ;		DS:		BDA segment (zero)
  4088                              <2> ;	Returns:
  4089                              <2> ;		ES:DI:	Pointer that was in BX:AX
  4090                              <2> ;	Corrupts registers:
  4091                              <2> ;		AX
  4092                              <2> ;--------------------------------------------------------------------
  4093                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4094                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4095                              <2> DisplayContext_SetCharacterPointerFromBXAX:
  4096 00000176 A35404              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition], ax
  4097 00000179 891E5604            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition+2], bx
  4098 0000017D 97                  <2> 	xchg	di, ax
  4099 0000017E 8EC3                <2> 	mov		es, bx
  4100 00000180 C3                  <2> 	ret
  4101                              <2> %endif
  4102                              <2> 
  4103                              <2> 
  4104                              <2> ;--------------------------------------------------------------------
  4105                              <2> ; DisplayContext_GetCharacterPointerToBXAX
  4106                              <2> ;	Parameters:
  4107                              <2> ;		DS:		BDA segment (zero)
  4108                              <2> ;	Returns:
  4109                              <2> ;		BX:AX:	Ptr to destination for next character to output
  4110                              <2> ;	Corrupts registers:
  4111                              <2> ;		Nothing
  4112                              <2> ;--------------------------------------------------------------------
  4113                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4114                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4115                              <2> DisplayContext_GetCharacterPointerToBXAX:
  4116 00000181 A15404              <2> 	mov		ax, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition]
  4117 00000184 8B1E5604            <2> 	mov		bx, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition+2]
  4118 00000188 C3                  <2> 	ret
  4119                              <2> %endif
  4120                              <2> 
  4121                              <2> 
  4122                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4123                              <2> 	%ifndef MODULE_BOOT_MENU
  4124                              <2> 		%define EXCLUDE
  4125                              <2> 	%endif
  4126                              <2> %endif
  4127                              <2> ;--------------------------------------------------------------------
  4128                              <2> ; DisplayContext_SetCharOutputFunctionFromAXwithAttribFlagInBL
  4129                              <2> ;	Parameters:
  4130                              <2> ;		AX:		Offset to character output function
  4131                              <2> ;		BL:		Attribute Flag
  4132                              <2> ;		DS:		BDA segment (zero)
  4133                              <2> ;	Returns:
  4134                              <2> ;		Nothing
  4135                              <2> ;	Corrupts registers:
  4136                              <2> ;		BL
  4137                              <2> ;--------------------------------------------------------------------
  4138                              <2> %ifndef EXCLUDE	; 1 of 3
  4139                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4140                              <2> DisplayContext_SetCharOutputFunctionFromAXwithAttribFlagInBL:
  4141 00000189 80E301              <2> 	and		bl, FLG_CONTEXT_ATTRIBUTES
  4142 0000018C 80265F04FE          <2> 	and		BYTE [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bFlags], ~FLG_CONTEXT_ATTRIBUTES
  4143 00000191 081E5F04            <2> 	or		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bFlags], bl
  4144 00000195 A35804              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fnCharOut], ax
  4145 00000198 C3                  <2> 	ret
  4146                              <2> %endif
  4147                              <2> 
  4148                              <2> 
  4149                              <2> ;--------------------------------------------------------------------
  4150                              <2> ; DisplayContext_SetCharacterAttributeFromAL
  4151                              <2> ;	Parameters:
  4152                              <2> ;		AL:		Character attribute
  4153                              <2> ;		DS:		BDA segment (zero)
  4154                              <2> ;	Returns:
  4155                              <2> ;		Nothing
  4156                              <2> ;	Corrupts registers:
  4157                              <2> ;		Nothing
  4158                              <2> ;--------------------------------------------------------------------
  4159                              <2> %ifndef EXCLUDE	; 2 of 3
  4160                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4161                              <2> DisplayContext_SetCharacterAttributeFromAL:
  4162 00000199 A25E04              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute], al
  4163 0000019C C3                  <2> 	ret
  4164                              <2> %endif
  4165                              <2> 
  4166                              <2> 
  4167                              <2> ;--------------------------------------------------------------------
  4168                              <2> ; DisplayContext_SetCharacterOutputParameterFromAX
  4169                              <2> ;	Parameters:
  4170                              <2> ;		AX:		Parameter for Character Output function
  4171                              <2> ;		DS:		BDA segment (zero)
  4172                              <2> ;	Returns:
  4173                              <2> ;		Nothing
  4174                              <2> ;	Corrupts registers:
  4175                              <2> ;		Nothing
  4176                              <2> ;--------------------------------------------------------------------
  4177                              <2> %ifndef EXCLUDE	; 3 of 3
  4178                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4179                              <2> DisplayContext_SetCharacterOutputParameterFromAX:
  4180 0000019D A35A04              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCharOutParam], ax
  4181 000001A0 C3                  <2> 	ret
  4182                              <2> %endif
  4183                              <2> 
  4184                              <2> %undef EXCLUDE
  4185                              <2> 
  4186                              <2> 
  4187                              <2> ;--------------------------------------------------------------------
  4188                              <2> ; DisplayContext_GetCharacterOutputParameterToDX
  4189                              <2> ;	Parameters:
  4190                              <2> ;		DS:		BDA segment (zero)
  4191                              <2> ;	Returns:
  4192                              <2> ;		DX:		User parameter for Character Output function
  4193                              <2> ;	Corrupts registers:
  4194                              <2> ;		Nothing
  4195                              <2> ;--------------------------------------------------------------------
  4196                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
  4197                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4198                              <2> DisplayContext_GetCharacterOutputParameterToDX:
  4199                              <2> 	mov		dx, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCharOutParam]
  4200                              <2> 	ret
  4201                              <2> %endif
  4202                              <2> 
  4203                              <2> 
  4204                              <2> ;--------------------------------------------------------------------
  4205                              <2> ; DisplayContext_GetCharacterOffsetToAXfromByteOffsetInAX
  4206                              <2> ;	Parameters:
  4207                              <2> ;		AX:		Offset in bytes from some character to another
  4208                              <2> ;		DS:		BDA segment (zero)
  4209                              <2> ;	Returns:
  4210                              <2> ;		AX:		Offset in characters from some character to another
  4211                              <2> ;	Corrupts registers:
  4212                              <2> ;		Nothing
  4213                              <2> ;--------------------------------------------------------------------
  4214                              <2> %ifndef MODULE_STRINGS_COMPRESSED
  4215                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4216                              <2> DisplayContext_GetCharacterOffsetToAXfromByteOffsetInAX:
  4217 000001A1 F6065F0401          <2> 	test	BYTE [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bFlags], FLG_CONTEXT_ATTRIBUTES
  4218 000001A6 740C                <2> 	jz		SHORT ReturnOffsetInAX
  4219 000001A8 D1F8                <2> 	sar		ax, 1		; BYTE count to WORD count
  4220 000001AA C3                  <2> 	ret
  4221                              <2> %endif
  4222                              <2> 
  4223                              <2> 
  4224                              <2> ;--------------------------------------------------------------------
  4225                              <2> ; DisplayContext_GetByteOffsetToAXfromCharacterOffsetInAX
  4226                              <2> ;	Parameters:
  4227                              <2> ;		AX:		Offset in characters from some character to another
  4228                              <2> ;		DS:		BDA segment (zero)
  4229                              <2> ;	Returns:
  4230                              <2> ;		AX:		Offset in bytes from some character to another
  4231                              <2> ;	Corrupts registers:
  4232                              <2> ;		Nothing
  4233                              <2> ;--------------------------------------------------------------------
  4234                              <2> %ifndef MODULE_STRINGS_COMPRESSED
  4235                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4236                              <2> DisplayContext_GetByteOffsetToAXfromCharacterOffsetInAX:
  4237 000001AB F6065F0401          <2> 	test	BYTE [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bFlags], FLG_CONTEXT_ATTRIBUTES
  4238 000001B0 7402                <2> 	jz		SHORT ReturnOffsetInAX
  4239 000001B2 D1E0                <2> 	sal		ax, 1		; WORD count to BYTE count
  4240                              <2> ALIGN DISPLAY_JUMP_ALIGN, ret
  4241                              <2> ReturnOffsetInAX:
  4242 000001B4 C3                  <2> 	ret
  4243                              <2> %endif
  4244                              <1> 	%include "DisplayCursor.asm"
  4245                              <2> ; Project name	:	Assembly Library
  4246                              <2> ; Description	:	Functions for managing display cursor.
  4247                              <2> 
  4248                              <2> ;
  4249                              <2> ; XTIDE Universal BIOS and Associated Tools
  4250                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  4251                              <2> ;
  4252                              <2> ; This program is free software; you can redistribute it and/or modify
  4253                              <2> ; it under the terms of the GNU General Public License as published by
  4254                              <2> ; the Free Software Foundation; either version 2 of the License, or
  4255                              <2> ; (at your option) any later version.
  4256                              <2> ;
  4257                              <2> ; This program is distributed in the hope that it will be useful,
  4258                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  4259                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  4260                              <2> ; GNU General Public License for more details.
  4261                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  4262                              <2> ;
  4263                              <2> 
  4264                              <2> ; Section containing code
  4265                              <2> SECTION .text
  4266                              <2> 
  4267                              <2> ;--------------------------------------------------------------------
  4268                              <2> ; DisplayCursor_GetDefaultCursorShapeToAX
  4269                              <2> ;	Parameters:
  4270                              <2> ;		DS:		BDA segment (zero)
  4271                              <2> ;	Returns:
  4272                              <2> ;		AX:		Default text mode cursor shape
  4273                              <2> ;	Corrupts registers:
  4274                              <2> ;		Nothing
  4275                              <2> ;--------------------------------------------------------------------
  4276                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4277                              <2> DisplayCursor_GetDefaultCursorShapeToAX:
  4278 000001B5 B80706              <2> 	mov		ax, CURSOR_NORMAL_COLOR				; CGA, EGA, VGA cursor
  4279 000001B8 803E490407          <2> 	cmp		BYTE [VIDEO_BDA.bMode], MDA_TEXT_MODE
  4280                              <2> 	eCMOVE	ax, CURSOR_NORMAL_MDA				; MDA cursor
  4281                              <3>  eCMOVZ %1, %2
  4282 000001BD 7503                <4>  jnz SHORT %%Return
  4283 000001BF B80C0B              <4>  mov %1, %2
  4284                              <4> %%Return:
  4285 000001C2 C3                  <2> 	ret
  4286                              <2> 
  4287                              <2> 
  4288                              <2> ;--------------------------------------------------------------------
  4289                              <2> ; DisplayCursor_SetShapeFromAX
  4290                              <2> ;	Parameters:
  4291                              <2> ;		AX:		Cursor shape (AH=Start scan line, AL=End scan line)
  4292                              <2> ;		DS:		BDA segment (zero)
  4293                              <2> ;	Returns:
  4294                              <2> ;		Nothing
  4295                              <2> ;	Corrupts registers:
  4296                              <2> ;		Nothing
  4297                              <2> ;--------------------------------------------------------------------
  4298                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4299                              <2> 	%ifndef MODULE_BOOT_MENU
  4300                              <2> 		%define EXCLUDE
  4301                              <2> 	%endif
  4302                              <2> %endif
  4303                              <2> 
  4304                              <2> %ifndef EXCLUDE
  4305                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4306                              <2> DisplayCursor_SetShapeFromAX:
  4307 000001C3 A35C04              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCursorShape], ax
  4308 000001C6 C3                  <2> 	ret
  4309                              <2> %endif
  4310                              <2> %undef EXCLUDE
  4311                              <2> 
  4312                              <2> 
  4313                              <2> ;--------------------------------------------------------------------
  4314                              <2> ; DisplayCursor_SetCoordinatesFromAX
  4315                              <2> ;	Parameters:
  4316                              <2> ;		AL:		Cursor column (X-coordinate)
  4317                              <2> ;		AH:		Cursor row (Y-coordinate)
  4318                              <2> ;		DS:		BDA segment (zero)
  4319                              <2> ;	Returns:
  4320                              <2> ;		DI:		Offset to cursor location in video RAM
  4321                              <2> ;	Corrupts registers:
  4322                              <2> ;		AX, DX
  4323                              <2> ;--------------------------------------------------------------------
  4324                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4325                              <2> DisplayCursor_SetCoordinatesFromAX:
  4326 000001C7 92                  <2> 	xchg	dx, ax
  4327 000001C8 A14A04              <2> 	mov		ax, [VIDEO_BDA.wColumns]		; Column count, 40 or 80
  4328 000001CB F6E6                <2> 	mul		dh								; AX = Column count * row index
  4329 000001CD 30F6                <2> 	xor		dh, dh
  4330 000001CF 01D0                <2> 	add		ax, dx							; Add column offset
  4331                              <2> 	eSHL_IM	ax, 1							; Convert to WORD offset
  4332                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  4333                              <3> %ifdef USE_386
  4334                              <3>  %if %2 = 1
  4335                              <3>  add %1, %1
  4336                              <3>  %else
  4337                              <3>  eSHIFT_IM %1, %2, shl
  4338                              <3>  %endif
  4339                              <3> %else
  4340                              <3>  eSHIFT_IM %1, %2, shl
  4341                              <4> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  4342                              <4> %ifndef USE_186
  4343                              <4>  %ifidni %1, cl
  4344                              <4>  times %2 %3 %1, 1
  4345                              <4>  %elifidni %1, ch
  4346                              <4>  times %2 %3 %1, 1
  4347                              <4>  %elifidni %1, cx
  4348                              <4>  times %2 %3 %1, 1
  4349                              <4>  %else
  4350                              <4>  %if %2 > 3
  4351                              <4>  push cx
  4352                              <4>  mov cl, %2
  4353                              <4>  %3 %1, cl
  4354                              <4>  pop cx
  4355                              <4>  %else
  4356 000001D1 D1E0                <4>  times %2 %3 %1, 1
  4357                              <4>  %endif
  4358                              <4>  %endif
  4359                              <4> 
  4360                              <4> %else
  4361                              <4>  %3 %1, %2
  4362                              <4> %endif
  4363                              <4> %endif
  4364                              <3> %endif
  4365                              <3> %endif
  4366 000001D3 03064E04            <2> 	add		ax, [VIDEO_BDA.wPageOffset]		; AX = Video RAM offset
  4367 000001D7 A35404              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition], ax
  4368 000001DA 97                  <2> 	xchg	di, ax
  4369 000001DB C3                  <2> 	ret
  4370                              <2> 
  4371                              <2> 
  4372                              <2> ;--------------------------------------------------------------------
  4373                              <2> ; DisplayCursor_GetSoftwareCoordinatesToAX
  4374                              <2> ;	Parameters:
  4375                              <2> ;		AX:		Offset to cursor location in selected page
  4376                              <2> ;		DS:		BDA segment (zero)
  4377                              <2> ;	Returns:
  4378                              <2> ;		AL:		Cursor column (X-coordinate)
  4379                              <2> ;		AH:		Cursor row (Y-coordinate)
  4380                              <2> ;	Corrupts registers:
  4381                              <2> ;		Nothing
  4382                              <2> ;--------------------------------------------------------------------
  4383                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4384                              <2> DisplayCursor_GetSoftwareCoordinatesToAX:
  4385 000001DC A15404              <2> 	mov		ax, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition]
  4386 000001DF 2B064E04            <2> 	sub		ax, [VIDEO_BDA.wPageOffset]
  4387 000001E3 D1E8                <2> 	shr		ax, 1							; WORD offset to character offset
  4388 000001E5 F6364A04            <2> 	div		BYTE [VIDEO_BDA.wColumns]		; AL = full rows, AH = column index for last row
  4389 000001E9 86C4                <2> 	xchg	al, ah
  4390 000001EB C3                  <2> 	ret
  4391                              <2> 
  4392                              <2> 
  4393                              <2> ;--------------------------------------------------------------------
  4394                              <2> ; DisplayCursor_GetHardwareCoordinatesToAX
  4395                              <2> ;	Parameters:
  4396                              <2> ;		DS:		BDA segment (zero)
  4397                              <2> ;	Returns:
  4398                              <2> ;		AL:		Hardware cursor column (X-coordinate)
  4399                              <2> ;		AH:		Hardware cursor row (Y-coordinate)
  4400                              <2> ;	Corrupts registers:
  4401                              <2> ;		DX
  4402                              <2> ;--------------------------------------------------------------------
  4403                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4404                              <2> DisplayCursor_GetHardwareCoordinatesToAX:
  4405 000001EC 51                  <2> 	push	cx
  4406 000001ED 53                  <2> 	push	bx
  4407                              <2> 
  4408 000001EE B403                <2> 	mov		ah, GET_CURSOR_POSITION_AND_SIZE
  4409 000001F0 8A3E6204            <2> 	mov		bh, [VIDEO_BDA.bActivePage]
  4410 000001F4 CD10                <2> 	int		BIOS_VIDEO_INTERRUPT_10h
  4411 000001F6 92                  <2> 	xchg	ax, dx
  4412                              <2> 
  4413 000001F7 5B                  <2> 	pop		bx
  4414 000001F8 59                  <2> 	pop		cx
  4415 000001F9 C3                  <2> 	ret
  4416                              <2> 
  4417                              <2> 
  4418                              <2> ;--------------------------------------------------------------------
  4419                              <2> ; DisplayCursor_SynchronizeShapeToHardware
  4420                              <2> ;	Parameters:
  4421                              <2> ;		DS:		BDA segment (zero)
  4422                              <2> ;	Returns:
  4423                              <2> ;		Nothing
  4424                              <2> ;	Corrupts registers:
  4425                              <2> ;		AX, DX
  4426                              <2> ;--------------------------------------------------------------------
  4427                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4428                              <2> DisplayCursor_SynchronizeShapeToHardware:
  4429 000001FA 8B165C04            <2> 	mov		dx, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCursorShape]
  4430                              <2> 	; Fall to .SetHardwareCursorShapeFromDX
  4431                              <2> 
  4432                              <2> ;--------------------------------------------------------------------
  4433                              <2> ; .SetHardwareCursorShapeFromDX
  4434                              <2> ;	Parameters:
  4435                              <2> ;		DX:		Cursor shape
  4436                              <2> ;		DS:		BDA segment (zero)
  4437                              <2> ;	Returns:
  4438                              <2> ;		Nothing
  4439                              <2> ;	Corrupts registers:
  4440                              <2> ;		AX
  4441                              <2> ;--------------------------------------------------------------------
  4442                              <2> .SetHardwareCursorShapeFromDX:
  4443 000001FE 3B166004            <2> 	cmp		dx, [VIDEO_BDA.wCursorShape]
  4444 00000202 740B                <2> 	je		SHORT .Return					; Return if no changes
  4445 00000204 51                  <2> 	push	cx
  4446 00000205 89D1                <2> 	mov		cx, dx							; BIOS wants cursor shape in CX
  4447 00000207 A04904              <2> 	mov		al, [VIDEO_BDA.bMode]			; Load video mode to prevent lock ups on some BIOSes
  4448 0000020A B401                <2> 	mov		ah, SET_TEXT_MODE_CURSOR_SHAPE
  4449 0000020C CD10                <2> 	int		BIOS_VIDEO_INTERRUPT_10h
  4450 0000020E 59                  <2> 	pop		cx
  4451                              <2> .Return:
  4452 0000020F C3                  <2> 	ret
  4453                              <2> 
  4454                              <2> 
  4455                              <2> ;--------------------------------------------------------------------
  4456                              <2> ; DisplayCursor_SynchronizeCoordinatesToHardware
  4457                              <2> ;	Parameters:
  4458                              <2> ;		DS:		BDA segment (zero)
  4459                              <2> ;	Returns:
  4460                              <2> ;		Nothing
  4461                              <2> ;	Corrupts registers:
  4462                              <2> ;		AX, DX
  4463                              <2> ;--------------------------------------------------------------------
  4464                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4465                              <2> DisplayCursor_SynchronizeCoordinatesToHardware:
  4466 00000210 E8C9FF              <2> 	call	DisplayCursor_GetSoftwareCoordinatesToAX
  4467                              <2> 	; Fall to .SetHardwareCursorCoordinatesFromAX
  4468                              <2> 
  4469                              <2> ;--------------------------------------------------------------------
  4470                              <2> ; .SetHardwareCursorCoordinatesFromAX
  4471                              <2> ;	Parameters:
  4472                              <2> ;		AL:		Cursor column (X-coordinate)
  4473                              <2> ;		AH:		Cursor row (Y-coordinate)
  4474                              <2> ;		DS:		BDA segment (zero)
  4475                              <2> ;	Returns:
  4476                              <2> ;		Nothing
  4477                              <2> ;	Corrupts registers:
  4478                              <2> ;		AX, DX
  4479                              <2> ;--------------------------------------------------------------------
  4480                              <2> .SetHardwareCursorCoordinatesFromAX:
  4481 00000213 53                  <2> 	push	bx
  4482 00000214 92                  <2> 	xchg	dx, ax							; BIOS wants coordinates in DX
  4483 00000215 B402                <2> 	mov		ah, SET_CURSOR_POSITION
  4484 00000217 8A3E6204            <2> 	mov		bh, [VIDEO_BDA.bActivePage]
  4485 0000021B CD10                <2> 	int		BIOS_VIDEO_INTERRUPT_10h
  4486 0000021D 5B                  <2> 	pop		bx
  4487 0000021E C3                  <2> 	ret
  4488                              <1> 	%include "DisplayPage.asm"
  4489                              <2> ; Project name	:	Assembly Library
  4490                              <2> ; Description	:	Functions for managing display page.
  4491                              <2> 
  4492                              <2> ;
  4493                              <2> ; XTIDE Universal BIOS and Associated Tools
  4494                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  4495                              <2> ;
  4496                              <2> ; This program is free software; you can redistribute it and/or modify
  4497                              <2> ; it under the terms of the GNU General Public License as published by
  4498                              <2> ; the Free Software Foundation; either version 2 of the License, or
  4499                              <2> ; (at your option) any later version.
  4500                              <2> ;
  4501                              <2> ; This program is distributed in the hope that it will be useful,
  4502                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  4503                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  4504                              <2> ; GNU General Public License for more details.
  4505                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  4506                              <2> ;
  4507                              <2> 
  4508                              <2> ; Section containing code
  4509                              <2> SECTION .text
  4510                              <2> 
  4511                              <2> ;--------------------------------------------------------------------
  4512                              <2> ; DisplayPage_SetFromAL
  4513                              <2> ;	Parameters:
  4514                              <2> ;		AL:		New display page
  4515                              <2> ;		DS:		BDA segment (zero)
  4516                              <2> ;	Returns:
  4517                              <2> ;		Nothing
  4518                              <2> ;	Corrupts registers:
  4519                              <2> ;		AX, DX
  4520                              <2> ;--------------------------------------------------------------------
  4521                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
  4522                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4523                              <2> DisplayPage_SetFromAL:
  4524                              <2> 	xor		ah, ah
  4525                              <2> 	mul		WORD [VIDEO_BDA.wBytesPerPage]		; AX = Offset to page
  4526                              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition], ax
  4527                              <2> 	ret
  4528                              <2> %endif
  4529                              <2> 
  4530                              <2> 
  4531                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4532                              <2> 	%define EXCLUDE
  4533                              <2> 	%ifdef MODULE_HOTKEYS
  4534                              <2> 		%undef EXCLUDE
  4535                              <2> 	%endif
  4536                              <2> 	%ifdef MODULE_BOOT_MENU
  4537                              <2> 		%undef EXCLUDE
  4538                              <2> 	%endif
  4539                              <2> %endif
  4540                              <2> 
  4541                              <2> %ifndef EXCLUDE
  4542                              <2> ;--------------------------------------------------------------------
  4543                              <2> ; DisplayPage_GetColumnsToALandRowsToAH
  4544                              <2> ;	Parameters:
  4545                              <2> ;		DS:		BDA segment (zero)
  4546                              <2> ;	Returns:
  4547                              <2> ;		AL:		Number of columns in selected text mode
  4548                              <2> ;		AH:		Number of rows in selected text mode
  4549                              <2> ;	Corrupts registers:
  4550                              <2> ;		Nothing
  4551                              <2> ;--------------------------------------------------------------------
  4552                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4553                              <2> DisplayPage_GetColumnsToALandRowsToAH:
  4554 0000021F A04A04              <2> 	mov		al, [VIDEO_BDA.wColumns]		; 40 or 80
  4555 00000222 B419                <2> 	mov		ah, 25							; Always 25 rows on standard text modes
  4556 00000224 C3                  <2> 	ret
  4557                              <2> %endif
  4558                              <2> %undef EXCLUDE
  4559                              <2> 
  4560                              <2> ;--------------------------------------------------------------------
  4561                              <2> ; DisplayPage_SynchronizeToHardware
  4562                              <2> ;	Parameters:
  4563                              <2> ;		DS:		BDA segment (zero)
  4564                              <2> ;	Returns:
  4565                              <2> ;		Nothing
  4566                              <2> ;	Corrupts registers:
  4567                              <2> ;		AX, DX
  4568                              <2> ;--------------------------------------------------------------------
  4569                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4570                              <2> DisplayPage_SynchronizeToHardware:
  4571 00000225 31D2                <2> 	xor		dx, dx
  4572 00000227 A15404              <2> 	mov		ax, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition]
  4573 0000022A F7364C04            <2> 	div		WORD [VIDEO_BDA.wBytesPerPage]	; AX = Page
  4574                              <2> 
  4575 0000022E 3A066204            <2> 	cmp		al, [VIDEO_BDA.bActivePage]
  4576 00000232 7404                <2> 	je		SHORT .Return					; Same page, no need to synchronize
  4577 00000234 B405                <2> 	mov		ah, SELECT_ACTIVE_DISPLAY_PAGE
  4578 00000236 CD10                <2> 	int		BIOS_VIDEO_INTERRUPT_10h
  4579                              <2> .Return:
  4580 00000238 C3                  <2> 	ret
  4581                              <1> 	%include "DisplayPrint.asm"					; must come before DisplayFormat/DisplayFormatCompressed
  4582                              <2> ; Project name	:	Assembly Library
  4583                              <2> ; Description	:	Functions for display output.
  4584                              <2> 
  4585                              <2> ;
  4586                              <2> ; XTIDE Universal BIOS and Associated Tools
  4587                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  4588                              <2> ;
  4589                              <2> ; This program is free software; you can redistribute it and/or modify
  4590                              <2> ; it under the terms of the GNU General Public License as published by
  4591                              <2> ; the Free Software Foundation; either version 2 of the License, or
  4592                              <2> ; (at your option) any later version.
  4593                              <2> ;
  4594                              <2> ; This program is distributed in the hope that it will be useful,
  4595                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  4596                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  4597                              <2> ; GNU General Public License for more details.
  4598                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  4599                              <2> ;
  4600                              <2> 
  4601                              <2> ; Section containing code
  4602                              <2> SECTION .text
  4603                              <2> 
  4604                              <2> 
  4605                              <2> ;--------------------------------------------------------------------
  4606                              <2> ; Supports following formatting types:
  4607                              <2> ;	%a		Specifies attribute for next character
  4608                              <2> ;	%A		Specifies attribute for remaining string (or until next %A)
  4609                              <2> ;	%d		Prints signed 16-bit decimal integer
  4610                              <2> ;	%u		Prints unsigned 16-bit decimal integer
  4611                              <2> ;	%x		Prints 16-bit hexadecimal integer
  4612                              <2> ;	%s		Prints string (from CS segment)
  4613                              <2> ;	%S		Prints string (far pointer)
  4614                              <2> ;	%c		Prints character
  4615                              <2> ;	%t		Prints character number of times (character needs to be pushed first, then repeat times)
  4616                              <2> ;	%%		Prints '%' character (no parameter pushed)
  4617                              <2> ;
  4618                              <2> ;	Any placeholder can be set to minimum length by specifying
  4619                              <2> ;	minimum number of characters. For example %8d would append spaces
  4620                              <2> ;	after integer so that at least 8 characters would be printed.
  4621                              <2> ;
  4622                              <2> ;	When placing '-' after number, then spaces will be used for prepending.
  4623                              <2> ;	For example %8-d would prepend integer with spaces so that at least
  4624                              <2> ;	8 characters would be printed.
  4625                              <2> ;
  4626                              <2> ; DisplayPrint_FormattedNullTerminatedStringFromCSSI
  4627                              <2> ;	Parameters:
  4628                              <2> ;		BP:		SP before pushing parameters
  4629                              <2> ;		DS:		BDA segment (zero)
  4630                              <2> ;		CS:SI:	Pointer to string to format
  4631                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4632                              <2> ;		Stack:	Parameters for formatting placeholders.
  4633                              <2> ;				Parameter for first placeholder must be pushed first.
  4634                              <2> ;				Low word must pushed first for placeholders requiring
  4635                              <2> ;				32-bit parameters (two words).
  4636                              <2> ;	Returns:
  4637                              <2> ;		DI:		Updated offset to video RAM
  4638                              <2> ;	Corrupts registers:
  4639                              <2> ;		AX, DX
  4640                              <2> ;--------------------------------------------------------------------
  4641                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4642                              <2> DisplayPrint_FormattedNullTerminatedStringFromCSSI:
  4643 00000239 55                  <2> 	push	bp
  4644 0000023A 56                  <2> 	push	si
  4645 0000023B 51                  <2> 	push	cx
  4646 0000023C 53                  <2> 	push	bx
  4647 0000023D FF365E04            <2> 	push	WORD [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute]
  4648                              <2> 
  4649 00000241 4D                  <2> 	dec		bp					; Point BP to...
  4650 00000242 4D                  <2> 	dec		bp					; ...first stack parameter
  4651 00000243 E8C900              <2> 	call	DisplayFormat_ParseCharacters
  4652                              <2> 
  4653                              <2> 	; Pop original character attribute
  4654 00000246 58                  <2> 	pop		ax
  4655 00000247 A25E04              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute], al
  4656                              <2> 
  4657 0000024A 5B                  <2> 	pop		bx
  4658 0000024B 59                  <2> 	pop		cx
  4659 0000024C 5E                  <2> 	pop		si
  4660 0000024D 5D                  <2> 	pop		bp
  4661                              <2> 
  4662 0000024E C3                  <2> 	ret
  4663                              <2> 
  4664                              <2> 
  4665                              <2> ;--------------------------------------------------------------------
  4666                              <2> ; DisplayPrint_SignedWordFromAXWithBaseInBX
  4667                              <2> ;	Parameters:
  4668                              <2> ;		AX:		Word to display
  4669                              <2> ;		BX:		Integer base (binary=2, octal=8, decimal=10, hexadecimal=16)
  4670                              <2> ;		DS:		BDA segment (zero)
  4671                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4672                              <2> ;	Returns:
  4673                              <2> ;		DI:		Updated offset to video RAM
  4674                              <2> ;	Corrupts registers:
  4675                              <2> ;		AX, DX
  4676                              <2> ;--------------------------------------------------------------------
  4677                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4678                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4679                              <2> DisplayPrint_SignedWordFromAXWithBaseInBX:
  4680 0000024F 85C0                <2> 	test	ax, ax
  4681 00000251 7909                <2> 	jns		SHORT DisplayPrint_WordFromAXWithBaseInBX
  4682                              <2> 
  4683 00000253 50                  <2> 	push	ax
  4684 00000254 B02D                <2> 	mov		al, '-'
  4685 00000256 E89500              <2> 	call	DisplayPrint_CharacterFromAL
  4686 00000259 58                  <2> 	pop		ax
  4687 0000025A F7D8                <2> 	neg		ax
  4688                              <2> 	; Fall to DisplayPrint_WordFromAXWithBaseInBX
  4689                              <2> %endif
  4690                              <2> 
  4691                              <2> 
  4692                              <2> ;--------------------------------------------------------------------
  4693                              <2> ; DisplayPrint_WordFromAXWithBaseInBX
  4694                              <2> ;	Parameters:
  4695                              <2> ;		AX:		Word to display
  4696                              <2> ;		BX:		Integer base (binary=2, octal=8, decimal=10, hexadecimal=16)
  4697                              <2> ;		DS:		BDA segment (zero)
  4698                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4699                              <2> ;	Returns:
  4700                              <2> ;		DI:		Updated offset to video RAM
  4701                              <2> ;	Corrupts registers:
  4702                              <2> ;		AX, DX
  4703                              <2> ;--------------------------------------------------------------------
  4704                              <2> %ifndef MODULE_STRINGS_COMPRESSED
  4705                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4706                              <2> DisplayPrint_WordFromAXWithBaseInBX:
  4707 0000025C 51                  <2> 	push	cx
  4708 0000025D 53                  <2> 	push	bx
  4709                              <2> 
  4710 0000025E 31C9                <2> 	xor		cx, cx
  4711                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4712                              <2> .DivideLoop:
  4713 00000260 31D2                <2> 	xor		dx, dx				; DX:AX now holds the integer
  4714 00000262 F7F3                <2> 	div		bx					; Divide DX:AX by base
  4715 00000264 52                  <2> 	push	dx					; Push remainder
  4716 00000265 41                  <2> 	inc		cx					; Increment character count
  4717 00000266 85C0                <2> 	test	ax, ax				; All divided?
  4718 00000268 75F6                <2> 	jnz		SHORT .DivideLoop	;  If not, loop
  4719                              <2> 
  4720                              <2> PrintAllPushedDigits:
  4721 0000026A BB[7802]            <2> 	mov		bx, g_rgcDigitToCharacter
  4722                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4723                              <2> .PrintNextDigit:
  4724 0000026D 58                  <2> 	pop		ax					; Pop digit
  4725 0000026E 2ED7                <2> 	cs xlatb
  4726 00000270 E87B00              <2> 	call	DisplayPrint_CharacterFromAL
  4727 00000273 E2F8                <2> 	loop	.PrintNextDigit
  4728                              <2> 
  4729 00000275 5B                  <2> 	pop		bx
  4730 00000276 59                  <2> 	pop		cx
  4731 00000277 C3                  <2> 	ret
  4732                              <2> 
  4733 00000278 303132333435363738- <2> g_rgcDigitToCharacter:	db	"0123456789ABCDEF"
  4734 00000281 39414243444546      <2>
  4735                              <2> 
  4736                              <2> %endif ; MODULE_STRINGS_COMPRESSED
  4737                              <2> 
  4738                              <2> ;--------------------------------------------------------------------
  4739                              <2> ; DisplayPrint_QWordFromSSBPwithBaseInBX
  4740                              <2> ;	Parameters:
  4741                              <2> ;		SS:BP:	QWord to display
  4742                              <2> ;		BX:		Integer base (binary=2, octal=8, decimal=10, hexadecimal=16)
  4743                              <2> ;		DS:		BDA segment (zero)
  4744                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4745                              <2> ;	Returns:
  4746                              <2> ;		DI:		Updated offset to video RAM
  4747                              <2> ;	Corrupts registers:
  4748                              <2> ;		AX, DX, [SS:BP]
  4749                              <2> ;--------------------------------------------------------------------
  4750                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
  4751                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4752                              <2> DisplayPrint_QWordFromSSBPwithBaseInBX:
  4753                              <2> 	push	cx
  4754                              <2> 	push	bx
  4755                              <2> 
  4756                              <2> 	mov		cx, bx				; CX = Integer base
  4757                              <2> 	xor		bx, bx				; BX = Character count
  4758                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4759                              <2> .DivideLoop:
  4760                              <2> 	call	Math_DivQWatSSBPbyCX; Divide by base
  4761                              <2> 	push	dx					; Push remainder
  4762                              <2> 	inc		bx					; Increment character count
  4763                              <2> 	cmp		WORD [bp], BYTE 0	; All divided?
  4764                              <2> 	jne		SHORT .DivideLoop	;  If not, loop
  4765                              <2> 	mov		cx, bx				; Character count to CX
  4766                              <2> 	jmp		SHORT PrintAllPushedDigits
  4767                              <2> %endif
  4768                              <2> 
  4769                              <2> 
  4770                              <2> ;--------------------------------------------------------------------
  4771                              <2> ; DisplayPrint_CharacterBufferFromBXSIwithLengthInCX
  4772                              <2> ;	Parameters:
  4773                              <2> ;		CX:		Buffer length (characters)
  4774                              <2> ;		BX:SI:	Ptr to NULL terminated string
  4775                              <2> ;		DS:		BDA segment (zero)
  4776                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4777                              <2> ;	Returns:
  4778                              <2> ;		DI:		Updated offset to video RAM
  4779                              <2> ;	Corrupts registers:
  4780                              <2> ;		AX, DX
  4781                              <2> ;--------------------------------------------------------------------
  4782                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4783                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4784                              <2> DisplayPrint_CharacterBufferFromBXSIwithLengthInCX:
  4785 00000288 E310                <2> 	jcxz	.NothingToPrintSinceZeroLength
  4786 0000028A 56                  <2> 	push	si
  4787 0000028B 51                  <2> 	push	cx
  4788                              <2> 
  4789                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4790                              <2> .PrintNextCharacter:
  4791 0000028C 8EDB                <2> 	mov		ds, bx
  4792 0000028E AC                  <2> 	lodsb
  4793                              <2> 	LOAD_BDA_SEGMENT_TO	ds, dx
  4794                              <3> %ifndef USE_186
  4795 0000028F 31D2                <3>  xor %2, %2
  4796 00000291 8EDA                <3>  mov %1, %2
  4797                              <3> %elifidn %3, !
  4798                              <3>  xor %2, %2
  4799                              <3>  mov %1, %2
  4800                              <3> %else
  4801                              <3>  push BYTE 0
  4802                              <3>  pop %1
  4803                              <3> %endif
  4804 00000293 E85800              <2> 	call	DisplayPrint_CharacterFromAL
  4805 00000296 E2F4                <2> 	loop	.PrintNextCharacter
  4806                              <2> 
  4807 00000298 59                  <2> 	pop		cx
  4808 00000299 5E                  <2> 	pop		si
  4809                              <2> .NothingToPrintSinceZeroLength:
  4810 0000029A C3                  <2> 	ret
  4811                              <2> %endif
  4812                              <2> 
  4813                              <2> 
  4814                              <2> ;--------------------------------------------------------------------
  4815                              <2> ; DisplayPrint_ClearScreenWithCharInALandAttributeInAH
  4816                              <2> ;	Parameters:
  4817                              <2> ;		AL:		Character to clear with
  4818                              <2> ;		AH:		Attribute to clear with
  4819                              <2> ;		DS:		BDA segment (zero)
  4820                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4821                              <2> ;	Returns:
  4822                              <2> ;		Nothing
  4823                              <2> ;	Corrupts registers:
  4824                              <2> ;		AX, DX
  4825                              <2> ;--------------------------------------------------------------------
  4826                              <2> %ifdef INCLUDE_MENU_LIBRARY
  4827                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4828                              <2> DisplayPrint_ClearScreenWithCharInALandAttributeInAH:
  4829 0000029B 57                  <2> 	push	di
  4830 0000029C 51                  <2> 	push	cx
  4831                              <2> 
  4832 0000029D 91                  <2> 	xchg	cx, ax
  4833 0000029E 31C0                <2> 	xor		ax, ax
  4834 000002A0 E824FF              <2> 	call	DisplayCursor_SetCoordinatesFromAX		; Updates DI
  4835 000002A3 E879FF              <2> 	call	DisplayPage_GetColumnsToALandRowsToAH
  4836 000002A6 F6E4                <2> 	mul		ah		; AX = AL*AH = Characters on screen
  4837 000002A8 91                  <2> 	xchg	cx, ax	; AX = Char+Attr, CX = WORDs to store
  4838 000002A9 F3AB                <2> 	rep stosw
  4839                              <2> 
  4840 000002AB 59                  <2> 	pop		cx
  4841 000002AC 5F                  <2> 	pop		di
  4842 000002AD 893E5404            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition], di
  4843 000002B1 C3                  <2> 	ret
  4844                              <2> %endif
  4845                              <2> 
  4846                              <2> 
  4847                              <2> ;--------------------------------------------------------------------
  4848                              <2> ; DisplayPrint_ClearAreaWithHeightInAHandWidthInAL
  4849                              <2> ;	Parameters:
  4850                              <2> ;		AH:		Area height
  4851                              <2> ;		AL:		Area width
  4852                              <2> ;		DS:		BDA segment (zero)
  4853                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4854                              <2> ;	Returns:
  4855                              <2> ;		DI:		Updated offset to video RAM
  4856                              <2> ;	Corrupts registers:
  4857                              <2> ;		AX, DX
  4858                              <2> ;--------------------------------------------------------------------
  4859                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4860                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4861                              <2> DisplayPrint_ClearAreaWithHeightInAHandWidthInAL:
  4862 000002B2 56                  <2> 	push	si
  4863 000002B3 51                  <2> 	push	cx
  4864 000002B4 53                  <2> 	push	bx
  4865                              <2> 
  4866 000002B5 93                  <2> 	xchg	bx, ax							; Area size to BX
  4867 000002B6 E823FF              <2> 	call	DisplayCursor_GetSoftwareCoordinatesToAX
  4868 000002B9 96                  <2> 	xchg	si, ax							; Software (Y,X) coordinates now in SI
  4869 000002BA 31C9                <2> 	xor		cx, cx
  4870                              <2> 
  4871                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4872                              <2> .ClearRowLoop:
  4873 000002BC 88D9                <2> 	mov		cl, bl							; Area width now in CX
  4874 000002BE B0B0                <2> 	mov		al, SCREEN_BACKGROUND_CHARACTER
  4875 000002C0 E81000              <2> 	call	DisplayPrint_RepeatCharacterFromALwithCountInCX
  4876                              <2> 
  4877 000002C3 96                  <2> 	xchg	ax, si							; Coordinates to AX
  4878 000002C4 FEC4                <2> 	inc		ah								; Increment row
  4879 000002C6 89C6                <2> 	mov		si, ax
  4880 000002C8 E8FCFE              <2> 	call	DisplayCursor_SetCoordinatesFromAX
  4881 000002CB FECF                <2> 	dec		bh								; Decrement rows left
  4882 000002CD 75ED                <2> 	jnz		SHORT .ClearRowLoop
  4883                              <2> 
  4884 000002CF 5B                  <2> 	pop		bx
  4885 000002D0 59                  <2> 	pop		cx
  4886 000002D1 5E                  <2> 	pop		si
  4887 000002D2 C3                  <2> 	ret
  4888                              <2> %endif
  4889                              <2> 
  4890                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  4891                              <2> 	%define EXCLUDE
  4892                              <2> 	%ifdef MODULE_HOTKEYS
  4893                              <2> 		%undef EXCLUDE
  4894                              <2> 	%endif
  4895                              <2> 	%ifdef MODULE_BOOT_MENU
  4896                              <2> 		%undef EXCLUDE
  4897                              <2> 	%endif
  4898                              <2> %endif
  4899                              <2> 
  4900                              <2> %ifndef EXCLUDE
  4901                              <2> ;--------------------------------------------------------------------
  4902                              <2> ; DisplayPrint_RepeatCharacterFromALwithCountInCX
  4903                              <2> ;	Parameters:
  4904                              <2> ;		AL:		Character to display
  4905                              <2> ;		CX:		Repeat count
  4906                              <2> ;		DS:		BDA segment (zero)
  4907                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4908                              <2> ;	Returns:
  4909                              <2> ;		DI:		Updated offset to video RAM
  4910                              <2> ;	Corrupts registers:
  4911                              <2> ;		DX
  4912                              <2> ;--------------------------------------------------------------------
  4913                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4914                              <2> DisplayPrint_RepeatCharacterFromALwithCountInCX:
  4915 000002D3 E309                <2> 	jcxz	.NothingToRepeat
  4916 000002D5 51                  <2> 	push	cx
  4917                              <2> 
  4918                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4919                              <2> .RepeatCharacter:
  4920 000002D6 50                  <2> 	push	ax
  4921 000002D7 E81400              <2> 	call	DisplayPrint_CharacterFromAL
  4922 000002DA 58                  <2> 	pop		ax
  4923 000002DB E2F9                <2> 	loop	.RepeatCharacter
  4924                              <2> 
  4925 000002DD 59                  <2> 	pop		cx
  4926                              <2> .NothingToRepeat:
  4927 000002DE C3                  <2> 	ret
  4928                              <2> %endif
  4929                              <2> %undef EXCLUDE
  4930                              <2> 
  4931                              <2> ;--------------------------------------------------------------------
  4932                              <2> ; DisplayPrint_NullTerminatedStringFromCSSI
  4933                              <2> ;	Parameters:
  4934                              <2> ;		CS:SI:	Ptr to NULL terminated string
  4935                              <2> ;		DS:		BDA segment (zero)
  4936                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4937                              <2> ;	Returns:
  4938                              <2> ;		DI:		Updated offset to video RAM
  4939                              <2> ;	Corrupts registers:
  4940                              <2> ;		AX, DX
  4941                              <2> ;--------------------------------------------------------------------
  4942                              <2> %ifndef MODULE_STRINGS_COMPRESSED
  4943                              <2> ;;;
  4944                              <2> ;;; Take care when using this routine with compressed strings (which is why it is disabled).
  4945                              <2> ;;; All strings in CSSI should go through the DisplayFormatCompressed code to be decoded.
  4946                              <2> ;;;
  4947                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4948                              <2> DisplayPrint_NullTerminatedStringFromCSSI:
  4949 000002DF 53                  <2> 	push	bx
  4950 000002E0 8CCB                <2> 	mov		bx, cs
  4951 000002E2 E81500              <2> 	call	DisplayPrint_NullTerminatedStringFromBXSI
  4952 000002E5 5B                  <2> 	pop		bx
  4953 000002E6 C3                  <2> 	ret
  4954                              <2> %endif
  4955                              <2> 
  4956                              <2> 
  4957                              <2> ;;;
  4958                              <2> ;;; Note that the following routines need to be at the bottom of this file
  4959                              <2> ;;; to accomodate short jumps from the next file (DisplayFormat/DisplayFormatCompressed)
  4960                              <2> ;;;
  4961                              <2> 
  4962                              <2> ;--------------------------------------------------------------------
  4963                              <2> ; DisplayPrint_Newline
  4964                              <2> ;	Parameters:
  4965                              <2> ;		DS:		BDA segment (zero)
  4966                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4967                              <2> ;	Returns:
  4968                              <2> ;		DI:		Updated offset to video RAM
  4969                              <2> ;	Corrupts registers:
  4970                              <2> ;		AX, DX
  4971                              <2> ;--------------------------------------------------------------------
  4972                              <2> %ifdef MODULE_STRINGS_COMPRESSED
  4973                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4974                              <2> DisplayPrint_Newline_FormatAdjustBP:
  4975                              <2> 	inc		bp					; we didn't need a parameter after all, readjust BP
  4976                              <2> 	inc		bp
  4977                              <2> 	; fall through to DisplayPrint_Newline
  4978                              <2> %endif
  4979                              <2> 
  4980                              <2> ALIGN DISPLAY_JUMP_ALIGN
  4981                              <2> DisplayPrint_Newline:
  4982 000002E7 B00A                <2> 	mov		al, LF
  4983 000002E9 E80200              <2> 	call	DisplayPrint_CharacterFromAL
  4984 000002EC B00D                <2> 	mov		al, CR
  4985                              <2> 	; Fall to DisplayPrint_CharacterFromAL
  4986                              <2> 
  4987                              <2> ;--------------------------------------------------------------------
  4988                              <2> ; DisplayPrint_CharacterFromAL
  4989                              <2> ;	Parameters:
  4990                              <2> ;		AL:		Character to display
  4991                              <2> ;               Zero value is ignored (no character is printed)
  4992                              <2> ;		DS:		BDA segment (zero)
  4993                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  4994                              <2> ;	Returns:
  4995                              <2> ;		DI:		Updated offset to video RAM
  4996                              <2> ;	Corrupts registers:
  4997                              <2> ;		AX, DX
  4998                              <2> ;--------------------------------------------------------------------
  4999                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5000                              <2> DisplayPrint_CharacterFromAL:
  5001 000002EE 84C0                <2> 	test	al, al
  5002 000002F0 741C                <2> 	jz		DisplayPrint_Ret
  5003                              <2> 
  5004 000002F2 8A265E04            <2> 	mov		ah, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute]
  5005 000002F6 FF265804            <2> 	jmp		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fnCharOut]
  5006                              <2> 
  5007                              <2> 
  5008                              <2> ;--------------------------------------------------------------------
  5009                              <2> ; DisplayPrint_NullTerminatedStringFromBXSI
  5010                              <2> ;	Parameters:
  5011                              <2> ;		DS:		BDA segment (zero)
  5012                              <2> ;		BX:SI:	Ptr to NULL terminated string
  5013                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  5014                              <2> ;	Returns:
  5015                              <2> ;		DI:		Updated offset to video RAM
  5016                              <2> ;	Corrupts registers:
  5017                              <2> ;		AX, DX
  5018                              <2> ;--------------------------------------------------------------------
  5019                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5020                              <2> DisplayPrint_NullTerminatedStringFromBXSI:
  5021 000002FA 56                  <2> 	push	si
  5022 000002FB 51                  <2> 	push	cx
  5023                              <2> 
  5024 000002FC 31C9                <2> 	xor		cx, cx
  5025                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5026                              <2> .PrintNextCharacter:
  5027 000002FE 8EDB                <2> 	mov		ds, bx				; String segment to DS
  5028 00000300 AC                  <2> 	lodsb
  5029 00000301 8ED9                <2> 	mov		ds, cx				; BDA segment to DS
  5030 00000303 84C0                <2> 	test	al, al				; NULL?
  5031 00000305 7405                <2> 	jz		SHORT .EndOfString
  5032 00000307 E8E4FF              <2> 	call	DisplayPrint_CharacterFromAL
  5033 0000030A EBF2                <2> 	jmp		SHORT .PrintNextCharacter
  5034                              <2> 
  5035                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5036                              <2> .EndOfString:
  5037 0000030C 59                  <2> 	pop		cx
  5038 0000030D 5E                  <2> 	pop		si
  5039                              <2> 
  5040                              <2> DisplayPrint_Ret:				; random ret to jump to
  5041 0000030E C3                  <2> 	ret
  5042                              <2> 
  5043                              <1> %ifdef MODULE_STRINGS_COMPRESSED
  5044                              <1> 	%include "DisplayFormatCompressed.asm"
  5045                              <1> %else
  5046                              <1> 	%include "DisplayFormat.asm"
  5047                              <2> ; Project name	:	Assembly Library
  5048                              <2> ; Description	:	Functions for displaying formatted strings.
  5049                              <2> 
  5050                              <2> ;
  5051                              <2> ; XTIDE Universal BIOS and Associated Tools
  5052                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  5053                              <2> ;
  5054                              <2> ; This program is free software; you can redistribute it and/or modify
  5055                              <2> ; it under the terms of the GNU General Public License as published by
  5056                              <2> ; the Free Software Foundation; either version 2 of the License, or
  5057                              <2> ; (at your option) any later version.
  5058                              <2> ;
  5059                              <2> ; This program is distributed in the hope that it will be useful,
  5060                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  5061                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  5062                              <2> ; GNU General Public License for more details.
  5063                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  5064                              <2> ;
  5065                              <2> 
  5066                              <2> ; Section containing code
  5067                              <2> SECTION .text
  5068                              <2> 
  5069                              <2> ;--------------------------------------------------------------------
  5070                              <2> ; DisplayFormat_ParseCharacters
  5071                              <2> ;	Parameters:
  5072                              <2> ;		DS:		BDA segment (zero)
  5073                              <2> ;		SS:BP:	Pointer to first format parameter (-=2 updates to next parameter)
  5074                              <2> ;		CS:SI:	Pointer to string to format
  5075                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  5076                              <2> ;	Returns:
  5077                              <2> ;		CS:SI:	Ptr to end of format string (ptr to one past NULL)
  5078                              <2> ;		DI:		Updated offset to video RAM
  5079                              <2> ;	Corrupts registers:
  5080                              <2> ;		AX, BX, CX, DX, BP
  5081                              <2> ;--------------------------------------------------------------------
  5082                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5083                              <2> DisplayFormat_ParseCharacters:
  5084 0000030F E82D00              <2> 	call	ReadCharacterAndTestForNull
  5085 00000312 741C                <2> 	jz		SHORT ReturnFromFormat
  5086                              <2> 
  5087                              <2> 	ePUSH_T	cx, DisplayFormat_ParseCharacters	; Return address
  5088                              <3> %ifndef USE_186
  5089                              <3>  %ifidni %2, 0
  5090                              <3>  xor %1, %1
  5091                              <3>  %else
  5092 00000314 B9[0F03]            <3>  mov %1, %2
  5093                              <3>  %endif
  5094 00000317 51                  <3>  push %1
  5095                              <3> 
  5096                              <3> %else
  5097                              <3>  push %2
  5098                              <3> %endif
  5099 00000318 31C9                <2> 	xor		cx, cx								; Initial placeholder size
  5100 0000031A 3C25                <2> 	cmp		al, '%'								; Format specifier?
  5101 0000031C 75D0                <2> 	jne		SHORT DisplayPrint_CharacterFromAL
  5102                              <2> 	; Fall to ParseFormatSpecifier
  5103                              <2> 
  5104                              <2> ;--------------------------------------------------------------------
  5105                              <2> ; ParseFormatSpecifier
  5106                              <2> ;	Parameters:
  5107                              <2> ;		CX:		Placeholder size
  5108                              <2> ;		DS:		BDA segment (zero)
  5109                              <2> ;		SS:BP:	Pointer to first format parameter (-=2 for next parameter)
  5110                              <2> ;		CS:SI:	Pointer to string to format
  5111                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  5112                              <2> ;	Returns:
  5113                              <2> ;		SI:		Updated to first unparsed character
  5114                              <2> ;		DI:		Updated offset to video RAM
  5115                              <2> ;		BP:		Updated to next format parameter
  5116                              <2> ;	Corrupts registers:
  5117                              <2> ;		AX, BX, CX, DX
  5118                              <2> ;--------------------------------------------------------------------
  5119                              <2> ParseFormatSpecifier:
  5120 0000031E E81E00              <2> 	call	ReadCharacterAndTestForNull
  5121 00000321 E80411              <2> 	call	Char_IsDecimalDigitInAL
  5122 00000324 720B                <2> 	jc		SHORT ParsePlaceholderSizeDigitFromALtoCX
  5123 00000326 E81B00              <2> 	call	GetFormatSpecifierParserToAX
  5124 00000329 FFD0                <2> 	call	ax				; Parser function
  5125 0000032B 4D                  <2> 	dec		bp
  5126 0000032C 4D                  <2> 	dec		bp				; SS:BP now points to next parameter
  5127 0000032D 41                  <2> 	inc		cx
  5128 0000032E E25D                <2> 	loop	PrependOrAppendSpaces
  5129                              <2> ReturnFromFormat:
  5130 00000330 C3                  <2> 	ret
  5131                              <2> 
  5132                              <2> ;--------------------------------------------------------------------
  5133                              <2> ; ParsePlaceholderSizeDigitFromALtoCX
  5134                              <2> ;	Parameters:
  5135                              <2> ;		AL:		Digit character from format string
  5136                              <2> ;		CX:		Current placeholder size
  5137                              <2> ;		DS:		BDA segment (zero)
  5138                              <2> ;	Returns:
  5139                              <2> ;		CX:		Current placeholder size
  5140                              <2> ;		Jumps back to ParseFormatSpecifier
  5141                              <2> ;	Corrupts registers:
  5142                              <2> ;		AX
  5143                              <2> ;--------------------------------------------------------------------
  5144                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5145                              <2> ParsePlaceholderSizeDigitFromALtoCX:
  5146 00000331 893E5404            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition], di
  5147 00000335 2C30                <2> 	sub		al, '0'				; Digit '0'...'9' to integer 0...9
  5148 00000337 88CC                <2> 	mov		ah, cl				; Previous number parameter to AH
  5149 00000339 D50A                <2> 	aad							; AL += (AH * 10)
  5150 0000033B 88C1                <2> 	mov		cl, al				; Updated number parameter now in CX
  5151 0000033D EBDF                <2> 	jmp		SHORT ParseFormatSpecifier
  5152                              <2> 
  5153                              <2> 
  5154                              <2> ;--------------------------------------------------------------------
  5155                              <2> ; ReadCharacterAndTestForNull
  5156                              <2> ;	Parameters:
  5157                              <2> ;		CS:SI:	Pointer next character from string
  5158                              <2> ;	Returns:
  5159                              <2> ;		AL:		Character from string
  5160                              <2> ;		SI:		Incremented to next character
  5161                              <2> ;		ZF:		Set if NULL, cleared if valid character
  5162                              <2> ;	Corrupts registers:
  5163                              <2> ;		Nothing
  5164                              <2> ;--------------------------------------------------------------------
  5165                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5166                              <2> ReadCharacterAndTestForNull:
  5167 0000033F 2EAC                <2> 	cs lodsb								; Load from CS:SI to AL
  5168 00000341 84C0                <2> 	test	al, al							; NULL to end string?
  5169 00000343 C3                  <2> 	ret
  5170                              <2> 
  5171                              <2> 
  5172                              <2> ;--------------------------------------------------------------------
  5173                              <2> ; GetFormatSpecifierParserToAX
  5174                              <2> ;	Parameters:
  5175                              <2> ;		AL:		Format specifier character
  5176                              <2> ;	Returns:
  5177                              <2> ;		AX:		Offset to parser function
  5178                              <2> ;	Corrupts registers:
  5179                              <2> ;		AX, BX
  5180                              <2> ;--------------------------------------------------------------------
  5181                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5182                              <2> GetFormatSpecifierParserToAX:
  5183 00000344 BB[6303]            <2> 	mov		bx, .rgcFormatCharToLookupIndex
  5184                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5185                              <2> .CheckForNextSpecifierParser:
  5186 00000347 2E3A07              <2> 	cmp		al, [cs:bx]
  5187 0000034A 740B                <2> 	je		SHORT .ConvertIndexToFunctionOffset
  5188 0000034C 43                  <2> 	inc		bx
  5189 0000034D 81FB[7103]          <2> 	cmp		bx, .rgcFormatCharToLookupIndexEnd
  5190 00000351 72F4                <2> 	jb		SHORT .CheckForNextSpecifierParser
  5191 00000353 B8[5E04]            <2> 	mov		ax, c_FormatCharacter
  5192 00000356 C3                  <2> 	ret
  5193                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5194                              <2> .ConvertIndexToFunctionOffset:
  5195 00000357 81EB[6303]          <2> 	sub		bx, .rgcFormatCharToLookupIndex
  5196                              <2> 	eSHL_IM	bx, 1				; Shift for WORD lookup
  5197                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  5198                              <3> %ifdef USE_386
  5199                              <3>  %if %2 = 1
  5200                              <3>  add %1, %1
  5201                              <3>  %else
  5202                              <3>  eSHIFT_IM %1, %2, shl
  5203                              <3>  %endif
  5204                              <3> %else
  5205                              <3>  eSHIFT_IM %1, %2, shl
  5206                              <4> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  5207                              <4> %ifndef USE_186
  5208                              <4>  %ifidni %1, cl
  5209                              <4>  times %2 %3 %1, 1
  5210                              <4>  %elifidni %1, ch
  5211                              <4>  times %2 %3 %1, 1
  5212                              <4>  %elifidni %1, cx
  5213                              <4>  times %2 %3 %1, 1
  5214                              <4>  %else
  5215                              <4>  %if %2 > 3
  5216                              <4>  push cx
  5217                              <4>  mov cl, %2
  5218                              <4>  %3 %1, cl
  5219                              <4>  pop cx
  5220                              <4>  %else
  5221 0000035B D1E3                <4>  times %2 %3 %1, 1
  5222                              <4>  %endif
  5223                              <4>  %endif
  5224                              <4> 
  5225                              <4> %else
  5226                              <4>  %3 %1, %2
  5227                              <4> %endif
  5228                              <4> %endif
  5229                              <3> %endif
  5230                              <3> %endif
  5231 0000035D 2E8B87[7103]        <2> 	mov		ax, [cs:bx+.rgfnFormatSpecifierParser]
  5232 00000362 C3                  <2> 	ret
  5233                              <2> 
  5234                              <2> .rgcFormatCharToLookupIndex:
  5235                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5236 00000363 614941647578735363- <2> 	db		"aIAduxsSctz-+%"
  5237 0000036C 747A2D2B25          <2>
  5238                              <2> %else
  5239                              <2> 	db		"IAuxscz-"		; Required by XTIDE Universal BIOS
  5240                              <2> %endif
  5241                              <2> .rgcFormatCharToLookupIndexEnd:
  5242                              <2> ALIGN WORD_ALIGN
  5243                              <2> .rgfnFormatSpecifierParser:
  5244                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5245 00000371 [DF03]              <2> 	dw		a_FormatAttributeForNextCharacter
  5246                              <2> %endif
  5247 00000373 [1E04]              <2> 	dw		I_FormatDashForZero
  5248 00000375 [F703]              <2> 	dw		A_FormatAttributeForRemainingString
  5249                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5250 00000377 [FE03]              <2> 	dw		d_FormatSignedDecimalWord
  5251                              <2> %endif
  5252 00000379 [0704]              <2> 	dw		u_FormatUnsignedDecimalWord
  5253 0000037B [1004]              <2> 	dw		x_FormatHexadecimalWord
  5254 0000037D [2A04]              <2> 	dw		s_FormatStringFromSegmentCS
  5255                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5256 0000037F [4F04]              <2> 	dw		S_FormatStringFromFarPointer
  5257                              <2> %endif
  5258 00000381 [5E04]              <2> 	dw		c_FormatCharacter
  5259                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5260 00000383 [6404]              <2> 	dw		t_FormatRepeatCharacter
  5261                              <2> %endif
  5262 00000385 [4304]              <2> 	dw		z_FormatStringFromSegmentZero
  5263 00000387 [7704]              <2> 	dw		PrepareToPrependParameterWithSpaces
  5264                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5265 00000389 [7904]              <2> 	dw		PrepareToAppendSpacesAfterParameter
  5266 0000038B [7204]              <2> 	dw		percent_FormatPercent
  5267                              <2> %endif
  5268                              <2> 
  5269                              <2> 
  5270                              <2> ;--------------------------------------------------------------------
  5271                              <2> ; PrependOrAppendSpaces
  5272                              <2> ;	Parameters:
  5273                              <2> ;		CX:		Minimum length for format specifier in characters
  5274                              <2> ;		DS:		BDA segment (zero)
  5275                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  5276                              <2> ;	Returns:
  5277                              <2> ;		Nothing
  5278                              <2> ;	Corrupts registers:
  5279                              <2> ;		AX, BX, CX, DX
  5280                              <2> ;--------------------------------------------------------------------
  5281                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5282                              <2> PrependOrAppendSpaces:
  5283 0000038D 89F8                <2> 	mov		ax, di
  5284 0000038F 2B065404            <2> 	sub		ax, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition]
  5285 00000393 85C9                <2> 	test	cx, cx
  5286 00000395 780C                <2> 	js		SHORT .PrependWithSpaces
  5287                              <2> 	; Fall to .AppendSpaces
  5288                              <2> 
  5289                              <2> ;--------------------------------------------------------------------
  5290                              <2> ; .AppendSpaces
  5291                              <2> ;	Parameters:
  5292                              <2> ;		AX:		Number of format parameter BYTEs printed
  5293                              <2> ;		CX:		Minimum length for format specifier in characters
  5294                              <2> ;		DS:		BDA segment (zero)
  5295                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  5296                              <2> ;	Returns:
  5297                              <2> ;		Nothing
  5298                              <2> ;	Corrupts registers:
  5299                              <2> ;		AX, CX, DX
  5300                              <2> ;--------------------------------------------------------------------
  5301                              <2> .AppendSpaces:
  5302 00000397 E807FE              <2> 	call	DisplayContext_GetCharacterOffsetToAXfromByteOffsetInAX
  5303 0000039A 29C1                <2> 	sub		cx, ax
  5304 0000039C 7E23                <2> 	jle		SHORT .NothingToAppendOrPrepend
  5305 0000039E B020                <2> 	mov		al, ' '
  5306 000003A0 E930FF              <2> 	jmp		DisplayPrint_RepeatCharacterFromALwithCountInCX
  5307                              <2> 
  5308                              <2> ;--------------------------------------------------------------------
  5309                              <2> ; .PrependWithSpaces
  5310                              <2> ;	Parameters:
  5311                              <2> ;		AX:		Number of format parameter BYTEs printed
  5312                              <2> ;		CX:		Negative minimum length for format specifier in characters
  5313                              <2> ;		DS:		BDA segment (zero)
  5314                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  5315                              <2> ;	Returns:
  5316                              <2> ;		Nothing
  5317                              <2> ;	Corrupts registers:
  5318                              <2> ;		AX, BX, CX, DX
  5319                              <2> ;--------------------------------------------------------------------
  5320                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5321                              <2> .PrependWithSpaces:
  5322 000003A3 91                  <2> 	xchg	ax, cx
  5323 000003A4 F7D8                <2> 	neg		ax
  5324 000003A6 E802FE              <2> 	call	DisplayContext_GetByteOffsetToAXfromCharacterOffsetInAX
  5325 000003A9 29C8                <2> 	sub		ax, cx				; AX = BYTEs to prepend, CX = BYTEs to move
  5326 000003AB 7E14                <2> 	jle		SHORT .NothingToAppendOrPrepend
  5327                              <2> 
  5328 000003AD FD                  <2> 	std
  5329 000003AE 56                  <2> 	push	si
  5330                              <2> 
  5331 000003AF 8D75FF              <2> 	lea		si, [di-1]			; SI = Offset to last byte formatted
  5332 000003B2 01C7                <2> 	add		di, ax				; DI = Cursor location after preceeding completed
  5333 000003B4 57                  <2> 	push	di
  5334 000003B5 4F                  <2> 	dec		di					; DI = Offset where to move last byte formatted
  5335 000003B6 93                  <2> 	xchg	bx, ax				; BX = BYTEs to prepend
  5336 000003B7 E80800              <2> 	call	.ReverseCopyCXbytesFromESSItoESDI
  5337 000003BA 93                  <2> 	xchg	ax, bx
  5338 000003BB E81800              <2> 	call	.ReversePrintAXspacesStartingFromESDI
  5339                              <2> 
  5340 000003BE 5F                  <2> 	pop		di
  5341 000003BF 5E                  <2> 	pop		si
  5342 000003C0 FC                  <2> 	cld							; Restore DF
  5343                              <2> .NothingToAppendOrPrepend:
  5344 000003C1 C3                  <2> 	ret
  5345                              <2> 
  5346                              <2> ;--------------------------------------------------------------------
  5347                              <2> ; .ReverseCopyCXbytesFromESSItoESDI
  5348                              <2> ;	Parameters:
  5349                              <2> ;		CX:		Number of bytes to copy
  5350                              <2> ;		DS:		BDA segment (zero)
  5351                              <2> ;		ES:SI:	Ptr to old location
  5352                              <2> ;		ES:DI:	Ptr to new location
  5353                              <2> ;	Returns:
  5354                              <2> ;		DI:		Updated to before last character copied
  5355                              <2> ;	Corrupts registers:
  5356                              <2> ;		AX, CX, DX, SI
  5357                              <2> ;--------------------------------------------------------------------
  5358                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5359                              <2> .ReverseCopyCXbytesFromESSItoESDI:
  5360 000003C2 F6065F0401          <2> 	test	BYTE [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bFlags], FLG_CONTEXT_ATTRIBUTES
  5361 000003C7 7405                <2> 	jz		SHORT .CopyWithoutDisplayProcessing
  5362                              <2> 
  5363                              <2> 	WAIT_RETRACE_IF_NECESSARY_THEN rep movsb
  5364                              <3> %ifdef ELIMINATE_CGA_SNOW
  5365                              <3>  %ifidn %1, stosb
  5366                              <3>  call CgaSnow_Stosb
  5367                              <3>  %elifidn %1, stosw
  5368                              <3>  call CgaSnow_Stosw
  5369                              <3>  %elifidn %1, rep movsb
  5370 000003C9 E878FC              <3>  call CgaSnow_RepMovsb
  5371                              <3>  %else
  5372                              <3>  %error "Invalid instruction passed to WAIT_RETRACE_IF_NECESSARY_THEN"
  5373                              <3>  %endif
  5374                              <3> %else
  5375                              <3>  %ifidn %1, rep movsb
  5376                              <3>  eSEG_STR rep, es, movsb
  5377                              <3>  %else
  5378                              <3>  %1
  5379                              <3>  %endif
  5380                              <3> %endif
  5381 000003CC 4F                  <2> 	dec		di					; Point to preceeding character instead of attribute
  5382 000003CD C3                  <2> 	ret
  5383                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5384                              <2> .CopyWithoutDisplayProcessing:
  5385                              <2> 	eSEG_STR rep, es, movsb
  5386                              <3> %ifndef USE_186
  5387                              <3>  %%Loop:
  5388 000003CE F3                  <3>  %1
  5389 000003CF 26                  <3>  %2
  5390 000003D0 A4                  <3>  %3
  5391 000003D1 E302                <3>  jcxz %%End
  5392 000003D3 EBF9                <3>  jmp SHORT %%Loop
  5393                              <3>  %%End:
  5394                              <3> %else
  5395                              <3>  %2
  5396                              <3>  %1 %3
  5397                              <3> %endif
  5398 000003D5 C3                  <2> 	ret
  5399                              <2> 
  5400                              <2> ;--------------------------------------------------------------------
  5401                              <2> ; .ReversePrintAXspacesStartingFromESDI
  5402                              <2> ;	Parameters:
  5403                              <2> ;		AX:		Number of spaces to print
  5404                              <2> ;		DS:		BDA segment (zero)
  5405                              <2> ;		ES:DI:	Ptr to destination in video RAM
  5406                              <2> ;	Returns:
  5407                              <2> ;		DI:		Updated
  5408                              <2> ;	Corrupts registers:
  5409                              <2> ;		AX, CX, DX
  5410                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5411                              <2> .ReversePrintAXspacesStartingFromESDI:
  5412 000003D6 E8C8FD              <2> 	call	DisplayContext_GetCharacterOffsetToAXfromByteOffsetInAX
  5413 000003D9 91                  <2> 	xchg	cx, ax				; CX = Spaces to prepend
  5414 000003DA B020                <2> 	mov		al, ' '
  5415 000003DC E9F4FE              <2> 	jmp		DisplayPrint_RepeatCharacterFromALwithCountInCX
  5416                              <2> 
  5417                              <2> 
  5418                              <2> 
  5419                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5420                              <2> ; Formatting functions
  5421                              <2> ;	Parameters:
  5422                              <2> ;		DS:		BDA segment (zero)
  5423                              <2> ;		SS:BP:	Pointer to next format parameter (-=2 updates to next parameter)
  5424                              <2> ;		ES:DI:	Ptr to cursor location in video RAM
  5425                              <2> ;	Returns:
  5426                              <2> ;		SS:BP:	Points to last WORD parameter used
  5427                              <2> ;	Corrupts registers:
  5428                              <2> ;		AX, BX, DX
  5429                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5430                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5431                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5432                              <2> a_FormatAttributeForNextCharacter:
  5433 000003DF 8A5E00              <2> 	mov		bl, [bp]
  5434 000003E2 861E5E04            <2> 	xchg	bl, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute]
  5435 000003E6 53                  <2> 	push	bx
  5436 000003E7 51                  <2> 	push	cx
  5437 000003E8 57                  <2> 	push	di
  5438 000003E9 E823FF              <2> 	call	DisplayFormat_ParseCharacters	; Recursive call
  5439 000003EC 8F065404            <2> 	pop		WORD [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.fpCursorPosition]
  5440 000003F0 59                  <2> 	pop		cx
  5441 000003F1 5B                  <2> 	pop		bx
  5442 000003F2 881E5E04            <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute], bl
  5443 000003F6 C3                  <2> 	ret
  5444                              <2> %endif
  5445                              <2> 
  5446                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5447                              <2> A_FormatAttributeForRemainingString:
  5448 000003F7 8A4600              <2> 	mov		al, [bp]
  5449 000003FA A25E04              <2> 	mov		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.bAttribute], al
  5450 000003FD C3                  <2> 	ret
  5451                              <2> 
  5452                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5453                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5454                              <2> d_FormatSignedDecimalWord:
  5455 000003FE 8B4600              <2> 	mov		ax, [bp]
  5456 00000401 BB0A00              <2> 	mov		bx, 10
  5457 00000404 E948FE              <2> 	jmp		DisplayPrint_SignedWordFromAXWithBaseInBX
  5458                              <2> %endif
  5459                              <2> 
  5460                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5461                              <2> u_FormatUnsignedDecimalWord:
  5462 00000407 8B4600              <2> 	mov		ax, [bp]
  5463 0000040A BB0A00              <2> 	mov		bx, 10
  5464 0000040D E94CFE              <2> 	jmp		DisplayPrint_WordFromAXWithBaseInBX
  5465                              <2> 
  5466                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5467                              <2> x_FormatHexadecimalWord:
  5468 00000410 8B4600              <2> 	mov		ax, [bp]
  5469 00000413 BB1000              <2> 	mov		bx, 16
  5470 00000416 E843FE              <2> 	call	DisplayPrint_WordFromAXWithBaseInBX
  5471 00000419 B068                <2> 	mov		al, 'h'
  5472 0000041B E9D0FE              <2> 	jmp		DisplayPrint_CharacterFromAL
  5473                              <2> 
  5474                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5475                              <2> I_FormatDashForZero:
  5476 0000041E 8B4600              <2> 	mov		ax, [bp]
  5477 00000421 85C0                <2> 	test	ax,ax
  5478 00000423 75E2                <2> 	jnz		u_FormatUnsignedDecimalWord
  5479 00000425 C74600[053C]        <2> 	mov		[bp], word g_szDashForZero
  5480                              <2> ;;; fall-through
  5481                              <2> 
  5482                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5483                              <2> s_FormatStringFromSegmentCS:
  5484 0000042A 56                  <2> 	push	si
  5485 0000042B 51                  <2> 	push	cx
  5486 0000042C 8B7600              <2> 	mov		si, [bp]
  5487                              <2> 
  5488 0000042F 83FE7F              <2> 	cmp		si, byte 07fh		;  well within the boundaries of ROMVARS_size
  5489 00000432 7209                <2> 	jb		.notFormatted
  5490                              <2> 
  5491 00000434 4D                  <2> 	dec		bp
  5492 00000435 4D                  <2> 	dec		bp
  5493 00000436 E8D6FE              <2> 	call	DisplayFormat_ParseCharacters
  5494 00000439 45                  <2> 	inc		bp					; will be decremented after the call is done
  5495 0000043A 45                  <2> 	inc		bp
  5496 0000043B EB03                <2> 	jmp		.done
  5497                              <2> 
  5498                              <2> .notFormatted:
  5499 0000043D E89FFE              <2> 	call	DisplayPrint_NullTerminatedStringFromCSSI
  5500                              <2> 
  5501                              <2> .done:
  5502 00000440 59                  <2> 	pop		cx
  5503 00000441 5E                  <2> 	pop		si
  5504 00000442 C3                  <2> 	ret
  5505                              <2> 
  5506                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5507                              <2> z_FormatStringFromSegmentZero:
  5508 00000443 877600              <2> 	xchg	si, [bp]
  5509 00000446 31DB                <2> 	xor		bx, bx
  5510 00000448 E8AFFE              <2> 	call	DisplayPrint_NullTerminatedStringFromBXSI
  5511 0000044B 8B7600              <2> 	mov		si, [bp]
  5512 0000044E C3                  <2> 	ret
  5513                              <2> 
  5514                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5515                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5516                              <2> S_FormatStringFromFarPointer:
  5517 0000044F 8B5EFE              <2> 	mov		bx, [bp-2]
  5518 00000452 877600              <2> 	xchg	si, [bp]
  5519 00000455 E8A2FE              <2> 	call	DisplayPrint_NullTerminatedStringFromBXSI
  5520 00000458 8B7600              <2> 	mov		si, [bp]
  5521 0000045B 4D                  <2> 	dec		bp
  5522 0000045C 4D                  <2> 	dec		bp
  5523 0000045D C3                  <2> 	ret
  5524                              <2> %endif
  5525                              <2> 
  5526                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5527                              <2> c_FormatCharacter:
  5528 0000045E 8A4600              <2> 	mov		al, [bp]
  5529 00000461 E98AFE              <2> 	jmp		DisplayPrint_CharacterFromAL
  5530                              <2> 
  5531                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  5532                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5533                              <2> t_FormatRepeatCharacter:
  5534 00000464 51                  <2> 	push	cx
  5535 00000465 8B4EFE              <2> 	mov		cx, [bp-2]
  5536 00000468 8A4600              <2> 	mov		al, [bp]
  5537 0000046B E865FE              <2> 	call	DisplayPrint_RepeatCharacterFromALwithCountInCX
  5538 0000046E 59                  <2> 	pop		cx
  5539 0000046F 4D                  <2> 	dec		bp
  5540 00000470 4D                  <2> 	dec		bp
  5541 00000471 C3                  <2> 	ret
  5542                              <2> 
  5543                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5544                              <2> percent_FormatPercent:
  5545 00000472 B025                <2> 	mov		al, '%'
  5546 00000474 E977FE              <2> 	jmp		DisplayPrint_CharacterFromAL
  5547                              <2> %endif
  5548                              <2> 
  5549                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5550                              <2> PrepareToPrependParameterWithSpaces:
  5551 00000477 F7D9                <2> 	neg		cx
  5552                              <2> 	; Fall to PrepareToAppendSpacesAfterParameter
  5553                              <2> 
  5554                              <2> ALIGN DISPLAY_JUMP_ALIGN
  5555                              <2> PrepareToAppendSpacesAfterParameter:
  5556 00000479 83C402              <2> 	add		sp, BYTE 2				; Remove return offset
  5557 0000047C E99FFE              <2> 	jmp		ParseFormatSpecifier
  5558                              <1> %endif
  5559                              <1> %endif
  5560                              <1> 
  5561                              <1> %ifdef INCLUDE_FILE_LIBRARY
  5562                              <1> 	%include "Directory.asm"
  5563                              <2> ; Project name	:	Assembly Library
  5564                              <2> ; Description	:	Functions for accessing directories.
  5565                              <2> 
  5566                              <2> ;
  5567                              <2> ; XTIDE Universal BIOS and Associated Tools
  5568                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  5569                              <2> ;
  5570                              <2> ; This program is free software; you can redistribute it and/or modify
  5571                              <2> ; it under the terms of the GNU General Public License as published by
  5572                              <2> ; the Free Software Foundation; either version 2 of the License, or
  5573                              <2> ; (at your option) any later version.
  5574                              <2> ;
  5575                              <2> ; This program is distributed in the hope that it will be useful,
  5576                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  5577                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  5578                              <2> ; GNU General Public License for more details.
  5579                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  5580                              <2> ;
  5581                              <2> 
  5582                              <2> ; Section containing code
  5583                              <2> SECTION .text
  5584                              <2> 
  5585                              <2> ;--------------------------------------------------------------------
  5586                              <2> ; Directory_GetDiskTransferAreaAddressToDSSI
  5587                              <2> ;	Parameters:
  5588                              <2> ;		Nothing
  5589                              <2> ;	Returns:
  5590                              <2> ;		DS:SI:	Ptr to DTA
  5591                              <2> ;	Corrupts registers:
  5592                              <2> ;		AX
  5593                              <2> ;--------------------------------------------------------------------
  5594                              <2> ALIGN JUMP_ALIGN
  5595                              <2> Directory_GetDiskTransferAreaAddressToDSSI:
  5596 0000047F 06                  <2> 	push	es
  5597 00000480 53                  <2> 	push	bx
  5598                              <2> 
  5599 00000481 B42F                <2> 	mov		ah, GET_DISK_TRANSFER_AREA_ADDRESS
  5600 00000483 CD21                <2> 	int		DOS_INTERRUPT_21h
  5601 00000485 06                  <2> 	push	es
  5602 00000486 1F                  <2> 	pop		ds
  5603 00000487 89DE                <2> 	mov		si, bx
  5604                              <2> 
  5605 00000489 5B                  <2> 	pop		bx
  5606 0000048A 07                  <2> 	pop		es
  5607 0000048B C3                  <2> 	ret
  5608                              <2> 
  5609                              <2> 
  5610                              <2> ;--------------------------------------------------------------------
  5611                              <2> ; Directory_ChangeToPathFromDSSI
  5612                              <2> ;	Parameters:
  5613                              <2> ;		DS:SI:	Ptr to NULL terminated path (max 64 bytes)
  5614                              <2> ;	Returns:
  5615                              <2> ;		AX:		Error code
  5616                              <2> ;		CF:		Cleared if success
  5617                              <2> ;				Set if error
  5618                              <2> ;	Corrupts registers:
  5619                              <2> ;		Nothing
  5620                              <2> ;--------------------------------------------------------------------
  5621                              <2> ALIGN JUMP_ALIGN
  5622                              <2> Directory_ChangeToPathFromDSSI:
  5623 0000048C 87D6                <2> 	xchg	dx, si		; Path now in DS:DX
  5624 0000048E B43B                <2> 	mov		ah, SET_CURRENT_DIRECTORY
  5625 00000490 CD21                <2> 	int		DOS_INTERRUPT_21h
  5626 00000492 87F2                <2> 	xchg	si, dx
  5627 00000494 C3                  <2> 	ret
  5628                              <2> 
  5629                              <2> 
  5630                              <2> ;--------------------------------------------------------------------
  5631                              <2> ; Directory_WriteCurrentPathToDSSI
  5632                              <2> ;	Parameters:
  5633                              <2> ;		DS:SI:	Ptr to destination buffer (64 bytes)
  5634                              <2> ;	Returns:
  5635                              <2> ;		AX:		Error code
  5636                              <2> ;		CF:		Cleared if success
  5637                              <2> ;				Set if error
  5638                              <2> ;	Corrupts registers:
  5639                              <2> ;		Nothing
  5640                              <2> ;--------------------------------------------------------------------
  5641                              <2> ALIGN JUMP_ALIGN
  5642                              <2> Directory_WriteCurrentPathToDSSI:
  5643 00000495 52                  <2> 	push	dx
  5644                              <2> 
  5645 00000496 B447                <2> 	mov		ah, GET_CURRENT_DIRECTORY	; GET_CURRENT_DIRECTORY = 47h
  5646 00000498 99                  <2> 	cwd									; Default drive (00h)
  5647 00000499 CD21                <2> 	int		DOS_INTERRUPT_21h
  5648                              <2> 
  5649 0000049B 5A                  <2> 	pop		dx
  5650 0000049C C3                  <2> 	ret
  5651                              <2> 
  5652                              <2> 
  5653                              <2> ;--------------------------------------------------------------------
  5654                              <2> ; Directory_GetMatchCountToAXforSearchStringInDSSIwithAttributesInCX
  5655                              <2> ;	Parameters:
  5656                              <2> ;		CX:		File attributes
  5657                              <2> ;		DS:SI:	NULL terminated search string (may include path and wildcards)
  5658                              <2> ;	Returns:
  5659                              <2> ;		AX:		Number of matching files found
  5660                              <2> ;	Corrupts registers:
  5661                              <2> ;		Nothing
  5662                              <2> ;--------------------------------------------------------------------
  5663                              <2> ALIGN JUMP_ALIGN
  5664                              <2> Directory_GetMatchCountToAXforSearchStringInDSSIwithAttributesInCX:
  5665 0000049D 52                  <2> 	push	dx
  5666 0000049E 31D2                <2> 	xor		dx, dx				; Zero counter
  5667 000004A0 E80B00              <2> 	call	Directory_UpdateDTAForFirstMatchForDSSIwithAttributesInCX
  5668 000004A3 7206                <2> 	jc		SHORT .NoMoreFilesFound
  5669                              <2> ALIGN JUMP_ALIGN
  5670                              <2> .FindNextFile:
  5671 000004A5 42                  <2> 	inc		dx					; Increment match count
  5672 000004A6 E80F00              <2> 	call	Directory_UpdateDTAForNextMatchUsingPreviousParameters
  5673 000004A9 73FA                <2> 	jnc		SHORT .FindNextFile
  5674                              <2> ALIGN JUMP_ALIGN
  5675                              <2> .NoMoreFilesFound:
  5676 000004AB 92                  <2> 	xchg	ax, dx				; Match count to AX
  5677 000004AC 5A                  <2> 	pop		dx
  5678 000004AD C3                  <2> 	ret
  5679                              <2> 
  5680                              <2> 
  5681                              <2> ;--------------------------------------------------------------------
  5682                              <2> ; Directory_UpdateDTAForFirstMatchForDSSIwithAttributesInCX
  5683                              <2> ;	Parameters:
  5684                              <2> ;		CX:		File attributes
  5685                              <2> ;		DS:SI:	NULL terminated search string (may include path and wildcards)
  5686                              <2> ;	Returns:
  5687                              <2> ;		AX:		Error code
  5688                              <2> ;		CF:		Cleared if success
  5689                              <2> ;				Set if error
  5690                              <2> ;		Disk Transfer Area (DTA) will be updated
  5691                              <2> ;	Corrupts registers:
  5692                              <2> ;		Nothing
  5693                              <2> ;--------------------------------------------------------------------
  5694                              <2> ALIGN JUMP_ALIGN
  5695                              <2> Directory_UpdateDTAForFirstMatchForDSSIwithAttributesInCX:
  5696 000004AE 87D6                <2> 	xchg	dx, si							; Search string now in DS:DX
  5697 000004B0 B8004E              <2> 	mov		ax, FIND_FIRST_MATCHING_FILE<<8	; Zero AL (special flag for APPEND)
  5698 000004B3 CD21                <2> 	int		DOS_INTERRUPT_21h
  5699 000004B5 87F2                <2> 	xchg	si, dx
  5700 000004B7 C3                  <2> 	ret
  5701                              <2> 
  5702                              <2> 
  5703                              <2> ;--------------------------------------------------------------------
  5704                              <2> ; Directory_UpdateDTAForNextMatchUsingPreviousParameters
  5705                              <2> ;	Parameters:
  5706                              <2> ;		Nothing (Parameters from previous call to
  5707                              <2> ;				Directory_UpdateDTAForFirstMatchForDSSIwithAttributesInCX are used)
  5708                              <2> ;	Returns:
  5709                              <2> ;		AX:		Error code
  5710                              <2> ;		CF:		Cleared if success
  5711                              <2> ;				Set if error
  5712                              <2> ;		Disk Transfer Area (DTA) will be updated
  5713                              <2> ;	Corrupts registers:
  5714                              <2> ;		Nothing
  5715                              <2> ;--------------------------------------------------------------------
  5716                              <2> ALIGN JUMP_ALIGN
  5717                              <2> Directory_UpdateDTAForNextMatchUsingPreviousParameters:
  5718 000004B8 B44F                <2> 	mov		ah, FIND_NEXT_MATCHING_FILE
  5719 000004BA CD21                <2> 	int		DOS_INTERRUPT_21h
  5720 000004BC C3                  <2> 	ret
  5721                              <1> 	%include "DosCritical.asm"
  5722                              <2> ; File name		:	DosCritical.asm
  5723                              <2> ; Project name	:	Assembly Library
  5724                              <2> ; Created date	:	1.9.2010
  5725                              <2> ; Last update	:	2.9.2010
  5726                              <2> ; Author		:	Tomi Tilli
  5727                              <2> ; Description	:	DOS Critical Error Handler (24h) replacements.
  5728                              <2> 
  5729                              <2> ;
  5730                              <2> ; XTIDE Universal BIOS and Associated Tools
  5731                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  5732                              <2> ;
  5733                              <2> ; This program is free software; you can redistribute it and/or modify
  5734                              <2> ; it under the terms of the GNU General Public License as published by
  5735                              <2> ; the Free Software Foundation; either version 2 of the License, or
  5736                              <2> ; (at your option) any later version.
  5737                              <2> ;
  5738                              <2> ; This program is distributed in the hope that it will be useful,
  5739                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  5740                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  5741                              <2> ; GNU General Public License for more details.
  5742                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  5743                              <2> ;
  5744                              <2> 
  5745                              <2> 
  5746                              <2> ; DOS Critical Error Handler return values
  5747                              <2> struc CRITICAL_ERROR_ACTION
  5748 00000000 <res 00000001>      <2> 	.ignoreErrorAndContinueProcessingRequest	resb	1
  5749 00000001 <res 00000001>      <2> 	.retryOperation								resb	1
  5750 00000002 <res 00000001>      <2> 	.terminateProgramAsThoughInt21hAH4ChCalled	resb	1
  5751 00000003 <res 00000001>      <2> 	.failSystemCallInProgress					resb	1
  5752                              <2> endstruc
  5753                              <2> 
  5754                              <2> 
  5755                              <2> ; Section containing code
  5756                              <2> SECTION .text
  5757                              <2> 
  5758                              <2> ;--------------------------------------------------------------------
  5759                              <2> ; DosCritical_InstallNewHandlerFromCSDX
  5760                              <2> ;	Parameters:
  5761                              <2> ;		CS:DX:	New Critical Error Handler
  5762                              <2> ;	Returns:
  5763                              <2> ;		Nothing
  5764                              <2> ;	Corrupts registers:
  5765                              <2> ;		AX
  5766                              <2> ;--------------------------------------------------------------------
  5767                              <2> ALIGN JUMP_ALIGN
  5768                              <2> DosCritical_InstallNewHandlerFromCSDX:
  5769 000004BD 1E                  <2> 	push	ds
  5770                              <2> 
  5771 000004BE 0E                  <2> 	push	cs
  5772 000004BF 1F                  <2> 	pop		ds
  5773 000004C0 B82425              <2> 	mov		ax, (SET_INTERRUPT_VECTOR<<8) | DOS_CRITICAL_ERROR_HANDLER_24h
  5774 000004C3 CD21                <2> 	int		DOS_INTERRUPT_21h
  5775                              <2> 
  5776 000004C5 1F                  <2> 	pop		ds
  5777 000004C6 C3                  <2> 	ret
  5778                              <2> 
  5779                              <2> 
  5780                              <2> ;--------------------------------------------------------------------
  5781                              <2> ; DosCritical_RestoreDosHandler
  5782                              <2> ;	Parameters:
  5783                              <2> ;		Nothing
  5784                              <2> ;	Returns:
  5785                              <2> ;		Nothing
  5786                              <2> ;	Corrupts registers:
  5787                              <2> ;		Nothing
  5788                              <2> ;--------------------------------------------------------------------
  5789                              <2> ALIGN JUMP_ALIGN
  5790                              <2> DosCritical_RestoreDosHandler:
  5791 000004C7 1E                  <2> 	push	ds
  5792 000004C8 52                  <2> 	push	dx
  5793 000004C9 50                  <2> 	push	ax
  5794                              <2> 
  5795 000004CA 2EC5161200          <2> 	lds		dx, [cs:PSP.fpInt24hCriticalError]
  5796 000004CF B82425              <2> 	mov		ax, (SET_INTERRUPT_VECTOR<<8) | DOS_CRITICAL_ERROR_HANDLER_24h
  5797 000004D2 CD21                <2> 	int		DOS_INTERRUPT_21h
  5798                              <2> 
  5799 000004D4 58                  <2> 	pop		ax
  5800 000004D5 5A                  <2> 	pop		dx
  5801 000004D6 1F                  <2> 	pop		ds
  5802 000004D7 C3                  <2> 	ret
  5803                              <2> 
  5804                              <2> 
  5805                              <2> ;--------------------------------------------------------------------
  5806                              <2> ; DosCritical_HandlerToIgnoreAllErrors
  5807                              <2> ;	Parameters:
  5808                              <2> ;		Nothing
  5809                              <2> ;	Returns:
  5810                              <2> ;		AL:		CRITICAL_ERROR_ACTION
  5811                              <2> ;	Corrupts registers:
  5812                              <2> ;		Nothing
  5813                              <2> ;--------------------------------------------------------------------
  5814                              <2> ALIGN JUMP_ALIGN
  5815                              <2> DosCritical_HandlerToIgnoreAllErrors:
  5816 000004D8 B000                <2> 	mov		al, CRITICAL_ERROR_ACTION.ignoreErrorAndContinueProcessingRequest
  5817 000004DA CF                  <2> 	iret
  5818                              <1> 	%include "Drive.asm"
  5819                              <2> ; Project name	:	Assembly Library
  5820                              <2> ; Description	:	Functions for accessing drives.
  5821                              <2> 
  5822                              <2> ;
  5823                              <2> ; XTIDE Universal BIOS and Associated Tools
  5824                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  5825                              <2> ;
  5826                              <2> ; This program is free software; you can redistribute it and/or modify
  5827                              <2> ; it under the terms of the GNU General Public License as published by
  5828                              <2> ; the Free Software Foundation; either version 2 of the License, or
  5829                              <2> ; (at your option) any later version.
  5830                              <2> ;
  5831                              <2> ; This program is distributed in the hope that it will be useful,
  5832                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  5833                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  5834                              <2> ; GNU General Public License for more details.
  5835                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  5836                              <2> ;
  5837                              <2> 
  5838                              <2> ; Section containing code
  5839                              <2> SECTION .text
  5840                              <2> 
  5841                              <2> ;--------------------------------------------------------------------
  5842                              <2> ; Drive_GetNumberOfAvailableDrivesToAX
  5843                              <2> ;	Parameters:
  5844                              <2> ;		Nothing
  5845                              <2> ;	Returns:
  5846                              <2> ;		AX:		Number of available drives
  5847                              <2> ;	Corrupts registers:
  5848                              <2> ;		Nothing
  5849                              <2> ;--------------------------------------------------------------------
  5850                              <2> ALIGN JUMP_ALIGN
  5851                              <2> Drive_GetNumberOfAvailableDrivesToAX:
  5852 000004DB 52                  <2> 	push	dx
  5853 000004DC 51                  <2> 	push	cx
  5854                              <2> 
  5855 000004DD E80700              <2> 	call	Drive_GetFlagsForAvailableDrivesToDXAX
  5856 000004E0 E84210              <2> 	call	Bit_GetSetCountToCXfromDXAX
  5857 000004E3 91                  <2> 	xchg	ax, cx
  5858                              <2> 
  5859 000004E4 59                  <2> 	pop		cx
  5860 000004E5 5A                  <2> 	pop		dx
  5861 000004E6 C3                  <2> 	ret
  5862                              <2> 
  5863                              <2> 
  5864                              <2> ;--------------------------------------------------------------------
  5865                              <2> ; Drive_GetFlagsForAvailableDrivesToDXAX
  5866                              <2> ;	Parameters:
  5867                              <2> ;		Nothing
  5868                              <2> ;	Returns:
  5869                              <2> ;		DX:AX:	Flags containing valid drives (bit 0 = drive A, bit 1 = drive B ...)
  5870                              <2> ;	Corrupts registers:
  5871                              <2> ;		Nothing
  5872                              <2> ;--------------------------------------------------------------------
  5873                              <2> ALIGN JUMP_ALIGN
  5874                              <2> Drive_GetFlagsForAvailableDrivesToDXAX:
  5875 000004E7 51                  <2> 	push	cx
  5876 000004E8 53                  <2> 	push	bx
  5877 000004E9 BA[D804]            <2> 	mov		dx, DosCritical_HandlerToIgnoreAllErrors
  5878 000004EC E8CEFF              <2> 	call	DosCritical_InstallNewHandlerFromCSDX
  5879                              <2> 
  5880 000004EF E81000              <2> 	call	.GetNumberOfPotentiallyValidDriveLettersToCX
  5881 000004F2 31DB                <2> 	xor		bx, bx
  5882 000004F4 31C0                <2> 	xor		ax, ax				; Temporary use BX:AX for flags
  5883 000004F6 99                  <2> 	cwd							; Start from drive 0
  5884 000004F7 E81B00              <2> 	call	.CheckDriveValidityUntilCXisZero
  5885 000004FA 89DA                <2> 	mov		dx, bx				; Flags now in DX:AX
  5886                              <2> 
  5887 000004FC E8C8FF              <2> 	call	DosCritical_RestoreDosHandler
  5888 000004FF 5B                  <2> 	pop		bx
  5889 00000500 59                  <2> 	pop		cx
  5890 00000501 C3                  <2> 	ret
  5891                              <2> 
  5892                              <2> ;--------------------------------------------------------------------
  5893                              <2> ; .GetNumberOfPotentiallyValidDriveLettersToCX
  5894                              <2> ;	Parameters:
  5895                              <2> ;		Nothing
  5896                              <2> ;	Returns:
  5897                              <2> ;		CX:		Number of potentially valid drive letters available
  5898                              <2> ;	Corrupts registers:
  5899                              <2> ;		AX, DX
  5900                              <2> ;--------------------------------------------------------------------
  5901                              <2> ALIGN JUMP_ALIGN
  5902                              <2> .GetNumberOfPotentiallyValidDriveLettersToCX:
  5903 00000502 E83700              <2> 	call	Drive_GetDefaultToAL
  5904 00000505 92                  <2> 	xchg	dx, ax			; Default drive to DL
  5905 00000506 E83600              <2> 	call	Drive_SetDefaultFromDL
  5906                              <2> 	eMOVZX	cx, al			; Number of potentially valid drive letters available
  5907                              <3> %ifndef USE_386
  5908                              <3>  %ifidni %1, ax
  5909                              <3>  mov al, %2
  5910                              <3>  xor ah, ah
  5911                              <3>  %elifidni %1, bx
  5912                              <3>  mov bl, %2
  5913                              <3>  xor bh, bh
  5914                              <3>  %elifidni %1, cx
  5915 00000509 88C1                <3>  mov cl, %2
  5916 0000050B 30ED                <3>  xor ch, ch
  5917                              <3>  %elifidni %1, dx
  5918                              <3>  mov dl, %2
  5919                              <3>  xor dh, dh
  5920                              <3>  %else
  5921                              <3>  push ax
  5922                              <3>  mov al, %2
  5923                              <3>  xor ah, ah
  5924                              <3>  xchg ax, %1
  5925                              <3>  pop ax
  5926                              <3>  %endif
  5927                              <3> 
  5928                              <3> %else
  5929                              <3>  movzx %1, %2
  5930                              <3> %endif
  5931 0000050D 80F920              <2> 	cmp		cl, 32
  5932 00000510 7202                <2> 	jb		SHORT .Return
  5933 00000512 B120                <2> 	mov		cl, 32
  5934                              <2> ALIGN JUMP_ALIGN, ret
  5935                              <2> .Return:
  5936 00000514 C3                  <2> 	ret
  5937                              <2> 
  5938                              <2> ;--------------------------------------------------------------------
  5939                              <2> ; .CheckDriveValidityUntilCXisZero
  5940                              <2> ;	Parameters:
  5941                              <2> ;		CX:		Number of potentially valid drive letters left
  5942                              <2> ;		DL:		Drive number (00h=A:, 01h=B: ...)
  5943                              <2> ;		BX:AX:	Flags for drive numbers
  5944                              <2> ;	Returns:
  5945                              <2> ;		BX:AX:	Flags for valid drive numbers
  5946                              <2> ;	Corrupts registers:
  5947                              <2> ;		CX, DX
  5948                              <2> ;--------------------------------------------------------------------
  5949                              <2> ALIGN JUMP_ALIGN
  5950                              <2> .CheckDriveValidityUntilCXisZero:
  5951 00000515 E80900              <2> 	call	.IsValidDriveNumberInDL
  5952 00000518 7503                <2> 	jnz		SHORT .PrepareToCheckNextDrive
  5953 0000051A E81300              <2> 	call	.SetFlagToBXAXfromDriveInDL
  5954                              <2> ALIGN JUMP_ALIGN
  5955                              <2> .PrepareToCheckNextDrive:
  5956 0000051D 42                  <2> 	inc		dx
  5957 0000051E E2F5                <2> 	loop	.CheckDriveValidityUntilCXisZero
  5958 00000520 C3                  <2> 	ret
  5959                              <2> 
  5960                              <2> ;--------------------------------------------------------------------
  5961                              <2> ; .IsValidDriveNumberInDL
  5962                              <2> ;	Parameters:
  5963                              <2> ;		DL:		Drive number (00h=A:, 01h=B: ...)
  5964                              <2> ;	Returns:
  5965                              <2> ;		ZF:		Set if drive number is valid
  5966                              <2> ;				Cleared if drive number is invalid
  5967                              <2> ;	Corrupts registers:
  5968                              <2> ;		Nothing
  5969                              <2> ;--------------------------------------------------------------------
  5970                              <2> ALIGN JUMP_ALIGN
  5971                              <2> .IsValidDriveNumberInDL:
  5972 00000521 1E                  <2> 	push	ds
  5973 00000522 53                  <2> 	push	bx
  5974 00000523 50                  <2> 	push	ax
  5975                              <2> 
  5976 00000524 42                  <2> 	inc		dx			; Default drive is 00h and first drive is 01h
  5977 00000525 B432                <2> 	mov		ah, GET_DOS_DRIVE_PARAMETER_BLOCK_FOR_SPECIFIC_DRIVE
  5978 00000527 CD21                <2> 	int		DOS_INTERRUPT_21h
  5979 00000529 4A                  <2> 	dec		dx
  5980 0000052A 84C0                <2> 	test	al, al
  5981                              <2> 
  5982 0000052C 58                  <2> 	pop		ax
  5983 0000052D 5B                  <2> 	pop		bx
  5984 0000052E 1F                  <2> 	pop		ds
  5985 0000052F C3                  <2> 	ret
  5986                              <2> 
  5987                              <2> ;--------------------------------------------------------------------
  5988                              <2> ; .SetFlagToBXAXfromDriveInDL
  5989                              <2> ;	Parameters:
  5990                              <2> ;		DL:		Drive number (0...31)
  5991                              <2> ;		BX:AX:	Flags containing drive numbers
  5992                              <2> ;	Returns:
  5993                              <2> ;		BX:AX:	Flags with wanted drive bit set
  5994                              <2> ;	Corrupts registers:
  5995                              <2> ;		Nothing
  5996                              <2> ;--------------------------------------------------------------------
  5997                              <2> ALIGN JUMP_ALIGN
  5998                              <2> .SetFlagToBXAXfromDriveInDL:
  5999 00000530 51                  <2> 	push	cx
  6000                              <2> 
  6001 00000531 88D1                <2> 	mov		cl, dl
  6002 00000533 87D3                <2> 	xchg	dx, bx
  6003 00000535 E80B10              <2> 	call	Bit_SetToDXAXfromIndexInCL
  6004 00000538 87DA                <2> 	xchg	bx, dx
  6005                              <2> 
  6006 0000053A 59                  <2> 	pop		cx
  6007 0000053B C3                  <2> 	ret
  6008                              <2> 
  6009                              <2> 
  6010                              <2> ;--------------------------------------------------------------------
  6011                              <2> ; Drive_GetDefaultToAL
  6012                              <2> ;	Parameters:
  6013                              <2> ;		Nothing
  6014                              <2> ;	Returns:
  6015                              <2> ;		AL:		Current default drive (00h=A:, 01h=B: ...)
  6016                              <2> ;	Corrupts registers:
  6017                              <2> ;		AH
  6018                              <2> ;--------------------------------------------------------------------
  6019                              <2> ALIGN JUMP_ALIGN
  6020                              <2> Drive_GetDefaultToAL:
  6021 0000053C B419                <2> 	mov		ah, GET_CURRENT_DEFAULT_DRIVE
  6022                              <2> 	SKIP2B	f	; cmp ax, <next instruction>
  6023                              <3>  %ifidni %1, f
  6024 0000053E 3D                  <3>  db 03Dh
  6025                              <3> 
  6026                              <3>  %elifidni %1, ax
  6027                              <3>  db 0B8h
  6028                              <3>  %elifidni %1, cx
  6029                              <3>  db 0B9h
  6030                              <3>  %elifidni %1, dx
  6031                              <3>  db 0BAh
  6032                              <3>  %elifidni %1, bx
  6033                              <3>  db 0BBh
  6034                              <3>  %elifidni %1, sp
  6035                              <3>  db 0BCh
  6036                              <3>  %elifidni %1, bp
  6037                              <3>  db 0BDh
  6038                              <3>  %elifidni %1, si
  6039                              <3>  db 0BEh
  6040                              <3>  %elifidni %1, di
  6041                              <3>  db 0BFh
  6042                              <3>  %else
  6043                              <3>  %error "Invalid parameter passed to SKIP2B"
  6044                              <3>  %endif
  6045                              <2> 	; Fall to Drive_SetDefaultFromDL
  6046                              <2> 
  6047                              <2> 
  6048                              <2> ;--------------------------------------------------------------------
  6049                              <2> ; Drive_SetDefaultFromDL
  6050                              <2> ;	Parameters:
  6051                              <2> ;		DL:		New default drive (00h=A:, 01h=B: ...)
  6052                              <2> ;	Returns:
  6053                              <2> ;		AL:		Number of potentially valid drive letters available
  6054                              <2> ;	Corrupts registers:
  6055                              <2> ;		AH
  6056                              <2> ;--------------------------------------------------------------------
  6057                              <2> Drive_SetDefaultFromDL:
  6058 0000053F B40E                <2> 	mov		ah, SELECT_DEFAULT_DRIVE
  6059 00000541 CD21                <2> 	int		DOS_INTERRUPT_21h
  6060 00000543 C3                  <2> 	ret
  6061                              <1> 	%include "FileIO.asm"
  6062                              <2> ; Project name	:	Assembly Library
  6063                              <2> ; Description	:	Functions for file access.
  6064                              <2> 
  6065                              <2> ;
  6066                              <2> ; XTIDE Universal BIOS and Associated Tools
  6067                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  6068                              <2> ;
  6069                              <2> ; This program is free software; you can redistribute it and/or modify
  6070                              <2> ; it under the terms of the GNU General Public License as published by
  6071                              <2> ; the Free Software Foundation; either version 2 of the License, or
  6072                              <2> ; (at your option) any later version.
  6073                              <2> ;
  6074                              <2> ; This program is distributed in the hope that it will be useful,
  6075                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  6076                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  6077                              <2> ; GNU General Public License for more details.
  6078                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  6079                              <2> ;
  6080                              <2> 
  6081                              <2> 
  6082                              <2> ; Section containing code
  6083                              <2> SECTION .text
  6084                              <2> 
  6085                              <2> ;--------------------------------------------------------------------
  6086                              <2> ; FileIO_CreateWithPathInDSSIandAttributesInCX
  6087                              <2> ;	Parameters:
  6088                              <2> ;		CX:		File attribute flags
  6089                              <2> ;		DS:SI:	Ptr to NULL terminated path or file name
  6090                              <2> ;	Returns:
  6091                              <2> ;		AX:		DOS error code if CF set
  6092                              <2> ;		BX:		File handle if CF cleared
  6093                              <2> ;		CF:		Clear if file opened successfully
  6094                              <2> ;				Set if error
  6095                              <2> ;	Corrupts registers:
  6096                              <2> ;		AX, BX
  6097                              <2> ;--------------------------------------------------------------------
  6098                              <2> ALIGN JUMP_ALIGN
  6099                              <2> FileIO_CreateWithPathInDSSIandAttributesInCX:
  6100 00000544 B43C                <2> 	mov		ah, CREATE_OR_TRUNCATE_FILE
  6101                              <2> 	SKIP2B	bx
  6102                              <3>  %ifidni %1, f
  6103                              <3>  db 03Dh
  6104                              <3> 
  6105                              <3>  %elifidni %1, ax
  6106                              <3>  db 0B8h
  6107                              <3>  %elifidni %1, cx
  6108                              <3>  db 0B9h
  6109                              <3>  %elifidni %1, dx
  6110                              <3>  db 0BAh
  6111                              <3>  %elifidni %1, bx
  6112 00000546 BB                  <3>  db 0BBh
  6113                              <3>  %elifidni %1, sp
  6114                              <3>  db 0BCh
  6115                              <3>  %elifidni %1, bp
  6116                              <3>  db 0BDh
  6117                              <3>  %elifidni %1, si
  6118                              <3>  db 0BEh
  6119                              <3>  %elifidni %1, di
  6120                              <3>  db 0BFh
  6121                              <3>  %else
  6122                              <3>  %error "Invalid parameter passed to SKIP2B"
  6123                              <3>  %endif
  6124                              <2> 	; Fall to FileIO_OpenWithPathInDSSIandFileAccessInAL
  6125                              <2> 
  6126                              <2> ;--------------------------------------------------------------------
  6127                              <2> ; FileIO_OpenWithPathInDSSIandFileAccessInAL
  6128                              <2> ;	Parameters:
  6129                              <2> ;		AL:		FILE_ACCESS.(mode)
  6130                              <2> ;		DS:SI:	Ptr to NULL terminated path or file name
  6131                              <2> ;	Returns:
  6132                              <2> ;		AX:		DOS error code if CF set
  6133                              <2> ;		BX:		File handle if CF cleared
  6134                              <2> ;		CF:		Clear if file opened successfully
  6135                              <2> ;				Set if error
  6136                              <2> ;	Corrupts registers:
  6137                              <2> ;		AX, BX
  6138                              <2> ;--------------------------------------------------------------------
  6139                              <2> FileIO_OpenWithPathInDSSIandFileAccessInAL:
  6140 00000547 B43D                <2> 	mov		ah, OPEN_EXISTING_FILE
  6141 00000549 87D6                <2> 	xchg	dx, si		; Path now in DS:DX
  6142 0000054B CD21                <2> 	int		DOS_INTERRUPT_21h
  6143 0000054D 87F2                <2> 	xchg	si, dx
  6144 0000054F 89C3                <2> 	mov		bx, ax		; Copy file handle to BX
  6145 00000551 C3                  <2> 	ret
  6146                              <2> 
  6147                              <2> 
  6148                              <2> ;--------------------------------------------------------------------
  6149                              <2> ; FileIO_ReadDXCXbytesToDSSIusingHandleFromBX
  6150                              <2> ;	Parameters:
  6151                              <2> ;		BX:		File handle
  6152                              <2> ;		DX:CX:	Number of bytes to read
  6153                              <2> ;		DS:SI:	Ptr to destination buffer
  6154                              <2> ;	Returns:
  6155                              <2> ;		AX:		DOS error code if CF set
  6156                              <2> ;		CF:		Clear if successful
  6157                              <2> ;				Set if error
  6158                              <2> ;	Corrupts registers:
  6159                              <2> ;		AX
  6160                              <2> ;--------------------------------------------------------------------
  6161                              <2> ALIGN JUMP_ALIGN
  6162                              <2> FileIO_ReadDXCXbytesToDSSIusingHandleFromBX:
  6163 00000552 55                  <2> 	push	bp
  6164 00000553 BD[6405]            <2> 	mov		bp, FileIO_ReadCXbytesToDSSIusingHandleFromBX
  6165 00000556 E81700              <2> 	call	SplitLargeReadOrWritesToSmallerBlocks
  6166 00000559 5D                  <2> 	pop		bp
  6167 0000055A C3                  <2> 	ret
  6168                              <2> 
  6169                              <2> 
  6170                              <2> ;--------------------------------------------------------------------
  6171                              <2> ; FileIO_WriteDXCXbytesFromDSSIusingHandleFromBX
  6172                              <2> ;	Parameters:
  6173                              <2> ;		BX:		File handle
  6174                              <2> ;		DX:CX:	Number of bytes to write
  6175                              <2> ;		DS:SI:	Ptr to source buffer
  6176                              <2> ;	Returns:
  6177                              <2> ;		AX:		DOS error code if CF set
  6178                              <2> ;		CF:		Clear if successful
  6179                              <2> ;				Set if error
  6180                              <2> ;	Corrupts registers:
  6181                              <2> ;		AX
  6182                              <2> ;--------------------------------------------------------------------
  6183                              <2> ALIGN JUMP_ALIGN
  6184                              <2> FileIO_WriteDXCXbytesFromDSSIusingHandleFromBX:
  6185 0000055B 55                  <2> 	push	bp
  6186 0000055C BD[6705]            <2> 	mov		bp, FileIO_WriteCXbytesFromDSSIusingHandleFromBX
  6187 0000055F E80E00              <2> 	call	SplitLargeReadOrWritesToSmallerBlocks
  6188 00000562 5D                  <2> 	pop		bp
  6189 00000563 C3                  <2> 	ret
  6190                              <2> 
  6191                              <2> 
  6192                              <2> ;--------------------------------------------------------------------
  6193                              <2> ; File position is updated so next read will start where
  6194                              <2> ; previous read stopped.
  6195                              <2> ;
  6196                              <2> ; FileIO_ReadCXbytesToDSSIusingHandleFromBX
  6197                              <2> ;	Parameters:
  6198                              <2> ;		BX:		File handle
  6199                              <2> ;		CX:		Number of bytes to read
  6200                              <2> ;		DS:SI:	Ptr to destination buffer
  6201                              <2> ;	Returns:
  6202                              <2> ;		AX:		Number of bytes actually read if successful (0 if at EOF before call)
  6203                              <2> ;				DOS error code if CF set
  6204                              <2> ;		CF:		Clear if successful
  6205                              <2> ;				Set if error
  6206                              <2> ;	Corrupts registers:
  6207                              <2> ;		Nothing
  6208                              <2> ;--------------------------------------------------------------------
  6209                              <2> ALIGN JUMP_ALIGN
  6210                              <2> FileIO_ReadCXbytesToDSSIusingHandleFromBX:
  6211 00000564 B43F                <2> 	mov		ah, READ_FROM_FILE_OR_DEVICE
  6212                              <2> 	SKIP2B	f
  6213                              <3>  %ifidni %1, f
  6214 00000566 3D                  <3>  db 03Dh
  6215                              <3> 
  6216                              <3>  %elifidni %1, ax
  6217                              <3>  db 0B8h
  6218                              <3>  %elifidni %1, cx
  6219                              <3>  db 0B9h
  6220                              <3>  %elifidni %1, dx
  6221                              <3>  db 0BAh
  6222                              <3>  %elifidni %1, bx
  6223                              <3>  db 0BBh
  6224                              <3>  %elifidni %1, sp
  6225                              <3>  db 0BCh
  6226                              <3>  %elifidni %1, bp
  6227                              <3>  db 0BDh
  6228                              <3>  %elifidni %1, si
  6229                              <3>  db 0BEh
  6230                              <3>  %elifidni %1, di
  6231                              <3>  db 0BFh
  6232                              <3>  %else
  6233                              <3>  %error "Invalid parameter passed to SKIP2B"
  6234                              <3>  %endif
  6235                              <2> 	; Fall to FileIO_WriteCXbytesFromDSSIusingHandleFromBX
  6236                              <2> 
  6237                              <2> ;--------------------------------------------------------------------
  6238                              <2> ; File position is updated so next write will start where
  6239                              <2> ; previous write stopped.
  6240                              <2> ;
  6241                              <2> ; FileIO_WriteCXbytesFromDSSIusingHandleFromBX
  6242                              <2> ;	Parameters:
  6243                              <2> ;		BX:		File handle
  6244                              <2> ;		CX:		Number of bytes to write
  6245                              <2> ;		DS:SI:	Ptr to source buffer
  6246                              <2> ;	Returns:
  6247                              <2> ;		AX:		Number of bytes actually written if successful (EOF check)
  6248                              <2> ;				DOS error code if CF set
  6249                              <2> ;		CF:		Clear if successful
  6250                              <2> ;				Set if error
  6251                              <2> ;	Corrupts registers:
  6252                              <2> ;		Nothing
  6253                              <2> ;--------------------------------------------------------------------
  6254                              <2> FileIO_WriteCXbytesFromDSSIusingHandleFromBX:
  6255 00000567 B440                <2> 	mov		ah, WRITE_TO_FILE_OR_DEVICE
  6256 00000569 87D6                <2> 	xchg	dx, si				; DS:DX now points to buffer
  6257 0000056B CD21                <2> 	int		DOS_INTERRUPT_21h
  6258 0000056D 87F2                <2> 	xchg	si, dx
  6259 0000056F C3                  <2> 	ret
  6260                              <2> 
  6261                              <2> 
  6262                              <2> ;--------------------------------------------------------------------
  6263                              <2> ; SplitLargeReadOrWritesToSmallerBlocks
  6264                              <2> ;	Parameters:
  6265                              <2> ;		BX:		File handle
  6266                              <2> ;		BP:		Ptr to transfer function
  6267                              <2> ;		DX:CX:	Number of bytes to transfer
  6268                              <2> ;		DS:SI:	Ptr to transfer buffer
  6269                              <2> ;	Returns:
  6270                              <2> ;		AX:		DOS error code if CF set
  6271                              <2> ;		CF:		Clear if successful
  6272                              <2> ;				Set if error
  6273                              <2> ;	Corrupts registers:
  6274                              <2> ;		AX
  6275                              <2> ;--------------------------------------------------------------------
  6276                              <2> ALIGN JUMP_ALIGN
  6277                              <2> SplitLargeReadOrWritesToSmallerBlocks:
  6278 00000570 1E                  <2> 	push	ds
  6279 00000571 56                  <2> 	push	si
  6280 00000572 52                  <2> 	push	dx
  6281 00000573 51                  <2> 	push	cx
  6282                              <2> 
  6283 00000574 91                  <2> 	xchg	ax, cx					; DX:AX now holds bytes to transfer
  6284 00000575 B90080              <2> 	mov		cx, SPLIT_SIZE_FOR_LARGE_TRANSFERS
  6285 00000578 F7F1                <2> 	div		cx						; AX = Number of full transfers
  6286 0000057A 52                  <2> 	push	dx						; Bytes for last transfer
  6287 0000057B 85C0                <2> 	test	ax, ax
  6288 0000057D 740F                <2> 	jz		SHORT .TransferRemainingBytes
  6289 0000057F 92                  <2> 	xchg	dx, ax					; DX = Number of full transfers
  6290                              <2> 
  6291                              <2> ALIGN JUMP_ALIGN
  6292                              <2> .TransferNextBytes:
  6293 00000580 E81B00              <2> 	call	NormalizeDSSI
  6294 00000583 FFD5                <2> 	call	bp						; Transfer function
  6295 00000585 7214                <2> 	jc		SHORT .ErrorOccurredDuringTransfer
  6296 00000587 81C60080            <2> 	add		si, SPLIT_SIZE_FOR_LARGE_TRANSFERS
  6297 0000058B 4A                  <2> 	dec		dx
  6298 0000058C 75F2                <2> 	jnz		SHORT .TransferNextBytes
  6299                              <2> .TransferRemainingBytes:
  6300 0000058E 59                  <2> 	pop		cx						; CX = Bytes for last transfer
  6301 0000058F E305                <2> 	jcxz	.ReturnErrorCodeInAX	; No remaining bytes
  6302 00000591 E80A00              <2> 	call	NormalizeDSSI
  6303 00000594 FFD5                <2> 	call	bp
  6304                              <2> .ReturnErrorCodeInAX:
  6305 00000596 59                  <2> 	pop		cx
  6306 00000597 5A                  <2> 	pop		dx
  6307 00000598 5E                  <2> 	pop		si
  6308 00000599 1F                  <2> 	pop		ds
  6309 0000059A C3                  <2> 	ret
  6310                              <2> .ErrorOccurredDuringTransfer:
  6311 0000059B 59                  <2> 	pop		cx						; Remove bytes for last transfer
  6312 0000059C EBF8                <2> 	jmp		SHORT .ReturnErrorCodeInAX
  6313                              <2> 
  6314                              <2> ;--------------------------------------------------------------------
  6315                              <2> ; NormalizeDSSI
  6316                              <2> ;	Parameters
  6317                              <2> ;		DS:SI:	Ptr to normalize
  6318                              <2> ;	Returns:
  6319                              <2> ;		DS:SI:	Normalized pointer
  6320                              <2> ;	Corrupts registers:
  6321                              <2> ;		Nothing
  6322                              <2> ;--------------------------------------------------------------------
  6323                              <2> ALIGN JUMP_ALIGN
  6324                              <2> NormalizeDSSI:
  6325 0000059E 52                  <2> 	push	dx
  6326 0000059F 50                  <2> 	push	ax
  6327                              <2> 	NORMALIZE_FAR_POINTER ds, si, ax, dx
  6328 000005A0 89F2                <3>  mov %4, %2
  6329 000005A2 83E60F              <3>  and %2, BYTE 0Fh
  6330                              <3>  eSHR_IM %4, 4
  6331                              <4>  eSHIFT_IM %1, %2, shr
  6332                              <5> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  6333                              <5> %ifndef USE_186
  6334                              <5>  %ifidni %1, cl
  6335                              <5>  times %2 %3 %1, 1
  6336                              <5>  %elifidni %1, ch
  6337                              <5>  times %2 %3 %1, 1
  6338                              <5>  %elifidni %1, cx
  6339                              <5>  times %2 %3 %1, 1
  6340                              <5>  %else
  6341                              <5>  %if %2 > 3
  6342 000005A5 51                  <5>  push cx
  6343 000005A6 B104                <5>  mov cl, %2
  6344 000005A8 D3EA                <5>  %3 %1, cl
  6345 000005AA 59                  <5>  pop cx
  6346                              <5>  %else
  6347                              <5>  times %2 %3 %1, 1
  6348                              <5>  %endif
  6349                              <5>  %endif
  6350                              <5> 
  6351                              <5> %else
  6352                              <5>  %3 %1, %2
  6353                              <5> %endif
  6354                              <5> %endif
  6355 000005AB 8CD8                <3>  mov %3, %1
  6356 000005AD 01D0                <3>  add %3, %4
  6357 000005AF 8ED8                <3>  mov %1, %3
  6358 000005B1 58                  <2> 	pop		ax
  6359 000005B2 5A                  <2> 	pop		dx
  6360 000005B3 C3                  <2> 	ret
  6361                              <2> 
  6362                              <2> 
  6363                              <2> ;--------------------------------------------------------------------
  6364                              <2> ; FileIO_GetFileSizeToDXAXusingHandleFromBXandResetFilePosition
  6365                              <2> ;	Parameters:
  6366                              <2> ;		BX:		File handle
  6367                              <2> ;	Returns:
  6368                              <2> ;		DX:AX:	Signed file size (if CF cleared)
  6369                              <2> ;		AX:		DOS error code (if CF set)
  6370                              <2> ;		CF:		Clear if successful
  6371                              <2> ;				Set if error
  6372                              <2> ;	Corrupts registers:
  6373                              <2> ;		Nothing
  6374                              <2> ;--------------------------------------------------------------------
  6375                              <2> ALIGN JUMP_ALIGN
  6376                              <2> FileIO_GetFileSizeToDXAXusingHandleFromBXandResetFilePosition:
  6377 000005B4 51                  <2> 	push	cx
  6378                              <2> 
  6379                              <2> 	; Get file size to DX:AX
  6380 000005B5 31C9                <2> 	xor		cx, cx
  6381 000005B7 31D2                <2> 	xor		dx, dx
  6382 000005B9 B002                <2> 	mov		al, SEEK_FROM.endOfFile
  6383 000005BB E81200              <2> 	call	FileIO_SeekFromOriginInALtoOffsetInDXAXusingHandleFromBX
  6384 000005BE 720B                <2> 	jc		SHORT .ReturnFileError
  6385 000005C0 52                  <2> 	push	dx
  6386 000005C1 50                  <2> 	push	ax
  6387                              <2> 
  6388                              <2> 	; Reset file position
  6389 000005C2 31D2                <2> 	xor		dx, dx
  6390 000005C4 B000                <2> 	mov		al, SEEK_FROM.startOfFile
  6391 000005C6 E80700              <2> 	call	FileIO_SeekFromOriginInALtoOffsetInDXAXusingHandleFromBX
  6392 000005C9 58                  <2> 	pop		ax
  6393 000005CA 5A                  <2> 	pop		dx
  6394                              <2> 
  6395                              <2> .ReturnFileError:
  6396 000005CB 59                  <2> 	pop		cx
  6397 000005CC C3                  <2> 	ret
  6398                              <2> 
  6399                              <2> 
  6400                              <2> ;--------------------------------------------------------------------
  6401                              <2> ; FileIO_CloseUsingHandleFromBX
  6402                              <2> ;	Parameters:
  6403                              <2> ;		BX:		File handle
  6404                              <2> ;	Returns:
  6405                              <2> ;		AX:		DOS error code if CF set
  6406                              <2> ;		CF:		Clear if file closed successfully
  6407                              <2> ;				Set if error
  6408                              <2> ;	Corrupts registers:
  6409                              <2> ;		AX
  6410                              <2> ;--------------------------------------------------------------------
  6411                              <2> ALIGN JUMP_ALIGN
  6412                              <2> FileIO_CloseUsingHandleFromBX:
  6413 000005CD B43E                <2> 	mov		ah, CLOSE_FILE
  6414                              <2> 	SKIP2B	f	; cmp ax, <next instruction>
  6415                              <3>  %ifidni %1, f
  6416 000005CF 3D                  <3>  db 03Dh
  6417                              <3> 
  6418                              <3>  %elifidni %1, ax
  6419                              <3>  db 0B8h
  6420                              <3>  %elifidni %1, cx
  6421                              <3>  db 0B9h
  6422                              <3>  %elifidni %1, dx
  6423                              <3>  db 0BAh
  6424                              <3>  %elifidni %1, bx
  6425                              <3>  db 0BBh
  6426                              <3>  %elifidni %1, sp
  6427                              <3>  db 0BCh
  6428                              <3>  %elifidni %1, bp
  6429                              <3>  db 0BDh
  6430                              <3>  %elifidni %1, si
  6431                              <3>  db 0BEh
  6432                              <3>  %elifidni %1, di
  6433                              <3>  db 0BFh
  6434                              <3>  %else
  6435                              <3>  %error "Invalid parameter passed to SKIP2B"
  6436                              <3>  %endif
  6437                              <2> 	; Fall to FileIO_SeekFromOriginInALtoOffsetInDXAXusingHandleFromBX
  6438                              <2> 
  6439                              <2> 
  6440                              <2> ;--------------------------------------------------------------------
  6441                              <2> ; FileIO_SeekFromOriginInALtoOffsetInDXAXusingHandleFromBX
  6442                              <2> ;	Parameters:
  6443                              <2> ;		AL:		SEEK_FROM.(origin)
  6444                              <2> ;		BX:		File handle
  6445                              <2> ;		CX:DX:	Signed offset to seek starting from AL
  6446                              <2> ;	Returns:
  6447                              <2> ;		DX:AX:	New file position in bytes from start of file (if CF cleared)
  6448                              <2> ;		AX:		DOS error code (if CF set)
  6449                              <2> ;		CF:		Clear if successful
  6450                              <2> ;				Set if error
  6451                              <2> ;	Corrupts registers:
  6452                              <2> ;		Nothing
  6453                              <2> ;--------------------------------------------------------------------
  6454                              <2> FileIO_SeekFromOriginInALtoOffsetInDXAXusingHandleFromBX:
  6455 000005D0 B442                <2> 	mov		ah, SET_CURRENT_FILE_POSITION
  6456 000005D2 CD21                <2> 	int		DOS_INTERRUPT_21h
  6457 000005D4 C3                  <2> 	ret
  6458                              <1> %endif
  6459                              <1> 
  6460                              <1> %ifdef INCLUDE_KEYBOARD_LIBRARY
  6461                              <1>   %ifndef KEYBOARD_JUMP_ALIGN
  6462                              <1> 	%define KEYBOARD_JUMP_ALIGN 1
  6463                              <1>   %endif
  6464                              <1> 	%include "Keyboard.asm"
  6465                              <2> ; Project name	:	Assembly Library
  6466                              <2> ; Description	:	Functions for managing keyboard.
  6467                              <2> 
  6468                              <2> ;
  6469                              <2> ; XTIDE Universal BIOS and Associated Tools
  6470                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  6471                              <2> ;
  6472                              <2> ; This program is free software; you can redistribute it and/or modify
  6473                              <2> ; it under the terms of the GNU General Public License as published by
  6474                              <2> ; the Free Software Foundation; either version 2 of the License, or
  6475                              <2> ; (at your option) any later version.
  6476                              <2> ;
  6477                              <2> ; This program is distributed in the hope that it will be useful,
  6478                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  6479                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  6480                              <2> ; GNU General Public License for more details.
  6481                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  6482                              <2> ;
  6483                              <2> 
  6484                              <2> 
  6485                              <2> BUFFER_SIZE_FOR_WORD_INPUT		EQU		6	; 5 chars + NULL
  6486                              <2> 
  6487                              <2> ; Section containing code
  6488                              <2> SECTION .text
  6489                              <2> 
  6490                              <2> ;--------------------------------------------------------------------
  6491                              <2> ; Reads user inputted word.
  6492                              <2> ; Function returns when ENTER or ESC will be pressed.
  6493                              <2> ;
  6494                              <2> ; Keyboard_ReadUserInputtedWordWhilePrinting
  6495                              <2> ;	Parameters
  6496                              <2> ;		BX:		Numeric base (10 or 16)
  6497                              <2> ;	Returns:
  6498                              <2> ;		AX:		User inputted word
  6499                              <2> ;		ZF:		Set if user cancellation
  6500                              <2> ;	Corrupts registers:
  6501                              <2> ;		DX
  6502                              <2> ;--------------------------------------------------------------------
  6503                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  6504                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6505                              <2> Keyboard_ReadUserInputtedWordWhilePrinting:
  6506 000005D5 1E                  <2> 	push	ds
  6507 000005D6 56                  <2> 	push	si
  6508 000005D7 51                  <2> 	push	cx
  6509                              <2> 
  6510 000005D8 B90600              <2> 	mov		cx, BUFFER_SIZE_FOR_WORD_INPUT
  6511 000005DB E8E20F              <2> 	call	Memory_ReserveCXbytesFromStackToDSSI
  6512                              <2> 
  6513 000005DE E8700E              <2> 	call	Char_GetFilterFunctionToDXforNumericBaseInBX
  6514 000005E1 E87A0F              <2> 	call	Registers_ExchangeDSSIwithESDI
  6515 000005E4 E81100              <2> 	call	Keyboard_ReadUserInputtedStringToESDIWhilePrinting
  6516 000005E7 E8740F              <2> 	call	Registers_ExchangeDSSIwithESDI	; Does not modify FLAGS
  6517 000005EA 7403                <2> 	jz		SHORT .CancelledByUser
  6518                              <2> 
  6519 000005EC E8790E              <2> 	call	String_ConvertWordToAXfromStringInDSSIwithBaseInBX
  6520                              <2> .CancelledByUser:
  6521 000005EF 83C406              <2> 	add		sp, BYTE BUFFER_SIZE_FOR_WORD_INPUT
  6522 000005F2 85C9                <2> 	test	cx, cx							; Set ZF if string length is zero
  6523 000005F4 59                  <2> 	pop		cx
  6524 000005F5 5E                  <2> 	pop		si
  6525 000005F6 1F                  <2> 	pop		ds
  6526 000005F7 C3                  <2> 	ret
  6527                              <2> %endif
  6528                              <2> 
  6529                              <2> 
  6530                              <2> ;--------------------------------------------------------------------
  6531                              <2> ; Reads user inputted string to buffer. Character filter is
  6532                              <2> ; supported to ignore unwanted characters.
  6533                              <2> ; Function returns when ENTER or ESC will be pressed.
  6534                              <2> ;
  6535                              <2> ; Keyboard_ReadUserInputtedStringToESDIWhilePrinting
  6536                              <2> ;	Parameters:
  6537                              <2> ;		CX:		Buffer size (with NULL)
  6538                              <2> ;		ES:DI:	Ptr to destination buffer
  6539                              <2> ;		CS:DX:	Ptr to character filter function:
  6540                              <2> ;					Parameters:
  6541                              <2> ;						AL:		Character inputted by user
  6542                              <2> ;					Returns:
  6543                              <2> ;						CF:		Set if character is accepted
  6544                              <2> ;								Cleared if character is rejected
  6545                              <2> ;					Corrupts registers:
  6546                              <2> ;						Nothing
  6547                              <2> ;	Returns:
  6548                              <2> ;		CX:		String length in characters (without NULL)
  6549                              <2> ;		ZF:		Set if user cancellation
  6550                              <2> ;	Corrupts registers:
  6551                              <2> ;		AX
  6552                              <2> ;--------------------------------------------------------------------
  6553                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  6554                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6555                              <2> Keyboard_ReadUserInputtedStringToESDIWhilePrinting:
  6556 000005F8 57                  <2> 	push	di
  6557 000005F9 56                  <2> 	push	si
  6558 000005FA 53                  <2> 	push	bx
  6559 000005FB E83000              <2> 	call	.PrepareDisplayContextForKeyboardInput
  6560 000005FE E325                <2> 	jcxz	.ReturnAfterUpdatingZF
  6561                              <2> 
  6562 00000600 31DB                <2> 	xor		bx, bx								; Zero character counter
  6563 00000602 49                  <2> 	dec		cx									; Decrement buffer size for NULL
  6564 00000603 FC                  <2> 	cld
  6565                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6566                              <2> .GetCharacterFromUser:
  6567 00000604 E89400              <2> 	call	Keyboard_GetKeystrokeToAXandWaitIfNecessary	; Get ASCII to AL
  6568 00000607 E83D00              <2> 	call	.ProcessControlCharacter
  6569 0000060A 7416                <2> 	jz		SHORT .TerminateStringWithNULL
  6570 0000060C 720B                <2> 	jc		SHORT .PlayBellForRejectedCharacter
  6571 0000060E FFD2                <2> 	call	dx									; Filter character
  6572 00000610 7307                <2> 	jnc		SHORT .PlayBellForRejectedCharacter
  6573 00000612 43                  <2> 	inc		bx									; Increment number of characters stored
  6574 00000613 AA                  <2> 	stosb										; Store from AL to ES:DI
  6575 00000614 E86500              <2> 	call	Keyboard_PrintInputtedCharacter
  6576 00000617 E2EB                <2> 	loop	.GetCharacterFromUser
  6577                              <2> .PlayBellForRejectedCharacter:
  6578 00000619 3C08                <2> 	cmp		al, BS								; No bell for backspace
  6579 0000061B 74E7                <2> 	je		SHORT .GetCharacterFromUser
  6580 0000061D E85A00              <2> 	call	Keyboard_PlayBellForUnwantedKeystroke
  6581 00000620 EBE2                <2> 	jmp		SHORT .GetCharacterFromUser
  6582                              <2> 
  6583                              <2> .TerminateStringWithNULL:
  6584 00000622 AA                  <2> 	stosb										; Terminate string with NULL
  6585 00000623 89D9                <2> 	mov		cx, bx								; String length now in CX
  6586                              <2> 
  6587                              <2> .ReturnAfterUpdatingZF:
  6588                              <2> 	CALL_DISPLAY_LIBRARY PopDisplayContext
  6589                              <3>  %ifidn %1, PushDisplayContext
  6590                              <3>  call DisplayContext_Push
  6591                              <3>  %elifidn %1, PopDisplayContext
  6592 00000625 E80BFB              <3>  call DisplayContext_Pop
  6593                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  6594                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  6595                              <3>  %else
  6596                              <3>  mov di, %1
  6597                              <3>  call Display_FunctionFromDI
  6598                              <3>  %endif
  6599 00000628 85C9                <2> 	test	cx, cx								; Clear or set ZF
  6600 0000062A 5B                  <2> 	pop		bx
  6601 0000062B 5E                  <2> 	pop		si
  6602 0000062C 5F                  <2> 	pop		di
  6603 0000062D C3                  <2> 	ret
  6604                              <2> 
  6605                              <2> ;--------------------------------------------------------------------
  6606                              <2> ; .PrepareDisplayContextForKeyboardInput
  6607                              <2> ;	Parameters:
  6608                              <2> ;		Nothing
  6609                              <2> ;	Returns:
  6610                              <2> ;		Nothing (Display context pushed to stack)
  6611                              <2> ;	Corrupts registers:
  6612                              <2> ;		AX, BX, SI
  6613                              <2> ;--------------------------------------------------------------------
  6614                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6615                              <2> .PrepareDisplayContextForKeyboardInput:
  6616 0000062E 5B                  <2> 	pop		bx					; Pop return address to BX
  6617 0000062F 89FE                <2> 	mov		si, di
  6618                              <2> 
  6619                              <2> 	CALL_DISPLAY_LIBRARY PushDisplayContext
  6620                              <3>  %ifidn %1, PushDisplayContext
  6621 00000631 E8DCFA              <3>  call DisplayContext_Push
  6622                              <3>  %elifidn %1, PopDisplayContext
  6623                              <3>  call DisplayContext_Pop
  6624                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  6625                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  6626                              <3>  %else
  6627                              <3>  mov di, %1
  6628                              <3>  call Display_FunctionFromDI
  6629                              <3>  %endif
  6630 00000634 E87EFB              <2> 	call	DisplayCursor_GetDefaultCursorShapeToAX
  6631                              <2> 	CALL_DISPLAY_LIBRARY SetCursorShapeFromAX
  6632                              <3>  %ifidn %1, PushDisplayContext
  6633                              <3>  call DisplayContext_Push
  6634                              <3>  %elifidn %1, PopDisplayContext
  6635                              <3>  call DisplayContext_Pop
  6636                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  6637                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  6638                              <3>  %else
  6639 00000637 BF[C301]            <3>  mov di, %1
  6640 0000063A E830FA              <3>  call Display_FunctionFromDI
  6641                              <3>  %endif
  6642                              <2> 	CALL_DISPLAY_LIBRARY SynchronizeDisplayContextToHardware
  6643                              <3>  %ifidn %1, PushDisplayContext
  6644                              <3>  call DisplayContext_Push
  6645                              <3>  %elifidn %1, PopDisplayContext
  6646                              <3>  call DisplayContext_Pop
  6647                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  6648                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  6649                              <3>  %else
  6650 0000063D BF[0701]            <3>  mov di, %1
  6651 00000640 E82AFA              <3>  call Display_FunctionFromDI
  6652                              <3>  %endif
  6653                              <2> 
  6654 00000643 89F7                <2> 	mov		di, si
  6655 00000645 FFE3                <2> 	jmp		bx
  6656                              <2> 
  6657                              <2> 
  6658                              <2> ;--------------------------------------------------------------------
  6659                              <2> ; .ProcessControlCharacter
  6660                              <2> ;	Parameters:
  6661                              <2> ;		AL:		Character inputted by user
  6662                              <2> ;		CX:		Number of bytes left in buffer
  6663                              <2> ;		BX:		Total number of characters inputted
  6664                              <2> ;		ES:DI:	Ptr where to store next character
  6665                              <2> ;	Returns:
  6666                              <2> ;		AL:		Character inputted by user or NULL if end of input
  6667                              <2> ;		BX:		Cleared if user cancellation
  6668                              <2> ;		ZF:		Set if user has ended or cancelled key input
  6669                              <2> ;		CF:		Set if character is rejected
  6670                              <2> ;	Corrupts registers:
  6671                              <2> ;		AH
  6672                              <2> ;--------------------------------------------------------------------
  6673                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6674                              <2> .ProcessControlCharacter:
  6675 00000647 3C0D                <2> 	cmp		al, CR								; ENTER to terminate string?
  6676 00000649 741E                <2> 	je		SHORT .EndCharacterInput
  6677 0000064B 3C1B                <2> 	cmp		al, ESC								; Cancel input?
  6678 0000064D 7418                <2> 	je		SHORT .CancelCharacterInput
  6679 0000064F 3C08                <2> 	cmp		al, BS								; Backspace?
  6680 00000651 7404                <2> 	je		SHORT .Backspace
  6681 00000653 E30E                <2> 	jcxz	.RejectCharacter
  6682 00000655 F8                  <2> 	clc											; Clear CF (ZF is already cleared)
  6683 00000656 C3                  <2> 	ret
  6684                              <2> 
  6685                              <2> .Backspace:
  6686 00000657 85DB                <2> 	test	bx, bx								; At the beginning?
  6687 00000659 7408                <2> 	jz		SHORT .RejectCharacter
  6688 0000065B 41                  <2> 	inc		cx									; Increment bytes left
  6689 0000065C 4B                  <2> 	dec		bx									; Decrement characters inputted
  6690 0000065D 4F                  <2> 	dec		di
  6691 0000065E E80B00              <2> 	call	Keyboard_PrintBackspace
  6692 00000661 B008                <2> 	mov		al, BS								; Restore character
  6693                              <2> .RejectCharacter:
  6694 00000663 84C0                <2> 	test	al, al								; Clear ZF...
  6695 00000665 F9                  <2> 	stc											; ...and set CF
  6696 00000666 C3                  <2> 	ret
  6697                              <2> 
  6698                              <2> .CancelCharacterInput:
  6699 00000667 31DB                <2> 	xor		bx, bx
  6700                              <2> .EndCharacterInput:
  6701 00000669 30C0                <2> 	xor		al, al								; Set ZF and clear CF
  6702 0000066B C3                  <2> 	ret
  6703                              <2> %endif ; EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  6704                              <2> 
  6705                              <2> 
  6706                              <2> ;--------------------------------------------------------------------
  6707                              <2> ; Keyboard_PrintBackspace
  6708                              <2> ;	Parameters:
  6709                              <2> ;		Nothing
  6710                              <2> ;	Returns:
  6711                              <2> ;		Nothing
  6712                              <2> ;	Corrupts registers:
  6713                              <2> ;		AX
  6714                              <2> ;--------------------------------------------------------------------
  6715                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  6716                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6717                              <2> Keyboard_PrintBackspace:
  6718 0000066C B008                <2> 	mov		al, BS
  6719 0000066E E80B00              <2> 	call	Keyboard_PrintInputtedCharacter
  6720 00000671 B020                <2> 	mov		al, ' '
  6721 00000673 E80600              <2> 	call	Keyboard_PrintInputtedCharacter
  6722 00000676 B008                <2> 	mov		al, BS
  6723 00000678 EB02                <2> 	jmp		SHORT Keyboard_PrintInputtedCharacter
  6724                              <2> %endif
  6725                              <2> 
  6726                              <2> 
  6727                              <2> ;--------------------------------------------------------------------
  6728                              <2> ; Keyboard_PlayBellForUnwantedKeystroke
  6729                              <2> ;	Parameters:
  6730                              <2> ;		Nothing
  6731                              <2> ;	Returns:
  6732                              <2> ;		Nothing
  6733                              <2> ;	Corrupts registers:
  6734                              <2> ;		AX
  6735                              <2> ;--------------------------------------------------------------------
  6736                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  6737                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6738                              <2> Keyboard_PlayBellForUnwantedKeystroke:
  6739 0000067A B007                <2> 	mov		al, BELL
  6740                              <2> 	; Fall to Keyboard_PrintInputtedCharacter
  6741                              <2> %endif
  6742                              <2> 
  6743                              <2> ;--------------------------------------------------------------------
  6744                              <2> ; Keyboard_PrintInputtedCharacter
  6745                              <2> ;	Parameters:
  6746                              <2> ;		AL:		Character inputted by user
  6747                              <2> ;	Returns:
  6748                              <2> ;		Nothing
  6749                              <2> ;	Corrupts registers:
  6750                              <2> ;		AX
  6751                              <2> ;--------------------------------------------------------------------
  6752                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  6753                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6754                              <2> Keyboard_PrintInputtedCharacter:
  6755 0000067C 57                  <2> 	push	di
  6756                              <2> 	CALL_DISPLAY_LIBRARY PrintCharacterFromAL
  6757                              <3>  %ifidn %1, PushDisplayContext
  6758                              <3>  call DisplayContext_Push
  6759                              <3>  %elifidn %1, PopDisplayContext
  6760                              <3>  call DisplayContext_Pop
  6761                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  6762                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  6763                              <3>  %else
  6764 0000067D BF[EE02]            <3>  mov di, %1
  6765 00000680 E8EAF9              <3>  call Display_FunctionFromDI
  6766                              <3>  %endif
  6767                              <2> 	CALL_DISPLAY_LIBRARY SynchronizeDisplayContextToHardware	; Hardware cursor
  6768                              <3>  %ifidn %1, PushDisplayContext
  6769                              <3>  call DisplayContext_Push
  6770                              <3>  %elifidn %1, PopDisplayContext
  6771                              <3>  call DisplayContext_Pop
  6772                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  6773                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  6774                              <3>  %else
  6775 00000683 BF[0701]            <3>  mov di, %1
  6776 00000686 E8E4F9              <3>  call Display_FunctionFromDI
  6777                              <3>  %endif
  6778 00000689 5F                  <2> 	pop		di
  6779 0000068A C3                  <2> 	ret
  6780                              <2> %endif
  6781                              <2> 
  6782                              <2> 
  6783                              <2> ;--------------------------------------------------------------------
  6784                              <2> ; Keyboard_RemoveAllKeystrokesFromBuffer
  6785                              <2> ;	Parameters:
  6786                              <2> ;		Nothing
  6787                              <2> ;	Returns:
  6788                              <2> ;		Nothing
  6789                              <2> ;	Corrupts registers:
  6790                              <2> ;		AX
  6791                              <2> ;--------------------------------------------------------------------
  6792                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS	; Only used when debugging
  6793                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6794                              <2> Keyboard_RemoveAllKeystrokesFromBuffer:
  6795 0000068B E80800              <2> 	call	Keyboard_GetKeystrokeToAX
  6796 0000068E 75FB                <2> 	jnz		SHORT Keyboard_RemoveAllKeystrokesFromBuffer
  6797 00000690 C3                  <2> 	ret
  6798                              <2> %endif
  6799                              <2> 
  6800                              <2> 
  6801                              <2> ;--------------------------------------------------------------------
  6802                              <2> ; Keyboard_GetKeystrokeToAX
  6803                              <2> ; Keyboard_GetKeystrokeToAXandLeaveItToBuffer
  6804                              <2> ; Keyboard_GetKeystrokeToAXandWaitIfNecessary
  6805                              <2> ;	Parameters:
  6806                              <2> ;		Nothing
  6807                              <2> ;	Returns:
  6808                              <2> ;		AL:		ASCII character (if keystroke available)
  6809                              <2> ;		AH:		BIOS scan code (if keystroke available)
  6810                              <2> ;		ZF:		Set if no keystroke available
  6811                              <2> ;				Cleared if keystroke available
  6812                              <2> ;	Corrupts registers:
  6813                              <2> ;		Nothing
  6814                              <2> ;--------------------------------------------------------------------
  6815                              <2> 
  6816                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  6817                              <2> 	%define EXCLUDE
  6818                              <2> 	%ifdef MODULE_HOTKEYS
  6819                              <2> 		%undef EXCLUDE
  6820                              <2> 	%endif
  6821                              <2> 	%ifdef MODULE_BOOT_MENU
  6822                              <2> 		%undef EXCLUDE
  6823                              <2> 	%endif
  6824                              <2> %endif
  6825                              <2> 
  6826                              <2> %ifndef EXCLUDE
  6827                              <2> 
  6828                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6829                              <2> Keyboard_GetKeystrokeToAXandLeaveItToBuffer:
  6830 00000691 B401                <2> 	mov		ah, CHECK_FOR_KEYSTROKE
  6831 00000693 CD16                <2> 	int		BIOS_KEYBOARD_INTERRUPT_16h
  6832 00000695 C3                  <2> 	ret
  6833                              <2> 
  6834                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6835                              <2> Keyboard_GetKeystrokeToAX:
  6836 00000696 E8F8FF              <2> 	call	Keyboard_GetKeystrokeToAXandLeaveItToBuffer
  6837 00000699 7406                <2> 	jz		SHORT Keyboard_GetKeystrokeToAXReturn
  6838                              <2> 	; Fall to Keyboard_GetKeystrokeToAXandWaitIfNecessary
  6839                              <2> ALIGN KEYBOARD_JUMP_ALIGN
  6840                              <2> Keyboard_GetKeystrokeToAXandWaitIfNecessary:
  6841 0000069B 30E4                <2> 	xor		ah, ah						; GET_KEYSTROKE
  6842 0000069D CD16                <2> 	int		BIOS_KEYBOARD_INTERRUPT_16h
  6843 0000069F 85C0                <2> 	test	ax, ax						; Clear ZF
  6844                              <2> Keyboard_GetKeystrokeToAXReturn:
  6845 000006A1 C3                  <2> 	ret
  6846                              <2> 
  6847                              <2> %endif
  6848                              <2> %undef EXCLUDE
  6849                              <1> %endif
  6850                              <1> 
  6851                              <1> %ifdef INCLUDE_MENU_LIBRARY
  6852                              <1>   %ifndef MENU_JUMP_ALIGN
  6853                              <1> 	%define MENU_JUMP_ALIGN 1
  6854                              <1>   %endif
  6855                              <1> 	%include "CharOutLineSplitter.asm"
  6856                              <2> ; Project name	:	Assembly Library
  6857                              <2> ; Description	:	Functions for splitting menu lines during character output.
  6858                              <2> 
  6859                              <2> ;
  6860                              <2> ; XTIDE Universal BIOS and Associated Tools
  6861                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  6862                              <2> ;
  6863                              <2> ; This program is free software; you can redistribute it and/or modify
  6864                              <2> ; it under the terms of the GNU General Public License as published by
  6865                              <2> ; the Free Software Foundation; either version 2 of the License, or
  6866                              <2> ; (at your option) any later version.
  6867                              <2> ;
  6868                              <2> ; This program is distributed in the hope that it will be useful,
  6869                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  6870                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  6871                              <2> ; GNU General Public License for more details.
  6872                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  6873                              <2> ;
  6874                              <2> 
  6875                              <2> 
  6876                              <2> ; Section containing code
  6877                              <2> SECTION .text
  6878                              <2> 
  6879                              <2> ;--------------------------------------------------------------------
  6880                              <2> ; CharOutLineSplitter_PrepareForPrintingTextLines
  6881                              <2> ;	Parameters:
  6882                              <2> ;		SS:BP:	Ptr to MENU
  6883                              <2> ;	Returns:
  6884                              <2> ;		Nothing
  6885                              <2> ;	Corrupts registers:
  6886                              <2> ;		AX, DX, DI
  6887                              <2> ;--------------------------------------------------------------------
  6888                              <2> ALIGN MENU_JUMP_ALIGN
  6889                              <2> CharOutLineSplitter_PrepareForPrintingTextLines:
  6890                              <2> 	; Get first text line column offset to DX
  6891 000006A2 E81300              <2> 	call	CharOutLineSplitter_GetFirstBorderLineColumnOffsetToAX
  6892 000006A5 0404                <2> 	add		al, MENU_TEXT_COLUMN_OFFSET<<1
  6893 000006A7 92                  <2> 	xchg	dx, ax
  6894                              <2> 
  6895                              <2> 	; Get last text line column offset to AX
  6896 000006A8 E80603              <2> 	call	MenuLocation_GetMaxTextLineLengthToAX
  6897                              <2> 	eSHL_IM	ax, 1			; Characters to BYTEs
  6898                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  6899                              <3> %ifdef USE_386
  6900                              <3>  %if %2 = 1
  6901                              <3>  add %1, %1
  6902                              <3>  %else
  6903                              <3>  eSHIFT_IM %1, %2, shl
  6904                              <3>  %endif
  6905                              <3> %else
  6906                              <3>  eSHIFT_IM %1, %2, shl
  6907                              <4> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  6908                              <4> %ifndef USE_186
  6909                              <4>  %ifidni %1, cl
  6910                              <4>  times %2 %3 %1, 1
  6911                              <4>  %elifidni %1, ch
  6912                              <4>  times %2 %3 %1, 1
  6913                              <4>  %elifidni %1, cx
  6914                              <4>  times %2 %3 %1, 1
  6915                              <4>  %else
  6916                              <4>  %if %2 > 3
  6917                              <4>  push cx
  6918                              <4>  mov cl, %2
  6919                              <4>  %3 %1, cl
  6920                              <4>  pop cx
  6921                              <4>  %else
  6922 000006AB D1E0                <4>  times %2 %3 %1, 1
  6923                              <4>  %endif
  6924                              <4>  %endif
  6925                              <4> 
  6926                              <4> %else
  6927                              <4>  %3 %1, %2
  6928                              <4> %endif
  6929                              <4> %endif
  6930                              <3> %endif
  6931                              <3> %endif
  6932 000006AD 01D0                <2> 	add		ax, dx
  6933                              <2> 
  6934 000006AF 92                  <2> 	xchg	ax, dx			; AL = First text line column offset
  6935 000006B0 88D4                <2> 	mov		ah, dl			; AH = Last text line column offset
  6936                              <2> 	JMP_DISPLAY_LIBRARY SetCharacterOutputParameterFromAX
  6937                              <3>  %ifidn %1, PushDisplayContext
  6938                              <3>  jmp DisplayContext_Push
  6939                              <3>  %elifidn %1, PopDisplayContext
  6940                              <3>  call DisplayContext_Pop
  6941                              <3>  ret
  6942                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  6943                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  6944                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
  6945                              <3>  mov di, %1
  6946                              <3>  call Display_FunctionFromDI
  6947                              <3>  ret
  6948                              <3>  %else
  6949 000006B2 BF[9D01]            <3>  mov di, %1
  6950 000006B5 E9B5F9              <3>  jmp Display_FunctionFromDI
  6951                              <3>  %endif
  6952                              <2> 
  6953                              <2> 
  6954                              <2> ;--------------------------------------------------------------------
  6955                              <2> ; CharOutLineSplitter_GetFirstBorderLineColumnOffsetToAX
  6956                              <2> ;	Parameters:
  6957                              <2> ;		SS:BP:	Ptr to MENU
  6958                              <2> ;	Returns:
  6959                              <2> ;		AX:		Offset to end of text line (first border area character)
  6960                              <2> ;	Corrupts registers:
  6961                              <2> ;		Nothing
  6962                              <2> ;--------------------------------------------------------------------
  6963                              <2> ALIGN MENU_JUMP_ALIGN
  6964                              <2> CharOutLineSplitter_GetFirstBorderLineColumnOffsetToAX:
  6965 000006B8 E8C402              <2> 	call	MenuLocation_GetTitleBordersTopLeftCoordinatesToAX
  6966 000006BB 30E4                <2> 	xor		ah, ah
  6967                              <2> 	eSHL_IM	ax, 1
  6968                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  6969                              <3> %ifdef USE_386
  6970                              <3>  %if %2 = 1
  6971                              <3>  add %1, %1
  6972                              <3>  %else
  6973                              <3>  eSHIFT_IM %1, %2, shl
  6974                              <3>  %endif
  6975                              <3> %else
  6976                              <3>  eSHIFT_IM %1, %2, shl
  6977                              <4> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  6978                              <4> %ifndef USE_186
  6979                              <4>  %ifidni %1, cl
  6980                              <4>  times %2 %3 %1, 1
  6981                              <4>  %elifidni %1, ch
  6982                              <4>  times %2 %3 %1, 1
  6983                              <4>  %elifidni %1, cx
  6984                              <4>  times %2 %3 %1, 1
  6985                              <4>  %else
  6986                              <4>  %if %2 > 3
  6987                              <4>  push cx
  6988                              <4>  mov cl, %2
  6989                              <4>  %3 %1, cl
  6990                              <4>  pop cx
  6991                              <4>  %else
  6992 000006BD D1E0                <4>  times %2 %3 %1, 1
  6993                              <4>  %endif
  6994                              <4>  %endif
  6995                              <4> 
  6996                              <4> %else
  6997                              <4>  %3 %1, %2
  6998                              <4> %endif
  6999                              <4> %endif
  7000                              <3> %endif
  7001                              <3> %endif
  7002 000006BF C3                  <2> 	ret
  7003                              <2> 
  7004                              <2> 
  7005                              <2> ;--------------------------------------------------------------------
  7006                              <2> ; CharOutLineSplitter_IsCursorAtTheEndOfTextLine
  7007                              <2> ;	Parameters:
  7008                              <2> ;		DS:		BDA segment (zero)
  7009                              <2> ;		ES:DI:	Ptr to cursor location in video memory
  7010                              <2> ;	Returns:
  7011                              <2> ;		CF:		Set if end of text line
  7012                              <2> ;				Clear if more characters fit on current text line
  7013                              <2> ;	Corrupts registers:
  7014                              <2> ;		DX
  7015                              <2> ;--------------------------------------------------------------------
  7016                              <2> ALIGN MENU_JUMP_ALIGN
  7017                              <2> CharOutLineSplitter_IsCursorAtTheEndOfTextLine:
  7018 000006C0 50                  <2> 	push	ax
  7019                              <2> 
  7020 000006C1 8A164A04            <2> 	mov		dl, [VIDEO_BDA.wColumns]
  7021                              <2> 	eSHL_IM	dl, 1			; DX = bytes per row
  7022                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  7023                              <3> %ifdef USE_386
  7024                              <3>  %if %2 = 1
  7025                              <3>  add %1, %1
  7026                              <3>  %else
  7027                              <3>  eSHIFT_IM %1, %2, shl
  7028                              <3>  %endif
  7029                              <3> %else
  7030                              <3>  eSHIFT_IM %1, %2, shl
  7031                              <4> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
  7032                              <4> %ifndef USE_186
  7033                              <4>  %ifidni %1, cl
  7034                              <4>  times %2 %3 %1, 1
  7035                              <4>  %elifidni %1, ch
  7036                              <4>  times %2 %3 %1, 1
  7037                              <4>  %elifidni %1, cx
  7038                              <4>  times %2 %3 %1, 1
  7039                              <4>  %else
  7040                              <4>  %if %2 > 3
  7041                              <4>  push cx
  7042                              <4>  mov cl, %2
  7043                              <4>  %3 %1, cl
  7044                              <4>  pop cx
  7045                              <4>  %else
  7046 000006C5 D0E2                <4>  times %2 %3 %1, 1
  7047                              <4>  %endif
  7048                              <4>  %endif
  7049                              <4> 
  7050                              <4> %else
  7051                              <4>  %3 %1, %2
  7052                              <4> %endif
  7053                              <4> %endif
  7054                              <3> %endif
  7055                              <3> %endif
  7056 000006C7 89F8                <2> 	mov		ax, di
  7057 000006C9 F6F2                <2> 	div		dl				; AL = row index, AH = column index
  7058 000006CB 38265B04            <2> 	cmp		[VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCharOutParam+1], ah
  7059                              <2> 
  7060 000006CF 58                  <2> 	pop		ax
  7061 000006D0 C3                  <2> 	ret
  7062                              <2> 
  7063                              <2> 
  7064                              <2> ;--------------------------------------------------------------------
  7065                              <2> ; CharOutLineSplitter_MovePartialWordToNewTextLine
  7066                              <2> ;	Parameters:
  7067                              <2> ;		AL:		Character to output
  7068                              <2> ;		AH:		Attribute to output
  7069                              <2> ;		DS:		BDA segment (zero)
  7070                              <2> ;		ES:DI:	Ptr to end of text line in video memory
  7071                              <2> ;	Returns:
  7072                              <2> ;		DI:		Updated to next character for new text line
  7073                              <2> ;	Corrupts registers:
  7074                              <2> ;		AX, DX
  7075                              <2> ;--------------------------------------------------------------------
  7076                              <2> ALIGN MENU_JUMP_ALIGN
  7077                              <2> CharOutLineSplitter_MovePartialWordToNewTextLine:
  7078 000006D1 56                  <2> 	push	si
  7079 000006D2 51                  <2> 	push	cx
  7080 000006D3 50                  <2> 	push	ax
  7081                              <2> 	; Fall to .GetOffsetToPartialWordToSIandSizeToCX
  7082                              <2> 
  7083                              <2> ;--------------------------------------------------------------------
  7084                              <2> ; .GetOffsetToPartialWordToSIandSizeToCX
  7085                              <2> ;	Parameters:
  7086                              <2> ;		ES:DI:	Ptr to space before border character
  7087                              <2> ;	Returns:
  7088                              <2> ;		CX:		Number of bytes that needs to be moved
  7089                              <2> ;		ES:SI:	Ptr to beginning of partial word that needs to be moved to new line
  7090                              <2> ;	Corrupts registers:
  7091                              <2> ;		Nothing
  7092                              <2> ;--------------------------------------------------------------------
  7093                              <2> .GetOffsetToPartialWordToSIandSizeToCX:
  7094 000006D4 89F9                <2> 	mov		cx, di
  7095 000006D6 89FE                <2> 	mov		si, di
  7096                              <2> ALIGN MENU_JUMP_ALIGN
  7097                              <2> .ScanNextCharacter:		; Space will always be found since one comes after border
  7098 000006D8 4E                  <2> 	dec		si
  7099 000006D9 4E                  <2> 	dec		si
  7100 000006DA 26803C20            <2> 	cmp		BYTE [es:si], ' '
  7101 000006DE 75F8                <2> 	jne		SHORT .ScanNextCharacter
  7102 000006E0 46                  <2> 	inc		si
  7103 000006E1 46                  <2> 	inc		si			; SI now points one past space
  7104 000006E2 29F1                <2> 	sub		cx, si
  7105                              <2> 	; Fall to .ChangeLine
  7106                              <2> 
  7107                              <2> ;--------------------------------------------------------------------
  7108                              <2> ; .ChangeLine
  7109                              <2> ;	Parameters:
  7110                              <2> ;		Nothing
  7111                              <2> ;	Returns:
  7112                              <2> ;		Nothing
  7113                              <2> ;	Corrupts registers:
  7114                              <2> ;		AX, DX
  7115                              <2> ;--------------------------------------------------------------------
  7116                              <2> .ChangeLine:
  7117 000006E4 E8B701              <2> 	call	MenuCharOut_PrintLFCRandAdjustOffsetForStartOfLine
  7118 000006E7 E312                <2> 	jcxz	.ReturnFromMovePartialWordToNewTextLine
  7119                              <2> 	; Fall to .MovePartialWordFromPreviousLineInESSItoNewLineInESDIwithSizeInCX
  7120                              <2> 
  7121                              <2> ;--------------------------------------------------------------------
  7122                              <2> ; .MovePartialWordFromPreviousLineInESSItoNewLineInESDIwithSizeInCX
  7123                              <2> ;	Parameters:
  7124                              <2> ;		CX:		Number of BYTEs in partial word
  7125                              <2> ;		DS:		BDA segment (zero)
  7126                              <2> ;		ES:SI:	Ptr to partial word on previous line
  7127                              <2> ;		ES:DI:	Ptr to new empty line
  7128                              <2> ;	Returns:
  7129                              <2> ;		ES:DI:	Ptr where to store next character
  7130                              <2> ;	Corrupts registers:
  7131                              <2> ;		AX, CX, DX, SI
  7132                              <2> ;--------------------------------------------------------------------
  7133                              <2> .MovePartialWordFromPreviousLineInESSItoNewLineInESDIwithSizeInCX:
  7134 000006E9 56                  <2> 	push	si
  7135 000006EA 51                  <2> 	push	cx
  7136                              <2> 	WAIT_RETRACE_IF_NECESSARY_THEN rep movsb
  7137                              <3> %ifdef ELIMINATE_CGA_SNOW
  7138                              <3>  %ifidn %1, stosb
  7139                              <3>  call CgaSnow_Stosb
  7140                              <3>  %elifidn %1, stosw
  7141                              <3>  call CgaSnow_Stosw
  7142                              <3>  %elifidn %1, rep movsb
  7143 000006EB E856F9              <3>  call CgaSnow_RepMovsb
  7144                              <3>  %else
  7145                              <3>  %error "Invalid instruction passed to WAIT_RETRACE_IF_NECESSARY_THEN"
  7146                              <3>  %endif
  7147                              <3> %else
  7148                              <3>  %ifidn %1, rep movsb
  7149                              <3>  eSEG_STR rep, es, movsb
  7150                              <3>  %else
  7151                              <3>  %1
  7152                              <3>  %endif
  7153                              <3> %endif
  7154 000006EE 59                  <2> 	pop		cx
  7155 000006EF 5E                  <2> 	pop		si
  7156                              <2> 
  7157 000006F0 87FE                <2> 	xchg	di, si
  7158 000006F2 D1E9                <2> 	shr		cx, 1		; Bytes to characters
  7159 000006F4 B020                <2> 	mov		al, ' '
  7160 000006F6 E8DAFB              <2> 	call	DisplayPrint_RepeatCharacterFromALwithCountInCX
  7161 000006F9 89F7                <2> 	mov		di, si
  7162                              <2> 
  7163                              <2> .ReturnFromMovePartialWordToNewTextLine:
  7164 000006FB 58                  <2> 	pop		ax
  7165 000006FC 59                  <2> 	pop		cx
  7166 000006FD 5E                  <2> 	pop		si
  7167 000006FE C3                  <2> 	ret
  7168                              <1> 	%include "Menu.asm"
  7169                              <2> ; Project name	:	Assembly Library
  7170                              <2> ; Description	:	Menu Library functions for CALL_MENU_LIBRARY macro
  7171                              <2> ;					that users should use to make library call.
  7172                              <2> 
  7173                              <2> ;
  7174                              <2> ; XTIDE Universal BIOS and Associated Tools
  7175                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  7176                              <2> ;
  7177                              <2> ; This program is free software; you can redistribute it and/or modify
  7178                              <2> ; it under the terms of the GNU General Public License as published by
  7179                              <2> ; the Free Software Foundation; either version 2 of the License, or
  7180                              <2> ; (at your option) any later version.
  7181                              <2> ;
  7182                              <2> ; This program is distributed in the hope that it will be useful,
  7183                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  7184                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  7185                              <2> ; GNU General Public License for more details.
  7186                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  7187                              <2> ;
  7188                              <2> 
  7189                              <2> 
  7190                              <2> ; Section containing code
  7191                              <2> SECTION .text
  7192                              <2> 
  7193                              <2> ;--------------------------------------------------------------------
  7194                              <2> ; MenuFunctionFromDI
  7195                              <2> ;	Parameters:
  7196                              <2> ;		DI:		Function to call (MENU_LIB.functionName)
  7197                              <2> ;		BP:		Menu handle
  7198                              <2> ;		Others:	Depends on function to call
  7199                              <2> ;	Returns:
  7200                              <2> ;		Depends on function to call
  7201                              <2> ;	Corrupts registers:
  7202                              <2> ;		AX (unless used as a return register), DI
  7203                              <2> ;--------------------------------------------------------------------
  7204                              <2> ALIGN MENU_JUMP_ALIGN
  7205                              <2> Menu_FunctionFromDI:
  7206 000006FF 56                  <2> 	push	si
  7207 00000700 52                  <2> 	push	dx
  7208 00000701 51                  <2> 	push	cx
  7209 00000702 53                  <2> 	push	bx
  7210 00000703 FFD7                <2> 	call	di
  7211 00000705 5B                  <2> 	pop		bx
  7212 00000706 59                  <2> 	pop		cx
  7213 00000707 5A                  <2> 	pop		dx
  7214 00000708 5E                  <2> 	pop		si
  7215 00000709 C3                  <2> 	ret
  7216                              <2> 
  7217                              <2> 
  7218                              <2> 	%define DisplayWithHandlerInBXandUserDataInDXAX			MenuInit_DisplayMenuWithHandlerInBXandUserDataInDXAX
  7219                              <2> 	;%define Close											MenuInit_CloseMenuWindow				; Special case in CALL_MENU_LIBRARY
  7220                              <2> 	%define RefreshWindow									MenuInit_RefreshMenuWindow
  7221                              <2> 
  7222                              <2> 	;%define SetUserDataFromDSSI							MenuInit_SetUserDataFromDSSI			; Special case in CALL_MENU_LIBRARY
  7223                              <2> 	;%define GetUserDataToDSSI								MenuInit_GetUserDataToDSSI				; Special case in CALL_MENU_LIBRARY
  7224                              <2> 
  7225                              <2> 	;%define SetTitleHeightFromAL							MenuInit_SetTitleHeightFromAL			; Special case in CALL_MENU_LIBRARY
  7226                              <2> 	%define ClearTitleArea									MenuText_ClearTitleArea
  7227                              <2> 	%define RefreshTitle									MenuText_RefreshTitle
  7228                              <2> 
  7229                              <2> 	%define HighlightItemFromAX								MenuInit_HighlightItemFromAX
  7230                              <2> 	;%define SetTotalItemsFromAX							MenuInit_SetTotalItemsFromAX			; Special case in CALL_MENU_LIBRARY
  7231                              <2> 	%define RefreshItemFromAX								MenuText_RefreshItemFromAX
  7232                              <2> 
  7233                              <2> 	;%define SetInformationHeightFromAL						MenuInit_SetInformationHeightFromAL		; Special case in CALL_MENU_LIBRARY
  7234                              <2> 	%define ClearInformationArea							MenuText_ClearInformationArea
  7235                              <2> 	%define RefreshInformation								MenuText_RefreshInformation
  7236                              <2> 
  7237                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
  7238                              <2> 	%define StartSelectionTimeoutWithTicksInAX				MenuTime_StartSelectionTimeoutWithTicksInAX
  7239                              <2> %endif
  7240                              <2> 
  7241                              <2> %ifdef INCLUDE_MENU_DIALOGS
  7242                              <2> 	%define StartProgressTaskWithIoInDSSIandParamInDXAX		DialogProgress_StartProgressTaskWithIoInDSSIandParamInDXAX
  7243                              <2> 	%define SetProgressValueFromAX							DialogProgress_SetProgressValueFromAX
  7244                              <2> 
  7245                              <2> 	%define DisplayMessageWithInputInDSSI					DialogMessage_DisplayMessageWithInputInDSSI
  7246                              <2> 	%define GetSelectionToAXwithInputInDSSI					DialogSelection_GetSelectionToAXwithInputInDSSI
  7247                              <2> 	%define GetWordWithIoInDSSI								DialogWord_GetWordWithIoInDSSI
  7248                              <2> 	%define GetStringWithIoInDSSI							DialogString_GetStringWithIoInDSSI
  7249                              <2> 	%define GetFileNameWithIoInDSSI							DialogFile_GetFileNameWithIoInDSSI
  7250                              <2> 	%define GetDriveWithIoInDSSI							DialogDrive_GetDriveWithIoInDSSI
  7251                              <2> %endif
  7252                              <2> 
  7253                              <1> 	%include "MenuAttributes.asm"
  7254                              <2> ; Project name	:	Assembly Library
  7255                              <2> ; Description	:	Finds suitable character attribute for
  7256                              <2> ;					color, B/W and monochrome displays.
  7257                              <2> 
  7258                              <2> ;
  7259                              <2> ; XTIDE Universal BIOS and Associated Tools
  7260                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  7261                              <2> ;
  7262                              <2> ; This program is free software; you can redistribute it and/or modify
  7263                              <2> ; it under the terms of the GNU General Public License as published by
  7264                              <2> ; the Free Software Foundation; either version 2 of the License, or
  7265                              <2> ; (at your option) any later version.
  7266                              <2> ;
  7267                              <2> ; This program is distributed in the hope that it will be useful,
  7268                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  7269                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  7270                              <2> ; GNU General Public License for more details.
  7271                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  7272                              <2> ;
  7273                              <2> 
  7274                              <2> 
  7275                              <2> ; Struct containing border characters for different types of menu window lines
  7276                              <2> struc ATTRIBUTE_CHARS
  7277 00000000 <res 00000001>      <2> 	.cBordersAndBackground	resb	1
  7278 00000001 <res 00000001>      <2> 	.cShadow				resb	1
  7279                              <2> 	.cTitle:
  7280 00000002 <res 00000001>      <2> 	.cInformation			resb	1
  7281 00000003 <res 00000001>      <2> 	.cItem					resb	1
  7282 00000004 <res 00000001>      <2> 	.cHighlightedItem		resb	1
  7283 00000005 <res 00000001>      <2> 	.cHurryTimeout			resb	1
  7284 00000006 <res 00000001>      <2> 	.cNormalTimeout			resb	1
  7285                              <2> endstruc
  7286                              <2> 
  7287                              <2> 
  7288                              <2> ; Section containing code
  7289                              <2> SECTION .text
  7290                              <2> 
  7291                              <2> ;--------------------------------------------------------------------
  7292                              <2> ; MenuAttribute_SetToDisplayContextFromTypeInSI
  7293                              <2> ;	Parameters
  7294                              <2> ;		SI:		Attribute type (from ATTRIBUTE_CHARS)
  7295                              <2> ;	Returns:
  7296                              <2> ;		Nothing
  7297                              <2> ;	Corrupts registers:
  7298                              <2> ;		AX, SI, DI
  7299                              <2> ;--------------------------------------------------------------------
  7300                              <2> ALIGN MENU_JUMP_ALIGN
  7301                              <2> MenuAttribute_SetToDisplayContextFromTypeInSI:
  7302 0000070A E80600              <2> 	call	MenuAttribute_GetToAXfromTypeInSI
  7303                              <2> 	JMP_DISPLAY_LIBRARY SetCharacterAttributeFromAL
  7304                              <3>  %ifidn %1, PushDisplayContext
  7305                              <3>  jmp DisplayContext_Push
  7306                              <3>  %elifidn %1, PopDisplayContext
  7307                              <3>  call DisplayContext_Pop
  7308                              <3>  ret
  7309                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7310                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7311                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
  7312                              <3>  mov di, %1
  7313                              <3>  call Display_FunctionFromDI
  7314                              <3>  ret
  7315                              <3>  %else
  7316 0000070D BF[9901]            <3>  mov di, %1
  7317 00000710 E95AF9              <3>  jmp Display_FunctionFromDI
  7318                              <3>  %endif
  7319                              <2> 
  7320                              <2> 
  7321                              <2> ;--------------------------------------------------------------------
  7322                              <2> ; MenuAttribute_GetToAXfromTypeInSI
  7323                              <2> ;	Parameters
  7324                              <2> ;		SI:		Attribute type (from ATTRIBUTE_CHARS)
  7325                              <2> ;	Returns:
  7326                              <2> ;		AX:		Wanted attribute
  7327                              <2> ;	Corrupts registers:
  7328                              <2> ;		SI
  7329                              <2> ;--------------------------------------------------------------------
  7330                              <2> ALIGN MENU_JUMP_ALIGN
  7331                              <2> MenuAttribute_GetToAXfromTypeInSI:
  7332 00000713 1E                  <2> 	push	ds
  7333                              <2> 
  7334                              <2> 	LOAD_BDA_SEGMENT_TO	ds, ax, !
  7335                              <3> %ifndef USE_186
  7336 00000714 31C0                <3>  xor %2, %2
  7337 00000716 8ED8                <3>  mov %1, %2
  7338                              <3> %elifidn %3, !
  7339                              <3>  xor %2, %2
  7340                              <3>  mov %1, %2
  7341                              <3> %else
  7342                              <3>  push BYTE 0
  7343                              <3>  pop %1
  7344                              <3> %endif
  7345 00000718 A04904              <2> 	mov		al, [VIDEO_BDA.bMode]		; Load BIOS display mode (0, 1, 2, 3 or 7)
  7346 0000071B 3C07                <2> 	cmp		al, 7
  7347 0000071D 740A                <2> 	je		SHORT .LoadMonoAttribute
  7348 0000071F A801                <2> 	test	al, 1						; Even modes (0 and 2) are B/W
  7349 00000721 750C                <2> 	jnz		SHORT .LoadColorAttribute
  7350                              <2> 
  7351                              <2> .LoadBlackAndWhiteAttribute:
  7352 00000723 81C6[3E07]          <2> 	add		si, .rgcBlackAndWhiteAttributes
  7353 00000727 EB0A                <2> 	jmp		SHORT .LoadAttributeAndReturn
  7354                              <2> 
  7355                              <2> ALIGN MENU_JUMP_ALIGN
  7356                              <2> .LoadMonoAttribute:
  7357 00000729 81C6[4507]          <2> 	add		si, .rgcMonochromeAttributes
  7358 0000072D EB04                <2> 	jmp		SHORT .LoadAttributeAndReturn
  7359                              <2> 
  7360                              <2> ALIGN MENU_JUMP_ALIGN
  7361                              <2> .LoadColorAttribute:
  7362 0000072F 81C6[3707]          <2> 	add		si, .rgcColorAttributes
  7363                              <2> .LoadAttributeAndReturn:
  7364 00000733 2EAC                <2> 	cs lodsb							; Load from [CS:SI] to AL
  7365                              <2> 
  7366 00000735 1F                  <2> 	pop		ds
  7367 00000736 C3                  <2> 	ret
  7368                              <2> 
  7369                              <2> 
  7370                              <2> .rgcColorAttributes:
  7371                              <2> istruc ATTRIBUTE_CHARS
  7372 00000737 1E                  <2> 	at	ATTRIBUTE_CHARS.cBordersAndBackground,	db	COLOR_ATTRIBUTE(COLOR_YELLOW, COLOR_BLUE)
  7373 00000738 08                  <2> 	at	ATTRIBUTE_CHARS.cShadow,				db	COLOR_ATTRIBUTE(COLOR_GRAY, COLOR_BLACK)
  7374 00000739 1F                  <2> 	at	ATTRIBUTE_CHARS.cTitle,					db	COLOR_ATTRIBUTE(COLOR_BRIGHT_WHITE, COLOR_BLUE)
  7375 0000073A 17                  <2> 	at	ATTRIBUTE_CHARS.cItem,					db	COLOR_ATTRIBUTE(COLOR_WHITE, COLOR_BLUE)
  7376 0000073B 3F                  <2> 	at	ATTRIBUTE_CHARS.cHighlightedItem,		db	COLOR_ATTRIBUTE(COLOR_BRIGHT_WHITE, COLOR_CYAN)
  7377 0000073C 94                  <2> 	at	ATTRIBUTE_CHARS.cHurryTimeout,			db	COLOR_ATTRIBUTE(COLOR_RED, COLOR_BLUE) | FLG_COLOR_BLINK
  7378 0000073D 12                  <2> 	at	ATTRIBUTE_CHARS.cNormalTimeout,			db	COLOR_ATTRIBUTE(COLOR_GREEN, COLOR_BLUE)
  7379                              <2> iend
  7380                              <2> 
  7381                              <2> .rgcBlackAndWhiteAttributes:	; Only COLOR_WHITE, COLOR_BRIGHT_WHITE and COLOR_BLACK should be used
  7382                              <2> istruc ATTRIBUTE_CHARS
  7383 0000073E 0F                  <2> 	at	ATTRIBUTE_CHARS.cBordersAndBackground,	db	COLOR_ATTRIBUTE(COLOR_BRIGHT_WHITE, COLOR_BLACK)
  7384 0000073F 08                  <2> 	at	ATTRIBUTE_CHARS.cShadow,				db	COLOR_ATTRIBUTE(COLOR_GRAY, COLOR_BLACK)
  7385 00000740 0F                  <2> 	at	ATTRIBUTE_CHARS.cTitle,					db	COLOR_ATTRIBUTE(COLOR_BRIGHT_WHITE, COLOR_BLACK)
  7386 00000741 07                  <2> 	at	ATTRIBUTE_CHARS.cItem,					db	COLOR_ATTRIBUTE(COLOR_WHITE, COLOR_BLACK)
  7387 00000742 7F                  <2> 	at	ATTRIBUTE_CHARS.cHighlightedItem,		db	COLOR_ATTRIBUTE(COLOR_BRIGHT_WHITE, COLOR_WHITE)
  7388 00000743 8F                  <2> 	at	ATTRIBUTE_CHARS.cHurryTimeout,			db	COLOR_ATTRIBUTE(COLOR_BRIGHT_WHITE, COLOR_BLACK) | FLG_COLOR_BLINK
  7389 00000744 07                  <2> 	at	ATTRIBUTE_CHARS.cNormalTimeout,			db	COLOR_ATTRIBUTE(COLOR_WHITE, COLOR_BLACK)
  7390                              <2> iend
  7391                              <2> 
  7392                              <2> .rgcMonochromeAttributes:
  7393                              <2> istruc ATTRIBUTE_CHARS
  7394 00000745 0F                  <2> 	at	ATTRIBUTE_CHARS.cBordersAndBackground,	db	MONO_BRIGHT
  7395 00000746 78                  <2> 	at	ATTRIBUTE_CHARS.cShadow,				db	MONO_REVERSE_DARK
  7396 00000747 0F                  <2> 	at	ATTRIBUTE_CHARS.cTitle,					db	MONO_BRIGHT
  7397 00000748 07                  <2> 	at	ATTRIBUTE_CHARS.cItem,					db	MONO_NORMAL
  7398 00000749 70                  <2> 	at	ATTRIBUTE_CHARS.cHighlightedItem,		db	MONO_REVERSE
  7399 0000074A 8F                  <2> 	at	ATTRIBUTE_CHARS.cHurryTimeout,			db	MONO_BRIGHT_BLINK
  7400 0000074B 07                  <2> 	at	ATTRIBUTE_CHARS.cNormalTimeout,			db	MONO_NORMAL
  7401                              <2> iend
  7402                              <1> 	%include "MenuBorders.asm"
  7403                              <2> ; Project name	:	Assembly Library
  7404                              <2> ; Description	:	Functions for drawing menu borders.
  7405                              <2> 
  7406                              <2> ;
  7407                              <2> ; XTIDE Universal BIOS and Associated Tools
  7408                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  7409                              <2> ;
  7410                              <2> ; This program is free software; you can redistribute it and/or modify
  7411                              <2> ; it under the terms of the GNU General Public License as published by
  7412                              <2> ; the Free Software Foundation; either version 2 of the License, or
  7413                              <2> ; (at your option) any later version.
  7414                              <2> ;
  7415                              <2> ; This program is distributed in the hope that it will be useful,
  7416                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  7417                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  7418                              <2> ; GNU General Public License for more details.
  7419                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  7420                              <2> ;
  7421                              <2> 
  7422                              <2> 
  7423                              <2> ; Struct containing border characters for different types of menu window lines
  7424                              <2> struc BORDER_CHARS
  7425 00000000 <res 00000001>      <2> 	.cLeft		resb	1
  7426 00000001 <res 00000001>      <2> 	.cMiddle	resb	1
  7427 00000002 <res 00000001>      <2> 	.cRight		resb	1
  7428                              <2> endstruc
  7429                              <2> 
  7430                              <2> 
  7431                              <2> ; Section containing code
  7432                              <2> SECTION .text
  7433                              <2> 
  7434                              <2> ;--------------------------------------------------------------------
  7435                              <2> ; MenuBorders_RefreshAll
  7436                              <2> ;	Parameters
  7437                              <2> ;		SS:BP:	Ptr to MENU
  7438                              <2> ;	Returns:
  7439                              <2> ;		Nothing
  7440                              <2> ;	Corrupts registers:
  7441                              <2> ;		AX, BX, CX, DX, SI, DI
  7442                              <2> ;--------------------------------------------------------------------
  7443                              <2> ALIGN MENU_JUMP_ALIGN
  7444                              <2> MenuBorders_RefreshAll:
  7445                              <2> %ifndef USE_186
  7446 0000074C E83400              <2> 	call	MenuBorders_AdjustDisplayContextForDrawingBorders
  7447 0000074F E85400              <2> 	call	MenuBorders_GetNumberOfMiddleCharactersToDX
  7448 00000752 E85A00              <2> 	call	RefreshTitleBorders
  7449 00000755 E86B00              <2> 	call	RefreshItemBorders
  7450 00000758 E85E00              <2> 	call	RefreshInformationBorders
  7451 0000075B E88000              <2> 	call	DrawBottomBorderLine
  7452 0000075E E99600              <2> 	jmp		DrawBottomShadowLine
  7453                              <2> %else
  7454                              <2> 	push	DrawBottomShadowLine
  7455                              <2> 	push	DrawBottomBorderLine
  7456                              <2> 	push	RefreshInformationBorders
  7457                              <2> 	push	RefreshItemBorders
  7458                              <2> 	push	RefreshTitleBorders
  7459                              <2> 	push	MenuBorders_GetNumberOfMiddleCharactersToDX
  7460                              <2> 	jmp		MenuBorders_AdjustDisplayContextForDrawingBorders
  7461                              <2> %endif
  7462                              <2> 
  7463                              <2> 
  7464                              <2> ;--------------------------------------------------------------------
  7465                              <2> ; MenuBorders_RedrawBottomBorderLine
  7466                              <2> ;	Parameters
  7467                              <2> ;		SS:BP:	Ptr to MENU
  7468                              <2> ;	Returns:
  7469                              <2> ;		Nothing
  7470                              <2> ;	Corrupts registers:
  7471                              <2> ;		AX, BX, DX, SI, DI
  7472                              <2> ;--------------------------------------------------------------------
  7473                              <2> ALIGN MENU_JUMP_ALIGN
  7474                              <2> MenuBorders_RedrawBottomBorderLine:
  7475 00000761 E81F00              <2> 	call	MenuBorders_AdjustDisplayContextForDrawingBorders
  7476 00000764 E82102              <2> 	call	MenuLocation_GetBottomBordersTopLeftCoordinatesToAX
  7477                              <2> 	CALL_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
  7478                              <3>  %ifidn %1, PushDisplayContext
  7479                              <3>  call DisplayContext_Push
  7480                              <3>  %elifidn %1, PopDisplayContext
  7481                              <3>  call DisplayContext_Pop
  7482                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7483                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7484                              <3>  %else
  7485 00000767 BF[C701]            <3>  mov di, %1
  7486 0000076A E800F9              <3>  call Display_FunctionFromDI
  7487                              <3>  %endif
  7488 0000076D E83600              <2> 	call	MenuBorders_GetNumberOfMiddleCharactersToDX
  7489 00000770 EB6C                <2> 	jmp		SHORT DrawBottomBorderLine
  7490                              <2> 
  7491                              <2> 
  7492                              <2> ;--------------------------------------------------------------------
  7493                              <2> ; MenuBorders_RefreshItemBorders
  7494                              <2> ;	Parameters
  7495                              <2> ;		SS:BP:	Ptr to MENU
  7496                              <2> ;	Returns:
  7497                              <2> ;		Nothing
  7498                              <2> ;	Corrupts registers:
  7499                              <2> ;		AX, BX, CX, DX, SI, DI
  7500                              <2> ;--------------------------------------------------------------------
  7501                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  7502                              <2> ALIGN MENU_JUMP_ALIGN
  7503                              <2> MenuBorders_RefreshItemBorders:
  7504 00000772 E80E00              <2> 	call	MenuBorders_AdjustDisplayContextForDrawingBorders
  7505 00000775 E8FF01              <2> 	call	MenuLocation_GetItemBordersTopLeftCoordinatesToAX
  7506                              <2> 	CALL_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
  7507                              <3>  %ifidn %1, PushDisplayContext
  7508                              <3>  call DisplayContext_Push
  7509                              <3>  %elifidn %1, PopDisplayContext
  7510                              <3>  call DisplayContext_Pop
  7511                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7512                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7513                              <3>  %else
  7514 00000778 BF[C701]            <3>  mov di, %1
  7515 0000077B E8EFF8              <3>  call Display_FunctionFromDI
  7516                              <3>  %endif
  7517                              <2> 
  7518 0000077E E82500              <2> 	call	MenuBorders_GetNumberOfMiddleCharactersToDX
  7519 00000781 EB40                <2> 	jmp		SHORT RefreshItemBorders
  7520                              <2> %endif
  7521                              <2> 
  7522                              <2> 
  7523                              <2> ;--------------------------------------------------------------------
  7524                              <2> ; MenuBorders_AdjustDisplayContextForDrawingBorders
  7525                              <2> ;	Parameters
  7526                              <2> ;		SS:BP:	Ptr to MENU
  7527                              <2> ;	Returns:
  7528                              <2> ;		Nothing
  7529                              <2> ;	Corrupts registers:
  7530                              <2> ;		AX, BX, SI, DI
  7531                              <2> ;--------------------------------------------------------------------
  7532                              <2> ALIGN MENU_JUMP_ALIGN
  7533                              <2> MenuBorders_AdjustDisplayContextForDrawingBorders:
  7534 00000783 B301                <2> 	mov		bl, ATTRIBUTES_ARE_USED
  7535 00000785 B8[9708]            <2> 	mov		ax, MenuCharOut_MenuTeletypeOutput
  7536                              <2> 	CALL_DISPLAY_LIBRARY SetCharOutputFunctionFromAXwithAttribFlagInBL
  7537                              <3>  %ifidn %1, PushDisplayContext
  7538                              <3>  call DisplayContext_Push
  7539                              <3>  %elifidn %1, PopDisplayContext
  7540                              <3>  call DisplayContext_Pop
  7541                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7542                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7543                              <3>  %else
  7544 00000788 BF[8901]            <3>  mov di, %1
  7545 0000078B E8DFF8              <3>  call Display_FunctionFromDI
  7546                              <3>  %endif
  7547                              <2> 
  7548 0000078E E827FF              <2> 	call	CharOutLineSplitter_GetFirstBorderLineColumnOffsetToAX
  7549                              <2> 	CALL_DISPLAY_LIBRARY SetCharacterOutputParameterFromAX
  7550                              <3>  %ifidn %1, PushDisplayContext
  7551                              <3>  call DisplayContext_Push
  7552                              <3>  %elifidn %1, PopDisplayContext
  7553                              <3>  call DisplayContext_Pop
  7554                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7555                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7556                              <3>  %else
  7557 00000791 BF[9D01]            <3>  mov di, %1
  7558 00000794 E8D6F8              <3>  call Display_FunctionFromDI
  7559                              <3>  %endif
  7560                              <2> 
  7561 00000797 E8E501              <2> 	call	MenuLocation_GetTitleBordersTopLeftCoordinatesToAX
  7562                              <2> 	CALL_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
  7563                              <3>  %ifidn %1, PushDisplayContext
  7564                              <3>  call DisplayContext_Push
  7565                              <3>  %elifidn %1, PopDisplayContext
  7566                              <3>  call DisplayContext_Pop
  7567                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7568                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7569                              <3>  %else
  7570 0000079A BF[C701]            <3>  mov di, %1
  7571 0000079D E8CDF8              <3>  call Display_FunctionFromDI
  7572                              <3>  %endif
  7573                              <2> 
  7574 000007A0 BE0000              <2> 	mov		si, ATTRIBUTE_CHARS.cBordersAndBackground
  7575 000007A3 E964FF              <2> 	jmp		MenuAttribute_SetToDisplayContextFromTypeInSI
  7576                              <2> 
  7577                              <2> 
  7578                              <2> ;--------------------------------------------------------------------
  7579                              <2> ; MenuBorders_GetNumberOfMiddleCharactersToDX
  7580                              <2> ;	Parameters
  7581                              <2> ;		SS:BP:	Ptr to MENU
  7582                              <2> ;	Returns:
  7583                              <2> ;		DX:		Number of middle border characters when drawing border lines
  7584                              <2> ;	Corrupts registers:
  7585                              <2> ;		Nothing
  7586                              <2> ;--------------------------------------------------------------------
  7587                              <2> ALIGN MENU_JUMP_ALIGN
  7588                              <2> MenuBorders_GetNumberOfMiddleCharactersToDX:
  7589                              <2> 	eMOVZX	dx, [bp+MENUINIT.bWidth]
  7590                              <3> %ifndef USE_386
  7591                              <3>  %ifidni %1, ax
  7592                              <3>  mov al, %2
  7593                              <3>  xor ah, ah
  7594                              <3>  %elifidni %1, bx
  7595                              <3>  mov bl, %2
  7596                              <3>  xor bh, bh
  7597                              <3>  %elifidni %1, cx
  7598                              <3>  mov cl, %2
  7599                              <3>  xor ch, ch
  7600                              <3>  %elifidni %1, dx
  7601 000007A6 8A5606              <3>  mov dl, %2
  7602 000007A9 30F6                <3>  xor dh, dh
  7603                              <3>  %else
  7604                              <3>  push ax
  7605                              <3>  mov al, %2
  7606                              <3>  xor ah, ah
  7607                              <3>  xchg ax, %1
  7608                              <3>  pop ax
  7609                              <3>  %endif
  7610                              <3> 
  7611                              <3> %else
  7612                              <3>  movzx %1, %2
  7613                              <3> %endif
  7614 000007AB 83EA03              <2> 	sub		dx, BYTE MENU_HORIZONTAL_BORDER_LINES
  7615 000007AE C3                  <2> 	ret
  7616                              <2> 
  7617                              <2> 
  7618                              <2> ;--------------------------------------------------------------------
  7619                              <2> ; RefreshTitleBorders
  7620                              <2> ;	Parameters
  7621                              <2> ;		DX:		Number of times to repeat middle character
  7622                              <2> ;		SS:BP:	Ptr to MENU
  7623                              <2> ;	Returns:
  7624                              <2> ;		Nothing
  7625                              <2> ;	Corrupts registers:
  7626                              <2> ;		AX, BX, CX, SI, DI
  7627                              <2> ;--------------------------------------------------------------------
  7628                              <2> ALIGN MENU_JUMP_ALIGN
  7629                              <2> RefreshTitleBorders:
  7630 000007AF E81F00              <2> 	call	DrawTopBorderLine
  7631                              <2> 	eMOVZX	cx, [bp+MENUINIT.bTitleLines]
  7632                              <3> %ifndef USE_386
  7633                              <3>  %ifidni %1, ax
  7634                              <3>  mov al, %2
  7635                              <3>  xor ah, ah
  7636                              <3>  %elifidni %1, bx
  7637                              <3>  mov bl, %2
  7638                              <3>  xor bh, bh
  7639                              <3>  %elifidni %1, cx
  7640 000007B2 8A4E04              <3>  mov cl, %2
  7641 000007B5 30ED                <3>  xor ch, ch
  7642                              <3>  %elifidni %1, dx
  7643                              <3>  mov dl, %2
  7644                              <3>  xor dh, dh
  7645                              <3>  %else
  7646                              <3>  push ax
  7647                              <3>  mov al, %2
  7648                              <3>  xor ah, ah
  7649                              <3>  xchg ax, %1
  7650                              <3>  pop ax
  7651                              <3>  %endif
  7652                              <3> 
  7653                              <3> %else
  7654                              <3>  movzx %1, %2
  7655                              <3> %endif
  7656 000007B7 EB10                <2> 	jmp		SHORT DrawTextBorderLinesByCXtimes
  7657                              <2> 
  7658                              <2> ;--------------------------------------------------------------------
  7659                              <2> ; RefreshInformationBorders
  7660                              <2> ;	Parameters
  7661                              <2> ;		DX:		Number of times to repeat middle character
  7662                              <2> ;		SS:BP:	Ptr to MENU
  7663                              <2> ;	Returns:
  7664                              <2> ;		Nothing
  7665                              <2> ;	Corrupts registers:
  7666                              <2> ;		AX, BX, CX, SI, DI
  7667                              <2> ;--------------------------------------------------------------------
  7668                              <2> ALIGN MENU_JUMP_ALIGN
  7669                              <2> RefreshInformationBorders:
  7670 000007B9 E81D00              <2> 	call	DrawSeparationBorderLine
  7671                              <2> 	eMOVZX	cx, [bp+MENUINIT.bInfoLines]
  7672                              <3> %ifndef USE_386
  7673                              <3>  %ifidni %1, ax
  7674                              <3>  mov al, %2
  7675                              <3>  xor ah, ah
  7676                              <3>  %elifidni %1, bx
  7677                              <3>  mov bl, %2
  7678                              <3>  xor bh, bh
  7679                              <3>  %elifidni %1, cx
  7680 000007BC 8A4E05              <3>  mov cl, %2
  7681 000007BF 30ED                <3>  xor ch, ch
  7682                              <3>  %elifidni %1, dx
  7683                              <3>  mov dl, %2
  7684                              <3>  xor dh, dh
  7685                              <3>  %else
  7686                              <3>  push ax
  7687                              <3>  mov al, %2
  7688                              <3>  xor ah, ah
  7689                              <3>  xchg ax, %1
  7690                              <3>  pop ax
  7691                              <3>  %endif
  7692                              <3> 
  7693                              <3> %else
  7694                              <3>  movzx %1, %2
  7695                              <3> %endif
  7696 000007C1 EB06                <2> 	jmp		SHORT DrawTextBorderLinesByCXtimes
  7697                              <2> 
  7698                              <2> ;--------------------------------------------------------------------
  7699                              <2> ; RefreshItemBorders
  7700                              <2> ;	Parameters
  7701                              <2> ;		DX:		Number of times to repeat middle character
  7702                              <2> ;		SS:BP:	Ptr to MENU
  7703                              <2> ;	Returns:
  7704                              <2> ;		Nothing
  7705                              <2> ;	Corrupts registers:
  7706                              <2> ;		AX, BX, CX, SI, DI
  7707                              <2> ;--------------------------------------------------------------------
  7708                              <2> ALIGN MENU_JUMP_ALIGN
  7709                              <2> RefreshItemBorders:
  7710 000007C3 E81300              <2> 	call	DrawSeparationBorderLine
  7711 000007C6 E81E03              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  7712                              <2> 	; Fall to DrawTextBorderLinesByCXtimes
  7713                              <2> 
  7714                              <2> ;--------------------------------------------------------------------
  7715                              <2> ; DrawTextBorderLinesByCXtimes
  7716                              <2> ;	Parameters
  7717                              <2> ;		CX:		Number of border lines to draw
  7718                              <2> ;		DX:		Number of times to repeat middle character
  7719                              <2> ;		SS:BP:	Ptr to MENU
  7720                              <2> ;	Returns:
  7721                              <2> ;		Nothing
  7722                              <2> ;	Corrupts registers:
  7723                              <2> ;		AX, CX, SI, DI
  7724                              <2> ;--------------------------------------------------------------------
  7725                              <2> DrawTextBorderLinesByCXtimes:
  7726 000007C9 E305                <2> 	jcxz	.NoBorderLinesToDraw
  7727                              <2> ALIGN MENU_JUMP_ALIGN
  7728                              <2> .DrawBordersWithFunctionInBX:
  7729 000007CB E83E00              <2> 	call	DrawTextBorderLine
  7730 000007CE E2FB                <2> 	loop	.DrawBordersWithFunctionInBX
  7731                              <2> .NoBorderLinesToDraw:
  7732 000007D0 C3                  <2> 	ret
  7733                              <2> 
  7734                              <2> 
  7735                              <2> ;--------------------------------------------------------------------
  7736                              <2> ; DrawTopBorderLine
  7737                              <2> ; DrawSeparationBorderLine
  7738                              <2> ; DrawBottomBorderLine
  7739                              <2> ; DrawTimeoutCounterOverBottomBorderLine
  7740                              <2> ; DrawBottomShadowLine
  7741                              <2> ; DrawTextBorderLine
  7742                              <2> ;	Parameters
  7743                              <2> ;		DX:		Number of times to repeat middle character
  7744                              <2> ;		SS:BP:	Ptr to MENU
  7745                              <2> ;	Returns:
  7746                              <2> ;		Nothing
  7747                              <2> ;	Corrupts registers:
  7748                              <2> ;		AX, SI, DI
  7749                              <2> ;--------------------------------------------------------------------
  7750                              <2> ALIGN MENU_JUMP_ALIGN
  7751                              <2> DrawTopBorderLine:
  7752 000007D1 BE[7C08]            <2> 	mov		si, g_rgbTopBorderCharacters
  7753 000007D4 E86600              <2> 	call	PrintBorderCharactersFromCSSI
  7754 000007D7 EB41                <2> 	jmp		SHORT PrintNewlineToEndBorderLine
  7755                              <2> 
  7756                              <2> ALIGN MENU_JUMP_ALIGN
  7757                              <2> DrawSeparationBorderLine:
  7758 000007D9 BE[7F08]            <2> 	mov		si, g_rgbSeparationBorderCharacters
  7759 000007DC EB31                <2> 	jmp		SHORT PrintBorderCharactersFromCSSIandShadowCharacter
  7760                              <2> 
  7761                              <2> ALIGN MENU_JUMP_ALIGN
  7762                              <2> DrawBottomBorderLine:
  7763 000007DE BE[8208]            <2> 	mov		si, g_rgbBottomBorderCharacters
  7764 000007E1 F6460E08            <2> 	test	BYTE [bp+MENU.bFlags], FLG_MENU_TIMEOUT_COUNTDOWN
  7765 000007E5 7428                <2> 	jz		SHORT PrintBorderCharactersFromCSSIandShadowCharacter
  7766                              <2> 
  7767 000007E7 E87000              <2> 	call	DrawTimeoutCounterString
  7768 000007EA 83EA13              <2> 	sub		dx, BYTE MENU_TIMEOUT_STRING_CHARACTERS
  7769 000007ED BE[8508]            <2> 	mov		si, g_BottomBorderWithTimeoutCharacters
  7770 000007F0 E81C00              <2> 	call	PrintBorderCharactersFromCSSIandShadowCharacter
  7771 000007F3 83C213              <2> 	add		dx, BYTE MENU_TIMEOUT_STRING_CHARACTERS
  7772 000007F6 C3                  <2> 	ret
  7773                              <2> 
  7774                              <2> ALIGN MENU_JUMP_ALIGN
  7775                              <2> DrawBottomShadowLine:
  7776                              <2> 	CALL_DISPLAY_LIBRARY GetSoftwareCoordinatesToAX
  7777                              <3>  %ifidn %1, PushDisplayContext
  7778                              <3>  call DisplayContext_Push
  7779                              <3>  %elifidn %1, PopDisplayContext
  7780                              <3>  call DisplayContext_Pop
  7781                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7782                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7783                              <3>  %else
  7784 000007F7 BF[DC01]            <3>  mov di, %1
  7785 000007FA E870F8              <3>  call Display_FunctionFromDI
  7786                              <3>  %endif
  7787 000007FD 40                  <2> 	inc		ax			; Move one column left
  7788                              <2> 	CALL_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
  7789                              <3>  %ifidn %1, PushDisplayContext
  7790                              <3>  call DisplayContext_Push
  7791                              <3>  %elifidn %1, PopDisplayContext
  7792                              <3>  call DisplayContext_Pop
  7793                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7794                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7795                              <3>  %else
  7796 000007FE BF[C701]            <3>  mov di, %1
  7797 00000801 E869F8              <3>  call Display_FunctionFromDI
  7798                              <3>  %endif
  7799 00000804 42                  <2> 	inc		dx			; Increment repeat count...
  7800 00000805 42                  <2> 	inc		dx			; ...for both corner characters
  7801 00000806 E81700              <2> 	call	PrintShadowCharactersByDXtimes
  7802 00000809 4A                  <2> 	dec		dx			; Restore...
  7803 0000080A 4A                  <2> 	dec		dx			; ...DX
  7804 0000080B C3                  <2> 	ret
  7805                              <2> 
  7806                              <2> ALIGN MENU_JUMP_ALIGN
  7807                              <2> DrawTextBorderLine:
  7808 0000080C BE[8808]            <2> 	mov		si, g_rgbTextBorderCharacters
  7809                              <2> 	; Fall to PrintBorderCharactersFromCSSIandShadowCharacter
  7810                              <2> 
  7811                              <2> ;--------------------------------------------------------------------
  7812                              <2> ; PrintBorderCharactersFromCSSIandShadowCharacter
  7813                              <2> ;	Parameters
  7814                              <2> ;		DX:		Number of times to repeat middle character
  7815                              <2> ;		CS:SI:	Ptr to BORDER_CHARS
  7816                              <2> ;		SS:BP:	Ptr to MENU
  7817                              <2> ;	Returns:
  7818                              <2> ;		Nothing
  7819                              <2> ;	Corrupts registers:
  7820                              <2> ;		AX, SI, DI
  7821                              <2> ;--------------------------------------------------------------------
  7822                              <2> ALIGN MENU_JUMP_ALIGN
  7823                              <2> PrintBorderCharactersFromCSSIandShadowCharacter:
  7824 0000080F E82B00              <2> 	call	PrintBorderCharactersFromCSSI
  7825 00000812 52                  <2> 	push	dx
  7826 00000813 BA0100              <2> 	mov		dx, 1
  7827 00000816 E80700              <2> 	call	PrintShadowCharactersByDXtimes
  7828 00000819 5A                  <2> 	pop		dx
  7829                              <2> 	; Fall to PrintNewlineToEndBorderLine
  7830                              <2> 
  7831                              <2> ;--------------------------------------------------------------------
  7832                              <2> ; PrintNewlineToEndBorderLine
  7833                              <2> ;	Parameters
  7834                              <2> ;		SS:BP:	Ptr to MENU
  7835                              <2> ;	Returns:
  7836                              <2> ;		Nothing
  7837                              <2> ;	Corrupts registers:
  7838                              <2> ;		AX, DI
  7839                              <2> ;--------------------------------------------------------------------
  7840                              <2> ALIGN MENU_JUMP_ALIGN
  7841                              <2> PrintNewlineToEndBorderLine:
  7842                              <2> 	JMP_DISPLAY_LIBRARY PrintNewlineCharacters
  7843                              <3>  %ifidn %1, PushDisplayContext
  7844                              <3>  jmp DisplayContext_Push
  7845                              <3>  %elifidn %1, PopDisplayContext
  7846                              <3>  call DisplayContext_Pop
  7847                              <3>  ret
  7848                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7849                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7850                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
  7851                              <3>  mov di, %1
  7852                              <3>  call Display_FunctionFromDI
  7853                              <3>  ret
  7854                              <3>  %else
  7855 0000081A BF[E702]            <3>  mov di, %1
  7856 0000081D E94DF8              <3>  jmp Display_FunctionFromDI
  7857                              <3>  %endif
  7858                              <2> 
  7859                              <2> 
  7860                              <2> ;--------------------------------------------------------------------
  7861                              <2> ; PrintShadowCharactersByDXtimes
  7862                              <2> ;	Parameters
  7863                              <2> ;		DX:		Number of shadow characters to print
  7864                              <2> ;		SS:BP:	Ptr to MENU
  7865                              <2> ;	Returns:
  7866                              <2> ;		Nothing
  7867                              <2> ;	Corrupts registers:
  7868                              <2> ;		AX, SI, DI
  7869                              <2> ;--------------------------------------------------------------------
  7870                              <2> ALIGN MENU_JUMP_ALIGN
  7871                              <2> PrintShadowCharactersByDXtimes:
  7872                              <2> 	CALL_DISPLAY_LIBRARY PushDisplayContext
  7873                              <3>  %ifidn %1, PushDisplayContext
  7874 00000820 E8EDF8              <3>  call DisplayContext_Push
  7875                              <3>  %elifidn %1, PopDisplayContext
  7876                              <3>  call DisplayContext_Pop
  7877                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7878                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7879                              <3>  %else
  7880                              <3>  mov di, %1
  7881                              <3>  call Display_FunctionFromDI
  7882                              <3>  %endif
  7883                              <2> 
  7884 00000823 BE0100              <2> 	mov		si, ATTRIBUTE_CHARS.cShadow
  7885 00000826 E8E1FE              <2> 	call	MenuAttribute_SetToDisplayContextFromTypeInSI
  7886                              <2> 
  7887 00000829 53                  <2> 	push	bx
  7888 0000082A B301                <2> 	mov		bl, ATTRIBUTES_ARE_USED
  7889 0000082C B8[B600]            <2> 	mov		ax, FAST_OUTPUT_WITH_ATTRIBUTE_ONLY
  7890                              <2> 	CALL_DISPLAY_LIBRARY SetCharOutputFunctionFromAXwithAttribFlagInBL
  7891                              <3>  %ifidn %1, PushDisplayContext
  7892                              <3>  call DisplayContext_Push
  7893                              <3>  %elifidn %1, PopDisplayContext
  7894                              <3>  call DisplayContext_Pop
  7895                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7896                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7897                              <3>  %else
  7898 0000082F BF[8901]            <3>  mov di, %1
  7899 00000832 E838F8              <3>  call Display_FunctionFromDI
  7900                              <3>  %endif
  7901 00000835 5B                  <2> 	pop		bx
  7902                              <2> 
  7903 00000836 E81600              <2> 	call	MenuBorders_PrintMultipleBorderCharactersFromAL	; AL does not matter
  7904                              <2> 
  7905                              <2> 	JMP_DISPLAY_LIBRARY PopDisplayContext
  7906                              <3>  %ifidn %1, PushDisplayContext
  7907                              <3>  jmp DisplayContext_Push
  7908                              <3>  %elifidn %1, PopDisplayContext
  7909 00000839 E8F7F8              <3>  call DisplayContext_Pop
  7910 0000083C C3                  <3>  ret
  7911                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7912                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7913                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
  7914                              <3>  mov di, %1
  7915                              <3>  call Display_FunctionFromDI
  7916                              <3>  ret
  7917                              <3>  %else
  7918                              <3>  mov di, %1
  7919                              <3>  jmp Display_FunctionFromDI
  7920                              <3>  %endif
  7921                              <2> 
  7922                              <2> 
  7923                              <2> ;--------------------------------------------------------------------
  7924                              <2> ; PrintBorderCharactersFromCSSI
  7925                              <2> ;	Parameters
  7926                              <2> ;		DX:		Number of times to repeat middle character
  7927                              <2> ;		CS:SI:	Ptr to BORDER_CHARS
  7928                              <2> ;		SS:BP:	Ptr to MENU
  7929                              <2> ;	Returns:
  7930                              <2> ;		Nothing
  7931                              <2> ;	Corrupts registers:
  7932                              <2> ;		AX, SI, DI
  7933                              <2> ;--------------------------------------------------------------------
  7934                              <2> ALIGN MENU_JUMP_ALIGN
  7935                              <2> PrintBorderCharactersFromCSSI:
  7936 0000083D 2EAC                <2> 	cs lodsb		; Load from [cs:si+BORDER_CHARS.cLeft] to AL
  7937 0000083F E80700              <2> 	call	MenuBorders_PrintSingleBorderCharacterFromAL
  7938                              <2> 
  7939 00000842 2EAC                <2> 	cs lodsb		; Load from [cs:si+BORDER_CHARS.cMiddle] to AL
  7940 00000844 E80800              <2> 	call	MenuBorders_PrintMultipleBorderCharactersFromAL
  7941                              <2> 
  7942 00000847 2EAC                <2> 	cs lodsb		; Load from [cs:si+BORDER_CHARS.cRight] to AL
  7943                              <2> 	; Fall to MenuBorders_PrintSingleBorderCharacterFromAL
  7944                              <2> 
  7945                              <2> ;--------------------------------------------------------------------
  7946                              <2> ; MenuBorders_PrintSingleBorderCharacterFromAL
  7947                              <2> ; MenuBorders_PrintMultipleBorderCharactersFromAL
  7948                              <2> ;	Parameters
  7949                              <2> ;		AL:		Character to print
  7950                              <2> ;		DX:		Repeat count (MenuBorders_PrintMultipleBorderCharactersFromAL)
  7951                              <2> ;		SS:BP:	Ptr to MENU
  7952                              <2> ;	Returns:
  7953                              <2> ;		Nothing
  7954                              <2> ;	Corrupts registers:
  7955                              <2> ;		AX, DI
  7956                              <2> ;--------------------------------------------------------------------
  7957                              <2> ALIGN MENU_JUMP_ALIGN
  7958                              <2> MenuBorders_PrintSingleBorderCharacterFromAL:
  7959                              <2> 	JMP_DISPLAY_LIBRARY PrintCharacterFromAL
  7960                              <3>  %ifidn %1, PushDisplayContext
  7961                              <3>  jmp DisplayContext_Push
  7962                              <3>  %elifidn %1, PopDisplayContext
  7963                              <3>  call DisplayContext_Pop
  7964                              <3>  ret
  7965                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7966                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7967                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
  7968                              <3>  mov di, %1
  7969                              <3>  call Display_FunctionFromDI
  7970                              <3>  ret
  7971                              <3>  %else
  7972 00000849 BF[EE02]            <3>  mov di, %1
  7973 0000084C E91EF8              <3>  jmp Display_FunctionFromDI
  7974                              <3>  %endif
  7975                              <2> 
  7976                              <2> ALIGN MENU_JUMP_ALIGN
  7977                              <2> MenuBorders_PrintMultipleBorderCharactersFromAL:
  7978 0000084F 51                  <2> 	push	cx
  7979 00000850 89D1                <2> 	mov		cx, dx
  7980                              <2> 	CALL_DISPLAY_LIBRARY PrintRepeatedCharacterFromALwithCountInCX
  7981                              <3>  %ifidn %1, PushDisplayContext
  7982                              <3>  call DisplayContext_Push
  7983                              <3>  %elifidn %1, PopDisplayContext
  7984                              <3>  call DisplayContext_Pop
  7985                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  7986                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  7987                              <3>  %else
  7988 00000852 BF[D302]            <3>  mov di, %1
  7989 00000855 E815F8              <3>  call Display_FunctionFromDI
  7990                              <3>  %endif
  7991 00000858 59                  <2> 	pop		cx
  7992 00000859 C3                  <2> 	ret
  7993                              <2> 
  7994                              <2> 
  7995                              <2> ;--------------------------------------------------------------------
  7996                              <2> ; DrawTimeoutCounterString
  7997                              <2> ;	Parameters
  7998                              <2> ;		SS:BP:	Ptr to MENU
  7999                              <2> ;	Returns:
  8000                              <2> ;		Nothing
  8001                              <2> ;	Corrupts registers:
  8002                              <2> ;		AX, SI, DI
  8003                              <2> ;--------------------------------------------------------------------
  8004                              <2> ALIGN MENU_JUMP_ALIGN
  8005                              <2> DrawTimeoutCounterString:
  8006 0000085A E8AB03              <2> 	call	MenuTime_GetTimeoutSecondsLeftToAX
  8007                              <2> 	; Fall to .PrintTimeoutStringWithSecondsInAX
  8008                              <2> 
  8009                              <2> ;--------------------------------------------------------------------
  8010                              <2> ; .PrintTimeoutStringWithSecondsInAX
  8011                              <2> ;	Parameters
  8012                              <2> ;		AX:		Seconds to print
  8013                              <2> ;		SS:BP:	Ptr to MENU
  8014                              <2> ;	Returns:
  8015                              <2> ;		Nothing
  8016                              <2> ;	Corrupts registers:
  8017                              <2> ;		AX, SI, DI
  8018                              <2> ;--------------------------------------------------------------------
  8019                              <2> .PrintTimeoutStringWithSecondsInAX:
  8020                              <2> 	; Get attribute to AX
  8021 0000085D 97                  <2> 	xchg	di, ax
  8022 0000085E BE0600              <2> 	mov		si, ATTRIBUTE_CHARS.cNormalTimeout
  8023 00000861 83FF03              <2> 	cmp		di, BYTE MENU_TIMEOUT_SECONDS_FOR_HURRY
  8024                              <2> 	eCMOVB	si, ATTRIBUTE_CHARS.cHurryTimeout
  8025 00000864 7303                <3>  jnb SHORT %%Return
  8026 00000866 BE0500              <3>  mov %1, %2
  8027                              <3> %%Return:
  8028 00000869 E8A7FE              <2> 	call	MenuAttribute_GetToAXfromTypeInSI
  8029                              <2> 
  8030 0000086C 55                  <2> 	push	bp
  8031 0000086D 89E5                <2> 	mov		bp, sp
  8032 0000086F BE[EE3B]            <2> 	mov		si, g_szSelectionTimeout
  8033 00000872 50                  <2> 	push	ax			; Push attribute
  8034 00000873 57                  <2> 	push	di			; Push seconds
  8035                              <2> 	CALL_DISPLAY_LIBRARY FormatNullTerminatedStringFromCSSI
  8036                              <3>  %ifidn %1, PushDisplayContext
  8037                              <3>  call DisplayContext_Push
  8038                              <3>  %elifidn %1, PopDisplayContext
  8039                              <3>  call DisplayContext_Pop
  8040                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  8041                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  8042                              <3>  %else
  8043 00000874 BF[8500]            <3>  mov di, %1
  8044 00000877 E8F3F7              <3>  call Display_FunctionFromDI
  8045                              <3>  %endif
  8046 0000087A 5D                  <2> 	pop		bp
  8047 0000087B C3                  <2> 	ret
  8048                              <2> 
  8049                              <2> ; Lookup tables for border characters
  8050                              <2> g_rgbTopBorderCharacters:
  8051                              <2> istruc BORDER_CHARS
  8052 0000087C C9                  <2> 	at	BORDER_CHARS.cLeft,		db	DOUBLE_TOP_LEFT_CORNER
  8053 0000087D CD                  <2> 	at	BORDER_CHARS.cMiddle,	db	DOUBLE_HORIZONTAL
  8054 0000087E BB                  <2> 	at	BORDER_CHARS.cRight,	db	DOUBLE_TOP_RIGHT_CORNER
  8055                              <2> iend
  8056                              <2> 
  8057                              <2> g_rgbSeparationBorderCharacters:
  8058                              <2> istruc BORDER_CHARS
  8059 0000087F C7                  <2> 	at	BORDER_CHARS.cLeft,		db	DOUBLE_VERTICAL_TO_RIGHT_SINGLE
  8060 00000880 C4                  <2> 	at	BORDER_CHARS.cMiddle,	db	SINGLE_HORIZONTAL
  8061 00000881 B6                  <2> 	at	BORDER_CHARS.cRight,	db	DOUBLE_VERTICAL_TO_LEFT_SINGLE
  8062                              <2> iend
  8063                              <2> 
  8064                              <2> g_rgbBottomBorderCharacters:
  8065                              <2> istruc BORDER_CHARS
  8066 00000882 C8                  <2> 	at	BORDER_CHARS.cLeft,		db	DOUBLE_BOTTOM_LEFT_CORNER
  8067 00000883 CD                  <2> 	at	BORDER_CHARS.cMiddle,	db	DOUBLE_HORIZONTAL
  8068 00000884 BC                  <2> 	at	BORDER_CHARS.cRight,	db	DOUBLE_BOTTOM_RIGHT_CORNER
  8069                              <2> iend
  8070                              <2> 
  8071                              <2> g_BottomBorderWithTimeoutCharacters:
  8072                              <2> istruc BORDER_CHARS
  8073 00000885 C6                  <2> 	at	BORDER_CHARS.cLeft,		db	DOUBLE_RIGHT_HORIZONTAL_TO_SINGLE_VERTICAL
  8074 00000886 CD                  <2> 	at	BORDER_CHARS.cMiddle,	db	DOUBLE_HORIZONTAL
  8075 00000887 BC                  <2> 	at	BORDER_CHARS.cRight,	db	DOUBLE_BOTTOM_RIGHT_CORNER
  8076                              <2> iend
  8077                              <2> 
  8078                              <2> g_rgbTextBorderCharacters:
  8079                              <2> istruc BORDER_CHARS
  8080 00000888 BA                  <2> 	at	BORDER_CHARS.cLeft,		db	DOUBLE_VERTICAL
  8081 00000889 20                  <2> 	at	BORDER_CHARS.cMiddle,	db	' '
  8082 0000088A BA                  <2> 	at	BORDER_CHARS.cRight,	db	DOUBLE_VERTICAL
  8083                              <2> iend
  8084                              <1> 	%include "MenuCharOut.asm"
  8085                              <2> ; Project name	:	Assembly Library
  8086                              <2> ; Description	:	Character out function for printing within menu window.
  8087                              <2> 
  8088                              <2> ;
  8089                              <2> ; XTIDE Universal BIOS and Associated Tools
  8090                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  8091                              <2> ;
  8092                              <2> ; This program is free software; you can redistribute it and/or modify
  8093                              <2> ; it under the terms of the GNU General Public License as published by
  8094                              <2> ; the Free Software Foundation; either version 2 of the License, or
  8095                              <2> ; (at your option) any later version.
  8096                              <2> ;
  8097                              <2> ; This program is distributed in the hope that it will be useful,
  8098                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  8099                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  8100                              <2> ; GNU General Public License for more details.
  8101                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  8102                              <2> ;
  8103                              <2> 
  8104                              <2> 
  8105                              <2> ; Section containing code
  8106                              <2> SECTION .text
  8107                              <2> 
  8108                              <2> ;--------------------------------------------------------------------
  8109                              <2> ; MenuCharOut_MenuTeletypeOutputWithAutomaticLineChange
  8110                              <2> ; MenuCharOut_MenuTeletypeOutput
  8111                              <2> ;	Parameters:
  8112                              <2> ;		AL:		Character to output
  8113                              <2> ;		AH:		Attribute to output
  8114                              <2> ;		DS:		BDA segment (zero)
  8115                              <2> ;		ES:DI:	Ptr to video memory where to output
  8116                              <2> ;		[DISPLAY_CONTEXT.wCharOutParam]:
  8117                              <2> ;				Low byte  = First column offset (after CR)
  8118                              <2> ;				High byte = Last column offset (when using automatic line change)
  8119                              <2> ;	Returns:
  8120                              <2> ;		DI:		Incremented for next character
  8121                              <2> ;	Corrupts registers:
  8122                              <2> ;		AX, DX
  8123                              <2> ;--------------------------------------------------------------------
  8124                              <2> ALIGN MENU_JUMP_ALIGN
  8125                              <2> MenuCharOut_MenuTeletypeOutputWithAutomaticLineChange:
  8126 0000088B E832FE              <2> 	call	CharOutLineSplitter_IsCursorAtTheEndOfTextLine
  8127 0000088E 7307                <2> 	jnc		SHORT MenuCharOut_MenuTeletypeOutput
  8128 00000890 3C20                <2> 	cmp		al, ' '
  8129 00000892 721B                <2> 	jb		SHORT ReturnSinceNoNeedToStartLineWithControlCharacter
  8130 00000894 E83AFE              <2> 	call	CharOutLineSplitter_MovePartialWordToNewTextLine
  8131                              <2> 	; Fall to MenuCharOut_MenuTextTeletypeOutputWithAttribute
  8132                              <2> 
  8133                              <2> ALIGN MENU_JUMP_ALIGN
  8134                              <2> MenuCharOut_MenuTeletypeOutput:
  8135 00000897 3C0D                <2> 	cmp		al, CR
  8136 00000899 7408                <2> 	je		SHORT PrintCRandAdjustOffsetForStartOfLine
  8137 0000089B E9F7F7              <2> 	jmp		DisplayCharOut_TeletypeOutputWithAttribute
  8138                              <2> 
  8139                              <2> 
  8140                              <2> ;--------------------------------------------------------------------
  8141                              <2> ; MenuCharOut_PrintLFCRandAdjustOffsetForStartOfLine
  8142                              <2> ; PrintCRandAdjustOffsetForStartOfLine
  8143                              <2> ;	Parameters:
  8144                              <2> ;		DS:		BDA segment (zero)
  8145                              <2> ;		ES:DI:	Ptr to cursor location
  8146                              <2> ;		[DISPLAY_CONTEXT.wCharOutParam]:
  8147                              <2> ;				Low byte  = First column offset (after CR)
  8148                              <2> ;				High byte = Last column offset (when using automatic line change)
  8149                              <2> ;	Returns:
  8150                              <2> ;		ES:DI:	Ptr to beginning of new line
  8151                              <2> ;	Corrupts registers:
  8152                              <2> ;		AX, DX
  8153                              <2> ;--------------------------------------------------------------------
  8154                              <2> ALIGN MENU_JUMP_ALIGN
  8155                              <2> MenuCharOut_PrintLFCRandAdjustOffsetForStartOfLine:
  8156 0000089E B00A                <2> 	mov		al, LF
  8157 000008A0 E8FEF7              <2> 	call	DisplayCharOut_BiosTeletypeOutput
  8158                              <2> 	; Fall to PrintCRandAdjustOffsetForStartOfLine
  8159                              <2> 
  8160                              <2> ALIGN MENU_JUMP_ALIGN
  8161                              <2> PrintCRandAdjustOffsetForStartOfLine:
  8162 000008A3 B00D                <2> 	mov		al, CR
  8163 000008A5 E8F9F7              <2> 	call	DisplayCharOut_BiosTeletypeOutput
  8164                              <2> 	eMOVZX	ax, [VIDEO_BDA.displayContext+DISPLAY_CONTEXT.wCharOutParam]
  8165                              <3> %ifndef USE_386
  8166                              <3>  %ifidni %1, ax
  8167 000008A8 A05A04              <3>  mov al, %2
  8168 000008AB 30E4                <3>  xor ah, ah
  8169                              <3>  %elifidni %1, bx
  8170                              <3>  mov bl, %2
  8171                              <3>  xor bh, bh
  8172                              <3>  %elifidni %1, cx
  8173                              <3>  mov cl, %2
  8174                              <3>  xor ch, ch
  8175                              <3>  %elifidni %1, dx
  8176                              <3>  mov dl, %2
  8177                              <3>  xor dh, dh
  8178                              <3>  %else
  8179                              <3>  push ax
  8180                              <3>  mov al, %2
  8181                              <3>  xor ah, ah
  8182                              <3>  xchg ax, %1
  8183                              <3>  pop ax
  8184                              <3>  %endif
  8185                              <3> 
  8186                              <3> %else
  8187                              <3>  movzx %1, %2
  8188                              <3> %endif
  8189 000008AD 01C7                <2> 	add		di, ax
  8190                              <2> ReturnSinceNoNeedToStartLineWithControlCharacter:
  8191 000008AF C3                  <2> 	ret
  8192                              <1> 	%include "MenuEvent.asm"
  8193                              <2> ; Project name	:	Assembly Library
  8194                              <2> ; Description	:	Functions for initializing menu system.
  8195                              <2> 
  8196                              <2> ;
  8197                              <2> ; XTIDE Universal BIOS and Associated Tools
  8198                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  8199                              <2> ;
  8200                              <2> ; This program is free software; you can redistribute it and/or modify
  8201                              <2> ; it under the terms of the GNU General Public License as published by
  8202                              <2> ; the Free Software Foundation; either version 2 of the License, or
  8203                              <2> ; (at your option) any later version.
  8204                              <2> ;
  8205                              <2> ; This program is distributed in the hope that it will be useful,
  8206                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  8207                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  8208                              <2> ; GNU General Public License for more details.
  8209                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  8210                              <2> ;
  8211                              <2> 
  8212                              <2> 
  8213                              <2> ; Section containing code
  8214                              <2> SECTION .text
  8215                              <2> 
  8216                              <2> ;--------------------------------------------------------------------
  8217                              <2> ; MenuEvent_InitializeMenuinit
  8218                              <2> ;	Parameters
  8219                              <2> ;		SS:BP:	Ptr to MENU
  8220                              <2> ;	Returns:
  8221                              <2> ;		DS:SI:	Ptr to MENU with MENUINIT initialized from user handler
  8222                              <2> ;		CF:		Set if event processed
  8223                              <2> ;				Cleared if event not processed
  8224                              <2> ;	Corrupts registers:
  8225                              <2> ;		AX, BX, DX
  8226                              <2> ;--------------------------------------------------------------------
  8227                              <2> ALIGN MENU_JUMP_ALIGN
  8228                              <2> MenuEvent_InitializeMenuinit:
  8229 000008B0 16                  <2> 	push	ss
  8230 000008B1 1F                  <2> 	pop		ds
  8231 000008B2 89EE                <2> 	mov		si, bp
  8232 000008B4 B300                <2> 	mov		bl, MENUEVENT_InitializeMenuinitFromDSSI
  8233 000008B6 EB30                <2> 	jmp		SHORT MenuEvent_SendFromBX
  8234                              <2> 
  8235                              <2> 
  8236                              <2> ;--------------------------------------------------------------------
  8237                              <2> ; MenuEvent_ExitMenu
  8238                              <2> ;	Parameters
  8239                              <2> ;		SS:BP:	Ptr to MENU
  8240                              <2> ;	Returns:
  8241                              <2> ;		CF:		Set to exit from menu
  8242                              <2> ;				Cleared to cancel exit
  8243                              <2> ;	Corrupts registers:
  8244                              <2> ;		AX, BX, DX
  8245                              <2> ;--------------------------------------------------------------------
  8246                              <2> %ifndef MENU_NO_ESC
  8247                              <2> ALIGN MENU_JUMP_ALIGN
  8248                              <2> MenuEvent_ExitMenu:
  8249 000008B8 B302                <2> 	mov		bl, MENUEVENT_ExitMenu
  8250 000008BA EB2C                <2> 	jmp		SHORT MenuEvent_SendFromBX
  8251                              <2> %endif
  8252                              <2> 
  8253                              <2> 
  8254                              <2> %ifdef MENUEVENT_IDLEPROCESSING_ENABLE
  8255                              <2> ;--------------------------------------------------------------------
  8256                              <2> ; MenuEvent_IdleProcessing
  8257                              <2> ;	Parameters
  8258                              <2> ;		SS:BP:	Ptr to MENU
  8259                              <2> ;	Returns:
  8260                              <2> ;		CF:		Set if event processed
  8261                              <2> ;				Cleared if event not processed
  8262                              <2> ;	Corrupts registers:
  8263                              <2> ;		AX, BX, DX
  8264                              <2> ;--------------------------------------------------------------------
  8265                              <2> ALIGN MENU_JUMP_ALIGN
  8266                              <2> MenuEvent_IdleProcessing:
  8267 000008BC B304                <2> 	mov		bl, MENUEVENT_IdleProcessing
  8268 000008BE EB28                <2> 	jmp		SHORT MenuEvent_SendFromBX
  8269                              <2> %endif
  8270                              <2> 
  8271                              <2> ;--------------------------------------------------------------------
  8272                              <2> ; MenuEvent_RefreshTitle
  8273                              <2> ; MenuEvent_RefreshInformation
  8274                              <2> ;	Parameters
  8275                              <2> ;		SS:BP:	Ptr to MENU
  8276                              <2> ;		Cursor will be positioned to beginning of window
  8277                              <2> ;	Returns:
  8278                              <2> ;		CF:		Set if event processed
  8279                              <2> ;				Cleared if event not processed
  8280                              <2> ;	Corrupts registers:
  8281                              <2> ;		AX, CX, BX, DX
  8282                              <2> ;--------------------------------------------------------------------
  8283                              <2> ALIGN MENU_JUMP_ALIGN
  8284                              <2> MenuEvent_RefreshTitle:
  8285 000008C0 B30C                <2> 	mov		bl, MENUEVENT_RefreshTitle
  8286                              <2> 	SKIP2B	cx	; mov cx, <next instruction>
  8287                              <3>  %ifidni %1, f
  8288                              <3>  db 03Dh
  8289                              <3> 
  8290                              <3>  %elifidni %1, ax
  8291                              <3>  db 0B8h
  8292                              <3>  %elifidni %1, cx
  8293 000008C2 B9                  <3>  db 0B9h
  8294                              <3>  %elifidni %1, dx
  8295                              <3>  db 0BAh
  8296                              <3>  %elifidni %1, bx
  8297                              <3>  db 0BBh
  8298                              <3>  %elifidni %1, sp
  8299                              <3>  db 0BCh
  8300                              <3>  %elifidni %1, bp
  8301                              <3>  db 0BDh
  8302                              <3>  %elifidni %1, si
  8303                              <3>  db 0BEh
  8304                              <3>  %elifidni %1, di
  8305                              <3>  db 0BFh
  8306                              <3>  %else
  8307                              <3>  %error "Invalid parameter passed to SKIP2B"
  8308                              <3>  %endif
  8309                              <2> 
  8310                              <2> MenuEvent_RefreshInformation:
  8311 000008C3 B30E                <2> 	mov		bl, MENUEVENT_RefreshInformation
  8312 000008C5 8B4E02              <2> 	mov		cx, [bp+MENUINIT.wHighlightedItem]
  8313 000008C8 EB1E                <2> 	jmp		SHORT MenuEvent_SendFromBX
  8314                              <2> 
  8315                              <2> 
  8316                              <2> ;--------------------------------------------------------------------
  8317                              <2> ; MenuEvent_RefreshItemFromCX
  8318                              <2> ;	Parameters
  8319                              <2> ;		CX:		Index of item to refresh
  8320                              <2> ;		SS:BP:	Ptr to MENU
  8321                              <2> ;		Cursor has been positioned to the beginning of item line
  8322                              <2> ;	Returns:
  8323                              <2> ;		CF:		Set if event processed
  8324                              <2> ;				Cleared if event not processed
  8325                              <2> ;	Corrupts registers:
  8326                              <2> ;		AX, BX, DX
  8327                              <2> ;--------------------------------------------------------------------
  8328                              <2> ALIGN MENU_JUMP_ALIGN
  8329                              <2> MenuEvent_RefreshItemFromCX:
  8330 000008CA B310                <2> 	mov		bl, MENUEVENT_RefreshItemFromCX
  8331 000008CC EB1A                <2> 	jmp		SHORT MenuEvent_SendFromBX
  8332                              <2> 
  8333                              <2> 
  8334                              <2> ;--------------------------------------------------------------------
  8335                              <2> ; MenuEvent_HighlightItemFromCX
  8336                              <2> ;	Parameters
  8337                              <2> ;		CX:		Index of item to highlight
  8338                              <2> ;		SS:BP:	Ptr to MENU
  8339                              <2> ;	Returns:
  8340                              <2> ;		Nothing
  8341                              <2> ;	Corrupts registers:
  8342                              <2> ;		AX, BX, DX, SI, DI
  8343                              <2> ;--------------------------------------------------------------------
  8344                              <2> ALIGN MENU_JUMP_ALIGN
  8345                              <2> MenuEvent_HighlightItemFromCX:
  8346 000008CE 89CA                <2> 	mov		dx, cx
  8347 000008D0 875602              <2> 	xchg	dx, [bp+MENUINIT.wHighlightedItem]
  8348 000008D3 52                  <2> 	push	dx
  8349                              <2> 
  8350 000008D4 B306                <2> 	mov		bl, MENUEVENT_ItemHighlightedFromCX
  8351 000008D6 E80F00              <2> 	call	MenuEvent_SendFromBX
  8352                              <2> 
  8353 000008D9 58                  <2> 	pop		ax
  8354 000008DA E87B02              <2> 	call	MenuText_RefreshItemFromAX
  8355 000008DD 8B4602              <2> 	mov		ax, [bp+MENUINIT.wHighlightedItem]
  8356 000008E0 E97502              <2> 	jmp		MenuText_RefreshItemFromAX
  8357                              <2> 
  8358                              <2> 
  8359                              <2> ;--------------------------------------------------------------------
  8360                              <2> ; MenuEvent_KeyStrokeInAX
  8361                              <2> ;	Parameters
  8362                              <2> ;		AL:		ASCII character for the key
  8363                              <2> ;		AH:		Keyboard library scan code for the key
  8364                              <2> ;		SS:BP:	Ptr to MENU
  8365                              <2> ;	Returns:
  8366                              <2> ;		CF:		Set if event processed
  8367                              <2> ;				Cleared if event not processed
  8368                              <2> ;	Corrupts registers:
  8369                              <2> ;		AX, BX, DX
  8370                              <2> ;--------------------------------------------------------------------
  8371                              <2> ALIGN MENU_JUMP_ALIGN
  8372                              <2> MenuEvent_KeyStrokeInAX:
  8373 000008E3 B30A                <2> 	mov		bl, MENUEVENT_KeyStrokeInAX
  8374                              <2> 	SKIP2B	dx	; mov dx, <next instruction>
  8375                              <3>  %ifidni %1, f
  8376                              <3>  db 03Dh
  8377                              <3> 
  8378                              <3>  %elifidni %1, ax
  8379                              <3>  db 0B8h
  8380                              <3>  %elifidni %1, cx
  8381                              <3>  db 0B9h
  8382                              <3>  %elifidni %1, dx
  8383 000008E5 BA                  <3>  db 0BAh
  8384                              <3>  %elifidni %1, bx
  8385                              <3>  db 0BBh
  8386                              <3>  %elifidni %1, sp
  8387                              <3>  db 0BCh
  8388                              <3>  %elifidni %1, bp
  8389                              <3>  db 0BDh
  8390                              <3>  %elifidni %1, si
  8391                              <3>  db 0BEh
  8392                              <3>  %elifidni %1, di
  8393                              <3>  db 0BFh
  8394                              <3>  %else
  8395                              <3>  %error "Invalid parameter passed to SKIP2B"
  8396                              <3>  %endif
  8397                              <2> 
  8398                              <2> ;--------------------------------------------------------------------
  8399                              <2> ; MenuEvent_ItemSelectedFromCX
  8400                              <2> ;	Parameters
  8401                              <2> ;		CX:		Index of selected item
  8402                              <2> ;		SS:BP:	Ptr to MENU
  8403                              <2> ;	Returns:
  8404                              <2> ;		CF:		Set if event processed
  8405                              <2> ;				Cleared if event not processed
  8406                              <2> ;	Corrupts registers:
  8407                              <2> ;		AX, BX, DX
  8408                              <2> ;--------------------------------------------------------------------
  8409                              <2> MenuEvent_ItemSelectedFromCX:
  8410 000008E6 B308                <2> 	mov		bl, MENUEVENT_ItemSelectedFromCX
  8411                              <2> 	; Fall to MenuEvent_SendFromBX
  8412                              <2> 
  8413                              <2> 
  8414                              <2> ;--------------------------------------------------------------------
  8415                              <2> ; MenuEvent_SendFromBX
  8416                              <2> ;	Parameters
  8417                              <2> ;		BL:					Menu event to send
  8418                              <2> ;		SS:BP:				Ptr to MENU
  8419                              <2> ;		Other registers:	Event specific parameters
  8420                              <2> ;	Returns:
  8421                              <2> ;		AX, DX:				Event specific return values
  8422                              <2> ;		CF:					Set if event processed
  8423                              <2> ;							Cleared if event not processed
  8424                              <2> ;	Corrupts registers:
  8425                              <2> ;		BX
  8426                              <2> ;--------------------------------------------------------------------
  8427                              <2> ALIGN MENU_JUMP_ALIGN
  8428                              <2> MenuEvent_SendFromBX:
  8429 000008E8 06                  <2> 	push	es
  8430 000008E9 1E                  <2> 	push	ds
  8431 000008EA 57                  <2> 	push	di
  8432 000008EB 56                  <2> 	push	si
  8433 000008EC 51                  <2> 	push	cx
  8434 000008ED 30FF                <2> 	xor		bh, bh
  8435 000008EF FF5608              <2> 	call	[bp+MENU.fnEventHandler]
  8436 000008F2 59                  <2> 	pop		cx
  8437 000008F3 5E                  <2> 	pop		si
  8438 000008F4 5F                  <2> 	pop		di
  8439 000008F5 1F                  <2> 	pop		ds
  8440 000008F6 07                  <2> 	pop		es
  8441 000008F7 C3                  <2> 	ret
  8442                              <1> 	%include "MenuInit.asm"
  8443                              <2> ; Project name	:	Assembly Library
  8444                              <2> ; Description	:	Functions for initializing menu system.
  8445                              <2> 
  8446                              <2> ;
  8447                              <2> ; XTIDE Universal BIOS and Associated Tools
  8448                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  8449                              <2> ;
  8450                              <2> ; This program is free software; you can redistribute it and/or modify
  8451                              <2> ; it under the terms of the GNU General Public License as published by
  8452                              <2> ; the Free Software Foundation; either version 2 of the License, or
  8453                              <2> ; (at your option) any later version.
  8454                              <2> ;
  8455                              <2> ; This program is distributed in the hope that it will be useful,
  8456                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  8457                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  8458                              <2> ; GNU General Public License for more details.
  8459                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  8460                              <2> ;
  8461                              <2> 
  8462                              <2> 
  8463                              <2> ; Section containing code
  8464                              <2> SECTION .text
  8465                              <2> 
  8466                              <2> ;--------------------------------------------------------------------
  8467                              <2> ; MenuInit_DisplayMenuWithHandlerInBXandUserDataInDXAX
  8468                              <2> ;	Parameters
  8469                              <2> ;		DX:AX:	User specified data
  8470                              <2> ;		BX:		Menu event handler
  8471                              <2> ;	Returns:
  8472                              <2> ;		AX:		Index of selected item or NO_ITEM_SELECTED
  8473                              <2> ;	Corrupts registers:
  8474                              <2> ;		All except segments
  8475                              <2> ;--------------------------------------------------------------------
  8476                              <2> ALIGN MENU_JUMP_ALIGN
  8477                              <2> MenuInit_DisplayMenuWithHandlerInBXandUserDataInDXAX:
  8478 000008F8 06                  <2> 	push	es
  8479 000008F9 1E                  <2> 	push	ds
  8480 000008FA 91                  <2> 	xchg	cx, ax			; Backup user data
  8481                              <2> 	CALL_DISPLAY_LIBRARY	PushDisplayContext
  8482                              <3>  %ifidn %1, PushDisplayContext
  8483 000008FB E812F8              <3>  call DisplayContext_Push
  8484                              <3>  %elifidn %1, PopDisplayContext
  8485                              <3>  call DisplayContext_Pop
  8486                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  8487                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  8488                              <3>  %else
  8489                              <3>  mov di, %1
  8490                              <3>  call Display_FunctionFromDI
  8491                              <3>  %endif
  8492                              <2> 
  8493                              <2> 	; Create MENU struct to stack
  8494 000008FE B81400              <2> 	mov		ax, MENU_size
  8495                              <2> 	eENTER_STRUCT	ax
  8496 00000901 55                  <3>  push bp
  8497 00000902 29C4                <3>  sub sp, %1
  8498 00000904 89E5                <3>  mov bp, sp
  8499 00000906 91                  <2> 	xchg	ax, cx			; Restore user data to AX
  8500 00000907 E89B0C              <2> 	call	Memory_ZeroSSBPwithSizeInCX
  8501                              <2> 
  8502                              <2> 	; Display menu
  8503 0000090A E80E00              <2> 	call	MenuInit_EnterMenuWithHandlerInBXandUserDataInDXAX
  8504                              <2> 
  8505                              <2> 	; Get menu selection and destroy menu variables from stack
  8506 0000090D 8B5602              <2> 	mov		dx, [bp+MENUINIT.wHighlightedItem]
  8507                              <2> 	eLEAVE_STRUCT	MENU_size
  8508 00000910 83C414              <3>  add sp, %1
  8509 00000913 5D                  <3>  pop bp
  8510                              <2> 
  8511                              <2> 	CALL_DISPLAY_LIBRARY	PopDisplayContext
  8512                              <3>  %ifidn %1, PushDisplayContext
  8513                              <3>  call DisplayContext_Push
  8514                              <3>  %elifidn %1, PopDisplayContext
  8515 00000914 E81CF8              <3>  call DisplayContext_Pop
  8516                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  8517                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  8518                              <3>  %else
  8519                              <3>  mov di, %1
  8520                              <3>  call Display_FunctionFromDI
  8521                              <3>  %endif
  8522 00000917 92                  <2> 	xchg	ax, dx			; Return highlighted item in AX
  8523 00000918 1F                  <2> 	pop		ds
  8524 00000919 07                  <2> 	pop		es
  8525 0000091A C3                  <2> 	ret
  8526                              <2> 
  8527                              <2> 
  8528                              <2> ;--------------------------------------------------------------------
  8529                              <2> ; EnterMenuWithHandlerInBXandUserDataInDXAX
  8530                              <2> ;	Parameters
  8531                              <2> ;		DX:AX:	User specified data
  8532                              <2> ;		BX:		Menu event handler
  8533                              <2> ;		SS:BP:	Ptr to MENU
  8534                              <2> ;	Returns:
  8535                              <2> ;		Nothing
  8536                              <2> ;	Corrupts registers:
  8537                              <2> ;		All, except SS:BP
  8538                              <2> ;--------------------------------------------------------------------
  8539                              <2> ALIGN MENU_JUMP_ALIGN
  8540                              <2> MenuInit_EnterMenuWithHandlerInBXandUserDataInDXAX:
  8541 0000091B 895E08              <2> 	mov		[bp+MENU.fnEventHandler], bx
  8542 0000091E 89460A              <2> 	mov		[bp+MENU.dwUserData], ax
  8543 00000921 89560C              <2> 	mov		[bp+MENU.dwUserData+2], dx
  8544                              <2> 
  8545 00000924 B80020              <2> 	mov		ax, CURSOR_HIDDEN
  8546                              <2> 	CALL_DISPLAY_LIBRARY SetCursorShapeFromAX
  8547                              <3>  %ifidn %1, PushDisplayContext
  8548                              <3>  call DisplayContext_Push
  8549                              <3>  %elifidn %1, PopDisplayContext
  8550                              <3>  call DisplayContext_Pop
  8551                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  8552                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  8553                              <3>  %else
  8554 00000927 BF[C301]            <3>  mov di, %1
  8555 0000092A E840F7              <3>  call Display_FunctionFromDI
  8556                              <3>  %endif
  8557 0000092D E880FF              <2> 	call	MenuEvent_InitializeMenuinit	; User initialization
  8558                              <2> %ifndef USE_186
  8559 00000930 E80300              <2> 	call	MenuInit_RefreshMenuWindow
  8560 00000933 E98400              <2> 	jmp		MenuLoop_Enter
  8561                              <2> %else
  8562                              <2> 	push	MenuLoop_Enter
  8563                              <2> 	; Fall to MenuInit_RefreshMenuWindow
  8564                              <2> %endif
  8565                              <2> 
  8566                              <2> 
  8567                              <2> ;--------------------------------------------------------------------
  8568                              <2> ; MenuInit_RefreshMenuWindow
  8569                              <2> ;	Parameters
  8570                              <2> ;		SS:BP:	Ptr to MENU
  8571                              <2> ;	Returns:
  8572                              <2> ;		Nothing
  8573                              <2> ;	Corrupts registers:
  8574                              <2> ;		AX, BX, CX, DX, SI, DI
  8575                              <2> ;--------------------------------------------------------------------
  8576                              <2> ALIGN MENU_JUMP_ALIGN
  8577                              <2> MenuInit_RefreshMenuWindow:
  8578 00000936 E813FE              <2> 	call	MenuBorders_RefreshAll			; Draw borders
  8579 00000939 E8E201              <2> 	call	MenuText_RefreshTitle			; Draw title strings
  8580 0000093C E80A02              <2> 	call	MenuText_RefreshAllItems		; Draw item strings
  8581 0000093F E9E801              <2> 	jmp		MenuText_RefreshInformation		; Draw information strings
  8582                              <2> 
  8583                              <2> 
  8584                              <2> ;--------------------------------------------------------------------
  8585                              <2> ; MenuInit_CloseMenuIfExitEventAllows
  8586                              <2> ;	Parameters
  8587                              <2> ;		SS:BP:	Ptr to MENU
  8588                              <2> ;	Returns:
  8589                              <2> ;		Nothing
  8590                              <2> ;	Corrupts registers:
  8591                              <2> ;		AX, BX, DX
  8592                              <2> ;--------------------------------------------------------------------
  8593                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  8594                              <2> ALIGN MENU_JUMP_ALIGN
  8595                              <2> MenuInit_CloseMenuIfExitEventAllows:
  8596 00000942 E873FF              <2> 	call	MenuEvent_ExitMenu
  8597 00000945 7201                <2> 	jc		SHORT MenuInit_CloseMenuWindow
  8598 00000947 C3                  <2> 	ret
  8599                              <2> %endif
  8600                              <2> 
  8601                              <2> 
  8602                              <2> ;--------------------------------------------------------------------
  8603                              <2> ; MenuInit_CloseMenuWindow
  8604                              <2> ;	Parameters
  8605                              <2> ;		SS:BP:	Ptr to MENU
  8606                              <2> ;	Returns:
  8607                              <2> ;		Nothing
  8608                              <2> ;	Corrupts registers:
  8609                              <2> ;		Nothing
  8610                              <2> ;--------------------------------------------------------------------
  8611                              <2> ALIGN MENU_JUMP_ALIGN
  8612                              <2> MenuInit_CloseMenuWindow:
  8613 00000948 804E0E01            <2> 	or		BYTE [bp+MENU.bFlags], FLG_MENU_EXIT
  8614 0000094C C3                  <2> 	ret
  8615                              <2> 
  8616                              <2> 
  8617                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  8618                              <2> ;--------------------------------------------------------------------
  8619                              <2> ; MenuInit_HighlightItemFromAX
  8620                              <2> ;	Parameters
  8621                              <2> ;		AX:		Item to highlight
  8622                              <2> ;		SS:BP:	Ptr to MENU
  8623                              <2> ;	Returns:
  8624                              <2> ;		Nothing
  8625                              <2> ;	Corrupts registers:
  8626                              <2> ;		AX, BX, CX, DX, SI, DI
  8627                              <2> ;--------------------------------------------------------------------
  8628                              <2> ALIGN MENU_JUMP_ALIGN
  8629                              <2> MenuInit_HighlightItemFromAX:
  8630 0000094D 2B4602              <2> 	sub		ax, [bp+MENUINIT.wHighlightedItem]
  8631 00000950 E93601              <2> 	jmp		MenuScrollbars_MoveHighlightedItemByAX
  8632                              <2> %endif
  8633                              <2> 
  8634                              <2> 
  8635                              <2> ;--------------------------------------------------------------------
  8636                              <2> ; MenuInit_GetHighlightedItemToAX
  8637                              <2> ;	Parameters
  8638                              <2> ;		SS:BP:	Ptr to MENU
  8639                              <2> ;	Returns:
  8640                              <2> ;		AX:		Index of highlighted item or NO_ITEM_HIGHLIGHTED
  8641                              <2> ;	Corrupts registers:
  8642                              <2> ;		Nothing
  8643                              <2> ;--------------------------------------------------------------------
  8644                              <2> ALIGN MENU_JUMP_ALIGN
  8645                              <2> MenuInit_GetHighlightedItemToAX:
  8646 00000953 8B4602              <2> 	mov		ax, [bp+MENUINIT.wHighlightedItem]
  8647 00000956 C3                  <2> 	ret
  8648                              <2> 
  8649                              <2> 
  8650                              <2> ;--------------------------------------------------------------------
  8651                              <2> ; MenuInit_SetTitleHeightFromAL
  8652                              <2> ; MenuInit_SetInformationHeightFromAL
  8653                              <2> ; MenuInit_SetTotalItemsFromAX
  8654                              <2> ;	Parameters
  8655                              <2> ;		AX/AL:	Parameter
  8656                              <2> ;		SS:BP:		Ptr to MENU
  8657                              <2> ;	Returns:
  8658                              <2> ;		Nothing
  8659                              <2> ;	Corrupts registers:
  8660                              <2> ;		Nothing
  8661                              <2> ;--------------------------------------------------------------------
  8662                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  8663                              <2> ALIGN MENU_JUMP_ALIGN
  8664                              <2> MenuInit_SetTitleHeightFromAL:
  8665 00000957 884604              <2> 	mov		[bp+MENUINIT.bTitleLines], al
  8666 0000095A C3                  <2> 	ret
  8667                              <2> 
  8668                              <2> ALIGN MENU_JUMP_ALIGN
  8669                              <2> MenuInit_SetInformationHeightFromAL:
  8670 0000095B 884605              <2> 	mov		[bp+MENUINIT.bInfoLines], al
  8671 0000095E C3                  <2> 	ret
  8672                              <2> 
  8673                              <2> ALIGN MENU_JUMP_ALIGN
  8674                              <2> MenuInit_SetTotalItemsFromAX:
  8675 0000095F 894600              <2> 	mov		[bp+MENUINIT.wItems], ax
  8676 00000962 C3                  <2> 	ret
  8677                              <2> %endif
  8678                              <2> 
  8679                              <2> 
  8680                              <2> ;--------------------------------------------------------------------
  8681                              <2> ; MenuInit_SetUserDataFromDSSI
  8682                              <2> ; MenuInit_GetUserDataToDSSI
  8683                              <2> ;	Parameters
  8684                              <2> ;		DS:SI:	User data (MenuInit_SetUserDataFromDSSI)
  8685                              <2> ;		SS:BP:	Ptr to MENU
  8686                              <2> ;	Returns:
  8687                              <2> ;		DS:SI:	User data (MenuInit_GetUserDataToDSSI)
  8688                              <2> ;	Corrupts registers:
  8689                              <2> ;		Nothing
  8690                              <2> ;--------------------------------------------------------------------
  8691                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  8692                              <2> ALIGN MENU_JUMP_ALIGN
  8693                              <2> MenuInit_SetUserDataFromDSSI:
  8694 00000963 89760A              <2> 	mov		[bp+MENU.dwUserData], si
  8695 00000966 8C5E0C              <2> 	mov		[bp+MENU.dwUserData+2], ds
  8696 00000969 C3                  <2> 	ret
  8697                              <2> 
  8698                              <2> ALIGN MENU_JUMP_ALIGN
  8699                              <2> MenuInit_GetUserDataToDSSI:
  8700 0000096A C5760A              <2> 	lds		si, [bp+MENU.dwUserData]
  8701 0000096D C3                  <2> 	ret
  8702                              <2> %endif
  8703                              <1> 	%include "MenuLocation.asm"
  8704                              <2> ; Project name	:	Assembly Library
  8705                              <2> ; Description	:	Functions for calculation menu window dimensions.
  8706                              <2> 
  8707                              <2> ;
  8708                              <2> ; XTIDE Universal BIOS and Associated Tools
  8709                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  8710                              <2> ;
  8711                              <2> ; This program is free software; you can redistribute it and/or modify
  8712                              <2> ; it under the terms of the GNU General Public License as published by
  8713                              <2> ; the Free Software Foundation; either version 2 of the License, or
  8714                              <2> ; (at your option) any later version.
  8715                              <2> ;
  8716                              <2> ; This program is distributed in the hope that it will be useful,
  8717                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  8718                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  8719                              <2> ; GNU General Public License for more details.
  8720                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  8721                              <2> ;
  8722                              <2> 
  8723                              <2> 
  8724                              <2> ; Section containing code
  8725                              <2> SECTION .text
  8726                              <2> 
  8727                              <2> ;--------------------------------------------------------------------
  8728                              <2> ; MenuLocation_GetTextCoordinatesToAXforItemInAX
  8729                              <2> ;	Parameters
  8730                              <2> ;		AX:		Item index
  8731                              <2> ;		SS:BP:	Ptr to MENU
  8732                              <2> ;	Returns:
  8733                              <2> ;		AL:		Column (X)
  8734                              <2> ;		AH:		Row (Y)
  8735                              <2> ;	Corrupts registers:
  8736                              <2> ;		Nothing
  8737                              <2> ;--------------------------------------------------------------------
  8738                              <2> ALIGN MENU_JUMP_ALIGN
  8739                              <2> MenuLocation_GetTextCoordinatesToAXforItemInAX:
  8740 0000096E 2B4612              <2> 	sub		ax, [bp+MENU.wFirstVisibleItem]		; Item to line
  8741 00000971 86C4                <2> 	xchg	al, ah								; Line to AH, clear AL
  8742 00000973 050201              <2> 	add		ax, (MENU_TEXT_ROW_OFFSET<<8) | MENU_TEXT_COLUMN_OFFSET
  8743                              <2> 	SKIP2B	f	; cmp ax, <next instruction>
  8744                              <3>  %ifidni %1, f
  8745 00000976 3D                  <3>  db 03Dh
  8746                              <3> 
  8747                              <3>  %elifidni %1, ax
  8748                              <3>  db 0B8h
  8749                              <3>  %elifidni %1, cx
  8750                              <3>  db 0B9h
  8751                              <3>  %elifidni %1, dx
  8752                              <3>  db 0BAh
  8753                              <3>  %elifidni %1, bx
  8754                              <3>  db 0BBh
  8755                              <3>  %elifidni %1, sp
  8756                              <3>  db 0BCh
  8757                              <3>  %elifidni %1, bp
  8758                              <3>  db 0BDh
  8759                              <3>  %elifidni %1, si
  8760                              <3>  db 0BEh
  8761                              <3>  %elifidni %1, di
  8762                              <3>  db 0BFh
  8763                              <3>  %else
  8764                              <3>  %error "Invalid parameter passed to SKIP2B"
  8765                              <3>  %endif
  8766                              <2> 	; Fall to MenuLocation_GetItemBordersTopLeftCoordinatesToAX
  8767                              <2> 
  8768                              <2> ;--------------------------------------------------------------------
  8769                              <2> ; MenuLocation_GetItemBordersTopLeftCoordinatesToAX
  8770                              <2> ; MenuLocation_GetTitleTextTopLeftCoordinatesToAX
  8771                              <2> ; MenuLocation_GetTitleBordersTopLeftCoordinatesToAX
  8772                              <2> ; MenuLocation_GetInformationTextTopLeftCoordinatesToAX
  8773                              <2> ; MenuLocation_GetBottomBordersTopLeftCoordinatesToAX
  8774                              <2> ;	Parameters
  8775                              <2> ;		SS:BP:	Ptr to MENU
  8776                              <2> ;	Returns:
  8777                              <2> ;		AL:		Column (X)
  8778                              <2> ;		AH:		Row (Y)
  8779                              <2> ;	Corrupts registers:
  8780                              <2> ;		Nothing
  8781                              <2> ;--------------------------------------------------------------------
  8782                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  8783                              <2> MenuLocation_GetItemBordersTopLeftCoordinatesToAX:
  8784                              <2> %endif
  8785 00000977 31C0                <2> 	xor		ax, ax
  8786 00000979 EB1B                <2> 	jmp		SHORT AddItemBordersTopLeftCoordinatesToAX
  8787                              <2> 
  8788                              <2> ALIGN MENU_JUMP_ALIGN
  8789                              <2> MenuLocation_GetTitleTextTopLeftCoordinatesToAX:
  8790 0000097B B80201              <2> 	mov		ax, (MENU_TEXT_ROW_OFFSET<<8) | MENU_TEXT_COLUMN_OFFSET
  8791                              <2> 	SKIP2B	f	; cmp ax, <next instruction>
  8792                              <3>  %ifidni %1, f
  8793 0000097E 3D                  <3>  db 03Dh
  8794                              <3> 
  8795                              <3>  %elifidni %1, ax
  8796                              <3>  db 0B8h
  8797                              <3>  %elifidni %1, cx
  8798                              <3>  db 0B9h
  8799                              <3>  %elifidni %1, dx
  8800                              <3>  db 0BAh
  8801                              <3>  %elifidni %1, bx
  8802                              <3>  db 0BBh
  8803                              <3>  %elifidni %1, sp
  8804                              <3>  db 0BCh
  8805                              <3>  %elifidni %1, bp
  8806                              <3>  db 0BDh
  8807                              <3>  %elifidni %1, si
  8808                              <3>  db 0BEh
  8809                              <3>  %elifidni %1, di
  8810                              <3>  db 0BFh
  8811                              <3>  %else
  8812                              <3>  %error "Invalid parameter passed to SKIP2B"
  8813                              <3>  %endif
  8814                              <2> MenuLocation_GetTitleBordersTopLeftCoordinatesToAX:
  8815 0000097F 31C0                <2> 	xor		ax, ax
  8816 00000981 EB17                <2> 	jmp		SHORT MenuLocation_AddTitleBordersTopLeftCoordinatesToAX
  8817                              <2> 
  8818                              <2> ALIGN MENU_JUMP_ALIGN
  8819                              <2> MenuLocation_GetInformationTextTopLeftCoordinatesToAX:
  8820 00000983 B80201              <2> 	mov		ax, (MENU_TEXT_ROW_OFFSET<<8) | MENU_TEXT_COLUMN_OFFSET
  8821 00000986 EB06                <2> 	jmp		SHORT AddInformationBordersTopLeftCoordinatesToAX
  8822                              <2> 
  8823                              <2> ALIGN MENU_JUMP_ALIGN
  8824                              <2> MenuLocation_GetBottomBordersTopLeftCoordinatesToAX:
  8825 00000988 31C0                <2> 	xor		ax, ax
  8826                              <2> 	; Fall to .AddBottomBordersTopLeftCoordinatesToAX
  8827                              <2> 
  8828                              <2> ;--------------------------------------------------------------------
  8829                              <2> ; .AddBottomBordersTopLeftCoordinatesToAX
  8830                              <2> ; AddInformationBordersTopLeftCoordinatesToAX
  8831                              <2> ; AddItemBordersTopLeftCoordinatesToAX
  8832                              <2> ; MenuLocation_AddTitleBordersTopLeftCoordinatesToAX
  8833                              <2> ;	Parameters
  8834                              <2> ;		AX:		Zero of offset
  8835                              <2> ;		SS:BP:	Ptr to MENU
  8836                              <2> ;	Returns:
  8837                              <2> ;		AL:		Column (X)
  8838                              <2> ;		AH:		Row (Y)
  8839                              <2> ;	Corrupts registers:
  8840                              <2> ;		Nothing
  8841                              <2> ;--------------------------------------------------------------------
  8842                              <2> .AddBottomBordersTopLeftCoordinatesToAX:
  8843 0000098A F9                  <2> 	stc							; Compensate for Information top border
  8844 0000098B 126605              <2> 	adc		ah, [bp+MENUINIT.bInfoLines]
  8845                              <2> ALIGN MENU_JUMP_ALIGN
  8846                              <2> AddInformationBordersTopLeftCoordinatesToAX:
  8847 0000098E 51                  <2> 	push	cx
  8848 0000098F E85501              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  8849 00000992 41                  <2> 	inc		cx					; Compensate for Items top border
  8850 00000993 00CC                <2> 	add		ah, cl
  8851 00000995 59                  <2> 	pop		cx
  8852                              <2> ALIGN MENU_JUMP_ALIGN
  8853                              <2> AddItemBordersTopLeftCoordinatesToAX:
  8854 00000996 F9                  <2> 	stc							; Compensate for Title top border
  8855 00000997 126604              <2> 	adc		ah, [bp+MENUINIT.bTitleLines]
  8856                              <2> ALIGN MENU_JUMP_ALIGN
  8857                              <2> MenuLocation_AddTitleBordersTopLeftCoordinatesToAX:
  8858 0000099A 57                  <2> 	push	di
  8859 0000099B 50                  <2> 	push	ax
  8860                              <2> 	CALL_DISPLAY_LIBRARY GetColumnsToALandRowsToAH
  8861                              <3>  %ifidn %1, PushDisplayContext
  8862                              <3>  call DisplayContext_Push
  8863                              <3>  %elifidn %1, PopDisplayContext
  8864                              <3>  call DisplayContext_Pop
  8865                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  8866                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  8867                              <3>  %else
  8868 0000099C BF[1F02]            <3>  mov di, %1
  8869 0000099F E8CBF6              <3>  call Display_FunctionFromDI
  8870                              <3>  %endif
  8871 000009A2 2A4606              <2> 	sub		al, [bp+MENUINIT.bWidth]
  8872 000009A5 2A6607              <2> 	sub		ah, [bp+MENUINIT.bHeight]
  8873 000009A8 D0E8                <2> 	shr		al, 1
  8874 000009AA D0EC                <2> 	shr		ah, 1
  8875 000009AC 5F                  <2> 	pop		di					; Old AX to DI
  8876 000009AD 01F8                <2> 	add		ax, di				; Add old AX to menu top left coordinates
  8877 000009AF 5F                  <2> 	pop		di
  8878 000009B0 C3                  <2> 	ret
  8879                              <2> 
  8880                              <2> 
  8881                              <2> ;--------------------------------------------------------------------
  8882                              <2> ; MenuLocation_GetMaxTextLineLengthToAX
  8883                              <2> ;	Parameters
  8884                              <2> ;		SS:BP:	Ptr to MENU
  8885                              <2> ;	Returns:
  8886                              <2> ;		AX:		Maximum text line length in characters
  8887                              <2> ;	Corrupts registers:
  8888                              <2> ;		Nothing
  8889                              <2> ;--------------------------------------------------------------------
  8890                              <2> ALIGN MENU_JUMP_ALIGN
  8891                              <2> MenuLocation_GetMaxTextLineLengthToAX:
  8892                              <2> 	eMOVZX	ax, [bp+MENUINIT.bWidth]
  8893                              <3> %ifndef USE_386
  8894                              <3>  %ifidni %1, ax
  8895 000009B1 8A4606              <3>  mov al, %2
  8896 000009B4 30E4                <3>  xor ah, ah
  8897                              <3>  %elifidni %1, bx
  8898                              <3>  mov bl, %2
  8899                              <3>  xor bh, bh
  8900                              <3>  %elifidni %1, cx
  8901                              <3>  mov cl, %2
  8902                              <3>  xor ch, ch
  8903                              <3>  %elifidni %1, dx
  8904                              <3>  mov dl, %2
  8905                              <3>  xor dh, dh
  8906                              <3>  %else
  8907                              <3>  push ax
  8908                              <3>  mov al, %2
  8909                              <3>  xor ah, ah
  8910                              <3>  xchg ax, %1
  8911                              <3>  pop ax
  8912                              <3>  %endif
  8913                              <3> 
  8914                              <3> %else
  8915                              <3>  movzx %1, %2
  8916                              <3> %endif
  8917 000009B6 83E805              <2> 	sub		ax, BYTE MENU_HORIZONTAL_BORDER_LINES + MENU_TEXT_COLUMN_OFFSET
  8918 000009B9 C3                  <2> 	ret
  8919                              <1> 	%include "MenuLoop.asm"
  8920                              <2> ; Project name	:	Assembly Library
  8921                              <2> ; Description	:	Menu loop for waiting keystrokes.
  8922                              <2> 
  8923                              <2> ;
  8924                              <2> ; XTIDE Universal BIOS and Associated Tools
  8925                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  8926                              <2> ;
  8927                              <2> ; This program is free software; you can redistribute it and/or modify
  8928                              <2> ; it under the terms of the GNU General Public License as published by
  8929                              <2> ; the Free Software Foundation; either version 2 of the License, or
  8930                              <2> ; (at your option) any later version.
  8931                              <2> ;
  8932                              <2> ; This program is distributed in the hope that it will be useful,
  8933                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  8934                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  8935                              <2> ; GNU General Public License for more details.
  8936                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  8937                              <2> ;
  8938                              <2> 
  8939                              <2> 
  8940                              <2> ; Section containing code
  8941                              <2> SECTION .text
  8942                              <2> 
  8943                              <2> ;--------------------------------------------------------------------
  8944                              <2> ; MenuLoop_Enter
  8945                              <2> ;	Parameters
  8946                              <2> ;		SS:BP:	Ptr to MENU
  8947                              <2> ;	Returns:
  8948                              <2> ;		Nothing
  8949                              <2> ;	Corrupts registers:
  8950                              <2> ;		AX, BX, CX, DX, SI, DI
  8951                              <2> ;--------------------------------------------------------------------
  8952                              <2> ALIGN MENU_JUMP_ALIGN
  8953                              <2> MenuLoop_Enter:
  8954 000009BA E80D00              <2> 	call	KeystrokeProcessing
  8955 000009BD E81000              <2> 	call	TimeoutProcessing
  8956                              <2> %ifdef MENUEVENT_IDLEPROCESSING_ENABLE
  8957 000009C0 E8F9FE              <2> 	call	MenuEvent_IdleProcessing	; User idle processing
  8958                              <2> %endif
  8959 000009C3 F6460E01            <2> 	test	BYTE [bp+MENU.bFlags], FLG_MENU_EXIT
  8960 000009C7 74F1                <2> 	jz		SHORT MenuLoop_Enter
  8961 000009C9 C3                  <2> 	ret
  8962                              <2> 
  8963                              <2> 
  8964                              <2> ;--------------------------------------------------------------------
  8965                              <2> ; KeystrokeProcessing
  8966                              <2> ; TimeoutProcessing
  8967                              <2> ;	Parameters
  8968                              <2> ;		SS:BP:	Ptr to MENU
  8969                              <2> ;	Returns:
  8970                              <2> ;		Nothing
  8971                              <2> ;	Corrupts registers:
  8972                              <2> ;		All, except SS:BP
  8973                              <2> ;--------------------------------------------------------------------
  8974                              <2> ALIGN MENU_JUMP_ALIGN
  8975                              <2> KeystrokeProcessing:
  8976 000009CA E8C9FC              <2> 	call	Keyboard_GetKeystrokeToAX
  8977 000009CD 7508                <2> 	jnz		SHORT ProcessKeystrokeFromAX
  8978                              <2> NoKeystrokeToProcess:
  8979 000009CF C3                  <2> 	ret
  8980                              <2> 
  8981                              <2> ALIGN MENU_JUMP_ALIGN
  8982                              <2> TimeoutProcessing:
  8983 000009D0 E81A02              <2> 	call	MenuTime_UpdateSelectionTimeout
  8984 000009D3 73FA                <2> 	jnc		NoKeystrokeToProcess
  8985 000009D5 B00D                <2> 	mov		al, CR	; Fake ENTER to select item
  8986                              <2> 	; Fall to ProcessKeystrokeFromAX
  8987                              <2> 
  8988                              <2> 
  8989                              <2> ;--------------------------------------------------------------------
  8990                              <2> ; ProcessKeystrokeFromAX
  8991                              <2> ;	Parameters
  8992                              <2> ;		AL:		ASCII character
  8993                              <2> ;		AH:		BIOS scan code
  8994                              <2> ;		SS:BP:	Ptr to MENU
  8995                              <2> ;	Returns:
  8996                              <2> ;		Nothing
  8997                              <2> ;	Corrupts registers:
  8998                              <2> ;		AX, BX, CX, DX, SI, DI
  8999                              <2> ;--------------------------------------------------------------------
  9000                              <2> ALIGN MENU_JUMP_ALIGN
  9001                              <2> ProcessKeystrokeFromAX:
  9002 000009D7 91                  <2> 	xchg	cx, ax
  9003 000009D8 E80502              <2> 	call	MenuTime_StopSelectionTimeout
  9004 000009DB 91                  <2> 	xchg	ax, cx
  9005 000009DC E80500              <2> 	call	.ProcessMenuSystemKeystrokeFromAX
  9006 000009DF 72EE                <2> 	jc		SHORT NoKeystrokeToProcess
  9007 000009E1 E9FFFE              <2> 	jmp		MenuEvent_KeyStrokeInAX
  9008                              <2> 
  9009                              <2> ;--------------------------------------------------------------------
  9010                              <2> ; .ProcessMenuSystemKeystrokeFromAX
  9011                              <2> ;	Parameters
  9012                              <2> ;		AL:		ASCII character
  9013                              <2> ;		AH:		BIOS scan code
  9014                              <2> ;		SS:BP:	Ptr to MENU
  9015                              <2> ;	Returns:
  9016                              <2> ;		CF:		Set if keystroke processed
  9017                              <2> ;				Cleared if keystroke not processed
  9018                              <2> ;		AL:		ASCII character (if CF cleared)
  9019                              <2> ;		AH:		BIOS scan code (if CF cleared)
  9020                              <2> ;	Corrupts registers:
  9021                              <2> ;		BX, CX, DX, SI, DI
  9022                              <2> ;--------------------------------------------------------------------
  9023                              <2> ALIGN MENU_JUMP_ALIGN
  9024                              <2> .ProcessMenuSystemKeystrokeFromAX:
  9025                              <2> %ifndef MENU_NO_ESC
  9026 000009E4 3C1B                <2> 	cmp		al, ESC
  9027 000009E6 740B                <2> 	je		SHORT .LeaveMenuWithoutSelectingItem
  9028                              <2> %endif
  9029 000009E8 3C0D                <2> 	cmp		al, CR
  9030 000009EA 7416                <2> 	je		SHORT .SelectItem
  9031                              <2> 
  9032 000009EC F6460E04            <2> 	test	BYTE [bp+MENU.bFlags], FLG_MENU_USER_HANDLES_SCROLLING
  9033 000009F0 7418                <2> 	jz		SHORT MenuLoop_ProcessScrollingKeysFromAX
  9034 000009F2 C3                  <2> 	ret		; Return with CF cleared since keystroke not processed
  9035                              <2> 
  9036                              <2> %ifndef MENU_NO_ESC
  9037                              <2> ALIGN MENU_JUMP_ALIGN
  9038                              <2> .LeaveMenuWithoutSelectingItem:
  9039 000009F3 E8C2FE              <2> 	call	MenuEvent_ExitMenu
  9040 000009F6 7308                <2> 	jnc		SHORT .CancelMenuExit
  9041 000009F8 E84DFF              <2> 	call	MenuInit_CloseMenuWindow
  9042 000009FB C74602FFFF          <2> 	mov		WORD [bp+MENUINIT.wHighlightedItem], NO_ITEM_HIGHLIGHTED
  9043                              <2> .CancelMenuExit:
  9044 00000A00 F9                  <2> 	stc
  9045 00000A01 C3                  <2> 	ret
  9046                              <2> %endif
  9047                              <2> 
  9048                              <2> ALIGN MENU_JUMP_ALIGN
  9049                              <2> .SelectItem:
  9050 00000A02 8B4E02              <2> 	mov		cx, [bp+MENUINIT.wHighlightedItem]
  9051 00000A05 E8DEFE              <2> 	call	MenuEvent_ItemSelectedFromCX
  9052 00000A08 F9                  <2> 	stc
  9053 00000A09 C3                  <2> 	ret
  9054                              <2> 
  9055                              <2> 
  9056                              <2> ;--------------------------------------------------------------------
  9057                              <2> ; MenuLoop_ProcessScrollingKeysFromAX
  9058                              <2> ;	Parameters
  9059                              <2> ;		AL:		ASCII character
  9060                              <2> ;		AH:		BIOS scan code
  9061                              <2> ;		SS:BP:	Ptr to MENU
  9062                              <2> ;	Returns:
  9063                              <2> ;		CF:		Set if keystroke processed
  9064                              <2> ;				Cleared if keystroke not processed
  9065                              <2> ;		AL:		ASCII character (if CF cleared)
  9066                              <2> ;		AH:		BIOS scan code (if CF cleared)
  9067                              <2> ;	Corrupts registers:
  9068                              <2> ;		BX, CX, DX, SI, DI
  9069                              <2> ;--------------------------------------------------------------------
  9070                              <2> ALIGN MENU_JUMP_ALIGN
  9071                              <2> MenuLoop_ProcessScrollingKeysFromAX:
  9072 00000A0A 86E0                <2> 	xchg	ah, al
  9073 00000A0C 3C49                <2> 	cmp		al, MENU_KEY_PGUP
  9074 00000A0E 7418                <2> 	je		SHORT .ChangeToPreviousPage
  9075 00000A10 3C51                <2> 	cmp		al, MENU_KEY_PGDN
  9076 00000A12 7428                <2> 	je		SHORT .ChangeToNextPage
  9077 00000A14 3C47                <2> 	cmp		al, MENU_KEY_HOME
  9078 00000A16 741D                <2> 	je		SHORT .SelectFirstItem
  9079 00000A18 3C4F                <2> 	cmp		al, MENU_KEY_END
  9080 00000A1A 742E                <2> 	je		SHORT .SelectLastItem
  9081                              <2> 
  9082 00000A1C 3C48                <2> 	cmp		al, MENU_KEY_UP
  9083 00000A1E 7433                <2> 	je		SHORT .DecrementSelectedItem
  9084 00000A20 3C50                <2> 	cmp		al, MENU_KEY_DOWN
  9085 00000A22 7433                <2> 	je		SHORT .IncrementSelectedItem
  9086 00000A24 F8                  <2> 	clc		; Clear CF since keystroke not processed
  9087 00000A25 86E0                <2> 	xchg	ah, al
  9088 00000A27 C3                  <2> 	ret
  9089                              <2> 
  9090                              <2> ALIGN MENU_JUMP_ALIGN
  9091                              <2> .ChangeToPreviousPage:
  9092 00000A28 E8BC00              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  9093 00000A2B 91                  <2> 	xchg	ax, cx
  9094 00000A2C F7D8                <2> 	neg		ax
  9095 00000A2E 8B4E02              <2> 	mov		cx, [bp+MENUINIT.wHighlightedItem]
  9096 00000A31 01C1                <2> 	add		cx, ax
  9097 00000A33 7D24                <2> 	jge		SHORT .MoveHighlightedItemByAX	; No rotation for PgUp
  9098                              <2> 	; Fall to .SelectFirstItem
  9099                              <2> ALIGN MENU_JUMP_ALIGN
  9100                              <2> .SelectFirstItem:
  9101 00000A35 8B4602              <2> 	mov		ax, [bp+MENUINIT.wHighlightedItem]
  9102 00000A38 F7D8                <2> 	neg		ax
  9103 00000A3A EB1D                <2> 	jmp		SHORT .MoveHighlightedItemByAX
  9104                              <2> 
  9105                              <2> ALIGN MENU_JUMP_ALIGN
  9106                              <2> .ChangeToNextPage:
  9107 00000A3C E8A800              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  9108 00000A3F 91                  <2> 	xchg	ax, cx
  9109 00000A40 8B4E02              <2> 	mov		cx, [bp+MENUINIT.wHighlightedItem]
  9110 00000A43 01C1                <2> 	add		cx, ax
  9111 00000A45 3B4E00              <2> 	cmp		cx, [bp+MENUINIT.wItems]
  9112 00000A48 720F                <2> 	jb		SHORT .MoveHighlightedItemByAX	; No rotation for PgDn
  9113                              <2> 	; Fall to .SelectLastItem
  9114                              <2> ALIGN MENU_JUMP_ALIGN
  9115                              <2> .SelectLastItem:
  9116 00000A4A F9                  <2> 	stc
  9117 00000A4B 8B4600              <2> 	mov		ax, [bp+MENUINIT.wItems]
  9118 00000A4E 1B4602              <2> 	sbb		ax, [bp+MENUINIT.wHighlightedItem]
  9119 00000A51 EB06                <2> 	jmp		SHORT .MoveHighlightedItemByAX
  9120                              <2> 
  9121                              <2> ALIGN MENU_JUMP_ALIGN
  9122                              <2> .DecrementSelectedItem:
  9123 00000A53 B8FFFF              <2> 	mov		ax, -1
  9124                              <2> 	SKIP2B	cx	; mov cx, <next instruction>
  9125                              <3>  %ifidni %1, f
  9126                              <3>  db 03Dh
  9127                              <3> 
  9128                              <3>  %elifidni %1, ax
  9129                              <3>  db 0B8h
  9130                              <3>  %elifidni %1, cx
  9131 00000A56 B9                  <3>  db 0B9h
  9132                              <3>  %elifidni %1, dx
  9133                              <3>  db 0BAh
  9134                              <3>  %elifidni %1, bx
  9135                              <3>  db 0BBh
  9136                              <3>  %elifidni %1, sp
  9137                              <3>  db 0BCh
  9138                              <3>  %elifidni %1, bp
  9139                              <3>  db 0BDh
  9140                              <3>  %elifidni %1, si
  9141                              <3>  db 0BEh
  9142                              <3>  %elifidni %1, di
  9143                              <3>  db 0BFh
  9144                              <3>  %else
  9145                              <3>  %error "Invalid parameter passed to SKIP2B"
  9146                              <3>  %endif
  9147                              <2> .IncrementSelectedItem:
  9148 00000A57 B001                <2> 	mov		al, 1	; AH is already 0
  9149                              <2> ALIGN MENU_JUMP_ALIGN
  9150                              <2> .MoveHighlightedItemByAX:
  9151 00000A59 E82D00              <2> 	call	MenuScrollbars_MoveHighlightedItemByAX
  9152 00000A5C F9                  <2> 	stc
  9153 00000A5D C3                  <2> 	ret
  9154                              <1> 	%include "MenuScrollbars.asm"
  9155                              <2> ; Project name	:	Assembly Library
  9156                              <2> ; Description	:	Functions for drawing scroll bars over menu borders.
  9157                              <2> 
  9158                              <2> ;
  9159                              <2> ; XTIDE Universal BIOS and Associated Tools
  9160                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  9161                              <2> ;
  9162                              <2> ; This program is free software; you can redistribute it and/or modify
  9163                              <2> ; it under the terms of the GNU General Public License as published by
  9164                              <2> ; the Free Software Foundation; either version 2 of the License, or
  9165                              <2> ; (at your option) any later version.
  9166                              <2> ;
  9167                              <2> ; This program is distributed in the hope that it will be useful,
  9168                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  9169                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  9170                              <2> ; GNU General Public License for more details.
  9171                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  9172                              <2> ;
  9173                              <2> 
  9174                              <2> 
  9175                              <2> ; Section containing code
  9176                              <2> SECTION .text
  9177                              <2> 
  9178                              <2> ;--------------------------------------------------------------------
  9179                              <2> ; MenuScrollbars_AreScrollbarsNeeded
  9180                              <2> ;	Parameters
  9181                              <2> ;		SS:BP:	Ptr to MENU
  9182                              <2> ;	Returns:
  9183                              <2> ;		CF:		Set if scroll bars are needed
  9184                              <2> ;				Cleared if no scroll bars needed
  9185                              <2> ;	Corrupts registers:
  9186                              <2> ;		AX
  9187                              <2> ;--------------------------------------------------------------------
  9188                              <2> ALIGN MENU_JUMP_ALIGN
  9189                              <2> MenuScrollbars_AreScrollbarsNeeded:
  9190 00000A5E 91                  <2> 	xchg	ax, cx
  9191 00000A5F E88500              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  9192 00000A62 3B4E00              <2> 	cmp		cx, [bp+MENUINIT.wItems]		; Set CF if max visible < total items
  9193 00000A65 91                  <2> 	xchg	cx, ax
  9194 00000A66 C3                  <2> 	ret
  9195                              <2> 
  9196                              <2> 
  9197                              <2> ;--------------------------------------------------------------------
  9198                              <2> ; MenuScrollbars_GetScrollCharacterToALForLineInDI
  9199                              <2> ;	Parameters
  9200                              <2> ;		DI:		Index of item line to draw
  9201                              <2> ;		SS:BP:	Ptr to MENU
  9202                              <2> ;	Returns:
  9203                              <2> ;		AL:		Scroll track or thumb character
  9204                              <2> ;	Corrupts registers:
  9205                              <2> ;		AH, CX, DX
  9206                              <2> ;--------------------------------------------------------------------
  9207                              <2> ALIGN MENU_JUMP_ALIGN
  9208                              <2> MenuScrollbars_GetScrollCharacterToALForLineInDI:
  9209 00000A67 E87D00              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  9210                              <2> 	; Get first thumb line to AX
  9211 00000A6A 8B4612              <2> 	mov		ax, [bp+MENU.wFirstVisibleItem]
  9212 00000A6D E81300              <2> 	call	.CalculateFirstOrLastThumbLineToAX
  9213                              <2> 
  9214 00000A70 39C7                <2> 	cmp		di, ax				; Before first thumb line?
  9215 00000A72 7205                <2> 	jb		SHORT .ReturnTrackCharacter
  9216 00000A74 E80900              <2> 	call	.GetLastThumbLineToAX
  9217 00000A77 39F8                <2> 	cmp		ax, di				; After last thumb line?
  9218                              <2> ALIGN MENU_JUMP_ALIGN
  9219                              <2> .ReturnTrackCharacter:
  9220 00000A79 B0B1                <2> 	mov		al, SCROLL_TRACK_CHARACTER
  9221 00000A7B 7202                <2> 	jb		SHORT .Return
  9222 00000A7D B0DB                <2> 	mov		al, SCROLL_THUMB_CHARACTER
  9223                              <2> ALIGN MENU_JUMP_ALIGN, ret
  9224                              <2> .Return:
  9225 00000A7F C3                  <2> 	ret
  9226                              <2> 
  9227                              <2> ;--------------------------------------------------------------------
  9228                              <2> ; .GetLastThumbLineToAX
  9229                              <2> ;	Parameters
  9230                              <2> ;		CX:		Max visible items on page
  9231                              <2> ;		SS:BP:	Ptr to MENU
  9232                              <2> ;	Returns:
  9233                              <2> ;		AX:		Item line for last thumb character
  9234                              <2> ;	Corrupts registers:
  9235                              <2> ;		DX
  9236                              <2> ;--------------------------------------------------------------------
  9237                              <2> ALIGN MENU_JUMP_ALIGN
  9238                              <2> .GetLastThumbLineToAX:
  9239 00000A80 E84E00              <2> 	call	MenuScrollbars_GetLastVisibleItemOnPageToAX
  9240                              <2> 	; Fall to .CalculateFirstOrLastThumbLineToAX
  9241                              <2> 
  9242                              <2> ;--------------------------------------------------------------------
  9243                              <2> ; .CalculateFirstOrLastThumbLineToAX
  9244                              <2> ;	Parameters
  9245                              <2> ;		AX:		Index of first or last visible item on page
  9246                              <2> ;		CX:		Max visible items on page
  9247                              <2> ;		SS:BP:	Ptr to MENU
  9248                              <2> ;	Returns:
  9249                              <2> ;		AX:		Item line for first thumb character
  9250                              <2> ;	Corrupts registers:
  9251                              <2> ;		DX
  9252                              <2> ;--------------------------------------------------------------------
  9253                              <2> ALIGN MENU_JUMP_ALIGN
  9254                              <2> .CalculateFirstOrLastThumbLineToAX:
  9255 00000A83 F7E1                <2> 	mul		cx
  9256 00000A85 F77600              <2> 	div		WORD [bp+MENUINIT.wItems]
  9257 00000A88 C3                  <2> 	ret		; (Visible items on page * First visible item on page) / total items
  9258                              <2> 
  9259                              <2> 
  9260                              <2> ;--------------------------------------------------------------------
  9261                              <2> ; MenuScrollbars_MoveHighlightedItemByAX
  9262                              <2> ;	Parameters
  9263                              <2> ;		AX:		Signed offset to new item to be highlighted
  9264                              <2> ;		SS:BP:	Ptr to MENU
  9265                              <2> ;	Returns:
  9266                              <2> ;		Nothing
  9267                              <2> ;	Corrupts registers:
  9268                              <2> ;		AX, BX, CX, DX, SI, DI
  9269                              <2> ;--------------------------------------------------------------------
  9270                              <2> ALIGN MENU_JUMP_ALIGN
  9271                              <2> MenuScrollbars_MoveHighlightedItemByAX:
  9272 00000A89 8B4E02              <2> 	mov		cx, [bp+MENUINIT.wHighlightedItem]
  9273 00000A8C 01C1                <2> 	add		cx, ax
  9274                              <2> 	; Fall to .RotateItemInCX
  9275                              <2> 
  9276                              <2> ;--------------------------------------------------------------------
  9277                              <2> ; .RotateItemInCX
  9278                              <2> ;	Parameters
  9279                              <2> ;		CX:		Possibly under of overflown item to be rotated
  9280                              <2> ;		SS:BP:	Ptr to MENU
  9281                              <2> ;	Returns:
  9282                              <2> ;		CX:		Valid item index
  9283                              <2> ;	Corrupts registers:
  9284                              <2> ;		DX
  9285                              <2> ;--------------------------------------------------------------------
  9286                              <2> ;.RotateItemInCX:
  9287 00000A8E 8B5600              <2> 	mov		dx, [bp+MENUINIT.wItems]
  9288 00000A91 85C9                <2> 	test	cx, cx
  9289 00000A93 7804                <2> 	js		SHORT .RotateNegativeItemInCX
  9290 00000A95 29D1                <2> 	sub		cx, dx
  9291 00000A97 7302                <2> 	jae		SHORT .ScrollPageForNewItemInCX
  9292                              <2> 
  9293                              <2> ALIGN MENU_JUMP_ALIGN
  9294                              <2> .RotateNegativeItemInCX:
  9295 00000A99 01D1                <2> 	add		cx, dx
  9296                              <2> 	; Fall to .ScrollPageForNewItemInCX
  9297                              <2> 
  9298                              <2> ;--------------------------------------------------------------------
  9299                              <2> ; .ScrollPageForNewItemInCX
  9300                              <2> ;	Parameters
  9301                              <2> ;		CX:		New item to be highlighted
  9302                              <2> ;		SS:BP:	Ptr to MENU
  9303                              <2> ;	Returns:
  9304                              <2> ;		Nothing
  9305                              <2> ;	Corrupts registers:
  9306                              <2> ;		AX, BX, CX, DX, SI, DI
  9307                              <2> ;--------------------------------------------------------------------
  9308                              <2> ALIGN MENU_JUMP_ALIGN
  9309                              <2> .ScrollPageForNewItemInCX:
  9310 00000A9B E82500              <2> 	call	MenuScrollbars_IsItemInCXonVisiblePage
  9311 00000A9E 7220                <2> 	jc		SHORT .HighlightNewItemOnCX
  9312                              <2> 
  9313 00000AA0 8B5612              <2> 	mov		dx, [bp+MENU.wFirstVisibleItem]
  9314 00000AA3 2B5602              <2> 	sub		dx, [bp+MENUINIT.wHighlightedItem]
  9315                              <2> 
  9316                              <2> 	; Get MaxFirstVisibleItem to AX
  9317 00000AA6 51                  <2> 	push	cx
  9318 00000AA7 E83D00              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  9319 00000AAA 8B4600              <2> 	mov		ax, [bp+MENUINIT.wItems]
  9320 00000AAD 29C8                <2> 	sub		ax, cx
  9321 00000AAF 59                  <2> 	pop		cx
  9322                              <2> 
  9323 00000AB0 01CA                <2> 	add		dx, cx
  9324 00000AB2 7901                <2> 	jns		.DXisPositive
  9325 00000AB4 99                  <2> 	cwd		; This won't work if MaxFirstVisibleItem > 32767
  9326                              <2> 
  9327                              <2> ALIGN MENU_JUMP_ALIGN
  9328                              <2> .DXisPositive:
  9329 00000AB5 39D0                <2> 	cmp		ax, dx
  9330 00000AB7 7201                <2> 	jb		.AXisLessThanDX
  9331 00000AB9 92                  <2> 	xchg	dx, ax
  9332                              <2> 
  9333                              <2> ALIGN MENU_JUMP_ALIGN
  9334                              <2> .AXisLessThanDX:
  9335 00000ABA 894612              <2> 	mov		[bp+MENU.wFirstVisibleItem], ax
  9336 00000ABD E88900              <2> 	call	MenuText_RefreshAllItems
  9337                              <2> 
  9338                              <2> ALIGN MENU_JUMP_ALIGN
  9339                              <2> .HighlightNewItemOnCX:
  9340 00000AC0 E90BFE              <2> 	jmp		MenuEvent_HighlightItemFromCX
  9341                              <2> 
  9342                              <2> 
  9343                              <2> ;--------------------------------------------------------------------
  9344                              <2> ; MenuScrollbars_IsItemInCXonVisiblePage
  9345                              <2> ;	Parameters
  9346                              <2> ;		CX:		Item whose visibility is to be checked
  9347                              <2> ;		SS:BP:	Ptr to MENU
  9348                              <2> ;	Returns:
  9349                              <2> ;		CF:		Set if item is on visible page
  9350                              <2> ;				Cleared if item is not on visible page
  9351                              <2> ;	Corrupts registers:
  9352                              <2> ;		AX
  9353                              <2> ;--------------------------------------------------------------------
  9354                              <2> ALIGN MENU_JUMP_ALIGN
  9355                              <2> MenuScrollbars_IsItemInCXonVisiblePage:
  9356 00000AC3 394E12              <2> 	cmp		[bp+MENU.wFirstVisibleItem], cx
  9357 00000AC6 7708                <2> 	ja		SHORT .ItemIsNotVisible
  9358                              <2> 
  9359 00000AC8 E80600              <2> 	call	MenuScrollbars_GetLastVisibleItemOnPageToAX
  9360 00000ACB 39C1                <2> 	cmp		cx, ax
  9361 00000ACD 7701                <2> 	ja		SHORT .ItemIsNotVisible
  9362 00000ACF F9                  <2> 	stc		; Item is visible
  9363                              <2> ALIGN MENU_JUMP_ALIGN, ret
  9364                              <2> .ItemIsNotVisible:
  9365 00000AD0 C3                  <2> 	ret
  9366                              <2> 
  9367                              <2> 
  9368                              <2> ;--------------------------------------------------------------------
  9369                              <2> ; MenuScrollbars_GetLastVisibleItemOnPageToAX
  9370                              <2> ;	Parameters
  9371                              <2> ;		SS:BP:	Ptr to MENU
  9372                              <2> ;	Returns:
  9373                              <2> ;		AX:		Index of last visible item on page
  9374                              <2> ;	Corrupts registers:
  9375                              <2> ;		Nothing
  9376                              <2> ;--------------------------------------------------------------------
  9377                              <2> ALIGN MENU_JUMP_ALIGN
  9378                              <2> MenuScrollbars_GetLastVisibleItemOnPageToAX:
  9379 00000AD1 91                  <2> 	xchg	cx, ax
  9380 00000AD2 E80600              <2> 	call	MenuScrollbars_GetActualVisibleItemsOnPageToCX
  9381 00000AD5 91                  <2> 	xchg	ax, cx
  9382 00000AD6 48                  <2> 	dec		ax
  9383 00000AD7 034612              <2> 	add		ax, [bp+MENU.wFirstVisibleItem]
  9384 00000ADA C3                  <2> 	ret
  9385                              <2> 
  9386                              <2> 
  9387                              <2> ;--------------------------------------------------------------------
  9388                              <2> ; MenuScrollbars_GetActualVisibleItemsOnPageToCX
  9389                              <2> ;	Parameters
  9390                              <2> ;		SS:BP:	Ptr to MENU
  9391                              <2> ;	Returns:
  9392                              <2> ;		CX:		Currently visible items
  9393                              <2> ;	Corrupts registers:
  9394                              <2> ;		Nothing
  9395                              <2> ;--------------------------------------------------------------------
  9396                              <2> ALIGN MENU_JUMP_ALIGN
  9397                              <2> MenuScrollbars_GetActualVisibleItemsOnPageToCX:
  9398 00000ADB E80900              <2> 	call	MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  9399 00000ADE 3B4E00              <2> 	cmp		cx, [bp+MENUINIT.wItems]
  9400 00000AE1 7203                <2> 	jb		SHORT .Return
  9401 00000AE3 8B4E00              <2> 	mov		cx, [bp+MENUINIT.wItems]
  9402                              <2> ALIGN MENU_JUMP_ALIGN, ret
  9403                              <2> .Return:
  9404 00000AE6 C3                  <2> 	ret
  9405                              <2> 
  9406                              <2> 
  9407                              <2> ;--------------------------------------------------------------------
  9408                              <2> ; MenuScrollbars_GetMaxVisibleItemsOnPageToCX
  9409                              <2> ;	Parameters
  9410                              <2> ;		SS:BP:	Ptr to MENU
  9411                              <2> ;	Returns:
  9412                              <2> ;		CX:		Maximum number of visible items
  9413                              <2> ;	Corrupts registers:
  9414                              <2> ;		Nothing
  9415                              <2> ;--------------------------------------------------------------------
  9416                              <2> ALIGN MENU_JUMP_ALIGN
  9417                              <2> MenuScrollbars_GetMaxVisibleItemsOnPageToCX:
  9418                              <2> 	eMOVZX	cx, [bp+MENUINIT.bHeight]
  9419                              <3> %ifndef USE_386
  9420                              <3>  %ifidni %1, ax
  9421                              <3>  mov al, %2
  9422                              <3>  xor ah, ah
  9423                              <3>  %elifidni %1, bx
  9424                              <3>  mov bl, %2
  9425                              <3>  xor bh, bh
  9426                              <3>  %elifidni %1, cx
  9427 00000AE7 8A4E07              <3>  mov cl, %2
  9428 00000AEA 30ED                <3>  xor ch, ch
  9429                              <3>  %elifidni %1, dx
  9430                              <3>  mov dl, %2
  9431                              <3>  xor dh, dh
  9432                              <3>  %else
  9433                              <3>  push ax
  9434                              <3>  mov al, %2
  9435                              <3>  xor ah, ah
  9436                              <3>  xchg ax, %1
  9437                              <3>  pop ax
  9438                              <3>  %endif
  9439                              <3> 
  9440                              <3> %else
  9441                              <3>  movzx %1, %2
  9442                              <3> %endif
  9443 00000AEC 2A4E04              <2> 	sub		cl, [bp+MENUINIT.bTitleLines]
  9444 00000AEF 2A4E05              <2> 	sub		cl, [bp+MENUINIT.bInfoLines]
  9445 00000AF2 80E905              <2> 	sub		cl, MENU_VERTICAL_BORDER_LINES
  9446 00000AF5 C3                  <2> 	ret
  9447                              <1> 	%include "MenuText.asm"
  9448                              <2> ; Project name	:	Assembly Library
  9449                              <2> ; Description	:	Functions for drawing menu texts by the user.
  9450                              <2> 
  9451                              <2> ;
  9452                              <2> ; XTIDE Universal BIOS and Associated Tools
  9453                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  9454                              <2> ;
  9455                              <2> ; This program is free software; you can redistribute it and/or modify
  9456                              <2> ; it under the terms of the GNU General Public License as published by
  9457                              <2> ; the Free Software Foundation; either version 2 of the License, or
  9458                              <2> ; (at your option) any later version.
  9459                              <2> ;
  9460                              <2> ; This program is distributed in the hope that it will be useful,
  9461                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  9462                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  9463                              <2> ; GNU General Public License for more details.
  9464                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  9465                              <2> ;
  9466                              <2> 
  9467                              <2> 
  9468                              <2> ; Section containing code
  9469                              <2> SECTION .text
  9470                              <2> 
  9471                              <2> ;--------------------------------------------------------------------
  9472                              <2> ; MenuText_ClearTitleArea
  9473                              <2> ; MenuText_ClearInformationArea
  9474                              <2> ;	Parameters
  9475                              <2> ;		SS:BP:	Ptr to MENU
  9476                              <2> ;	Returns:
  9477                              <2> ;		Nothing
  9478                              <2> ;	Corrupts registers:
  9479                              <2> ;		AX, BX, CX, DX, SI, DI
  9480                              <2> ;--------------------------------------------------------------------
  9481                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
  9482                              <2> ALIGN MENU_JUMP_ALIGN
  9483                              <2> MenuText_ClearTitleArea:
  9484                              <2> 	CALL_DISPLAY_LIBRARY PushDisplayContext		; Save cursor coordinates
  9485                              <3>  %ifidn %1, PushDisplayContext
  9486 00000AF6 E817F6              <3>  call DisplayContext_Push
  9487                              <3>  %elifidn %1, PopDisplayContext
  9488                              <3>  call DisplayContext_Pop
  9489                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9490                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9491                              <3>  %else
  9492                              <3>  mov di, %1
  9493                              <3>  call Display_FunctionFromDI
  9494                              <3>  %endif
  9495 00000AF9 E83A00              <2> 	call	PrepareToDrawTitleArea
  9496 00000AFC 8A4E04              <2> 	mov		cl, [bp+MENUINIT.bTitleLines]
  9497 00000AFF EB09                <2> 	jmp		SHORT MenuText_ClearInformationArea.ClearCLlinesOfText
  9498                              <2> %endif
  9499                              <2> 
  9500                              <2> ALIGN MENU_JUMP_ALIGN
  9501                              <2> MenuText_ClearInformationArea:
  9502                              <2> 	CALL_DISPLAY_LIBRARY PushDisplayContext		; Save cursor coordinates
  9503                              <3>  %ifidn %1, PushDisplayContext
  9504 00000B01 E80CF6              <3>  call DisplayContext_Push
  9505                              <3>  %elifidn %1, PopDisplayContext
  9506                              <3>  call DisplayContext_Pop
  9507                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9508                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9509                              <3>  %else
  9510                              <3>  mov di, %1
  9511                              <3>  call Display_FunctionFromDI
  9512                              <3>  %endif
  9513 00000B04 E83700              <2> 	call	MenuText_PrepareToDrawInformationArea
  9514 00000B07 8A4E05              <2> 	mov		cl, [bp+MENUINIT.bInfoLines]
  9515                              <2> .ClearCLlinesOfText:
  9516 00000B0A 8A4606              <2> 	mov		al, [bp+MENUINIT.bWidth]
  9517 00000B0D 2C04                <2> 	sub		al, MENU_HORIZONTAL_BORDER_LINES+(MENU_TEXT_COLUMN_OFFSET/2)
  9518 00000B0F F6E1                <2> 	mul		cl
  9519 00000B11 91                  <2> 	xchg	cx, ax
  9520 00000B12 B020                <2> 	mov		al, ' '
  9521                              <2> 	CALL_DISPLAY_LIBRARY PrintRepeatedCharacterFromALwithCountInCX
  9522                              <3>  %ifidn %1, PushDisplayContext
  9523                              <3>  call DisplayContext_Push
  9524                              <3>  %elifidn %1, PopDisplayContext
  9525                              <3>  call DisplayContext_Pop
  9526                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9527                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9528                              <3>  %else
  9529 00000B14 BF[D302]            <3>  mov di, %1
  9530 00000B17 E853F5              <3>  call Display_FunctionFromDI
  9531                              <3>  %endif
  9532                              <2> 	JMP_DISPLAY_LIBRARY PopDisplayContext
  9533                              <3>  %ifidn %1, PushDisplayContext
  9534                              <3>  jmp DisplayContext_Push
  9535                              <3>  %elifidn %1, PopDisplayContext
  9536 00000B1A E816F6              <3>  call DisplayContext_Pop
  9537 00000B1D C3                  <3>  ret
  9538                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9539                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9540                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
  9541                              <3>  mov di, %1
  9542                              <3>  call Display_FunctionFromDI
  9543                              <3>  ret
  9544                              <3>  %else
  9545                              <3>  mov di, %1
  9546                              <3>  jmp Display_FunctionFromDI
  9547                              <3>  %endif
  9548                              <2> 
  9549                              <2> 
  9550                              <2> ;--------------------------------------------------------------------
  9551                              <2> ; MenuText_RefreshTitle
  9552                              <2> ; MenuText_RefreshInformation
  9553                              <2> ;	Parameters
  9554                              <2> ;		SS:BP:	Ptr to MENU
  9555                              <2> ;	Returns:
  9556                              <2> ;		Nothing
  9557                              <2> ;	Corrupts registers:
  9558                              <2> ;		AX, BX, CX, DX, SI, DI
  9559                              <2> ;--------------------------------------------------------------------
  9560                              <2> ALIGN MENU_JUMP_ALIGN
  9561                              <2> MenuText_RefreshTitle:
  9562 00000B1E 807E0400            <2> 	cmp		BYTE [bp+MENUINIT.bTitleLines], 0
  9563 00000B22 7433                <2> 	jz		SHORT NothingToRefresh
  9564 00000B24 E80F00              <2> 	call	PrepareToDrawTitleArea
  9565 00000B27 E996FD              <2> 	jmp		MenuEvent_RefreshTitle
  9566                              <2> 
  9567                              <2> ALIGN MENU_JUMP_ALIGN
  9568                              <2> MenuText_RefreshInformation:
  9569 00000B2A 807E0500            <2> 	cmp		BYTE [bp+MENUINIT.bInfoLines], 0
  9570 00000B2E 7427                <2> 	jz		SHORT NothingToRefresh
  9571 00000B30 E80B00              <2> 	call	MenuText_PrepareToDrawInformationArea
  9572 00000B33 E98DFD              <2> 	jmp		MenuEvent_RefreshInformation
  9573                              <2> 
  9574                              <2> ;--------------------------------------------------------------------
  9575                              <2> ; PrepareToDrawTitleArea
  9576                              <2> ; PrepareToDrawInformationArea
  9577                              <2> ;	Parameters
  9578                              <2> ;		SS:BP:	Ptr to MENU
  9579                              <2> ;	Returns:
  9580                              <2> ;		Nothing
  9581                              <2> ;	Corrupts registers:
  9582                              <2> ;		AX, BX, DX, SI, DI
  9583                              <2> ;--------------------------------------------------------------------
  9584                              <2> ALIGN MENU_JUMP_ALIGN
  9585                              <2> PrepareToDrawTitleArea:
  9586 00000B36 BE0200              <2> 	mov		si, ATTRIBUTE_CHARS.cTitle
  9587 00000B39 E83FFE              <2> 	call	MenuLocation_GetTitleTextTopLeftCoordinatesToAX
  9588 00000B3C EB06                <2> 	jmp		SHORT FinishPreparationsToDrawTitleOrInformationArea
  9589                              <2> 
  9590                              <2> ALIGN MENU_JUMP_ALIGN
  9591                              <2> MenuText_PrepareToDrawInformationArea:
  9592 00000B3E BE0200              <2> 	mov		si, ATTRIBUTE_CHARS.cInformation
  9593 00000B41 E83FFE              <2> 	call	MenuLocation_GetInformationTextTopLeftCoordinatesToAX
  9594                              <2> FinishPreparationsToDrawTitleOrInformationArea:
  9595 00000B44 BA[8B08]            <2> 	mov		dx, MenuCharOut_MenuTeletypeOutputWithAutomaticLineChange
  9596 00000B47 EB31                <2> 	jmp		SHORT AdjustDisplayContextForDrawingTextsAtCoordsInAXwithAttrTypeInSIandCharOutFunctionInDX
  9597                              <2> 
  9598                              <2> 
  9599                              <2> ;--------------------------------------------------------------------
  9600                              <2> ; MenuText_RefreshAllItems
  9601                              <2> ;	Parameters
  9602                              <2> ;		SS:BP:	Ptr to MENU
  9603                              <2> ;	Returns:
  9604                              <2> ;		Nothing
  9605                              <2> ;	Corrupts registers:
  9606                              <2> ;		AX, BX, DX, SI, DI
  9607                              <2> ;--------------------------------------------------------------------
  9608                              <2> ALIGN MENU_JUMP_ALIGN
  9609                              <2> MenuText_RefreshAllItems:
  9610 00000B49 51                  <2> 	push	cx
  9611                              <2> 
  9612 00000B4A E88EFF              <2> 	call	MenuScrollbars_GetActualVisibleItemsOnPageToCX
  9613 00000B4D 8B4612              <2> 	mov		ax, [bp+MENU.wFirstVisibleItem]
  9614                              <2> ALIGN MENU_JUMP_ALIGN
  9615                              <2> .ItemRefreshLoop:
  9616 00000B50 E80500              <2> 	call	MenuText_RefreshItemFromAX
  9617 00000B53 40                  <2> 	inc		ax
  9618 00000B54 E2FA                <2> 	loop	.ItemRefreshLoop
  9619                              <2> 
  9620 00000B56 59                  <2> 	pop		cx
  9621                              <2> NothingToRefresh:
  9622 00000B57 C3                  <2> 	ret
  9623                              <2> 
  9624                              <2> ;--------------------------------------------------------------------
  9625                              <2> ; MenuText_RefreshItemFromAX
  9626                              <2> ;	Parameters
  9627                              <2> ;		AX:		Item to refresh
  9628                              <2> ;		SS:BP:	Ptr to MENU
  9629                              <2> ;	Returns:
  9630                              <2> ;		Nothing
  9631                              <2> ;	Corrupts registers:
  9632                              <2> ;		BX, DX, SI, DI
  9633                              <2> ;--------------------------------------------------------------------
  9634                              <2> ALIGN MENU_JUMP_ALIGN
  9635                              <2> MenuText_RefreshItemFromAX:
  9636 00000B58 51                  <2> 	push	cx
  9637 00000B59 50                  <2> 	push	ax
  9638                              <2> 
  9639 00000B5A 91                  <2> 	xchg	cx, ax
  9640 00000B5B E865FF              <2> 	call	MenuScrollbars_IsItemInCXonVisiblePage
  9641 00000B5E 730C                <2> 	jnc		SHORT .InvalidItem
  9642 00000B60 E80C00              <2> 	call	MenuText_AdjustDisplayContextForDrawingItemFromCX
  9643 00000B63 E82900              <2> 	call	ClearPreviousItem
  9644 00000B66 E861FD              <2> 	call	MenuEvent_RefreshItemFromCX
  9645 00000B69 E85000              <2> 	call	DrawScrollbarCharacterForItemInCXifNecessary
  9646                              <2> .InvalidItem:
  9647 00000B6C 58                  <2> 	pop		ax
  9648 00000B6D 59                  <2> 	pop		cx
  9649 00000B6E C3                  <2> 	ret
  9650                              <2> 
  9651                              <2> ;--------------------------------------------------------------------
  9652                              <2> ; MenuText_AdjustDisplayContextForDrawingItemFromCX
  9653                              <2> ;	Parameters
  9654                              <2> ;		CX:		Item to refresh
  9655                              <2> ;		SS:BP:	Ptr to MENU
  9656                              <2> ;	Returns:
  9657                              <2> ;		Nothing
  9658                              <2> ;	Corrupts registers:
  9659                              <2> ;		AX, BX, DX, SI, DI
  9660                              <2> ;--------------------------------------------------------------------
  9661                              <2> ALIGN MENU_JUMP_ALIGN
  9662                              <2> MenuText_AdjustDisplayContextForDrawingItemFromCX:
  9663 00000B6F 89C8                <2> 	mov		ax, cx
  9664 00000B71 E83600              <2> 	call	GetItemTextAttributeTypeToSIforItemInCX
  9665 00000B74 E8F7FD              <2> 	call	MenuLocation_GetTextCoordinatesToAXforItemInAX
  9666 00000B77 BA[9708]            <2> 	mov		dx, MenuCharOut_MenuTeletypeOutput
  9667                              <2> 	; Fall to AdjustDisplayContextForDrawingTextsAtCoordsInAXwithAttrTypeInSIandCharOutFunctionInDX
  9668                              <2> 
  9669                              <2> ;--------------------------------------------------------------------
  9670                              <2> ; AdjustDisplayContextForDrawingTextsAtCoordsInAXwithAttrTypeInSIandCharOutFunctionInDX
  9671                              <2> ;	Parameters
  9672                              <2> ;		AX:		Cursor coordinates to set
  9673                              <2> ;		DX:		Character output function
  9674                              <2> ;		SI:		Attribute type (from ATTRIBUTE_CHARS)
  9675                              <2> ;		SS:BP:	Ptr to MENU
  9676                              <2> ;	Returns:
  9677                              <2> ;		Nothing
  9678                              <2> ;	Corrupts registers:
  9679                              <2> ;		AX, BX, DX, SI, DI
  9680                              <2> ;--------------------------------------------------------------------
  9681                              <2> ALIGN MENU_JUMP_ALIGN
  9682                              <2> AdjustDisplayContextForDrawingTextsAtCoordsInAXwithAttrTypeInSIandCharOutFunctionInDX:
  9683                              <2> 	CALL_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
  9684                              <3>  %ifidn %1, PushDisplayContext
  9685                              <3>  call DisplayContext_Push
  9686                              <3>  %elifidn %1, PopDisplayContext
  9687                              <3>  call DisplayContext_Pop
  9688                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9689                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9690                              <3>  %else
  9691 00000B7A BF[C701]            <3>  mov di, %1
  9692 00000B7D E8EDF4              <3>  call Display_FunctionFromDI
  9693                              <3>  %endif
  9694                              <2> 
  9695 00000B80 92                  <2> 	xchg	ax, dx
  9696 00000B81 B301                <2> 	mov		bl, ATTRIBUTES_ARE_USED
  9697                              <2> 	CALL_DISPLAY_LIBRARY SetCharOutputFunctionFromAXwithAttribFlagInBL
  9698                              <3>  %ifidn %1, PushDisplayContext
  9699                              <3>  call DisplayContext_Push
  9700                              <3>  %elifidn %1, PopDisplayContext
  9701                              <3>  call DisplayContext_Pop
  9702                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9703                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9704                              <3>  %else
  9705 00000B83 BF[8901]            <3>  mov di, %1
  9706 00000B86 E8E4F4              <3>  call Display_FunctionFromDI
  9707                              <3>  %endif
  9708                              <2> 
  9709 00000B89 E816FB              <2> 	call	CharOutLineSplitter_PrepareForPrintingTextLines
  9710 00000B8C E97BFB              <2> 	jmp		MenuAttribute_SetToDisplayContextFromTypeInSI
  9711                              <2> 
  9712                              <2> 
  9713                              <2> ;--------------------------------------------------------------------
  9714                              <2> ; ClearPreviousItem
  9715                              <2> ;	Parameters
  9716                              <2> ;		SS:BP:	Ptr to MENU
  9717                              <2> ;	Returns:
  9718                              <2> ;		Nothing
  9719                              <2> ;	Corrupts registers:
  9720                              <2> ;		AX, BX, DX, DI
  9721                              <2> ;--------------------------------------------------------------------
  9722                              <2> ALIGN MENU_JUMP_ALIGN
  9723                              <2> ClearPreviousItem:
  9724                              <2> 	CALL_DISPLAY_LIBRARY GetSoftwareCoordinatesToAX
  9725                              <3>  %ifidn %1, PushDisplayContext
  9726                              <3>  call DisplayContext_Push
  9727                              <3>  %elifidn %1, PopDisplayContext
  9728                              <3>  call DisplayContext_Pop
  9729                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9730                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9731                              <3>  %else
  9732 00000B8F BF[DC01]            <3>  mov di, %1
  9733 00000B92 E8D8F4              <3>  call Display_FunctionFromDI
  9734                              <3>  %endif
  9735 00000B95 93                  <2> 	xchg	bx, ax
  9736                              <2> 
  9737 00000B96 E80DFC              <2> 	call	MenuBorders_GetNumberOfMiddleCharactersToDX
  9738 00000B99 83EA02              <2> 	sub		dx, BYTE MENU_TEXT_COLUMN_OFFSET
  9739 00000B9C 2EA0[8908]          <2> 	mov		al, [cs:g_rgbTextBorderCharacters+BORDER_CHARS.cMiddle]
  9740 00000BA0 E8ACFC              <2> 	call	MenuBorders_PrintMultipleBorderCharactersFromAL
  9741                              <2> 
  9742 00000BA3 93                  <2> 	xchg	ax, bx
  9743                              <2> 	JMP_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
  9744                              <3>  %ifidn %1, PushDisplayContext
  9745                              <3>  jmp DisplayContext_Push
  9746                              <3>  %elifidn %1, PopDisplayContext
  9747                              <3>  call DisplayContext_Pop
  9748                              <3>  ret
  9749                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9750                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9751                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
  9752                              <3>  mov di, %1
  9753                              <3>  call Display_FunctionFromDI
  9754                              <3>  ret
  9755                              <3>  %else
  9756 00000BA4 BF[C701]            <3>  mov di, %1
  9757 00000BA7 E9C3F4              <3>  jmp Display_FunctionFromDI
  9758                              <3>  %endif
  9759                              <2> 
  9760                              <2> 
  9761                              <2> ;--------------------------------------------------------------------
  9762                              <2> ; GetItemTextAttributeTypeToSIforItemInCX
  9763                              <2> ;	Parameters
  9764                              <2> ;		CX:		Item to refresh
  9765                              <2> ;		SS:BP:	Ptr to MENU
  9766                              <2> ;	Returns:
  9767                              <2> ;		SI:		Text attribute type (ATTRIBUTE_CHARS)
  9768                              <2> ;	Corrupts registers:
  9769                              <2> ;		Nothing
  9770                              <2> ;--------------------------------------------------------------------
  9771                              <2> ALIGN MENU_JUMP_ALIGN
  9772                              <2> GetItemTextAttributeTypeToSIforItemInCX:
  9773 00000BAA BE0300              <2> 	mov		si, ATTRIBUTE_CHARS.cItem
  9774 00000BAD F6460E02            <2> 	test	BYTE [bp+MENU.bFlags], FLG_MENU_NOHIGHLIGHT
  9775 00000BB1 7508                <2> 	jnz		SHORT .ReturnAttributeTypeInSI
  9776                              <2> 
  9777 00000BB3 3B4E02              <2> 	cmp		cx, [bp+MENUINIT.wHighlightedItem]
  9778 00000BB6 7503                <2> 	jne		SHORT .ReturnAttributeTypeInSI
  9779 00000BB8 83EEFF              <2> 	sub		si, BYTE ATTRIBUTE_CHARS.cItem - ATTRIBUTE_CHARS.cHighlightedItem
  9780                              <2> ALIGN MENU_JUMP_ALIGN, ret
  9781                              <2> .ReturnAttributeTypeInSI:
  9782 00000BBB C3                  <2> 	ret
  9783                              <2> 
  9784                              <2> 
  9785                              <2> ;--------------------------------------------------------------------
  9786                              <2> ; DrawScrollbarCharacterForItemInCXifNecessary
  9787                              <2> ;	Parameters
  9788                              <2> ;		CX:		Item to refresh
  9789                              <2> ;		SS:BP:	Ptr to MENU
  9790                              <2> ;	Returns:
  9791                              <2> ;		Nothing
  9792                              <2> ;	Corrupts registers:
  9793                              <2> ;		AX, CX, BX, DX, SI, DI
  9794                              <2> ;--------------------------------------------------------------------
  9795                              <2> ALIGN MENU_JUMP_ALIGN
  9796                              <2> DrawScrollbarCharacterForItemInCXifNecessary:
  9797 00000BBC E89FFE              <2> 	call	MenuScrollbars_AreScrollbarsNeeded
  9798 00000BBF 7201                <2> 	jc		SHORT .DrawScrollbarCharacter
  9799 00000BC1 C3                  <2> 	ret
  9800                              <2> 
  9801                              <2> ALIGN MENU_JUMP_ALIGN
  9802                              <2> .DrawScrollbarCharacter:
  9803 00000BC2 E8BEFB              <2> 	call	MenuBorders_AdjustDisplayContextForDrawingBorders
  9804 00000BC5 89C8                <2> 	mov		ax, cx
  9805                              <2> 
  9806 00000BC7 E8A4FD              <2> 	call	MenuLocation_GetTextCoordinatesToAXforItemInAX
  9807 00000BCA 024606              <2> 	add		al, [bp+MENUINIT.bWidth]
  9808 00000BCD 2C04                <2> 	sub		al, MENU_TEXT_COLUMN_OFFSET*2
  9809                              <2> 	CALL_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
  9810                              <3>  %ifidn %1, PushDisplayContext
  9811                              <3>  call DisplayContext_Push
  9812                              <3>  %elifidn %1, PopDisplayContext
  9813                              <3>  call DisplayContext_Pop
  9814                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
  9815                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
  9816                              <3>  %else
  9817 00000BCF BF[C701]            <3>  mov di, %1
  9818 00000BD2 E898F4              <3>  call Display_FunctionFromDI
  9819                              <3>  %endif
  9820                              <2> 
  9821 00000BD5 89CF                <2> 	mov		di, cx
  9822 00000BD7 2B7E12              <2> 	sub		di, [bp+MENU.wFirstVisibleItem]		; Item to line
  9823 00000BDA E88AFE              <2> 	call	MenuScrollbars_GetScrollCharacterToALForLineInDI
  9824 00000BDD E969FC              <2> 	jmp		MenuBorders_PrintSingleBorderCharacterFromAL
  9825                              <1> 	%include "MenuTime.asm"
  9826                              <2> ; Project name	:	Assembly Library
  9827                              <2> ; Description	:	Menu timeouts other time related functions.
  9828                              <2> 
  9829                              <2> ;
  9830                              <2> ; XTIDE Universal BIOS and Associated Tools
  9831                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
  9832                              <2> ;
  9833                              <2> ; This program is free software; you can redistribute it and/or modify
  9834                              <2> ; it under the terms of the GNU General Public License as published by
  9835                              <2> ; the Free Software Foundation; either version 2 of the License, or
  9836                              <2> ; (at your option) any later version.
  9837                              <2> ;
  9838                              <2> ; This program is distributed in the hope that it will be useful,
  9839                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
  9840                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  9841                              <2> ; GNU General Public License for more details.
  9842                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  9843                              <2> ;
  9844                              <2> 
  9845                              <2> 
  9846                              <2> ; Section containing code
  9847                              <2> SECTION .text
  9848                              <2> 
  9849                              <2> ;--------------------------------------------------------------------
  9850                              <2> ; MenuTime_StartSelectionTimeoutWithTicksInAX
  9851                              <2> ;	Parameters
  9852                              <2> ;		AX:		Timeout ticks
  9853                              <2> ;		SS:BP:	Ptr to MENU
  9854                              <2> ;	Returns:
  9855                              <2> ;		Nothing
  9856                              <2> ;	Corrupts registers:
  9857                              <2> ;		AX, BX
  9858                              <2> ;--------------------------------------------------------------------
  9859                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
  9860                              <2> ALIGN MENU_JUMP_ALIGN
  9861                              <2> MenuTime_StartSelectionTimeoutWithTicksInAX:
  9862                              <2> 	push	ds
  9863                              <2> 	call	PointDSBXtoTimeoutCounter
  9864                              <2> 	call	TimerTicks_InitializeTimeoutFromAX
  9865                              <2> 	or		BYTE [bp+MENU.bFlags], FLG_MENU_TIMEOUT_COUNTDOWN
  9866                              <2> 	pop		ds
  9867                              <2> 	ret
  9868                              <2> %endif
  9869                              <2> 
  9870                              <2> 
  9871                              <2> ;--------------------------------------------------------------------
  9872                              <2> ; MenuTime_StopSelectionTimeout
  9873                              <2> ;	Parameters
  9874                              <2> ;		SS:BP:	Ptr to MENU
  9875                              <2> ;	Returns:
  9876                              <2> ;		Nothing
  9877                              <2> ;	Corrupts registers:
  9878                              <2> ;		AX, BX, DX, SI, DI
  9879                              <2> ;--------------------------------------------------------------------
  9880                              <2> ALIGN MENU_JUMP_ALIGN
  9881                              <2> MenuTime_StopSelectionTimeout:
  9882 00000BE0 F6460E08            <2> 	test	BYTE [bp+MENU.bFlags], FLG_MENU_TIMEOUT_COUNTDOWN
  9883 00000BE4 7421                <2> 	jz		SHORT TimeoutAlreadyStopped
  9884 00000BE6 80660EF7            <2> 	and		BYTE [bp+MENU.bFlags], ~FLG_MENU_TIMEOUT_COUNTDOWN
  9885 00000BEA E974FB              <2> 	jmp		MenuBorders_RedrawBottomBorderLine
  9886                              <2> 
  9887                              <2> 
  9888                              <2> ;--------------------------------------------------------------------
  9889                              <2> ; MenuTime_UpdateSelectionTimeout
  9890                              <2> ;	Parameters
  9891                              <2> ;		SS:BP:	Ptr to MENU
  9892                              <2> ;	Returns:
  9893                              <2> ;		CF:		Set if timeout
  9894                              <2> ;				Cleared if time left
  9895                              <2> ;	Corrupts registers:
  9896                              <2> ;		AX, BX, SI, DI
  9897                              <2> ;--------------------------------------------------------------------
  9898                              <2> ALIGN MENU_JUMP_ALIGN
  9899                              <2> MenuTime_UpdateSelectionTimeout:
  9900 00000BED F6460E08            <2> 	test	BYTE [bp+MENU.bFlags], FLG_MENU_TIMEOUT_COUNTDOWN
  9901 00000BF1 7414                <2> 	jz		SHORT .ReturnSinceTimeoutDisabled
  9902                              <2> 
  9903 00000BF3 1E                  <2> 	push	ds
  9904 00000BF4 E82900              <2> 	call	PointDSBXtoTimeoutCounter
  9905 00000BF7 E80709              <2> 	call	TimerTicks_GetTimeoutTicksLeftToAXfromDSBX
  9906 00000BFA 1F                  <2> 	pop		ds
  9907 00000BFB 7306                <2> 	jnc		SHORT .RedrawSinceNoTimeout
  9908 00000BFD 80660EF7            <2> 	and		BYTE [bp+MENU.bFlags], ~FLG_MENU_TIMEOUT_COUNTDOWN
  9909 00000C01 F9                  <2> 	stc
  9910 00000C02 C3                  <2> 	ret
  9911                              <2> 
  9912                              <2> ALIGN MENU_JUMP_ALIGN
  9913                              <2> .RedrawSinceNoTimeout:
  9914 00000C03 E85BFB              <2> 	call	MenuBorders_RedrawBottomBorderLine
  9915 00000C06 F8                  <2> 	clc
  9916                              <2> .ReturnSinceTimeoutDisabled:
  9917                              <2> TimeoutAlreadyStopped:
  9918 00000C07 C3                  <2> 	ret
  9919                              <2> 
  9920                              <2> 
  9921                              <2> ;--------------------------------------------------------------------
  9922                              <2> ; MenuTime_GetTimeoutSecondsLeftToAX
  9923                              <2> ;	Parameters
  9924                              <2> ;		SS:BP:	Ptr to MENU
  9925                              <2> ;	Returns:
  9926                              <2> ;		AX:		Seconds until timeout
  9927                              <2> ;	Corrupts registers:
  9928                              <2> ;		Nothing
  9929                              <2> ;--------------------------------------------------------------------
  9930                              <2> ALIGN MENU_JUMP_ALIGN
  9931                              <2> MenuTime_GetTimeoutSecondsLeftToAX:
  9932 00000C08 1E                  <2> 	push	ds
  9933 00000C09 52                  <2> 	push	dx
  9934 00000C0A 51                  <2> 	push	cx
  9935 00000C0B 53                  <2> 	push	bx
  9936                              <2> 
  9937 00000C0C E81100              <2> 	call	PointDSBXtoTimeoutCounter
  9938 00000C0F E8EF08              <2> 	call	TimerTicks_GetTimeoutTicksLeftToAXfromDSBX
  9939 00000C12 7205                <2> 	jc		SHORT .TimeoutHasOccurredSoMakeSureTicksAreNotBelowZero
  9940                              <2> 
  9941 00000C14 92                  <2> 	xchg	dx, ax
  9942 00000C15 E8DA08              <2> 	call	TimerTicks_GetSecondsToAXfromTicksInDX
  9943                              <2> 	SKIP2B	dx
  9944                              <3>  %ifidni %1, f
  9945                              <3>  db 03Dh
  9946                              <3> 
  9947                              <3>  %elifidni %1, ax
  9948                              <3>  db 0B8h
  9949                              <3>  %elifidni %1, cx
  9950                              <3>  db 0B9h
  9951                              <3>  %elifidni %1, dx
  9952 00000C18 BA                  <3>  db 0BAh
  9953                              <3>  %elifidni %1, bx
  9954                              <3>  db 0BBh
  9955                              <3>  %elifidni %1, sp
  9956                              <3>  db 0BCh
  9957                              <3>  %elifidni %1, bp
  9958                              <3>  db 0BDh
  9959                              <3>  %elifidni %1, si
  9960                              <3>  db 0BEh
  9961                              <3>  %elifidni %1, di
  9962                              <3>  db 0BFh
  9963                              <3>  %else
  9964                              <3>  %error "Invalid parameter passed to SKIP2B"
  9965                              <3>  %endif
  9966                              <2> .TimeoutHasOccurredSoMakeSureTicksAreNotBelowZero:
  9967 00000C19 31C0                <2> 	xor		ax, ax
  9968                              <2> 
  9969 00000C1B 5B                  <2> 	pop		bx
  9970 00000C1C 59                  <2> 	pop		cx
  9971 00000C1D 5A                  <2> 	pop		dx
  9972 00000C1E 1F                  <2> 	pop		ds
  9973 00000C1F C3                  <2> 	ret
  9974                              <2> 
  9975                              <2> 
  9976                              <2> ;--------------------------------------------------------------------
  9977                              <2> ; PointDSBXtoTimeoutCounter
  9978                              <2> ;	Parameters
  9979                              <2> ;		SS:BP:	Ptr to MENU
  9980                              <2> ;	Returns:
  9981                              <2> ;		DS:BX:	Ptr to timeout counter
  9982                              <2> ;	Corrupts registers:
  9983                              <2> ;		Nothing
  9984                              <2> ;--------------------------------------------------------------------
  9985                              <2> ALIGN MENU_JUMP_ALIGN
  9986                              <2> PointDSBXtoTimeoutCounter:
  9987 00000C20 16                  <2> 	push	ss
  9988 00000C21 1F                  <2> 	pop		ds
  9989 00000C22 8D5E10              <2> 	lea		bx, [bp+MENU.wTimeoutCounter]
  9990 00000C25 C3                  <2> 	ret
  9991                              <1> 
  9992                              <1> 	%ifdef INCLUDE_MENU_DIALOGS
  9993                              <1> 		%include "Dialog.asm"
  9994                              <2> ; Project name	:	Assembly Library
  9995                              <2> ; Description	:	Common functions for many dialogs.
  9996                              <2> 
  9997                              <2> ;
  9998                              <2> ; XTIDE Universal BIOS and Associated Tools
  9999                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 10000                              <2> ;
 10001                              <2> ; This program is free software; you can redistribute it and/or modify
 10002                              <2> ; it under the terms of the GNU General Public License as published by
 10003                              <2> ; the Free Software Foundation; either version 2 of the License, or
 10004                              <2> ; (at your option) any later version.
 10005                              <2> ;
 10006                              <2> ; This program is distributed in the hope that it will be useful,
 10007                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 10008                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 10009                              <2> ; GNU General Public License for more details.
 10010                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 10011                              <2> ;
 10012                              <2> 
 10013                              <2> 
 10014                              <2> ; Section containing code
 10015                              <2> SECTION .text
 10016                              <2> 
 10017                              <2> ;--------------------------------------------------------------------
 10018                              <2> ; Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 10019                              <2> ;	Parameters:
 10020                              <2> ;		BX:		Offset to menu event handler
 10021                              <2> ;		DX:AX:	Optional user data
 10022                              <2> ;		DS:SI:	Ptr to DIALOG_INPUT
 10023                              <2> ;		SS:BP:	Ptr to parent MENU
 10024                              <2> ;	Returns:
 10025                              <2> ;		AX:		Selected item
 10026                              <2> ;	Corrupts registers:
 10027                              <2> ;		BX, CX, DX, SI, DI
 10028                              <2> ;--------------------------------------------------------------------
 10029                              <2> ALIGN JUMP_ALIGN
 10030                              <2> Dialog_DisplayWithDialogInputInDSSIandHandlerInBX:
 10031 00000C26 06                  <2> 	push	es
 10032 00000C27 1E                  <2> 	push	ds
 10033 00000C28 89EF                <2> 	mov		di, bp								; Backup parent MENU
 10034 00000C2A B91A00              <2> 	mov		cx, DIALOG_size
 10035                              <2> 	eENTER_STRUCT cx
 10036 00000C2D 55                  <3>  push bp
 10037 00000C2E 29CC                <3>  sub sp, %1
 10038 00000C30 89E5                <3>  mov bp, sp
 10039                              <2> 
 10040 00000C32 E87009              <2> 	call	Memory_ZeroSSBPwithSizeInCX
 10041 00000C35 897614              <2> 	mov		[bp+DIALOG.fpDialogIO], si
 10042 00000C38 8C5E16              <2> 	mov		[bp+DIALOG.fpDialogIO+2], ds
 10043 00000C3B 897E18              <2> 	mov		[bp+DIALOG.pParentMenu], di
 10044                              <2> 
 10045 00000C3E E8DAFC              <2> 	call	MenuInit_EnterMenuWithHandlerInBXandUserDataInDXAX
 10046 00000C41 E8AE00              <2> 	call	Dialog_RemoveFromScreenByRedrawingParentMenu
 10047 00000C44 E844FA              <2> 	call	Keyboard_RemoveAllKeystrokesFromBuffer
 10048                              <2> 
 10049 00000C47 8B4602              <2> 	mov		ax, [bp+MENUINIT.wHighlightedItem]
 10050                              <2> 	eLEAVE_STRUCT DIALOG_size
 10051 00000C4A 83C41A              <3>  add sp, %1
 10052 00000C4D 5D                  <3>  pop bp
 10053 00000C4E 1F                  <2> 	pop		ds
 10054 00000C4F 07                  <2> 	pop		es
 10055 00000C50 C3                  <2> 	ret
 10056                              <2> 
 10057                              <2> 
 10058                              <2> ;--------------------------------------------------------------------
 10059                              <2> ; Dialog_EventNotHandled
 10060                              <2> ;	Parameters:
 10061                              <2> ;		BX:		Menu event (anything from MENUEVENT struct)
 10062                              <2> ;		SS:BP:	Ptr to DIALOG
 10063                              <2> ;	Returns:
 10064                              <2> ;		CF:		Cleared since event not processed
 10065                              <2> ;	Corrupts registers:
 10066                              <2> ;		Nothing
 10067                              <2> ;--------------------------------------------------------------------
 10068                              <2> ALIGN JUMP_ALIGN
 10069                              <2> Dialog_EventNotHandled:
 10070 00000C51 F8                  <2> 	clc
 10071 00000C52 C3                  <2> 	ret
 10072                              <2> 
 10073                              <2> 
 10074                              <2> ;--------------------------------------------------------------------
 10075                              <2> ; Dialog_EventAnyThatClosesDialog
 10076                              <2> ; Dialog_EventExitMenu
 10077                              <2> ;	Parameters:
 10078                              <2> ;		SS:BP:	Ptr to DIALOG
 10079                              <2> ;	Returns:
 10080                              <2> ;		CF:		Set since event processed
 10081                              <2> ;	Corrupts registers:
 10082                              <2> ;		Nothing
 10083                              <2> ;--------------------------------------------------------------------
 10084                              <2> ALIGN JUMP_ALIGN
 10085                              <2> Dialog_EventAnyThatClosesDialog:
 10086 00000C53 E8F2FC              <2> 	call	MenuInit_CloseMenuWindow
 10087                              <2> ALIGN JUMP_ALIGN
 10088                              <2> Dialog_EventExitMenu:
 10089 00000C56 F9                  <2> 	stc
 10090 00000C57 C3                  <2> 	ret
 10091                              <2> 
 10092                              <2> 
 10093                              <2> ;--------------------------------------------------------------------
 10094                              <2> ; Dialog_EventInitializeMenuinitFromDSSIforSingleItemWithHighlightedItemInAX
 10095                              <2> ;	Parameters:
 10096                              <2> ;		AX:			Index of highlighted item
 10097                              <2> ;		DS:SI:		Ptr to MENUINIT struct to initialize
 10098                              <2> ;		SS:BP:		Ptr to DIALOG
 10099                              <2> ;	Returns:
 10100                              <2> ;		DS:SI:		Ptr to initialized MENUINIT struct
 10101                              <2> ;		CF:			Set since event processed
 10102                              <2> ;--------------------------------------------------------------------
 10103                              <2> ALIGN JUMP_ALIGN
 10104                              <2> Dialog_EventInitializeMenuinitFromDSSIforSingleItemWithHighlightedItemInAX:
 10105 00000C58 C47E14              <2> 	les		di, [bp+DIALOG.fpDialogIO]
 10106 00000C5B 26C74504[0814]      <2> 	mov		WORD [es:di+DIALOG_INPUT.fszItems], g_szSingleItem
 10107 00000C61 268C4D06            <2> 	mov		[es:di+DIALOG_INPUT.fszItems+2], cs
 10108                              <2> 	; Fall to Dialog_EventInitializeMenuinitFromDSSIwithHighlightedItemInAX
 10109                              <2> 
 10110                              <2> ;--------------------------------------------------------------------
 10111                              <2> ; Dialog_EventInitializeMenuinitFromDSSIwithHighlightedItemInAX
 10112                              <2> ;	Parameters:
 10113                              <2> ;		AX:			Index of highlighted item
 10114                              <2> ;		DS:SI:		Ptr to MENUINIT struct to initialize
 10115                              <2> ;		SS:BP:		Ptr to DIALOG
 10116                              <2> ;	Returns:
 10117                              <2> ;		DS:SI:		Ptr to initialized MENUINIT struct
 10118                              <2> ;		CF:			Set since event processed
 10119                              <2> ;--------------------------------------------------------------------
 10120                              <2> ALIGN JUMP_ALIGN
 10121                              <2> Dialog_EventInitializeMenuinitFromDSSIwithHighlightedItemInAX:
 10122 00000C65 894602              <2> 	mov		[bp+MENUINIT.wHighlightedItem], ax
 10123 00000C68 C47E14              <2> 	les		di, [bp+DIALOG.fpDialogIO]
 10124 00000C6B E82800              <2> 	call	.GetWidthBasedOnParentMenuToAL
 10125 00000C6E 884606              <2> 	mov		[bp+MENUINIT.bWidth], al
 10126                              <2> 
 10127 00000C71 26C535              <2> 	lds		si, [es:di+DIALOG_INPUT.fszTitle]
 10128 00000C74 E81106              <2> 	call	ItemLineSplitter_GetLinesToAXforStringInDSSI
 10129 00000C77 884604              <2> 	mov		[bp+MENUINIT.bTitleLines], al
 10130                              <2> 
 10131 00000C7A 26C57504            <2> 	lds		si, [es:di+DIALOG_INPUT.fszItems]
 10132 00000C7E E80706              <2> 	call	ItemLineSplitter_GetLinesToAXforStringInDSSI
 10133 00000C81 894600              <2> 	mov		[bp+MENUINIT.wItems], ax
 10134                              <2> 
 10135 00000C84 26C57508            <2> 	lds		si, [es:di+DIALOG_INPUT.fszInfo]
 10136 00000C88 E8FD05              <2> 	call	ItemLineSplitter_GetLinesToAXforStringInDSSI
 10137 00000C8B 884605              <2> 	mov		[bp+MENUINIT.bInfoLines], al
 10138                              <2> 
 10139 00000C8E E81500              <2> 	call	.GetHeightToAH				; Line counts are required
 10140 00000C91 886607              <2> 	mov		[bp+MENUINIT.bHeight], ah
 10141 00000C94 F9                  <2> 	stc
 10142 00000C95 C3                  <2> 	ret
 10143                              <2> 
 10144                              <2> 
 10145                              <2> ;--------------------------------------------------------------------
 10146                              <2> ; .GetWidthBasedOnParentMenuToAL
 10147                              <2> ;	Parameters:
 10148                              <2> ;		SS:BP:	Ptr to DIALOG
 10149                              <2> ;	Returns:
 10150                              <2> ;		AX:		Width for dialog
 10151                              <2> ;	Corrupts registers:
 10152                              <2> ;		BX
 10153                              <2> ;--------------------------------------------------------------------
 10154                              <2> ALIGN JUMP_ALIGN
 10155                              <2> .GetWidthBasedOnParentMenuToAL:
 10156 00000C96 8B5E18              <2> 	mov		bx, [bp+DIALOG.pParentMenu]
 10157 00000C99 368A4706            <2> 	mov		al, [ss:bx+MENUINIT.bWidth]
 10158 00000C9D 2C05                <2> 	sub		al, DIALOG_DELTA_WIDTH_FROM_PARENT
 10159 00000C9F 3C3C                <2> 	cmp		al, DIALOG_MAX_WIDTH
 10160 00000CA1 7202                <2> 	jb		.ALlessThanDIALOG_MAX_WIDTH
 10161 00000CA3 B03C                <2> 	mov		al, DIALOG_MAX_WIDTH
 10162                              <2> ALIGN JUMP_ALIGN, ret
 10163                              <2> .ALlessThanDIALOG_MAX_WIDTH:
 10164 00000CA5 C3                  <2> 	ret
 10165                              <2> 
 10166                              <2> 
 10167                              <2> ;--------------------------------------------------------------------
 10168                              <2> ; .GetHeightToAH
 10169                              <2> ;	Parameters:
 10170                              <2> ;		SS:BP:	Ptr to DIALOG
 10171                              <2> ;	Returns:
 10172                              <2> ;		AH:		Height for dialog
 10173                              <2> ;	Corrupts registers:
 10174                              <2> ;		AL, BX, DI
 10175                              <2> ;--------------------------------------------------------------------
 10176                              <2> ALIGN JUMP_ALIGN
 10177                              <2> .GetHeightToAH:
 10178                              <2> 	CALL_DISPLAY_LIBRARY GetColumnsToALandRowsToAH
 10179                              <3>  %ifidn %1, PushDisplayContext
 10180                              <3>  call DisplayContext_Push
 10181                              <3>  %elifidn %1, PopDisplayContext
 10182                              <3>  call DisplayContext_Pop
 10183                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10184                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10185                              <3>  %else
 10186 00000CA6 BF[1F02]            <3>  mov di, %1
 10187 00000CA9 E8C1F3              <3>  call Display_FunctionFromDI
 10188                              <3>  %endif
 10189 00000CAC 93                  <2> 	xchg	bx, ax
 10190 00000CAD 8A6604              <2> 	mov		ah, [bp+MENUINIT.bTitleLines]
 10191 00000CB0 026600              <2> 	add		ah, [bp+MENUINIT.wItems]
 10192 00000CB3 026605              <2> 	add		ah, [bp+MENUINIT.bInfoLines]
 10193 00000CB6 80C405              <2> 	add		ah, BYTE MENU_VERTICAL_BORDER_LINES
 10194 00000CB9 38FC                <2> 	cmp		ah, bh
 10195 00000CBB 7201                <2> 	jb		.AHlessThanBH
 10196 00000CBD 93                  <2> 	xchg	bx, ax
 10197                              <2> ALIGN JUMP_ALIGN
 10198                              <2> .AHlessThanBH:
 10199 00000CBE 80FC19              <2> 	cmp		ah, DIALOG_MAX_HEIGHT
 10200 00000CC1 7202                <2> 	jb		.AHlessThanDIALOG_MAX_HEIGHT
 10201 00000CC3 B419                <2> 	mov		ah, DIALOG_MAX_HEIGHT
 10202                              <2> ALIGN JUMP_ALIGN, ret
 10203                              <2> .AHlessThanDIALOG_MAX_HEIGHT:
 10204 00000CC5 C3                  <2> 	ret
 10205                              <2> 
 10206                              <2> 
 10207                              <2> ;--------------------------------------------------------------------
 10208                              <2> ; Dialog_EventRefreshTitle
 10209                              <2> ; Dialog_EventRefreshInformation
 10210                              <2> ;	Parameters:
 10211                              <2> ;		SS:BP:		Ptr to DIALOG
 10212                              <2> ;	Returns:
 10213                              <2> ;		CF:			Set since event processed
 10214                              <2> ;--------------------------------------------------------------------
 10215                              <2> ALIGN JUMP_ALIGN
 10216                              <2> Dialog_EventRefreshTitle:
 10217 00000CC6 C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 10218 00000CC9 C534                <2> 	lds		si, [si+DIALOG_INPUT.fszTitle]
 10219 00000CCB EB06                <2> 	jmp		SHORT PrintTitleOrInfoLine
 10220                              <2> 
 10221                              <2> ALIGN JUMP_ALIGN
 10222                              <2> Dialog_EventRefreshInformation:
 10223 00000CCD C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 10224 00000CD0 C57408              <2> 	lds		si, [si+DIALOG_INPUT.fszInfo]
 10225                              <2> 	; Fall to PrintTitleOrInfoLine
 10226                              <2> 
 10227                              <2> ALIGN JUMP_ALIGN
 10228                              <2> PrintTitleOrInfoLine:
 10229 00000CD3 8CDB                <2> 	mov		bx, ds
 10230                              <2> 	CALL_DISPLAY_LIBRARY PrintNullTerminatedStringFromBXSI
 10231                              <3>  %ifidn %1, PushDisplayContext
 10232                              <3>  call DisplayContext_Push
 10233                              <3>  %elifidn %1, PopDisplayContext
 10234                              <3>  call DisplayContext_Pop
 10235                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10236                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10237                              <3>  %else
 10238 00000CD5 BF[FA02]            <3>  mov di, %1
 10239 00000CD8 E892F3              <3>  call Display_FunctionFromDI
 10240                              <3>  %endif
 10241 00000CDB F9                  <2> 	stc
 10242 00000CDC C3                  <2> 	ret
 10243                              <2> 
 10244                              <2> 
 10245                              <2> ;--------------------------------------------------------------------
 10246                              <2> ; Dialog_EventRefreshItemFromCX
 10247                              <2> ;	Parameters:
 10248                              <2> ;		CX:			Item to refresh
 10249                              <2> ;		SS:BP:		Ptr to DIALOG
 10250                              <2> ;	Returns:
 10251                              <2> ;		CF:			Set since event processed
 10252                              <2> ;--------------------------------------------------------------------
 10253                              <2> ALIGN JUMP_ALIGN
 10254                              <2> Dialog_EventRefreshItemFromCX:
 10255 00000CDD C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 10256 00000CE0 C57404              <2> 	lds		si, [si+DIALOG_INPUT.fszItems]
 10257 00000CE3 E8C705              <2> 	call	ItemLineSplitter_GetLineToDSSIandLengthToCXfromStringInDSSIwithIndexInCX
 10258 00000CE6 7308                <2> 	jnc		SHORT .LineNotFound
 10259                              <2> 
 10260 00000CE8 8CDB                <2> 	mov		bx, ds
 10261                              <2> 	CALL_DISPLAY_LIBRARY PrintCharBufferFromBXSIwithLengthInCX
 10262                              <3>  %ifidn %1, PushDisplayContext
 10263                              <3>  call DisplayContext_Push
 10264                              <3>  %elifidn %1, PopDisplayContext
 10265                              <3>  call DisplayContext_Pop
 10266                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10267                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10268                              <3>  %else
 10269 00000CEA BF[8802]            <3>  mov di, %1
 10270 00000CED E87DF3              <3>  call Display_FunctionFromDI
 10271                              <3>  %endif
 10272                              <2> .LineNotFound:
 10273 00000CF0 F9                  <2> 	stc
 10274 00000CF1 C3                  <2> 	ret
 10275                              <2> 
 10276                              <2> 
 10277                              <2> ;--------------------------------------------------------------------
 10278                              <2> ; Dialog_RemoveFromScreenByRedrawingParentMenu
 10279                              <2> ;	Parameters:
 10280                              <2> ;		SS:BP:	Ptr to DIALOG
 10281                              <2> ;	Returns:
 10282                              <2> ;		Nothing
 10283                              <2> ;	Corrupts:
 10284                              <2> ;		AX, BX, CX, DX, SI, DI
 10285                              <2> ;--------------------------------------------------------------------
 10286                              <2> ALIGN JUMP_ALIGN
 10287                              <2> Dialog_RemoveFromScreenByRedrawingParentMenu:
 10288 00000CF2 8B7618              <2> 	mov		si, [bp+DIALOG.pParentMenu]	; SS:SI points to parent MENU
 10289 00000CF5 E82500              <2> 	call	.GetParentTitleBorderCoordinatesToDX
 10290 00000CF8 E884FC              <2> 	call	MenuLocation_GetTitleBordersTopLeftCoordinatesToAX
 10291 00000CFB 38F4                <2> 	cmp		ah, dh		; Dialog taller than parent?
 10292 00000CFD 7316                <2> 	jnb		SHORT .RedrawWholeParentWindow
 10293                              <2> 	; Fall to .RedrawDialogAreaAndWholeParentWindow
 10294                              <2> 
 10295                              <2> ;--------------------------------------------------------------------
 10296                              <2> ; .RedrawDialogAreaAndWholeParentWindow
 10297                              <2> ; .RedrawWholeParentWindow
 10298                              <2> ;	Parameters:
 10299                              <2> ;		SS:SI:	Ptr to parent MENU
 10300                              <2> ;		SS:BP:	Ptr to DIALOG
 10301                              <2> ;	Returns:
 10302                              <2> ;		Nothing
 10303                              <2> ;	Corrupts:
 10304                              <2> ;		AX, BX, CX, DX, SI, DI
 10305                              <2> ;--------------------------------------------------------------------
 10306                              <2> .RedrawDialogAreaAndWholeParentWindow:
 10307 00000CFF 56                  <2> 	push	si
 10308 00000D00 E880FA              <2> 	call	MenuBorders_AdjustDisplayContextForDrawingBorders
 10309 00000D03 5E                  <2> 	pop		si
 10310 00000D04 B007                <2> 	mov		al, SCREEN_BACKGROUND_ATTRIBUTE
 10311                              <2> 	CALL_DISPLAY_LIBRARY SetCharacterAttributeFromAL
 10312                              <3>  %ifidn %1, PushDisplayContext
 10313                              <3>  call DisplayContext_Push
 10314                              <3>  %elifidn %1, PopDisplayContext
 10315                              <3>  call DisplayContext_Pop
 10316                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10317                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10318                              <3>  %else
 10319 00000D06 BF[9901]            <3>  mov di, %1
 10320 00000D09 E861F3              <3>  call Display_FunctionFromDI
 10321                              <3>  %endif
 10322 00000D0C 8B4606              <2> 	mov		ax, [bp+MENUINIT.wWidthAndHeight]
 10323                              <2> 	CALL_DISPLAY_LIBRARY ClearAreaWithHeightInAHandWidthInAL
 10324                              <3>  %ifidn %1, PushDisplayContext
 10325                              <3>  call DisplayContext_Push
 10326                              <3>  %elifidn %1, PopDisplayContext
 10327                              <3>  call DisplayContext_Pop
 10328                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10329                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10330                              <3>  %else
 10331 00000D0F BF[B202]            <3>  mov di, %1
 10332 00000D12 E858F3              <3>  call Display_FunctionFromDI
 10333                              <3>  %endif
 10334                              <2> 	; Fall to .RedrawWholeParentWindow
 10335                              <2> 
 10336                              <2> ALIGN JUMP_ALIGN
 10337                              <2> .RedrawWholeParentWindow:
 10338 00000D15 55                  <2> 	push	bp
 10339 00000D16 89F5                <2> 	mov		bp, si
 10340 00000D18 E81BFC              <2> 	call	MenuInit_RefreshMenuWindow
 10341 00000D1B 5D                  <2> 	pop		bp
 10342 00000D1C C3                  <2> 	ret
 10343                              <2> 
 10344                              <2> ;--------------------------------------------------------------------
 10345                              <2> ; .GetParentTitleBorderCoordinatesToDX
 10346                              <2> ;	Parameters:
 10347                              <2> ;		SS:SI:	Ptr to parent MENU
 10348                              <2> ;		SS:BP:	Ptr to DIALOG
 10349                              <2> ;	Returns:
 10350                              <2> ;		DL:		Parent border column (X)
 10351                              <2> ;		DH:		Parent border row (Y)
 10352                              <2> ;	Corrupts:
 10353                              <2> ;		AX
 10354                              <2> ;--------------------------------------------------------------------
 10355                              <2> ALIGN JUMP_ALIGN
 10356                              <2> .GetParentTitleBorderCoordinatesToDX:
 10357 00000D1D 87F5                <2> 	xchg	si, bp
 10358 00000D1F E85DFC              <2> 	call	MenuLocation_GetTitleBordersTopLeftCoordinatesToAX
 10359 00000D22 87EE                <2> 	xchg	bp, si
 10360 00000D24 92                  <2> 	xchg	dx, ax
 10361 00000D25 C3                  <2> 	ret
 10362                              <1> 		%include "DialogDrive.asm"
 10363                              <2> ; Project name	:	Assembly Library
 10364                              <2> ; Description	:	Displays drive dialog.
 10365                              <2> 
 10366                              <2> ;
 10367                              <2> ; XTIDE Universal BIOS and Associated Tools
 10368                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 10369                              <2> ;
 10370                              <2> ; This program is free software; you can redistribute it and/or modify
 10371                              <2> ; it under the terms of the GNU General Public License as published by
 10372                              <2> ; the Free Software Foundation; either version 2 of the License, or
 10373                              <2> ; (at your option) any later version.
 10374                              <2> ;
 10375                              <2> ; This program is distributed in the hope that it will be useful,
 10376                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 10377                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 10378                              <2> ; GNU General Public License for more details.
 10379                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 10380                              <2> ;
 10381                              <2> 
 10382                              <2> ; Section containing code
 10383                              <2> SECTION .text
 10384                              <2> 
 10385                              <2> ;--------------------------------------------------------------------
 10386                              <2> ; DialogDrive_GetDriveWithIoInDSSI
 10387                              <2> ;	Parameters:
 10388                              <2> ;		DS:SI:	Ptr to DRIVE_DIALOG_IO
 10389                              <2> ;		SS:BP:	Ptr to parent MENU
 10390                              <2> ;	Returns:
 10391                              <2> ;		Nothing
 10392                              <2> ;	Corrupts registers:
 10393                              <2> ;		AX, BX, CX, DX, SI, DI
 10394                              <2> ;--------------------------------------------------------------------
 10395                              <2> ALIGN JUMP_ALIGN
 10396                              <2> DialogDrive_GetDriveWithIoInDSSI:
 10397 00000D26 BB[300D]            <2> 	mov		bx, DriveEventHandler
 10398 00000D29 C6440C01            <2> 	mov		BYTE [si+DRIVE_DIALOG_IO.bUserCancellation], TRUE
 10399 00000D2D E9F6FE              <2> 	jmp		Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 10400                              <2> 
 10401                              <2> 
 10402                              <2> ;--------------------------------------------------------------------
 10403                              <2> ; DriveEventHandler
 10404                              <2> ;	Common parameters for all events:
 10405                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
 10406                              <2> ;		SS:BP:		Ptr to DIALOG
 10407                              <2> ;	Common return values for all events:
 10408                              <2> ;		CF:			Set if event processed
 10409                              <2> ;					Cleared if event not processed
 10410                              <2> ;	Corrupts registers:
 10411                              <2> ;		All
 10412                              <2> ;--------------------------------------------------------------------
 10413                              <2> ALIGN JUMP_ALIGN
 10414                              <2> DriveEventHandler:
 10415 00000D30 2EFFA7[860D]        <2> 	jmp		[cs:bx+.rgfnEventHandlers]
 10416                              <2> 
 10417                              <2> 
 10418                              <2> ALIGN JUMP_ALIGN
 10419                              <2> .InitializeMenuinitFromDSSI:
 10420 00000D35 31C0                <2> 	xor		ax, ax
 10421 00000D37 E81EFF              <2> 	call	Dialog_EventInitializeMenuinitFromDSSIforSingleItemWithHighlightedItemInAX
 10422 00000D3A E8AAF7              <2> 	call	Drive_GetFlagsForAvailableDrivesToDXAX
 10423 00000D3D 89460A              <2> 	mov		[bp+MENU.dwUserData], ax
 10424 00000D40 89560C              <2> 	mov		[bp+MENU.dwUserData+2], dx
 10425                              <2> 
 10426 00000D43 E8DF07              <2> 	call	Bit_GetSetCountToCXfromDXAX
 10427 00000D46 894E00              <2> 	mov		[bp+MENUINIT.wItems], cx
 10428                              <2> 
 10429 00000D49 49                  <2> 	dec		cx			; Items initialized to one. Ignore it.
 10430 00000D4A 024E07              <2> 	add		cl, [bp+MENUINIT.bHeight]
 10431                              <2> 	CALL_DISPLAY_LIBRARY GetColumnsToALandRowsToAH
 10432                              <3>  %ifidn %1, PushDisplayContext
 10433                              <3>  call DisplayContext_Push
 10434                              <3>  %elifidn %1, PopDisplayContext
 10435                              <3>  call DisplayContext_Pop
 10436                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10437                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10438                              <3>  %else
 10439 00000D4D BF[1F02]            <3>  mov di, %1
 10440 00000D50 E81AF3              <3>  call Display_FunctionFromDI
 10441                              <3>  %endif
 10442                              <2> 	MIN_U	cl, ah
 10443 00000D53 38E1                <3>  cmp %1, %2
 10444 00000D55 7202                <3>  jb %%Return
 10445 00000D57 88E1                <3>  mov %1, %2
 10446                              <3> ALIGN JUMP_ALIGN
 10447                              <3> %%Return:
 10448 00000D59 884E07              <2> 	mov		[bp+MENUINIT.bHeight], cl
 10449 00000D5C C3                  <2> 	ret
 10450                              <2> 
 10451                              <2> 
 10452                              <2> ALIGN JUMP_ALIGN
 10453                              <2> .ItemSelectedFromCX:
 10454 00000D5D E83800              <2> 	call	ConvertDriveLetterToBLfromItemIndexInCX
 10455 00000D60 C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 10456 00000D63 C6440C00            <2> 	mov		BYTE [si+DRIVE_DIALOG_IO.bUserCancellation], FALSE
 10457 00000D67 885C0E              <2> 	mov		[si+DRIVE_DIALOG_IO.cReturnDriveLetter], bl
 10458 00000D6A 80EB41              <2> 	sub		bl, 'A'
 10459 00000D6D 885C0F              <2> 	mov		[si+DRIVE_DIALOG_IO.bReturnDriveNumber], bl
 10460 00000D70 E9D5FB              <2> 	jmp		MenuInit_CloseMenuWindow
 10461                              <2> 
 10462                              <2> 
 10463                              <2> ALIGN JUMP_ALIGN
 10464                              <2> .RefreshItemFromCX:
 10465 00000D73 55                  <2> 	push	bp
 10466                              <2> 
 10467 00000D74 E82100              <2> 	call	ConvertDriveLetterToBLfromItemIndexInCX
 10468 00000D77 89E5                <2> 	mov		bp, sp
 10469 00000D79 53                  <2> 	push	bx
 10470 00000D7A BE[3F13]            <2> 	mov		si, g_szDriveFormat
 10471                              <2> 	CALL_DISPLAY_LIBRARY FormatNullTerminatedStringFromCSSI
 10472                              <3>  %ifidn %1, PushDisplayContext
 10473                              <3>  call DisplayContext_Push
 10474                              <3>  %elifidn %1, PopDisplayContext
 10475                              <3>  call DisplayContext_Pop
 10476                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10477                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10478                              <3>  %else
 10479 00000D7D BF[8500]            <3>  mov di, %1
 10480 00000D80 E8EAF2              <3>  call Display_FunctionFromDI
 10481                              <3>  %endif
 10482                              <2> 
 10483 00000D83 5D                  <2> 	pop		bp
 10484 00000D84 F9                  <2> 	stc
 10485 00000D85 C3                  <2> 	ret
 10486                              <2> 
 10487                              <2> 
 10488                              <2> .rgfnEventHandlers:
 10489                              <2> istruc MENUEVENT
 10490 00000D86 [350D]              <2> 	at	MENUEVENT.InitializeMenuinitFromDSSI,	dw	.InitializeMenuinitFromDSSI
 10491 00000D88 [560C]              <2> 	at	MENUEVENT.ExitMenu,						dw	Dialog_EventExitMenu
 10492 00000D8A [510C]              <2> 	at	MENUEVENT.IdleProcessing,				dw	Dialog_EventNotHandled
 10493 00000D8C [510C]              <2> 	at	MENUEVENT.ItemHighlightedFromCX,		dw	Dialog_EventNotHandled
 10494 00000D8E [5D0D]              <2> 	at	MENUEVENT.ItemSelectedFromCX,			dw	.ItemSelectedFromCX
 10495 00000D90 [510C]              <2> 	at	MENUEVENT.KeyStrokeInAX,				dw	Dialog_EventNotHandled
 10496 00000D92 [C60C]              <2> 	at	MENUEVENT.RefreshTitle,					dw	Dialog_EventRefreshTitle
 10497 00000D94 [CD0C]              <2> 	at	MENUEVENT.RefreshInformation,			dw	Dialog_EventRefreshInformation
 10498 00000D96 [730D]              <2> 	at	MENUEVENT.RefreshItemFromCX,			dw	.RefreshItemFromCX
 10499                              <2> iend
 10500                              <2> 
 10501                              <2> 
 10502                              <2> ;--------------------------------------------------------------------
 10503                              <2> ; ConvertDriveLetterToBLfromItemIndexInCX
 10504                              <2> ;	Parameters:
 10505                              <2> ;		CX:		Item index
 10506                              <2> ;		SS:BP:	Ptr to DIALOG
 10507                              <2> ;	Returns:
 10508                              <2> ;		BL:		Drive letter
 10509                              <2> ;	Corrupts registers:
 10510                              <2> ;		AX, CX, DX
 10511                              <2> ;--------------------------------------------------------------------
 10512                              <2> ALIGN JUMP_ALIGN
 10513                              <2> ConvertDriveLetterToBLfromItemIndexInCX:
 10514 00000D98 41                  <2> 	inc		cx			; Index to count
 10515 00000D99 B340                <2> 	mov		bl, 'A'-1
 10516 00000D9B 8B460A              <2> 	mov		ax, [bp+MENU.dwUserData]
 10517 00000D9E 8B560C              <2> 	mov		dx, [bp+MENU.dwUserData+2]
 10518                              <2> ALIGN JUMP_ALIGN
 10519                              <2> .CheckNextBit:
 10520 00000DA1 43                  <2> 	inc		bx			; Increment drive letter
 10521 00000DA2 D1EA                <2> 	shr		dx, 1
 10522 00000DA4 D1D8                <2> 	rcr		ax, 1
 10523 00000DA6 73F9                <2> 	jnc		SHORT .CheckNextBit
 10524 00000DA8 E2F7                <2> 	loop	.CheckNextBit
 10525 00000DAA C3                  <2> 	ret
 10526                              <1> 		%include "DialogFile.asm"
 10527                              <2> ; Project name	:	Assembly Library
 10528                              <2> ; Description	:	Displays file dialog.
 10529                              <2> 
 10530                              <2> ;
 10531                              <2> ; XTIDE Universal BIOS and Associated Tools
 10532                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 10533                              <2> ;
 10534                              <2> ; This program is free software; you can redistribute it and/or modify
 10535                              <2> ; it under the terms of the GNU General Public License as published by
 10536                              <2> ; the Free Software Foundation; either version 2 of the License, or
 10537                              <2> ; (at your option) any later version.
 10538                              <2> ;
 10539                              <2> ; This program is distributed in the hope that it will be useful,
 10540                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 10541                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 10542                              <2> ; GNU General Public License for more details.
 10543                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 10544                              <2> ;
 10545                              <2> 
 10546                              <2> CURRENTDIR_CHARACTERS	EQU		002Eh
 10547                              <2> UPDIR_CHARACTERS		EQU		2E2Eh
 10548                              <2> 
 10549                              <2> ; Section containing code
 10550                              <2> SECTION .text
 10551                              <2> 
 10552                              <2> ;--------------------------------------------------------------------
 10553                              <2> ; DialogFile_GetFileNameWithIoInDSSI
 10554                              <2> ;	Parameters:
 10555                              <2> ;		DS:SI:	Ptr to FILE_DIALOG_IO
 10556                              <2> ;		SS:BP:	Ptr to parent MENU
 10557                              <2> ;	Returns:
 10558                              <2> ;		Nothing
 10559                              <2> ;	Corrupts registers:
 10560                              <2> ;		AX, BX, CX, DX, SI, DI
 10561                              <2> ;--------------------------------------------------------------------
 10562                              <2> ALIGN JUMP_ALIGN
 10563                              <2> DialogFile_GetFileNameWithIoInDSSI:
 10564 00000DAB BB[B50D]            <2> 	mov		bx, FileEventHandler
 10565 00000DAE C6440C01            <2> 	mov		BYTE [si+FILE_DIALOG_IO.bUserCancellation], TRUE
 10566 00000DB2 E971FE              <2> 	jmp		Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 10567                              <2> 
 10568                              <2> 
 10569                              <2> ;--------------------------------------------------------------------
 10570                              <2> ; FileEventHandler
 10571                              <2> ;	Common parameters for all events:
 10572                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
 10573                              <2> ;		SS:BP:		Ptr to DIALOG
 10574                              <2> ;	Common return values for all events:
 10575                              <2> ;		CF:			Set if event processed
 10576                              <2> ;					Cleared if event not processed
 10577                              <2> ;	Corrupts registers:
 10578                              <2> ;		All
 10579                              <2> ;--------------------------------------------------------------------
 10580                              <2> ALIGN JUMP_ALIGN
 10581                              <2> FileEventHandler:
 10582 00000DB5 2EFFA7[060E]        <2> 	jmp		[cs:bx+.rgfnEventHandlers]
 10583                              <2> 
 10584                              <2> 
 10585                              <2> ALIGN JUMP_ALIGN
 10586                              <2> .ItemSelectedFromCX:
 10587 00000DBA E88A00              <2> 	call	LoadItemStringBufferToESDI
 10588 00000DBD E8B407              <2> 	call	Registers_CopyESDItoDSSI
 10589 00000DC0 E8EA04              <2> 	call	ItemLineSplitter_GetLineToDSSIandLengthToCXfromStringInDSSIwithIndexInCX
 10590 00000DC3 E98201              <2> 	jmp		ParseSelectionFromItemLineInDSSI
 10591                              <2> 
 10592                              <2> 
 10593                              <2> ALIGN JUMP_ALIGN
 10594                              <2> .RefreshInformation:
 10595 00000DC6 E87001              <2> 	call	GetInfoLinesToCXandDialogFlagsToAX
 10596 00000DC9 2E8B36[000E]        <2> 	mov		si, [cs:.rgszInfoStringLookup]
 10597 00000DCE 31DB                <2> 	xor		bx, bx
 10598 00000DD0 92                  <2> 	xchg	dx, ax
 10599                              <2> ALIGN JUMP_ALIGN
 10600                              <2> .InfoLineLoop:
 10601 00000DD1 D0EA                <2> 	shr		dl, 1
 10602 00000DD3 730D                <2> 	jnc		SHORT .CheckNextFlag
 10603 00000DD5 2E8BB7[000E]        <2> 	mov		si, [cs:bx+.rgszInfoStringLookup]
 10604 00000DDA 53                  <2> 	push	bx
 10605                              <2> 	CALL_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 10606                              <3>  %ifidn %1, PushDisplayContext
 10607                              <3>  call DisplayContext_Push
 10608                              <3>  %elifidn %1, PopDisplayContext
 10609                              <3>  call DisplayContext_Pop
 10610                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10611                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10612                              <3>  %else
 10613 00000DDB BF[DF02]            <3>  mov di, %1
 10614 00000DDE E88CF2              <3>  call Display_FunctionFromDI
 10615                              <3>  %endif
 10616 00000DE1 5B                  <2> 	pop		bx
 10617                              <2> ALIGN JUMP_ALIGN
 10618                              <2> .CheckNextFlag:
 10619 00000DE2 43                  <2> 	inc		bx
 10620 00000DE3 43                  <2> 	inc		bx
 10621 00000DE4 E2EB                <2> 	loop	.InfoLineLoop
 10622 00000DE6 F9                  <2> 	stc						; Event processed
 10623 00000DE7 C3                  <2> 	ret
 10624                              <2> 
 10625                              <2> 
 10626                              <2> ALIGN JUMP_ALIGN
 10627                              <2> .RefreshItemFromCX:
 10628 00000DE8 E85C00              <2> 	call	LoadItemStringBufferToESDI
 10629 00000DEB B81900              <2> 	mov		ax, FILE_STRING_LENGTH
 10630 00000DEE 91                  <2> 	xchg	ax, cx
 10631 00000DEF F7E1                <2> 	mul		cx
 10632 00000DF1 01C7                <2> 	add		di, ax
 10633 00000DF3 89FE                <2> 	mov		si, di
 10634 00000DF5 8CC3                <2> 	mov		bx, es
 10635 00000DF7 49                  <2> 	dec		cx				; Do not print LF at the end of file string
 10636                              <2> 	CALL_DISPLAY_LIBRARY PrintCharBufferFromBXSIwithLengthInCX
 10637                              <3>  %ifidn %1, PushDisplayContext
 10638                              <3>  call DisplayContext_Push
 10639                              <3>  %elifidn %1, PopDisplayContext
 10640                              <3>  call DisplayContext_Pop
 10641                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10642                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10643                              <3>  %else
 10644 00000DF8 BF[8802]            <3>  mov di, %1
 10645 00000DFB E86FF2              <3>  call Display_FunctionFromDI
 10646                              <3>  %endif
 10647 00000DFE F9                  <2> 	stc
 10648 00000DFF C3                  <2> 	ret
 10649                              <2> 
 10650                              <2> 
 10651                              <2> ALIGN WORD_ALIGN
 10652                              <2> .rgszInfoStringLookup:
 10653 00000E00 [4313]              <2> 	dw		g_szChangeDrive
 10654 00000E02 [5513]              <2> 	dw		g_szSelectDirectory
 10655 00000E04 [7313]              <2> 	dw		g_szCreateNew
 10656                              <2> 
 10657                              <2> .rgfnEventHandlers:
 10658                              <2> istruc MENUEVENT
 10659 00000E06 [1B0E]              <2> 	at	MENUEVENT.InitializeMenuinitFromDSSI,	dw	InitializeMenuinitFromSSBP
 10660 00000E08 [560C]              <2> 	at	MENUEVENT.ExitMenu,						dw	Dialog_EventExitMenu
 10661 00000E0A [510C]              <2> 	at	MENUEVENT.IdleProcessing,				dw	Dialog_EventNotHandled
 10662 00000E0C [510C]              <2> 	at	MENUEVENT.ItemHighlightedFromCX,		dw	Dialog_EventNotHandled
 10663 00000E0E [BA0D]              <2> 	at	MENUEVENT.ItemSelectedFromCX,			dw	.ItemSelectedFromCX
 10664 00000E10 [800F]              <2> 	at	MENUEVENT.KeyStrokeInAX,				dw	HandleFunctionKeyFromAH
 10665 00000E12 [C60C]              <2> 	at	MENUEVENT.RefreshTitle,					dw	Dialog_EventRefreshTitle
 10666 00000E14 [C60D]              <2> 	at	MENUEVENT.RefreshInformation,			dw	.RefreshInformation
 10667 00000E16 [E80D]              <2> 	at	MENUEVENT.RefreshItemFromCX,			dw	.RefreshItemFromCX
 10668                              <2> iend
 10669                              <2> 
 10670                              <2> 
 10671                              <2> ;--------------------------------------------------------------------
 10672                              <2> ; ReInitializeMenuinitFromSSBP
 10673                              <2> ; InitializeMenuinitFromSSBP
 10674                              <2> ;	Parameters:
 10675                              <2> ;		SS:BP:		Ptr to DIALOG
 10676                              <2> ;	Returns:
 10677                              <2> ;		Nothing
 10678                              <2> ;	Corrupts registers:
 10679                              <2> ;		All, except BP
 10680                              <2> ;--------------------------------------------------------------------
 10681                              <2> ALIGN JUMP_ALIGN
 10682                              <2> ReInitializeMenuinitFromSSBP:
 10683 00000E18 E8F801              <2> 	call	DisplayLoadingMessageInInformationArea
 10684                              <2> InitializeMenuinitFromSSBP:
 10685 00000E1B E82900              <2> 	call	LoadItemStringBufferToESDI
 10686 00000E1E E82E00              <2> 	call	CreateStringFromCurrentDirectoryContentsToESDI
 10687 00000E21 E82300              <2> 	call	LoadItemStringBufferToESDI
 10688 00000E24 E8D500              <2> 	call	SortDirectoryContentsStringFromESDIwithCountInCX
 10689 00000E27 E80A01              <2> 	call	RemoveLastLFandTerminateESDIwithNull
 10690                              <2> 
 10691 00000E2A E83D07              <2> 	call	Registers_CopySSBPtoDSSI
 10692 00000E2D 31C0                <2> 	xor		ax, ax
 10693 00000E2F E833FE              <2> 	call	Dialog_EventInitializeMenuinitFromDSSIwithHighlightedItemInAX
 10694 00000E32 E80401              <2> 	call	GetInfoLinesToCXandDialogFlagsToAX
 10695 00000E35 884E05              <2> 	mov		[bp+MENUINIT.bInfoLines], cl
 10696                              <2> 	CALL_DISPLAY_LIBRARY GetColumnsToALandRowsToAH
 10697                              <3>  %ifidn %1, PushDisplayContext
 10698                              <3>  call DisplayContext_Push
 10699                              <3>  %elifidn %1, PopDisplayContext
 10700                              <3>  call DisplayContext_Pop
 10701                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10702                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10703                              <3>  %else
 10704 00000E38 BF[1F02]            <3>  mov di, %1
 10705 00000E3B E82FF2              <3>  call Display_FunctionFromDI
 10706                              <3>  %endif
 10707 00000E3E 886607              <2> 	mov		[bp+MENUINIT.bHeight], ah				; Always max height
 10708 00000E41 C746120000          <2> 	mov		WORD [bp+MENU.wFirstVisibleItem], 0
 10709 00000E46 C3                  <2> 	ret
 10710                              <2> 
 10711                              <2> 
 10712                              <2> ;--------------------------------------------------------------------
 10713                              <2> ; LoadItemStringBufferToESDI
 10714                              <2> ;	Parameters:
 10715                              <2> ;		SS:BP:	Ptr to DIALOG
 10716                              <2> ;	Returns:
 10717                              <2> ;		ES:DI:	Ptr to item string buffer
 10718                              <2> ;	Corrupts registers:
 10719                              <2> ;		Nothing
 10720                              <2> ;--------------------------------------------------------------------
 10721                              <2> ALIGN JUMP_ALIGN
 10722                              <2> LoadItemStringBufferToESDI:
 10723 00000E47 C47E14              <2> 	les		di, [bp+DIALOG.fpDialogIO]
 10724 00000E4A 26C47D04            <2> 	les		di, [es:di+FILE_DIALOG_IO.fszItemBuffer]
 10725 00000E4E C3                  <2> 	ret
 10726                              <2> 
 10727                              <2> 
 10728                              <2> ;--------------------------------------------------------------------
 10729                              <2> ; CreateStringFromCurrentDirectoryContentsToESDI
 10730                              <2> ;	Parameters:
 10731                              <2> ;		ES:DI:	Buffer where to create item string
 10732                              <2> ;		SS:BP:	Ptr to DIALOG
 10733                              <2> ;	Returns:
 10734                              <2> ;		CX:		Number of files or directories found
 10735                              <2> ;	Corrupts registers:
 10736                              <2> ;		AX, BX, DX, SI, DI, DS
 10737                              <2> ;--------------------------------------------------------------------
 10738                              <2> ALIGN JUMP_ALIGN
 10739                              <2> CreateStringFromCurrentDirectoryContentsToESDI:
 10740 00000E4F 89FB                <2> 	mov		bx, di
 10741                              <2> 	CALL_DISPLAY_LIBRARY PushDisplayContext
 10742                              <3>  %ifidn %1, PushDisplayContext
 10743 00000E51 E8BCF2              <3>  call DisplayContext_Push
 10744                              <3>  %elifidn %1, PopDisplayContext
 10745                              <3>  call DisplayContext_Pop
 10746                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10747                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10748                              <3>  %else
 10749                              <3>  mov di, %1
 10750                              <3>  call Display_FunctionFromDI
 10751                              <3>  %endif
 10752 00000E54 B9FFFF              <2> 	mov		cx, -1
 10753                              <2> 	CALL_DISPLAY_LIBRARY PrepareOffScreenBufferInESBXwithLengthInCX	; ES:DI now points to buffer
 10754                              <3>  %ifidn %1, PushDisplayContext
 10755                              <3>  call DisplayContext_Push
 10756                              <3>  %elifidn %1, PopDisplayContext
 10757                              <3>  call DisplayContext_Pop
 10758                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10759 00000E57 E801F3              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10760                              <3>  %else
 10761                              <3>  mov di, %1
 10762                              <3>  call Display_FunctionFromDI
 10763                              <3>  %endif
 10764                              <2> 
 10765 00000E5A C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 10766                              <2> 	eMOVZX	cx, [si+FILE_DIALOG_IO.bFileAttributes]
 10767                              <3> %ifndef USE_386
 10768                              <3>  %ifidni %1, ax
 10769                              <3>  mov al, %2
 10770                              <3>  xor ah, ah
 10771                              <3>  %elifidni %1, bx
 10772                              <3>  mov bl, %2
 10773                              <3>  xor bh, bh
 10774                              <3>  %elifidni %1, cx
 10775 00000E5D 8A4C0F              <3>  mov cl, %2
 10776 00000E60 30ED                <3>  xor ch, ch
 10777                              <3>  %elifidni %1, dx
 10778                              <3>  mov dl, %2
 10779                              <3>  xor dh, dh
 10780                              <3>  %else
 10781                              <3>  push ax
 10782                              <3>  mov al, %2
 10783                              <3>  xor ah, ah
 10784                              <3>  xchg ax, %1
 10785                              <3>  pop ax
 10786                              <3>  %endif
 10787                              <3> 
 10788                              <3> %else
 10789                              <3>  movzx %1, %2
 10790                              <3> %endif
 10791 00000E62 C57412              <2> 	lds		si, [si+FILE_DIALOG_IO.fpFileFilterString]
 10792 00000E65 E846F6              <2> 	call	Directory_UpdateDTAForFirstMatchForDSSIwithAttributesInCX
 10793                              <2> 
 10794 00000E68 E80C00              <2> 	call	.ClearDLifInRootDirectory
 10795 00000E6B E811F6              <2> 	call	Directory_GetDiskTransferAreaAddressToDSSI
 10796 00000E6E 31C9                <2> 	xor		cx, cx			; Clear file/directory count
 10797 00000E70 E80D00              <2> 	call	.FindMatchingFilesAndPrintThemToOffScreenBuffer
 10798                              <2> 
 10799                              <2> 	JMP_DISPLAY_LIBRARY PopDisplayContext
 10800                              <3>  %ifidn %1, PushDisplayContext
 10801                              <3>  jmp DisplayContext_Push
 10802                              <3>  %elifidn %1, PopDisplayContext
 10803 00000E73 E8BDF2              <3>  call DisplayContext_Pop
 10804 00000E76 C3                  <3>  ret
 10805                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 10806                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 10807                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 10808                              <3>  mov di, %1
 10809                              <3>  call Display_FunctionFromDI
 10810                              <3>  ret
 10811                              <3>  %else
 10812                              <3>  mov di, %1
 10813                              <3>  jmp Display_FunctionFromDI
 10814                              <3>  %endif
 10815                              <2> 
 10816                              <2> ;--------------------------------------------------------------------
 10817                              <2> ; .ClearDLifInRootDirectory
 10818                              <2> ;	Parameters:
 10819                              <2> ;		SS:BP:	Ptr to DIALOG
 10820                              <2> ;		ES:DI:	Ptr to destination string buffer
 10821                              <2> ;	Returns:
 10822                              <2> ;		DL:		Cleared if in root directory
 10823                              <2> ;				Set if in any other directory
 10824                              <2> ;	Corrupts registers:
 10825                              <2> ;		AX, SI, DS
 10826                              <2> ;--------------------------------------------------------------------
 10827                              <2> ALIGN JUMP_ALIGN
 10828                              <2> .ClearDLifInRootDirectory:
 10829 00000E77 E8FA06              <2> 	call	Registers_CopyESDItoDSSI
 10830 00000E7A E818F6              <2> 	call	Directory_WriteCurrentPathToDSSI
 10831 00000E7D 8A14                <2> 	mov		dl, [si]
 10832 00000E7F C3                  <2> 	ret
 10833                              <2> 
 10834                              <2> ;--------------------------------------------------------------------
 10835                              <2> ; .FindMatchingFilesAndPrintThemToOffScreenBuffer
 10836                              <2> ;	Parameters:
 10837                              <2> ;		CX:		Initial directory count
 10838                              <2> ;		DL:		Zero if root directory selected
 10839                              <2> ;		DS:SI:	Ptr to DTA with first matching file
 10840                              <2> ;	Returns:
 10841                              <2> ;		CX:		Incremented by number of files/directories found
 10842                              <2> ;	Corrupts registers:
 10843                              <2> ;		AX, BX, DX, DI, DS
 10844                              <2> ;--------------------------------------------------------------------
 10845                              <2> ALIGN JUMP_ALIGN
 10846                              <2> .FindMatchingFilesAndPrintThemToOffScreenBuffer:
 10847 00000E80 E80600              <2> 	call	AppendFileFromDTAinDSSItoOffScreenBuffer
 10848 00000E83 E832F6              <2> 	call	Directory_UpdateDTAForNextMatchUsingPreviousParameters
 10849 00000E86 73F8                <2> 	jnc		SHORT .FindMatchingFilesAndPrintThemToOffScreenBuffer
 10850 00000E88 C3                  <2> 	ret
 10851                              <2> 
 10852                              <2> 
 10853                              <2> ;--------------------------------------------------------------------
 10854                              <2> ; AppendFileFromDTAinDSSItoOffScreenBuffer
 10855                              <2> ;	Parameters:
 10856                              <2> ;		CX:		Files/directores found
 10857                              <2> ;		DL:		Zero if root directory selected
 10858                              <2> ;		DS:SI:	Ptr to DTA containing file information
 10859                              <2> ;	Returns:
 10860                              <2> ;		CX:		Incremented by number of files/directories found
 10861                              <2> ;	Corrupts registers:
 10862                              <2> ;		AX, BX
 10863                              <2> ;--------------------------------------------------------------------
 10864                              <2> ALIGN JUMP_ALIGN
 10865                              <2> AppendFileFromDTAinDSSItoOffScreenBuffer:
 10866 00000E89 E81000              <2> 	call	.FilterCurrentDirectory			; We never want "."
 10867 00000E8C E81400              <2> 	call	.FilterUpDirectoryWhenInRoot	; No ".." when in root directory
 10868 00000E8F 41                  <2> 	inc		cx								; Nothing filtered so increment files/directories
 10869                              <2> 
 10870 00000E90 55                  <2> 	push	bp
 10871 00000E91 56                  <2> 	push	si
 10872 00000E92 52                  <2> 	push	dx
 10873 00000E93 51                  <2> 	push	cx
 10874 00000E94 E81B00              <2> 	call	.FormatFileOrDirectoryToBufferFromDTAinDSSI
 10875 00000E97 59                  <2> 	pop		cx
 10876 00000E98 5A                  <2> 	pop		dx
 10877 00000E99 5E                  <2> 	pop		si
 10878 00000E9A 5D                  <2> 	pop		bp
 10879 00000E9B C3                  <2> 	ret
 10880                              <2> 
 10881                              <2> ;--------------------------------------------------------------------
 10882                              <2> ; .FilterCurrentDirectory
 10883                              <2> ; .FilterUpDirectoryWhenInRoot
 10884                              <2> ;	Parameters:
 10885                              <2> ;		DL:		Zero if root directory selected
 10886                              <2> ;		DS:SI:	Ptr to DTA containing file information
 10887                              <2> ;	Returns:
 10888                              <2> ;		Nothing
 10889                              <2> ;		Returns from AppendFileToBufferInESDIfromDtaInDSSI when filtering
 10890                              <2> ;	Corrupts registers:
 10891                              <2> ;		AX
 10892                              <2> ;--------------------------------------------------------------------
 10893                              <2> ALIGN JUMP_ALIGN
 10894                              <2> .FilterCurrentDirectory:
 10895 00000E9C 837C1E2E            <2> 	cmp		WORD [si+DTA.szFile], CURRENTDIR_CHARACTERS
 10896 00000EA0 740C                <2> 	je		SHORT .DoFilter
 10897 00000EA2 C3                  <2> 	ret
 10898                              <2> 
 10899                              <2> ALIGN JUMP_ALIGN
 10900                              <2> .FilterUpDirectoryWhenInRoot:
 10901 00000EA3 84D2                <2> 	test	dl, dl			; Set ZF if root directory selected
 10902 00000EA5 750A                <2> 	jnz		SHORT .ReturnWithoutFiltering
 10903 00000EA7 817C1E2E2E          <2> 	cmp		WORD [si+DTA.szFile], UPDIR_CHARACTERS
 10904 00000EAC 7503                <2> 	jne		SHORT .ReturnWithoutFiltering
 10905                              <2> .DoFilter:
 10906 00000EAE 83C402              <2> 	add		sp, BYTE 2		; Remove return address from stack
 10907                              <2> ALIGN JUMP_ALIGN, ret
 10908                              <2> .ReturnWithoutFiltering:
 10909 00000EB1 C3                  <2> 	ret
 10910                              <2> 
 10911                              <2> ;--------------------------------------------------------------------
 10912                              <2> ; .FormatFileOrDirectoryToBufferFromDTAinDSSI
 10913                              <2> ;	Parameters:
 10914                              <2> ;		DS:SI:	Ptr to DTA containing file information
 10915                              <2> ;	Returns:
 10916                              <2> ;		Nothing
 10917                              <2> ;	Corrupts registers:
 10918                              <2> ;		AX, BX, CX, DX, SI, DI, BP
 10919                              <2> ;--------------------------------------------------------------------
 10920                              <2> ALIGN JUMP_ALIGN
 10921                              <2> .FormatFileOrDirectoryToBufferFromDTAinDSSI:
 10922 00000EB2 89E5                <2> 	mov		bp, sp
 10923 00000EB4 8D441E              <2> 	lea		ax, [si+DTA.szFile]
 10924                              <2> 
 10925 00000EB7 F6441510            <2> 	test	BYTE [si+DTA.bFileAttributes], FLG_FILEATTR_DIRECTORY
 10926 00000EBB 7525                <2> 	jnz		SHORT .FormatDirectory
 10927                              <2> 	; Fall to .FormatFile
 10928                              <2> 
 10929                              <2> ;--------------------------------------------------------------------
 10930                              <2> ; .FormatFile
 10931                              <2> ;	Parameters:
 10932                              <2> ;		BP:		SP before pushing formatting parameters
 10933                              <2> ;		DS:AX:	Far pointer to file name
 10934                              <2> ;		DS:SI:	Ptr to DTA containing file information
 10935                              <2> ;	Returns:
 10936                              <2> ;		Nothing
 10937                              <2> ;	Corrupts registers:
 10938                              <2> ;		AX, BX, CX, DX, SI, DI
 10939                              <2> ;--------------------------------------------------------------------
 10940                              <2> .FormatFile:
 10941 00000EBD 96                  <2> 	xchg	si, ax
 10942 00000EBE E89C05              <2> 	call	String_ConvertDSSItoLowerCase
 10943 00000EC1 96                  <2> 	xchg	ax, si
 10944                              <2> 
 10945                              <2> 	; Push parameters for file name
 10946 00000EC2 50                  <2> 	push	ax				; Push file name offset
 10947 00000EC3 1E                  <2> 	push	ds				; Push file name segment
 10948                              <2> 
 10949                              <2> 	; Push parameters for file size
 10950 00000EC4 8B441A              <2> 	mov		ax, [si+DTA.dwFileSize]
 10951 00000EC7 8B541C              <2> 	mov		dx, [si+DTA.dwFileSize+2]
 10952 00000ECA 31DB                <2> 	xor		bx, bx
 10953 00000ECC 31C9                <2> 	xor		cx, cx
 10954 00000ECE E8F806              <2> 	call	Size_GetSizeToAXAndCharToDLfromBXDXAXwithMagnitudeInCX
 10955 00000ED1 B169                <2> 	mov		cl, 'i'
 10956 00000ED3 80FA20              <2> 	cmp		dl, ' '
 10957                              <2> 	eCMOVE	cl, dl
 10958                              <3>  eCMOVZ %1, %2
 10959 00000ED6 7502                <4>  jnz SHORT %%Return
 10960 00000ED8 88D1                <4>  mov %1, %2
 10961                              <4> %%Return:
 10962 00000EDA 50                  <2> 	push	ax
 10963 00000EDB 52                  <2> 	push	dx
 10964 00000EDC 51                  <2> 	push	cx
 10965                              <2> 
 10966                              <2> 	; Format to buffer
 10967 00000EDD BE[E213]            <2> 	mov		si, g_szFileFormat
 10968 00000EE0 EB13                <2> 	jmp		SHORT .FormatStringInCSSIandReturn
 10969                              <2> 
 10970                              <2> ;--------------------------------------------------------------------
 10971                              <2> ; .FormatDirectory
 10972                              <2> ;	Parameters:
 10973                              <2> ;		BP:		SP before pushing formatting parameters
 10974                              <2> ;		DS:AX:	Far pointer to directory name
 10975                              <2> ;		DS:SI:	Ptr to DTA containing file information
 10976                              <2> ;	Returns:
 10977                              <2> ;		Nothing
 10978                              <2> ;	Corrupts registers:
 10979                              <2> ;		AX, SI, DI
 10980                              <2> ;--------------------------------------------------------------------
 10981                              <2> ALIGN JUMP_ALIGN
 10982                              <2> .FormatDirectory:
 10983 00000EE2 50                  <2> 	push	ax				; Push directory name offset
 10984 00000EE3 1E                  <2> 	push	ds				; Push directory name segment
 10985 00000EE4 B8[FE13]            <2> 	mov		ax, g_szSub
 10986 00000EE7 817C1E2E2E          <2> 	cmp		WORD [si+DTA.szFile], UPDIR_CHARACTERS
 10987                              <2> 	eCMOVE	ax, g_szUp
 10988                              <3>  eCMOVZ %1, %2
 10989 00000EEC 7503                <4>  jnz SHORT %%Return
 10990 00000EEE B8[0314]            <4>  mov %1, %2
 10991                              <4> %%Return:
 10992 00000EF1 50                  <2> 	push	ax
 10993 00000EF2 BE[F213]            <2> 	mov		si, g_szDirectoryFormat
 10994                              <2> ALIGN JUMP_ALIGN
 10995                              <2> .FormatStringInCSSIandReturn:
 10996                              <2> 	JMP_DISPLAY_LIBRARY FormatNullTerminatedStringFromCSSI
 10997                              <3>  %ifidn %1, PushDisplayContext
 10998                              <3>  jmp DisplayContext_Push
 10999                              <3>  %elifidn %1, PopDisplayContext
 11000                              <3>  call DisplayContext_Pop
 11001                              <3>  ret
 11002                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 11003                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 11004                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 11005 00000EF5 BF[8500]            <3>  mov di, %1
 11006 00000EF8 E872F1              <3>  call Display_FunctionFromDI
 11007 00000EFB C3                  <3>  ret
 11008                              <3>  %else
 11009                              <3>  mov di, %1
 11010                              <3>  jmp Display_FunctionFromDI
 11011                              <3>  %endif
 11012                              <2> 
 11013                              <2> 
 11014                              <2> ;--------------------------------------------------------------------
 11015                              <2> ; SortDirectoryContentsStringFromESDIwithCountInCX
 11016                              <2> ;	Parameters:
 11017                              <2> ;		CX:		Number of files and directories
 11018                              <2> ;		ES:DI:	Buffer containing directory contents string
 11019                              <2> ;		SS:BP:	Ptr to DIALOG
 11020                              <2> ;	Returns:
 11021                              <2> ;		ES:DI:	Ptr to end of directory contents string
 11022                              <2> ;	Corrupts registers:
 11023                              <2> ;		AX, BX, CX, DX, SI, DS
 11024                              <2> ;--------------------------------------------------------------------
 11025                              <2> ALIGN JUMP_ALIGN
 11026                              <2> SortDirectoryContentsStringFromESDIwithCountInCX:
 11027 00000EFC E87506              <2> 	call	Registers_CopyESDItoDSSI
 11028                              <2> 
 11029                              <2> 	; Add directory contents string length to DI
 11030 00000EFF B81900              <2> 	mov		ax, FILE_STRING_LENGTH
 11031 00000F02 50                  <2> 	push	ax
 11032 00000F03 F7E1                <2> 	mul		cx
 11033 00000F05 01C7                <2> 	add		di, ax
 11034                              <2> 
 11035 00000F07 89CA                <2> 	mov		dx, cx
 11036 00000F09 59                  <2> 	pop		cx
 11037 00000F0A BB[100F]            <2> 	mov		bx, .FileStringComparator
 11038 00000F0D E90807              <2> 	jmp		Sort_ItemsFromDSSIwithCountInDXsizeInCXandComparatorInBX
 11039                              <2> 
 11040                              <2> ;--------------------------------------------------------------------
 11041                              <2> ; .FileStringComparator
 11042                              <2> ;	Parameters:
 11043                              <2> ;		CX:		Item size in bytes
 11044                              <2> ;		DS:SI:	Ptr to first item to compare
 11045                              <2> ;		ES:DI:	Ptr to second item to compare
 11046                              <2> ;	Returns:
 11047                              <2> ;		FLAGS:	Signed comparison between first and second item
 11048                              <2> ;	Corrupts registers:
 11049                              <2> ;		Nothing
 11050                              <2> ;--------------------------------------------------------------------
 11051                              <2> ALIGN JUMP_ALIGN
 11052                              <2> .FileStringComparator:
 11053 00000F10 57                  <2> 	push	di
 11054 00000F11 56                  <2> 	push	si
 11055 00000F12 51                  <2> 	push	cx
 11056 00000F13 53                  <2> 	push	bx
 11057                              <2> 
 11058 00000F14 BB1700              <2> 	mov		bx, FILE_STRING_LENGTH-2			; Zero BH
 11059 00000F17 813C2E2E            <2> 	cmp		WORD [si], UPDIR_CHARACTERS
 11060 00000F1B 7413                <2> 	je		SHORT .ForceValueFromDSSItoBeLess
 11061 00000F1D 8A18                <2> 	mov		bl, [si+bx]
 11062 00000F1F 263A5D17            <2> 	cmp		bl, [es:di+FILE_STRING_LENGTH-2]	; 'B' for files, 'R' for directories
 11063 00000F23 7507                <2> 	jne		SHORT .ForceValueFromDSSItoBeMoreOrLess
 11064 00000F25 F3A6                <2> 	repe cmpsb									; Two directories or two files
 11065                              <2> 
 11066                              <2> ALIGN JUMP_ALIGN
 11067                              <2> .ReturnFromComparison:
 11068 00000F27 5B                  <2> 	pop		bx
 11069 00000F28 59                  <2> 	pop		cx
 11070 00000F29 5E                  <2> 	pop		si
 11071 00000F2A 5F                  <2> 	pop		di
 11072 00000F2B C3                  <2> 	ret
 11073                              <2> ALIGN JUMP_ALIGN
 11074                              <2> .ForceValueFromDSSItoBeMoreOrLess:
 11075 00000F2C 7702                <2> 	ja		SHORT .ForceValueFromDSSItoBeLess	; Directory in SI, file in DI
 11076 00000F2E 86DF                <2> 	xchg	bl, bh
 11077                              <2> 	; Fall to ForceValueFromDSSItoBeLess
 11078                              <2> ALIGN JUMP_ALIGN
 11079                              <2> .ForceValueFromDSSItoBeLess:
 11080 00000F30 38DF                <2> 	cmp		bh, bl
 11081 00000F32 EBF3                <2> 	jmp		SHORT .ReturnFromComparison
 11082                              <2> 
 11083                              <2> 
 11084                              <2> ;--------------------------------------------------------------------
 11085                              <2> ; RemoveLastLFandTerminateESDIwithNull
 11086                              <2> ;	Parameters:
 11087                              <2> ;		ES:DI:	Ptr to end of buffer to terminate
 11088                              <2> ;	Returns:
 11089                              <2> ;		Nothing
 11090                              <2> ;	Corrupts registers:
 11091                              <2> ;		AX
 11092                              <2> ;--------------------------------------------------------------------
 11093                              <2> ALIGN JUMP_ALIGN
 11094                              <2> RemoveLastLFandTerminateESDIwithNull:
 11095 00000F34 4F                  <2> 	dec		di
 11096 00000F35 31C0                <2> 	xor		ax, ax
 11097 00000F37 AA                  <2> 	stosb
 11098 00000F38 C3                  <2> 	ret
 11099                              <2> 
 11100                              <2> 
 11101                              <2> ;--------------------------------------------------------------------
 11102                              <2> ; GetInfoLinesToCXandDialogFlagsToAX
 11103                              <2> ;	Parameters:
 11104                              <2> ;		SS:BP:	Ptr to DIALOG
 11105                              <2> ;	Returns:
 11106                              <2> ;		AX:		Dialog flags
 11107                              <2> ;		CX:		Number of info lines to be displayed
 11108                              <2> ;	Corrupts registers:
 11109                              <2> ;		SI, DS
 11110                              <2> ;--------------------------------------------------------------------
 11111                              <2> ALIGN JUMP_ALIGN
 11112                              <2> GetInfoLinesToCXandDialogFlagsToAX:
 11113 00000F39 31C0                <2> 	xor		ax, ax
 11114 00000F3B E80300              <2> 	call	GetDialogFlagsToAL
 11115 00000F3E E9F305              <2> 	jmp		Bit_GetSetCountToCXfromAX
 11116                              <2> 
 11117                              <2> ;--------------------------------------------------------------------
 11118                              <2> ; GetDialogFlagsToAL
 11119                              <2> ;	Parameters:
 11120                              <2> ;		SS:BP:	Ptr to DIALOG
 11121                              <2> ;	Returns:
 11122                              <2> ;		AL:		Dialog flags
 11123                              <2> ;	Corrupts registers:
 11124                              <2> ;		SI, DS
 11125                              <2> ;--------------------------------------------------------------------
 11126                              <2> ALIGN JUMP_ALIGN
 11127                              <2> GetDialogFlagsToAL:
 11128 00000F41 C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 11129 00000F44 8A440E              <2> 	mov		al, [si+FILE_DIALOG_IO.bDialogFlags]
 11130 00000F47 C3                  <2> 	ret
 11131                              <2> 
 11132                              <2> 
 11133                              <2> ;--------------------------------------------------------------------
 11134                              <2> ; ParseSelectionFromItemLineInDSSI
 11135                              <2> ;	Parameters:
 11136                              <2> ;		DS:SI:	Ptr to char buffer containing file or directory to be selected
 11137                              <2> ;		SS:BP:	Ptr to DIALOG
 11138                              <2> ;	Returns:
 11139                              <2> ;		Nothing
 11140                              <2> ;	Corrupts registers:
 11141                              <2> ;		All, except BP
 11142                              <2> ;--------------------------------------------------------------------
 11143                              <2> ALIGN JUMP_ALIGN
 11144                              <2> ParseSelectionFromItemLineInDSSI:
 11145 00000F48 8B04                <2> 	mov		ax, [si]
 11146 00000F4A 3D2E2E              <2> 	cmp		ax, UPDIR_CHARACTERS
 11147 00000F4D 741B                <2> 	je		SHORT .ChangeToUpdir
 11148 00000F4F E8C004              <2> 	call	Char_IsUpperCaseLetterInAL
 11149 00000F52 721D                <2> 	jc		SHORT .ParseAndChangeToSubdirInDSSI
 11150 00000F54 E8D104              <2> 	call	Char_IsDecimalDigitInAL
 11151 00000F57 7218                <2> 	jc		SHORT .ParseAndChangeToSubdirInDSSI	; Assume subdir and check for errors
 11152                              <2> 	; Fall to .ParseAndSelectFileFromDSSI
 11153                              <2> 
 11154                              <2> ;--------------------------------------------------------------------
 11155                              <2> ; .ParseAndSelectFileFromDSSI
 11156                              <2> ;	Parameters:
 11157                              <2> ;		DS:SI:	NULL terminated string selected from dialog
 11158                              <2> ;		SS:BP:	Ptr to DIALOG
 11159                              <2> ;	Returns:
 11160                              <2> ;		Nothing (exits dialog)
 11161                              <2> ;	Corrupts registers:
 11162                              <2> ;		All, except BP
 11163                              <2> ;--------------------------------------------------------------------
 11164                              <2> .ParseAndSelectFileFromDSSI:
 11165 00000F59 C47E14              <2> 	les		di, [bp+DIALOG.fpDialogIO]
 11166 00000F5C 83C712              <2> 	add		di, BYTE FILE_DIALOG_IO.szFile
 11167 00000F5F B90D00              <2> 	mov		cx, FILENAME_BUFFER_SIZE-1
 11168 00000F62 E83406              <2> 	call	Memory_CopyCXbytesFromDSSItoESDI
 11169 00000F65 31C0                <2> 	xor		ax, ax
 11170 00000F67 AA                  <2> 	stosb						; Terminate with NULL
 11171 00000F68 EB6B                <2> 	jmp		SHORT CloseFileDialogAfterSuccessfulSelection
 11172                              <2> 
 11173                              <2> ;--------------------------------------------------------------------
 11174                              <2> ; .ChangeToUpdir
 11175                              <2> ;	Parameters:
 11176                              <2> ;		SS:BP:	Ptr to DIALOG
 11177                              <2> ;	Returns:
 11178                              <2> ;		Nothing
 11179                              <2> ;	Corrupts registers:
 11180                              <2> ;		All, except BP
 11181                              <2> ;--------------------------------------------------------------------
 11182                              <2> ALIGN JUMP_ALIGN
 11183                              <2> .ChangeToUpdir:
 11184 00000F6A 0E                  <2> 	push	cs
 11185 00000F6B 1F                  <2> 	pop		ds
 11186 00000F6C BE[0814]            <2> 	mov		si, g_szUpdir
 11187 00000F6F EB04                <2> 	jmp		SHORT .ChangeDirectoryToDSSI
 11188                              <2> 
 11189                              <2> ;--------------------------------------------------------------------
 11190                              <2> ; .ParseAndChangeToSubdirInDSSI
 11191                              <2> ;	Parameters:
 11192                              <2> ;		DS:SI:	NULL terminated string selected from dialog
 11193                              <2> ;		SS:BP:	Ptr to DIALOG
 11194                              <2> ;	Returns:
 11195                              <2> ;		Nothing
 11196                              <2> ;	Corrupts registers:
 11197                              <2> ;		All, except BP
 11198                              <2> ;--------------------------------------------------------------------
 11199                              <2> ALIGN JUMP_ALIGN
 11200                              <2> .ParseAndChangeToSubdirInDSSI:
 11201 00000F71 C6440C00            <2> 	mov		BYTE [si+12], NULL	; Terminate with NULL (unnecessary spaces do not matter)
 11202                              <2> .ChangeDirectoryToDSSI:
 11203 00000F75 E814F5              <2> 	call	Directory_ChangeToPathFromDSSI
 11204 00000F78 72DF                <2> 	jc		SHORT .ParseAndSelectFileFromDSSI	; Must have been a file starting with number
 11205                              <2> 	; Fall to RefreshFilesToDisplay
 11206                              <2> 
 11207                              <2> ;--------------------------------------------------------------------
 11208                              <2> ; RefreshFilesToDisplay
 11209                              <2> ;	Parameters:
 11210                              <2> ;		SS:BP:	Ptr to DIALOG
 11211                              <2> ;	Returns:
 11212                              <2> ;		Nothing
 11213                              <2> ;	Corrupts registers:
 11214                              <2> ;		All, except BP
 11215                              <2> ;--------------------------------------------------------------------
 11216                              <2> ALIGN JUMP_ALIGN
 11217                              <2> RefreshFilesToDisplay:
 11218 00000F7A E89BFE              <2> 	call	ReInitializeMenuinitFromSSBP
 11219 00000F7D E9B6F9              <2> 	jmp		MenuInit_RefreshMenuWindow
 11220                              <2> 
 11221                              <2> 
 11222                              <2> ;--------------------------------------------------------------------
 11223                              <2> ; HandleFunctionKeyFromAH
 11224                              <2> ;	Parameters:
 11225                              <2> ;		AH:		Scancode for function key
 11226                              <2> ;		SS:BP:	Ptr to DIALOG
 11227                              <2> ;	Returns:
 11228                              <2> ;		Nothing
 11229                              <2> ;	Corrupts registers:
 11230                              <2> ;		AX, SI, DI, BP
 11231                              <2> ;--------------------------------------------------------------------
 11232                              <2> ALIGN JUMP_ALIGN
 11233                              <2> HandleFunctionKeyFromAH:
 11234 00000F80 E8BEFF              <2> 	call	GetDialogFlagsToAL
 11235 00000F83 80FC3E              <2> 	cmp		ah, KEY_FILEDIALOG_NEW_FILE_OR_DIR
 11236 00000F86 740C                <2> 	je		SHORT HandleFunctionKeyForCreatingNewFileOrDirectory
 11237 00000F88 80FC3D              <2> 	cmp		ah, KEY_FILEDIALOG_SELECT_DIRECTORY
 11238 00000F8B 7444                <2> 	je		SHORT HandleFunctionKeyForSelectingDirectoryInsteadOfFile
 11239 00000F8D 80FC3C              <2> 	cmp		ah, KEY_FILEDIALOG_CHANGE_DRIVE
 11240 00000F90 744D                <2> 	je		SHORT HandleFunctionKeyForDriveChange
 11241                              <2> ReturnWithoutHandlingKeystroke:
 11242 00000F92 F8                  <2> 	clc		; Event not processed
 11243 00000F93 C3                  <2> 	ret
 11244                              <2> 
 11245                              <2> 
 11246                              <2> ;--------------------------------------------------------------------
 11247                              <2> ; HandleFunctionKeyForCreatingNewFileOrDirectory
 11248                              <2> ;	Parameters:
 11249                              <2> ;		AL:		File dialog flags
 11250                              <2> ;		SS:BP:	Ptr to DIALOG
 11251                              <2> ;	Returns:
 11252                              <2> ;		Closes file dialog
 11253                              <2> ;	Corrupts registers:
 11254                              <2> ;		All, except BP
 11255                              <2> ;--------------------------------------------------------------------
 11256                              <2> ALIGN JUMP_ALIGN
 11257                              <2> HandleFunctionKeyForCreatingNewFileOrDirectory:
 11258 00000F94 A804                <2> 	test	al, FLG_FILEDIALOG_NEW
 11259 00000F96 74FA                <2> 	jz		SHORT ReturnWithoutHandlingKeystroke
 11260                              <2> 
 11261 00000F98 B91600              <2> 	mov		cx, STRING_DIALOG_IO_size
 11262 00000F9B E82206              <2> 	call	Memory_ReserveCXbytesFromStackToDSSI
 11263 00000F9E E81200              <2> 	call	.InitializeStringDialogIoInDSSIforInputtingFileName
 11264                              <2> 
 11265                              <2> 	CALL_MENU_LIBRARY GetStringWithIoInDSSI
 11266                              <3>  %ifidn %1, CloseMenuIfExitEventAllows
 11267                              <3>  call MenuInit_CloseMenuIfExitEventAllows
 11268                              <3>  %elifidn %1, Close
 11269                              <3>  call MenuInit_CloseMenuWindow
 11270                              <3>  %elifidn %1, SetUserDataFromDSSI
 11271                              <3>  call MenuInit_SetUserDataFromDSSI
 11272                              <3>  %elifidn %1, GetUserDataToDSSI
 11273                              <3>  call MenuInit_GetUserDataToDSSI
 11274                              <3>  %elifidn %1, SetTitleHeightFromAL
 11275                              <3>  call MenuInit_SetTitleHeightFromAL
 11276                              <3>  %elifidn %1, GetHighlightedItemToAX
 11277                              <3>  call MenuInit_GetHighlightedItemToAX
 11278                              <3>  %elifidn %1, SetTotalItemsFromAX
 11279                              <3>  call MenuInit_SetTotalItemsFromAX
 11280                              <3>  %elifidn %1, SetInformationHeightFromAL
 11281                              <3>  call MenuInit_SetInformationHeightFromAL
 11282                              <3>  %elifidn %1, SetTimeoutValueFromAX
 11283                              <3>  call MenuTime_SetSelectionTimeoutValueFromAX
 11284                              <3>  %else
 11285 00000FA1 BF[BF11]            <3>  mov di, %1
 11286 00000FA4 E858F7              <3>  call Menu_FunctionFromDI
 11287                              <3>  %endif
 11288 00000FA7 8A440C              <2> 	mov		al, [si+STRING_DIALOG_IO.bUserCancellation]
 11289 00000FAA 83C416              <2> 	add		sp, BYTE STRING_DIALOG_IO_size
 11290 00000FAD 84C0                <2> 	test	al, al		; User cancellation?
 11291 00000FAF 75E1                <2> 	jnz		SHORT ReturnWithoutHandlingKeystroke
 11292 00000FB1 EB22                <2> 	jmp		CloseFileDialogAfterSuccessfulSelection
 11293                              <2> 
 11294                              <2> ALIGN JUMP_ALIGN
 11295                              <2> .InitializeStringDialogIoInDSSIforInputtingFileName:
 11296 00000FB3 E86C00              <2> 	call	InitializeNullStringsToDialogInputInDSSI
 11297 00000FB6 C704[BC13]          <2> 	mov		WORD [si+DIALOG_INPUT.fszTitle], g_szEnterNewFileOrDirectory
 11298 00000FBA C7440E0000          <2> 	mov		WORD [si+STRING_DIALOG_IO.fnCharFilter], NULL
 11299 00000FBF C744100E00          <2> 	mov		WORD [si+STRING_DIALOG_IO.wBufferSize], FILENAME_BUFFER_SIZE
 11300 00000FC4 C44614              <2> 	les		ax, [bp+DIALOG.fpDialogIO]
 11301 00000FC7 83C012              <2> 	add		ax, BYTE FILE_DIALOG_IO.szFile
 11302 00000FCA 894412              <2> 	mov		[si+STRING_DIALOG_IO.fpReturnBuffer], ax
 11303 00000FCD 8C4414              <2> 	mov		[si+STRING_DIALOG_IO.fpReturnBuffer+2], es
 11304 00000FD0 C3                  <2> 	ret
 11305                              <2> 
 11306                              <2> 
 11307                              <2> ;--------------------------------------------------------------------
 11308                              <2> ; HandleFunctionKeyForSelectingDirectoryInsteadOfFile
 11309                              <2> ;	Parameters:
 11310                              <2> ;		AL:		File dialog flags
 11311                              <2> ;		SS:BP:	Ptr to DIALOG
 11312                              <2> ;	Returns:
 11313                              <2> ;		Closes file dialog
 11314                              <2> ;	Corrupts registers:
 11315                              <2> ;		All, except BP
 11316                              <2> ;--------------------------------------------------------------------
 11317                              <2> ALIGN JUMP_ALIGN
 11318                              <2> HandleFunctionKeyForSelectingDirectoryInsteadOfFile:
 11319 00000FD1 A802                <2> 	test	al, FLG_FILEDIALOG_DIRECTORY
 11320 00000FD3 74BD                <2> 	jz		SHORT ReturnWithoutHandlingKeystroke
 11321                              <2> 	; Fall to CloseFileDialogAfterSuccessfulSelection
 11322                              <2> 
 11323                              <2> ;--------------------------------------------------------------------
 11324                              <2> ; CloseFileDialogAfterSuccessfulSelection
 11325                              <2> ;	Parameters:
 11326                              <2> ;		SS:BP:	Ptr to DIALOG
 11327                              <2> ;	Returns:
 11328                              <2> ;		Nothing (exits dialog)
 11329                              <2> ;	Corrupts registers:
 11330                              <2> ;		All, except BP
 11331                              <2> ;--------------------------------------------------------------------
 11332                              <2> ALIGN JUMP_ALIGN
 11333                              <2> CloseFileDialogAfterSuccessfulSelection:
 11334 00000FD5 C57E14              <2> 	lds		di, [bp+DIALOG.fpDialogIO]
 11335 00000FD8 C6450C00            <2> 	mov		BYTE [di+FILE_DIALOG_IO.bUserCancellation], FALSE
 11336 00000FDC E969F9              <2> 	jmp		MenuInit_CloseMenuWindow
 11337                              <2> 
 11338                              <2> 
 11339                              <2> ;--------------------------------------------------------------------
 11340                              <2> ; HandleFunctionKeyForDriveChange
 11341                              <2> ;	Parameters:
 11342                              <2> ;		AL:		File dialog flags
 11343                              <2> ;		SS:BP:	Ptr to DIALOG
 11344                              <2> ;	Returns:
 11345                              <2> ;		Nothing
 11346                              <2> ;	Corrupts registers:
 11347                              <2> ;		All, except BP
 11348                              <2> ;--------------------------------------------------------------------
 11349                              <2> ALIGN JUMP_ALIGN
 11350                              <2> HandleFunctionKeyForDriveChange:
 11351 00000FDF A801                <2> 	test	al, FLG_FILEDIALOG_DRIVES
 11352 00000FE1 74AF                <2> 	jz		SHORT ReturnWithoutHandlingKeystroke
 11353                              <2> 
 11354 00000FE3 E82D00              <2> 	call	DisplayLoadingMessageInInformationArea
 11355 00000FE6 B91000              <2> 	mov		cx, DRIVE_DIALOG_IO_size
 11356 00000FE9 E8D405              <2> 	call	Memory_ReserveCXbytesFromStackToDSSI
 11357 00000FEC E80700              <2> 	call	.DisplayDriveSelectionDialogWithIoInDSSI
 11358 00000FEF E81100              <2> 	call	.ChangeDriveToUserSelectionFromIoInDSSI
 11359 00000FF2 83C410              <2> 	add		sp, BYTE DRIVE_DIALOG_IO_size
 11360 00000FF5 C3                  <2> 	ret
 11361                              <2> 
 11362                              <2> ;--------------------------------------------------------------------
 11363                              <2> ; .DisplayDriveSelectionDialogWithIoInDSSI
 11364                              <2> ;	Parameters:
 11365                              <2> ;		DS:SI:	Ptr to uninitialized DRIVE_DIALOG_IO
 11366                              <2> ;		SS:BP:	Ptr to DIALOG
 11367                              <2> ;	Returns:
 11368                              <2> ;		DS:SI:	Ptr to DRIVE_DIALOG_IO
 11369                              <2> ;	Corrupts registers:
 11370                              <2> ;		AX, DI
 11371                              <2> ;--------------------------------------------------------------------
 11372                              <2> ALIGN JUMP_ALIGN
 11373                              <2> .DisplayDriveSelectionDialogWithIoInDSSI:
 11374 00000FF6 E82900              <2> 	call	InitializeNullStringsToDialogInputInDSSI
 11375 00000FF9 C704[9213]          <2> 	mov		WORD [si+DIALOG_INPUT.fszTitle], g_szSelectNewDrive
 11376                              <2> 	JMP_MENU_LIBRARY GetDriveWithIoInDSSI
 11377                              <3>  %ifidn %1, CloseMenuIfExitEventAllows
 11378                              <3>  jmp MenuInit_CloseMenuIfExitEventAllows
 11379                              <3>  %elifidn %1, Close
 11380                              <3>  jmp MenuInit_CloseMenuWindow
 11381                              <3>  %elifidn %1, SetUserDataFromDSSI
 11382                              <3>  jmp MenuInit_SetUserDataFromDSSI
 11383                              <3>  %elifidn %1, GetUserDataToDSSI
 11384                              <3>  jmp MenuInit_GetUserDataToDSSI
 11385                              <3>  %elifidn %1, SetTitleHeightFromAL
 11386                              <3>  jmp MenuInit_SetTitleHeightFromAL
 11387                              <3>  %elifidn %1, GetHighlightedItemToAX
 11388                              <3>  jmp MenuInit_GetHighlightedItemToAX
 11389                              <3>  %elifidn %1, SetTotalItemsFromAX
 11390                              <3>  jmp MenuInit_SetTotalItemsFromAX
 11391                              <3>  %elifidn %1, SetInformationHeightFromAL
 11392                              <3>  jmp MenuInit_SetInformationHeightFromAL
 11393                              <3>  %elifidn %1, SetTimeoutValueFromAX
 11394                              <3>  jmp MenuTime_SetSelectionTimeoutValueFromAX
 11395                              <3>  %else
 11396 00000FFD BF[260D]            <3>  mov di, %1
 11397 00001000 E9FCF6              <3>  jmp Menu_FunctionFromDI
 11398                              <3>  %endif
 11399                              <2> 
 11400                              <2> ;--------------------------------------------------------------------
 11401                              <2> ; .ChangeDriveToUserSelectionFromIoInDSSI
 11402                              <2> ;	Parameters:
 11403                              <2> ;		DS:SI:	Ptr to DRIVE_DIALOG_IO
 11404                              <2> ;		SS:BP:	Ptr to DIALOG
 11405                              <2> ;	Returns:
 11406                              <2> ;		Nothing
 11407                              <2> ;	Corrupts registers:
 11408                              <2> ;		All, except BP
 11409                              <2> ;--------------------------------------------------------------------
 11410                              <2> ALIGN JUMP_ALIGN
 11411                              <2> .ChangeDriveToUserSelectionFromIoInDSSI:
 11412 00001003 807C0C00            <2> 	cmp		BYTE [si+DRIVE_DIALOG_IO.bUserCancellation], FALSE
 11413 00001007 7509                <2> 	jne		SHORT .UserCancelledDriveChange
 11414                              <2> 
 11415 00001009 8A540F              <2> 	mov		dl, [si+DRIVE_DIALOG_IO.bReturnDriveNumber]
 11416 0000100C E830F5              <2> 	call	Drive_SetDefaultFromDL
 11417 0000100F E968FF              <2> 	jmp		RefreshFilesToDisplay
 11418                              <2> .UserCancelledDriveChange:
 11419 00001012 C3                  <2> 	ret
 11420                              <2> 
 11421                              <2> 
 11422                              <2> ;--------------------------------------------------------------------
 11423                              <2> ; DisplayLoadingMessageInInformationArea
 11424                              <2> ;	Parameters:
 11425                              <2> ;		SS:BP:		Ptr to DIALOG
 11426                              <2> ;	Returns:
 11427                              <2> ;		Nothing
 11428                              <2> ;	Corrupts registers:
 11429                              <2> ;		AX, BX, CX, DX, SI, DI
 11430                              <2> ;--------------------------------------------------------------------
 11431                              <2> ALIGN JUMP_ALIGN
 11432                              <2> DisplayLoadingMessageInInformationArea:
 11433 00001013 E8EBFA              <2> 	call	MenuText_ClearInformationArea
 11434 00001016 E825FB              <2> 	call	MenuText_PrepareToDrawInformationArea
 11435 00001019 BE[A413]            <2> 	mov		si, g_szLoadingPleaseWait
 11436                              <2> 	JMP_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 11437                              <3>  %ifidn %1, PushDisplayContext
 11438                              <3>  jmp DisplayContext_Push
 11439                              <3>  %elifidn %1, PopDisplayContext
 11440                              <3>  call DisplayContext_Pop
 11441                              <3>  ret
 11442                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 11443                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 11444                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 11445                              <3>  mov di, %1
 11446                              <3>  call Display_FunctionFromDI
 11447                              <3>  ret
 11448                              <3>  %else
 11449 0000101C BF[DF02]            <3>  mov di, %1
 11450 0000101F E94BF0              <3>  jmp Display_FunctionFromDI
 11451                              <3>  %endif
 11452                              <2> 
 11453                              <2> 
 11454                              <2> ;--------------------------------------------------------------------
 11455                              <2> ; InitializeNullStringsToDialogInputInDSSI
 11456                              <2> ;	Parameters:
 11457                              <2> ;		DS:SI:	Ptr to DIALOG_INPUT
 11458                              <2> ;		SS:BP:	Ptr to DIALOG
 11459                              <2> ;	Returns:
 11460                              <2> ;		Nothing
 11461                              <2> ;	Corrupts registers:
 11462                              <2> ;		AX
 11463                              <2> ;--------------------------------------------------------------------
 11464                              <2> ALIGN JUMP_ALIGN
 11465                              <2> InitializeNullStringsToDialogInputInDSSI:
 11466 00001022 B8[0A14]            <2> 	mov		ax, g_szNull
 11467 00001025 8904                <2> 	mov		[si+DIALOG_INPUT.fszTitle], ax
 11468 00001027 8C4C02              <2> 	mov		[si+DIALOG_INPUT.fszTitle+2], cs
 11469 0000102A 894404              <2> 	mov		[si+DIALOG_INPUT.fszItems], ax
 11470 0000102D 8C4C06              <2> 	mov		[si+DIALOG_INPUT.fszItems+2], cs
 11471 00001030 894408              <2> 	mov		[si+DIALOG_INPUT.fszInfo], ax
 11472 00001033 8C4C0A              <2> 	mov		[si+DIALOG_INPUT.fszInfo+2], cs
 11473 00001036 C3                  <2> 	ret
 11474                              <1> 		%include "DialogMessage.asm"
 11475                              <2> ; Project name	:	Assembly Library
 11476                              <2> ; Description	:	Displays message dialog.
 11477                              <2> 
 11478                              <2> ;
 11479                              <2> ; XTIDE Universal BIOS and Associated Tools
 11480                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 11481                              <2> ;
 11482                              <2> ; This program is free software; you can redistribute it and/or modify
 11483                              <2> ; it under the terms of the GNU General Public License as published by
 11484                              <2> ; the Free Software Foundation; either version 2 of the License, or
 11485                              <2> ; (at your option) any later version.
 11486                              <2> ;
 11487                              <2> ; This program is distributed in the hope that it will be useful,
 11488                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 11489                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 11490                              <2> ; GNU General Public License for more details.
 11491                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 11492                              <2> ;
 11493                              <2> 
 11494                              <2> 
 11495                              <2> ; Section containing code
 11496                              <2> SECTION .text
 11497                              <2> 
 11498                              <2> ;--------------------------------------------------------------------
 11499                              <2> ; DialogMessage_DisplayMessageWithInputInDSSI
 11500                              <2> ;	Parameters:
 11501                              <2> ;		DS:SI:	Ptr to DIALOG_INPUT
 11502                              <2> ;		SS:BP:	Ptr to parent MENU
 11503                              <2> ;	Returns:
 11504                              <2> ;		Nothing
 11505                              <2> ;	Corrupts registers:
 11506                              <2> ;		AX, BX, CX, DX, SI, DI
 11507                              <2> ;--------------------------------------------------------------------
 11508                              <2> ALIGN JUMP_ALIGN
 11509                              <2> DialogMessage_DisplayMessageWithInputInDSSI:
 11510 00001037 BB[3D10]            <2> 	mov		bx, MessageEventHandler
 11511 0000103A E9E9FB              <2> 	jmp		Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 11512                              <2> 
 11513                              <2> 
 11514                              <2> ;--------------------------------------------------------------------
 11515                              <2> ; MessageEventHandler
 11516                              <2> ;	Common parameters for all events:
 11517                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
 11518                              <2> ;		SS:BP:		Ptr to DIALOG
 11519                              <2> ;	Common return values for all events:
 11520                              <2> ;		CF:			Set if event processed
 11521                              <2> ;					Cleared if event not processed
 11522                              <2> ;	Corrupts registers:
 11523                              <2> ;		All
 11524                              <2> ;--------------------------------------------------------------------
 11525                              <2> ALIGN JUMP_ALIGN
 11526                              <2> MessageEventHandler:
 11527 0000103D 2EFFA7[5010]        <2> 	jmp		[cs:bx+.rgfnEventHandlers]
 11528                              <2> 
 11529                              <2> 
 11530                              <2> ALIGN JUMP_ALIGN
 11531                              <2> .InitializeMenuinitFromDSSI:
 11532 00001042 804E0E06            <2> 	or		BYTE [bp+MENU.bFlags], FLG_MENU_USER_HANDLES_SCROLLING | FLG_MENU_NOHIGHLIGHT
 11533 00001046 31C0                <2> 	xor		ax, ax		; Cannot be NO_ITEM_HIGHLIGHTED because of scrolling
 11534 00001048 E91AFC              <2> 	jmp		Dialog_EventInitializeMenuinitFromDSSIwithHighlightedItemInAX
 11535                              <2> 
 11536                              <2> 
 11537                              <2> ALIGN JUMP_ALIGN
 11538                              <2> .KeyStrokeInAX:
 11539 0000104B E81400              <2> 	call	ProcessMessageScrollingKeysFromAX
 11540 0000104E F9                  <2> 	stc
 11541 0000104F C3                  <2> 	ret
 11542                              <2> 
 11543                              <2> 
 11544                              <2> ALIGN WORD_ALIGN
 11545                              <2> .rgfnEventHandlers:
 11546                              <2> istruc MENUEVENT
 11547 00001050 [4210]              <2> 	at	MENUEVENT.InitializeMenuinitFromDSSI,	dw	.InitializeMenuinitFromDSSI
 11548 00001052 [560C]              <2> 	at	MENUEVENT.ExitMenu,						dw	Dialog_EventExitMenu
 11549 00001054 [510C]              <2> 	at	MENUEVENT.IdleProcessing,				dw	Dialog_EventNotHandled
 11550 00001056 [510C]              <2> 	at	MENUEVENT.ItemHighlightedFromCX,		dw	Dialog_EventNotHandled
 11551 00001058 [530C]              <2> 	at	MENUEVENT.ItemSelectedFromCX,			dw	Dialog_EventAnyThatClosesDialog
 11552 0000105A [4B10]              <2> 	at	MENUEVENT.KeyStrokeInAX,				dw	.KeyStrokeInAX
 11553 0000105C [C60C]              <2> 	at	MENUEVENT.RefreshTitle,					dw	Dialog_EventRefreshTitle
 11554 0000105E [CD0C]              <2> 	at	MENUEVENT.RefreshInformation,			dw	Dialog_EventRefreshInformation
 11555 00001060 [DD0C]              <2> 	at	MENUEVENT.RefreshItemFromCX,			dw	Dialog_EventRefreshItemFromCX
 11556                              <2> iend
 11557                              <2> 
 11558                              <2> 
 11559                              <2> ;--------------------------------------------------------------------
 11560                              <2> ; ProcessMessageScrollingKeysFromAX
 11561                              <2> ;	Parameters
 11562                              <2> ;		AL:		ASCII character
 11563                              <2> ;		AH:		BIOS scan code
 11564                              <2> ;		SS:BP:	Ptr to DIALOG
 11565                              <2> ;	Returns:
 11566                              <2> ;		Nothing
 11567                              <2> ;	Corrupts registers:
 11568                              <2> ;		BX, CX, DX, SI, DI
 11569                              <2> ;--------------------------------------------------------------------
 11570                              <2> ALIGN JUMP_ALIGN
 11571                              <2> ProcessMessageScrollingKeysFromAX:
 11572 00001062 80FC48              <2> 	cmp		ah, MENU_KEY_UP
 11573 00001065 7408                <2> 	je		SHORT .DecrementLines
 11574 00001067 80FC50              <2> 	cmp		ah, MENU_KEY_DOWN
 11575 0000106A 7414                <2> 	je		SHORT .IncrementLines
 11576 0000106C E99BF9              <2> 	jmp		MenuLoop_ProcessScrollingKeysFromAX
 11577                              <2> 
 11578                              <2> ALIGN JUMP_ALIGN
 11579                              <2> .DecrementLines:
 11580 0000106F 837E0200            <2> 	cmp		WORD [bp+MENUINIT.wHighlightedItem], BYTE 0
 11581 00001073 741F                <2> 	je		SHORT .AlreadyAtTheTopOrBottom
 11582                              <2> 
 11583 00001075 8B4612              <2> 	mov		ax, [bp+MENU.wFirstVisibleItem]
 11584 00001078 894602              <2> 	mov		[bp+MENUINIT.wHighlightedItem], ax
 11585 0000107B B448                <2> 	mov		ah, MENU_KEY_UP
 11586 0000107D E98AF9              <2> 	jmp		MenuLoop_ProcessScrollingKeysFromAX
 11587                              <2> 
 11588                              <2> ALIGN JUMP_ALIGN
 11589                              <2> .IncrementLines:
 11590 00001080 8B4600              <2> 	mov		ax, [bp+MENUINIT.wItems]
 11591 00001083 48                  <2> 	dec		ax						; Last possible item to highlight
 11592 00001084 394602              <2> 	cmp		[bp+MENUINIT.wHighlightedItem], ax
 11593 00001087 730B                <2> 	jae		SHORT .AlreadyAtTheTopOrBottom
 11594                              <2> 
 11595 00001089 E845FA              <2> 	call	MenuScrollbars_GetLastVisibleItemOnPageToAX
 11596 0000108C 894602              <2> 	mov		[bp+MENUINIT.wHighlightedItem], ax
 11597 0000108F B450                <2> 	mov		ah, MENU_KEY_DOWN
 11598 00001091 E976F9              <2> 	jmp		MenuLoop_ProcessScrollingKeysFromAX
 11599                              <2> 
 11600                              <2> ALIGN JUMP_ALIGN
 11601                              <2> .AlreadyAtTheTopOrBottom:
 11602 00001094 C3                  <2> 	ret
 11603                              <1> 		%include "DialogProgress.asm"
 11604                              <2> ; Project name	:	Assembly Library
 11605                              <2> ; Description	:	Displays progress bar dialog and starts progress task.
 11606                              <2> 
 11607                              <2> ;
 11608                              <2> ; XTIDE Universal BIOS and Associated Tools
 11609                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 11610                              <2> ;
 11611                              <2> ; This program is free software; you can redistribute it and/or modify
 11612                              <2> ; it under the terms of the GNU General Public License as published by
 11613                              <2> ; the Free Software Foundation; either version 2 of the License, or
 11614                              <2> ; (at your option) any later version.
 11615                              <2> ;
 11616                              <2> ; This program is distributed in the hope that it will be useful,
 11617                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 11618                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 11619                              <2> ; GNU General Public License for more details.
 11620                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 11621                              <2> ;
 11622                              <2> 
 11623                              <2> 
 11624                              <2> ; Section containing code
 11625                              <2> SECTION .text
 11626                              <2> 
 11627                              <2> ;--------------------------------------------------------------------
 11628                              <2> ; DialogProgress_GetStringWithIoInDSSI
 11629                              <2> ;	Parameters:
 11630                              <2> ;		DS:SI:	Ptr to PROGRESS_DIALOG_IO
 11631                              <2> ;		SS:BP:	Ptr to parent MENU
 11632                              <2> ;	Returns:
 11633                              <2> ;		Nothing
 11634                              <2> ;	Corrupts registers:
 11635                              <2> ;		AX, BX, CX, DX, SI, DI
 11636                              <2> ;--------------------------------------------------------------------
 11637                              <2> ALIGN JUMP_ALIGN
 11638                              <2> DialogProgress_StartProgressTaskWithIoInDSSIandParamInDXAX:
 11639 00001095 BB[C110]            <2> 	mov		bx, ProgressEventHandler
 11640 00001098 E98BFB              <2> 	jmp		Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 11641                              <2> 
 11642                              <2> 
 11643                              <2> ;--------------------------------------------------------------------
 11644                              <2> ; DialogProgress_SetProgressValueFromAX
 11645                              <2> ;	Parameters
 11646                              <2> ;		AX:		Progress bar value to set
 11647                              <2> ;		SS:BP:	Ptr to DIALOG
 11648                              <2> ;	Returns:
 11649                              <2> ;		Nothing
 11650                              <2> ;	Corrupts registers:
 11651                              <2> ;		AX, BX, CX, DX, SI, DI
 11652                              <2> ;--------------------------------------------------------------------
 11653                              <2> ALIGN JUMP_ALIGN
 11654                              <2> DialogProgress_SetProgressValueFromAX:
 11655 0000109B 1E                  <2> 	push	ds
 11656                              <2> 
 11657 0000109C C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 11658 0000109F 8B5C10              <2> 	mov		bx, [si+PROGRESS_DIALOG_IO.wMaxProgressValue]
 11659 000010A2 39D8                <2> 	cmp		ax, bx
 11660 000010A4 7204                <2> 	jb		SHORT .AXlessThanBX
 11661 000010A6 89D8                <2> 	mov		ax, bx
 11662 000010A8 EB0A                <2> 	jmp		SHORT .UpdateProgressBar
 11663                              <2> ALIGN JUMP_ALIGN
 11664                              <2> .AXlessThanBX:
 11665 000010AA 89C3                <2> 	mov		bx, ax
 11666 000010AC 2B5C0E              <2> 	sub		bx, [si+PROGRESS_DIALOG_IO.wCurrentProgressValue]
 11667 000010AF 3B5C16              <2> 	cmp		bx, [si+PROGRESS_DIALOG_IO.wProgressPerCharacter]
 11668 000010B2 720B                <2> 	jb		SHORT .ReturnWithoutUpdate
 11669                              <2> .UpdateProgressBar:
 11670 000010B4 89440E              <2> 	mov		[si+PROGRESS_DIALOG_IO.wCurrentProgressValue], ax
 11671 000010B7 31C0                <2> 	xor		ax, ax
 11672 000010B9 E89CFA              <2> 	call	MenuText_RefreshItemFromAX
 11673 000010BC E86BFA              <2> 	call	MenuText_RefreshInformation
 11674                              <2> ALIGN JUMP_ALIGN
 11675                              <2> .ReturnWithoutUpdate:
 11676 000010BF 1F                  <2> 	pop		ds
 11677 000010C0 C3                  <2> 	ret
 11678                              <2> 
 11679                              <2> 
 11680                              <2> ;--------------------------------------------------------------------
 11681                              <2> ; ProgressEventHandler
 11682                              <2> ;	Common parameters for all events:
 11683                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
 11684                              <2> ;		SS:BP:		Ptr to DIALOG
 11685                              <2> ;	Common return values for all events:
 11686                              <2> ;		CF:			Set if event processed
 11687                              <2> ;					Cleared if event not processed
 11688                              <2> ;	Corrupts registers:
 11689                              <2> ;		All
 11690                              <2> ;--------------------------------------------------------------------
 11691                              <2> ALIGN JUMP_ALIGN
 11692                              <2> ProgressEventHandler:
 11693 000010C1 2EFFA7[0B11]        <2> 	jmp		[cs:bx+.rgfnEventHandlers]
 11694                              <2> 
 11695                              <2> 
 11696                              <2> ALIGN JUMP_ALIGN
 11697                              <2> .InitializeMenuinitFromDSSI:
 11698 000010C6 B8FFFF              <2> 	mov		ax, NO_ITEM_HIGHLIGHTED
 11699 000010C9 E88CFB              <2> 	call	Dialog_EventInitializeMenuinitFromDSSIforSingleItemWithHighlightedItemInAX
 11700 000010CC C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 11701 000010CF E84904              <2> 	call	TimerTicks_ReadFromBdaToAX
 11702 000010D2 894418              <2> 	mov		[si+PROGRESS_DIALOG_IO.wStartTimeTicks], ax
 11703                              <2> 
 11704                              <2> 	; 0 = 65536 but it needs to be adjusted to 65535 to prevent division by zero
 11705 000010D5 837C1000            <2> 	cmp		WORD [si+PROGRESS_DIALOG_IO.wMaxProgressValue], BYTE 0
 11706 000010D9 7542                <2> 	jne		SHORT CalculateProgressNeededBeforeUpdatingCharacter
 11707 000010DB FF4C10              <2> 	dec		WORD [si+PROGRESS_DIALOG_IO.wMaxProgressValue]
 11708 000010DE EB3D                <2> 	jmp		SHORT CalculateProgressNeededBeforeUpdatingCharacter
 11709                              <2> 
 11710                              <2> 
 11711                              <2> ALIGN JUMP_ALIGN
 11712                              <2> .IdleProcessing:
 11713 000010E0 E887F8              <2> 	call	MenuInit_GetUserDataToDSSI
 11714 000010E3 C47E14              <2> 	les		di, [bp+DIALOG.fpDialogIO]
 11715 000010E6 55                  <2> 	push	bp
 11716 000010E7 26FF5514            <2> 	call	[es:di+PROGRESS_DIALOG_IO.fnTaskWithParamInDSSI]
 11717 000010EB 5D                  <2> 	pop		bp
 11718 000010EC E859F8              <2> 	call	MenuInit_CloseMenuWindow
 11719 000010EF F9                  <2> 	stc
 11720 000010F0 C3                  <2> 	ret
 11721                              <2> 
 11722                              <2> 
 11723                              <2> ALIGN JUMP_ALIGN
 11724                              <2> .RefreshItemFromCX:
 11725 000010F1 C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 11726 000010F4 E83600              <2> 	call	DrawProgressBarFromDialogIoInDSSI
 11727 000010F7 F9                  <2> 	stc
 11728 000010F8 C3                  <2> 	ret
 11729                              <2> 
 11730                              <2> 
 11731                              <2> ALIGN JUMP_ALIGN
 11732                              <2> .RefreshInformation:
 11733 000010F9 C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 11734 000010FC E81C04              <2> 	call	TimerTicks_ReadFromBdaToAX
 11735 000010FF 2B4418              <2> 	sub		ax, [si+PROGRESS_DIALOG_IO.wStartTimeTicks]
 11736 00001102 92                  <2> 	xchg	dx, ax
 11737 00001103 E85000              <2> 	call	DrawTimeElapsedFromDX
 11738 00001106 E85E00              <2> 	call	DrawTimeLeftFromProgressDialogIoInDSSIwithTimeElapsedInDX
 11739 00001109 F9                  <2> 	stc
 11740 0000110A C3                  <2> 	ret
 11741                              <2> 
 11742                              <2> 
 11743                              <2> ALIGN WORD_ALIGN
 11744                              <2> .rgfnEventHandlers:
 11745                              <2> istruc MENUEVENT
 11746 0000110B [C610]              <2> 	at	MENUEVENT.InitializeMenuinitFromDSSI,	dw	.InitializeMenuinitFromDSSI
 11747 0000110D [560C]              <2> 	at	MENUEVENT.ExitMenu,						dw	Dialog_EventExitMenu
 11748 0000110F [E010]              <2> 	at	MENUEVENT.IdleProcessing,				dw	.IdleProcessing
 11749 00001111 [510C]              <2> 	at	MENUEVENT.ItemHighlightedFromCX,		dw	Dialog_EventNotHandled
 11750 00001113 [510C]              <2> 	at	MENUEVENT.ItemSelectedFromCX,			dw	Dialog_EventNotHandled
 11751 00001115 [510C]              <2> 	at	MENUEVENT.KeyStrokeInAX,				dw	Dialog_EventNotHandled
 11752 00001117 [C60C]              <2> 	at	MENUEVENT.RefreshTitle,					dw	Dialog_EventRefreshTitle
 11753 00001119 [F910]              <2> 	at	MENUEVENT.RefreshInformation,			dw	.RefreshInformation
 11754 0000111B [F110]              <2> 	at	MENUEVENT.RefreshItemFromCX,			dw	.RefreshItemFromCX
 11755                              <2> iend
 11756                              <2> 
 11757                              <2> 
 11758                              <2> ;--------------------------------------------------------------------
 11759                              <2> ; CalculateProgressNeededBeforeUpdatingCharacter
 11760                              <2> ;	Parameters:
 11761                              <2> ;		DS:SI:	Ptr to PROGRESS_DIALOG_IO
 11762                              <2> ;		SS:BP:	Ptr to DIALOG
 11763                              <2> ;	Returns:
 11764                              <2> ;		CF:		Set since event handled
 11765                              <2> ;	Corrupts:
 11766                              <2> ;		AX, BX, DX, SI, DS
 11767                              <2> ;--------------------------------------------------------------------
 11768                              <2> ALIGN JUMP_ALIGN
 11769                              <2> CalculateProgressNeededBeforeUpdatingCharacter:
 11770 0000111D E891F8              <2> 	call	MenuLocation_GetMaxTextLineLengthToAX
 11771 00001120 E82C00              <2> 	call	GetProgressLengthToBXfromProgressDialogIoInDSSI
 11772 00001123 93                  <2> 	xchg	ax, bx
 11773 00001124 31D2                <2> 	xor		dx, dx
 11774 00001126 F7F3                <2> 	div		bx
 11775 00001128 894416              <2> 	mov		[si+PROGRESS_DIALOG_IO.wProgressPerCharacter], ax
 11776 0000112B F9                  <2> 	stc
 11777 0000112C C3                  <2> 	ret
 11778                              <2> 
 11779                              <2> 
 11780                              <2> ;--------------------------------------------------------------------
 11781                              <2> ; DrawProgressBarFromDialogIoInDSSI
 11782                              <2> ;	Parameters:
 11783                              <2> ;		DS:SI:	Ptr to PROGRESS_DIALOG_IO
 11784                              <2> ;		SS:BP:	Ptr to DIALOG
 11785                              <2> ;	Returns:
 11786                              <2> ;		Nothing
 11787                              <2> ;	Corrupts:
 11788                              <2> ;		AX, BX, CX, DX, DI
 11789                              <2> ;--------------------------------------------------------------------
 11790                              <2> ALIGN JUMP_ALIGN
 11791                              <2> DrawProgressBarFromDialogIoInDSSI:
 11792                              <2> 	; Get full chars to CX and empty chars to DX
 11793 0000112D E881F8              <2> 	call	MenuLocation_GetMaxTextLineLengthToAX
 11794 00001130 89C1                <2> 	mov		cx, ax
 11795 00001132 F7640E              <2> 	mul		WORD [si+PROGRESS_DIALOG_IO.wCurrentProgressValue]
 11796 00001135 E81700              <2> 	call	GetProgressLengthToBXfromProgressDialogIoInDSSI
 11797 00001138 F7F3                <2> 	div		bx
 11798 0000113A 91                  <2> 	xchg	cx, ax		; AX = Text line length, CX = Number of full chars
 11799 0000113B 29C8                <2> 	sub		ax, cx
 11800 0000113D 92                  <2> 	xchg	dx, ax		; DX = Number of empty chars
 11801                              <2> 
 11802 0000113E B0DB                <2> 	mov		al, PROGRESS_COMPLETE_CHARACTER
 11803 00001140 E80400              <2> 	call	.RepeatProgressCharacterCXtimesFromAL
 11804                              <2> 
 11805 00001143 89D1                <2> 	mov		cx, dx
 11806 00001145 B0B0                <2> 	mov		al, PROGRESS_INCOMPLETE_CHARACTER
 11807                              <2> 	; Fall to .RepeatProgressCharacterCXtimesFromAL
 11808                              <2> 
 11809                              <2> ;--------------------------------------------------------------------
 11810                              <2> ; .RepeatProgressCharacterCXtimesFromAL
 11811                              <2> ;	Parameters:
 11812                              <2> ;		AL:		Progress bar character to repeat
 11813                              <2> ;		CX:		Number of times to repeat the progress character
 11814                              <2> ;	Returns:
 11815                              <2> ;		Nothing
 11816                              <2> ;	Corrupts:
 11817                              <2> ;		AX, CX, DI
 11818                              <2> ;--------------------------------------------------------------------
 11819                              <2> ALIGN JUMP_ALIGN
 11820                              <2> .RepeatProgressCharacterCXtimesFromAL:
 11821 00001147 E30C                <2> 	jcxz	NothingToRepeat
 11822                              <2> 	JMP_DISPLAY_LIBRARY PrintRepeatedCharacterFromALwithCountInCX
 11823                              <3>  %ifidn %1, PushDisplayContext
 11824                              <3>  jmp DisplayContext_Push
 11825                              <3>  %elifidn %1, PopDisplayContext
 11826                              <3>  call DisplayContext_Pop
 11827                              <3>  ret
 11828                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 11829                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 11830                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 11831                              <3>  mov di, %1
 11832                              <3>  call Display_FunctionFromDI
 11833                              <3>  ret
 11834                              <3>  %else
 11835 00001149 BF[D302]            <3>  mov di, %1
 11836 0000114C E91EEF              <3>  jmp Display_FunctionFromDI
 11837                              <3>  %endif
 11838                              <2> 
 11839                              <2> 
 11840                              <2> ;--------------------------------------------------------------------
 11841                              <2> ; GetProgressLengthToBXfromProgressDialogIoInDSSI
 11842                              <2> ;	Parameters:
 11843                              <2> ;		DS:SI:	Ptr to PROGRESS_DIALOG_IO
 11844                              <2> ;	Returns:
 11845                              <2> ;		BX:		Progress length
 11846                              <2> ;	Corrupts:
 11847                              <2> ;		Nothing
 11848                              <2> ;--------------------------------------------------------------------
 11849                              <2> ALIGN JUMP_ALIGN
 11850                              <2> GetProgressLengthToBXfromProgressDialogIoInDSSI:
 11851 0000114F 8B5C10              <2> 	mov		bx, [si+PROGRESS_DIALOG_IO.wMaxProgressValue]
 11852 00001152 2B5C12              <2> 	sub		bx, [si+PROGRESS_DIALOG_IO.wMinProgressValue]
 11853                              <2> NothingToRepeat:
 11854 00001155 C3                  <2> 	ret
 11855                              <2> 
 11856                              <2> 
 11857                              <2> ;--------------------------------------------------------------------
 11858                              <2> ; DrawTimeElapsedFromDX
 11859                              <2> ;	Parameters:
 11860                              <2> ;		DX:		Ticks elapsed
 11861                              <2> ;	Returns:
 11862                              <2> ;		Nothing
 11863                              <2> ;	Corrupts:
 11864                              <2> ;		AX, BX, CX, DI
 11865                              <2> ;--------------------------------------------------------------------
 11866                              <2> ALIGN JUMP_ALIGN
 11867                              <2> DrawTimeElapsedFromDX:
 11868 00001156 56                  <2> 	push	si
 11869 00001157 52                  <2> 	push	dx
 11870                              <2> 
 11871 00001158 BE[0A13]            <2> 	mov		si, g_szTimeElapsed
 11872                              <2> 	CALL_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 11873                              <3>  %ifidn %1, PushDisplayContext
 11874                              <3>  call DisplayContext_Push
 11875                              <3>  %elifidn %1, PopDisplayContext
 11876                              <3>  call DisplayContext_Pop
 11877                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 11878                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 11879                              <3>  %else
 11880 0000115B BF[DF02]            <3>  mov di, %1
 11881 0000115E E80CEF              <3>  call Display_FunctionFromDI
 11882                              <3>  %endif
 11883 00001161 E82300              <2> 	call	FormatTicksFromDX
 11884                              <2> 
 11885 00001164 5A                  <2> 	pop		dx
 11886 00001165 5E                  <2> 	pop		si
 11887 00001166 C3                  <2> 	ret
 11888                              <2> 
 11889                              <2> 
 11890                              <2> ;--------------------------------------------------------------------
 11891                              <2> ; DrawTimeLeftFromProgressDialogIoInDSSIwithTimeElapsedInDX
 11892                              <2> ;	Parameters:
 11893                              <2> ;		DX:		Ticks elapsed
 11894                              <2> ;		DS:SI:	Ptr to PROGRESS_DIALOG_IO
 11895                              <2> ;	Returns:
 11896                              <2> ;		Nothing
 11897                              <2> ;	Corrupts:
 11898                              <2> ;		AX, BX, CX, DX, SI, DI
 11899                              <2> ;--------------------------------------------------------------------
 11900                              <2> ALIGN JUMP_ALIGN
 11901                              <2> DrawTimeLeftFromProgressDialogIoInDSSIwithTimeElapsedInDX:
 11902 00001167 56                  <2> 	push	si
 11903 00001168 BE[1A13]            <2> 	mov		si, g_szTimeLeft
 11904                              <2> 	CALL_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 11905                              <3>  %ifidn %1, PushDisplayContext
 11906                              <3>  call DisplayContext_Push
 11907                              <3>  %elifidn %1, PopDisplayContext
 11908                              <3>  call DisplayContext_Pop
 11909                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 11910                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 11911                              <3>  %else
 11912 0000116B BF[DF02]            <3>  mov di, %1
 11913 0000116E E8FCEE              <3>  call Display_FunctionFromDI
 11914                              <3>  %endif
 11915 00001171 5E                  <2> 	pop		si
 11916                              <2> 
 11917 00001172 8B4C0E              <2> 	mov		cx, [si+PROGRESS_DIALOG_IO.wCurrentProgressValue]
 11918 00001175 8B4410              <2> 	mov		ax, [si+PROGRESS_DIALOG_IO.wMaxProgressValue]
 11919 00001178 29C8                <2> 	sub		ax, cx
 11920 0000117A F7E2                <2> 	mul		dx			; Progress left * elapsed time
 11921                              <2> 
 11922 0000117C 2B4C12              <2> 	sub		cx, [si+PROGRESS_DIALOG_IO.wMinProgressValue]
 11923 0000117F 7404                <2> 	jz		SHORT .PreventDivisionByZero
 11924 00001181 F7F1                <2> 	div		cx			; AX = Estimated ticks left
 11925 00001183 92                  <2> 	xchg	dx, ax
 11926                              <2> 	SKIP2B	ax
 11927                              <3>  %ifidni %1, f
 11928                              <3>  db 03Dh
 11929                              <3> 
 11930                              <3>  %elifidni %1, ax
 11931 00001184 B8                  <3>  db 0B8h
 11932                              <3>  %elifidni %1, cx
 11933                              <3>  db 0B9h
 11934                              <3>  %elifidni %1, dx
 11935                              <3>  db 0BAh
 11936                              <3>  %elifidni %1, bx
 11937                              <3>  db 0BBh
 11938                              <3>  %elifidni %1, sp
 11939                              <3>  db 0BCh
 11940                              <3>  %elifidni %1, bp
 11941                              <3>  db 0BDh
 11942                              <3>  %elifidni %1, si
 11943                              <3>  db 0BEh
 11944                              <3>  %elifidni %1, di
 11945                              <3>  db 0BFh
 11946                              <3>  %else
 11947                              <3>  %error "Invalid parameter passed to SKIP2B"
 11948                              <3>  %endif
 11949                              <2> .PreventDivisionByZero:
 11950 00001185 31D2                <2> 	xor		dx, dx
 11951                              <2> 	; Fall to FormatTicksFromDX
 11952                              <2> 
 11953                              <2> 
 11954                              <2> ;--------------------------------------------------------------------
 11955                              <2> ; FormatTicksFromDX
 11956                              <2> ;	Parameters:
 11957                              <2> ;		DX:		Ticks to format
 11958                              <2> ;	Returns:
 11959                              <2> ;		Nothing
 11960                              <2> ;	Corrupts:
 11961                              <2> ;		AX, CX, DX, SI, DI
 11962                              <2> ;--------------------------------------------------------------------
 11963                              <2> ALIGN JUMP_ALIGN
 11964                              <2> FormatTicksFromDX:
 11965 00001187 55                  <2> 	push	bp
 11966                              <2> 
 11967 00001188 89E5                <2> 	mov		bp, sp
 11968 0000118A BE[2A13]            <2> 	mov		si, g_szTimeFormat
 11969 0000118D E85903              <2> 	call	TimerTicks_GetMinutesToAXandRemainderTicksToDXfromTicksInDX
 11970 00001190 50                  <2> 	push	ax
 11971 00001191 E85E03              <2> 	call	TimerTicks_GetSecondsToAXfromTicksInDX
 11972 00001194 50                  <2> 	push	ax
 11973                              <2> 	CALL_DISPLAY_LIBRARY FormatNullTerminatedStringFromCSSI
 11974                              <3>  %ifidn %1, PushDisplayContext
 11975                              <3>  call DisplayContext_Push
 11976                              <3>  %elifidn %1, PopDisplayContext
 11977                              <3>  call DisplayContext_Pop
 11978                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 11979                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 11980                              <3>  %else
 11981 00001195 BF[8500]            <3>  mov di, %1
 11982 00001198 E8D2EE              <3>  call Display_FunctionFromDI
 11983                              <3>  %endif
 11984                              <2> 
 11985 0000119B 5D                  <2> 	pop		bp
 11986 0000119C C3                  <2> 	ret
 11987                              <1> 		%include "DialogSelection.asm"
 11988                              <2> ; Project name	:	Assembly Library
 11989                              <2> ; Description	:	Displays selection dialog.
 11990                              <2> 
 11991                              <2> ;
 11992                              <2> ; XTIDE Universal BIOS and Associated Tools
 11993                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 11994                              <2> ;
 11995                              <2> ; This program is free software; you can redistribute it and/or modify
 11996                              <2> ; it under the terms of the GNU General Public License as published by
 11997                              <2> ; the Free Software Foundation; either version 2 of the License, or
 11998                              <2> ; (at your option) any later version.
 11999                              <2> ;
 12000                              <2> ; This program is distributed in the hope that it will be useful,
 12001                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 12002                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 12003                              <2> ; GNU General Public License for more details.
 12004                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 12005                              <2> ;
 12006                              <2> 
 12007                              <2> 
 12008                              <2> ; Section containing code
 12009                              <2> SECTION .text
 12010                              <2> 
 12011                              <2> ;--------------------------------------------------------------------
 12012                              <2> ; DialogSelection_GetSelectionToAXwithInputInDSSI
 12013                              <2> ;	Parameters:
 12014                              <2> ;		DS:SI:	Ptr to DIALOG_INPUT
 12015                              <2> ;		SS:BP:	Ptr to parent MENU
 12016                              <2> ;	Returns:
 12017                              <2> ;		Nothing
 12018                              <2> ;	Corrupts registers:
 12019                              <2> ;		AX, BX, CX, DX, SI, DI
 12020                              <2> ;--------------------------------------------------------------------
 12021                              <2> ALIGN JUMP_ALIGN
 12022                              <2> DialogSelection_GetSelectionToAXwithInputInDSSI:
 12023 0000119D BB[A311]            <2> 	mov		bx, SelectionEventHandler
 12024 000011A0 E983FA              <2> 	jmp		Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 12025                              <2> 
 12026                              <2> 
 12027                              <2> ;--------------------------------------------------------------------
 12028                              <2> ; SelectionEventHandler
 12029                              <2> ;	Common parameters for all events:
 12030                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
 12031                              <2> ;		SS:BP:		Ptr to DIALOG
 12032                              <2> ;	Common return values for all events:
 12033                              <2> ;		CF:			Set if event processed
 12034                              <2> ;					Cleared if event not processed
 12035                              <2> ;	Corrupts registers:
 12036                              <2> ;		All
 12037                              <2> ;--------------------------------------------------------------------
 12038                              <2> ALIGN JUMP_ALIGN
 12039                              <2> SelectionEventHandler:
 12040 000011A3 2EFFA7[AD11]        <2> 	jmp		[cs:bx+.rgfnEventHandlers]
 12041                              <2> 
 12042                              <2> 
 12043                              <2> ALIGN JUMP_ALIGN
 12044                              <2> .InitializeMenuinitFromDSSI:
 12045 000011A8 31C0                <2> 	xor		ax, ax
 12046 000011AA E9B8FA              <2> 	jmp		Dialog_EventInitializeMenuinitFromDSSIwithHighlightedItemInAX
 12047                              <2> 
 12048                              <2> 
 12049                              <2> ALIGN WORD_ALIGN
 12050                              <2> .rgfnEventHandlers:
 12051                              <2> istruc MENUEVENT
 12052 000011AD [A811]              <2> 	at	MENUEVENT.InitializeMenuinitFromDSSI,	dw	.InitializeMenuinitFromDSSI
 12053 000011AF [560C]              <2> 	at	MENUEVENT.ExitMenu,						dw	Dialog_EventExitMenu
 12054 000011B1 [510C]              <2> 	at	MENUEVENT.IdleProcessing,				dw	Dialog_EventNotHandled
 12055 000011B3 [510C]              <2> 	at	MENUEVENT.ItemHighlightedFromCX,		dw	Dialog_EventNotHandled
 12056 000011B5 [530C]              <2> 	at	MENUEVENT.ItemSelectedFromCX,			dw	Dialog_EventAnyThatClosesDialog
 12057 000011B7 [510C]              <2> 	at	MENUEVENT.KeyStrokeInAX,				dw	Dialog_EventNotHandled
 12058 000011B9 [C60C]              <2> 	at	MENUEVENT.RefreshTitle,					dw	Dialog_EventRefreshTitle
 12059 000011BB [CD0C]              <2> 	at	MENUEVENT.RefreshInformation,			dw	Dialog_EventRefreshInformation
 12060 000011BD [DD0C]              <2> 	at	MENUEVENT.RefreshItemFromCX,			dw	Dialog_EventRefreshItemFromCX
 12061                              <2> iend
 12062                              <1> 		%include "DialogString.asm"
 12063                              <2> ; Project name	:	Assembly Library
 12064                              <2> ; Description	:	Displays word input dialog.
 12065                              <2> 
 12066                              <2> ;
 12067                              <2> ; XTIDE Universal BIOS and Associated Tools
 12068                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 12069                              <2> ;
 12070                              <2> ; This program is free software; you can redistribute it and/or modify
 12071                              <2> ; it under the terms of the GNU General Public License as published by
 12072                              <2> ; the Free Software Foundation; either version 2 of the License, or
 12073                              <2> ; (at your option) any later version.
 12074                              <2> ;
 12075                              <2> ; This program is distributed in the hope that it will be useful,
 12076                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 12077                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 12078                              <2> ; GNU General Public License for more details.
 12079                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 12080                              <2> ;
 12081                              <2> 
 12082                              <2> ; Section containing code
 12083                              <2> SECTION .text
 12084                              <2> 
 12085                              <2> ;--------------------------------------------------------------------
 12086                              <2> ; DialogString_GetStringWithIoInDSSI
 12087                              <2> ;	Parameters:
 12088                              <2> ;		DS:SI:	Ptr to STRING_DIALOG_IO
 12089                              <2> ;		SS:BP:	Ptr to parent MENU
 12090                              <2> ;	Returns:
 12091                              <2> ;		Nothing
 12092                              <2> ;	Corrupts registers:
 12093                              <2> ;		AX, BX, CX, DX, SI, DI
 12094                              <2> ;--------------------------------------------------------------------
 12095                              <2> ALIGN JUMP_ALIGN
 12096                              <2> DialogString_GetStringWithIoInDSSI:
 12097 000011BF BB[C911]            <2> 	mov		bx, StringEventHandler
 12098 000011C2 C6440C01            <2> 	mov		BYTE [si+STRING_DIALOG_IO.bUserCancellation], TRUE
 12099 000011C6 E95DFA              <2> 	jmp		Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 12100                              <2> 
 12101                              <2> 
 12102                              <2> ;--------------------------------------------------------------------
 12103                              <2> ; StringEventHandler
 12104                              <2> ;	Common parameters for all events:
 12105                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
 12106                              <2> ;		SS:BP:		Ptr to DIALOG
 12107                              <2> ;	Common return values for all events:
 12108                              <2> ;		CF:			Set if event processed
 12109                              <2> ;					Cleared if event not processed
 12110                              <2> ;	Corrupts registers:
 12111                              <2> ;		All
 12112                              <2> ;--------------------------------------------------------------------
 12113                              <2> ALIGN JUMP_ALIGN
 12114                              <2> StringEventHandler:
 12115 000011C9 2EFFA7[E011]        <2> 	jmp		[cs:bx+.rgfnEventHandlers]
 12116                              <2> 
 12117                              <2> 
 12118                              <2> ALIGN JUMP_ALIGN
 12119                              <2> .InitializeMenuinitFromDSSI:
 12120 000011CE 31C0                <2> 	xor		ax, ax
 12121 000011D0 E985FA              <2> 	jmp		Dialog_EventInitializeMenuinitFromDSSIforSingleItemWithHighlightedItemInAX
 12122                              <2> 
 12123                              <2> 
 12124                              <2> ALIGN JUMP_ALIGN
 12125                              <2> .IdleProcessing:
 12126 000011D3 31C9                <2> 	xor		cx, cx						; Item 0 is used as input line
 12127 000011D5 E897F9              <2> 	call	MenuText_AdjustDisplayContextForDrawingItemFromCX
 12128 000011D8 E81700              <2> 	call	GetStringFromUser
 12129 000011DB E86AF7              <2> 	call	MenuInit_CloseMenuWindow
 12130 000011DE F9                  <2> 	stc
 12131 000011DF C3                  <2> 	ret
 12132                              <2> 
 12133                              <2> 
 12134                              <2> ALIGN WORD_ALIGN
 12135                              <2> .rgfnEventHandlers:
 12136                              <2> istruc MENUEVENT
 12137 000011E0 [CE11]              <2> 	at	MENUEVENT.InitializeMenuinitFromDSSI,	dw	.InitializeMenuinitFromDSSI
 12138 000011E2 [560C]              <2> 	at	MENUEVENT.ExitMenu,						dw	Dialog_EventExitMenu
 12139 000011E4 [D311]              <2> 	at	MENUEVENT.IdleProcessing,				dw	.IdleProcessing
 12140 000011E6 [510C]              <2> 	at	MENUEVENT.ItemHighlightedFromCX,		dw	Dialog_EventNotHandled
 12141 000011E8 [510C]              <2> 	at	MENUEVENT.ItemSelectedFromCX,			dw	Dialog_EventNotHandled
 12142 000011EA [510C]              <2> 	at	MENUEVENT.KeyStrokeInAX,				dw	Dialog_EventNotHandled
 12143 000011EC [C60C]              <2> 	at	MENUEVENT.RefreshTitle,					dw	Dialog_EventRefreshTitle
 12144 000011EE [CD0C]              <2> 	at	MENUEVENT.RefreshInformation,			dw	Dialog_EventRefreshInformation
 12145 000011F0 [510C]              <2> 	at	MENUEVENT.RefreshItemFromCX,			dw	Dialog_EventNotHandled
 12146                              <2> iend
 12147                              <2> 
 12148                              <2> 
 12149                              <2> ;--------------------------------------------------------------------
 12150                              <2> ; GetStringFromUser
 12151                              <2> ;	Parameters
 12152                              <2> ;		SS:BP:	Ptr to DIALOG
 12153                              <2> ;	Returns:
 12154                              <2> ;		Nothing (User input stored to STRING_DIALOG_IO)
 12155                              <2> ;	Corrupts registers:
 12156                              <2> ;		AX, CX, DX, SI, DI
 12157                              <2> ;--------------------------------------------------------------------
 12158                              <2> ALIGN JUMP_ALIGN
 12159                              <2> GetStringFromUser:
 12160 000011F2 C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 12161 000011F5 8B4C10              <2> 	mov		cx, [si+STRING_DIALOG_IO.wBufferSize]
 12162 000011F8 C47C12              <2> 	les		di, [si+STRING_DIALOG_IO.fpReturnBuffer]
 12163 000011FB E80D00              <2> 	call	.GetCharacterFilterFunctionToDX
 12164                              <2> 
 12165 000011FE E8F7F3              <2> 	call	Keyboard_ReadUserInputtedStringToESDIWhilePrinting
 12166 00001201 7407                <2> 	jz		SHORT .UserCancellation
 12167                              <2> 
 12168 00001203 C6440C00            <2> 	mov		BYTE [si+STRING_DIALOG_IO.bUserCancellation], FALSE
 12169 00001207 894C10              <2> 	mov		[si+STRING_DIALOG_IO.wReturnLength], cx
 12170                              <2> .UserCancellation:
 12171 0000120A C3                  <2> 	ret
 12172                              <2> 
 12173                              <2> ;--------------------------------------------------------------------
 12174                              <2> ; .GetCharacterFilterFunctionToDX
 12175                              <2> ;	Parameters
 12176                              <2> ;		DS:SI:	Ptr to STRING_DIALOG_IO
 12177                              <2> ;		SS:BP:	Ptr to DIALOG
 12178                              <2> ;	Returns:
 12179                              <2> ;		CS:DX:	Ptr to character filter function
 12180                              <2> ;	Corrupts registers:
 12181                              <2> ;		Nothing
 12182                              <2> ;--------------------------------------------------------------------
 12183                              <2> ALIGN JUMP_ALIGN
 12184                              <2> .GetCharacterFilterFunctionToDX:
 12185 0000120B 8B540E              <2> 	mov		dx, [si+STRING_DIALOG_IO.fnCharFilter]
 12186 0000120E 85D2                <2> 	test	dx, dx
 12187 00001210 7503                <2> 	jnz		SHORT .ReturnFilterFunctionInDX
 12188 00001212 BA[4014]            <2> 	mov		dx, Char_CharIsValid
 12189                              <2> ALIGN JUMP_ALIGN, ret
 12190                              <2> .ReturnFilterFunctionInDX:
 12191 00001215 C3                  <2> 	ret
 12192                              <1> 		%include "DialogWord.asm"
 12193                              <2> ; Project name	:	Assembly Library
 12194                              <2> ; Description	:	Displays word input dialog.
 12195                              <2> 
 12196                              <2> ;
 12197                              <2> ; XTIDE Universal BIOS and Associated Tools
 12198                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 12199                              <2> ;
 12200                              <2> ; This program is free software; you can redistribute it and/or modify
 12201                              <2> ; it under the terms of the GNU General Public License as published by
 12202                              <2> ; the Free Software Foundation; either version 2 of the License, or
 12203                              <2> ; (at your option) any later version.
 12204                              <2> ;
 12205                              <2> ; This program is distributed in the hope that it will be useful,
 12206                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 12207                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 12208                              <2> ; GNU General Public License for more details.
 12209                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 12210                              <2> ;
 12211                              <2> 
 12212                              <2> 
 12213                              <2> ; Section containing code
 12214                              <2> SECTION .text
 12215                              <2> 
 12216                              <2> ;--------------------------------------------------------------------
 12217                              <2> ; DialogWord_GetWordWithIoInDSSI
 12218                              <2> ;	Parameters:
 12219                              <2> ;		DS:SI:	Ptr to WORD_DIALOG_IO
 12220                              <2> ;		SS:BP:	Ptr to parent MENU
 12221                              <2> ;	Returns:
 12222                              <2> ;		Nothing
 12223                              <2> ;	Corrupts registers:
 12224                              <2> ;		AX, BX, CX, DX, SI, DI
 12225                              <2> ;--------------------------------------------------------------------
 12226                              <2> ALIGN JUMP_ALIGN
 12227                              <2> DialogWord_GetWordWithIoInDSSI:
 12228 00001216 BB[2012]            <2> 	mov		bx, WordEventHandler
 12229 00001219 C6440C01            <2> 	mov		BYTE [si+WORD_DIALOG_IO.bUserCancellation], TRUE
 12230 0000121D E906FA              <2> 	jmp		Dialog_DisplayWithDialogInputInDSSIandHandlerInBX
 12231                              <2> 
 12232                              <2> 
 12233                              <2> ;--------------------------------------------------------------------
 12234                              <2> ; WordEventHandler
 12235                              <2> ;	Common parameters for all events:
 12236                              <2> ;		BX:			Menu event (anything from MENUEVENT struct)
 12237                              <2> ;		SS:BP:		Ptr to DIALOG
 12238                              <2> ;	Common return values for all events:
 12239                              <2> ;		CF:			Set if event processed
 12240                              <2> ;					Cleared if event not processed
 12241                              <2> ;	Corrupts registers:
 12242                              <2> ;		All
 12243                              <2> ;--------------------------------------------------------------------
 12244                              <2> ALIGN JUMP_ALIGN
 12245                              <2> WordEventHandler:
 12246 00001220 2EFFA7[3712]        <2> 	jmp		[cs:bx+.rgfnEventHandlers]
 12247                              <2> 
 12248                              <2> 
 12249                              <2> ALIGN JUMP_ALIGN
 12250                              <2> .InitializeMenuinitFromDSSI:
 12251 00001225 31C0                <2> 	xor		ax, ax
 12252 00001227 E92EFA              <2> 	jmp		Dialog_EventInitializeMenuinitFromDSSIforSingleItemWithHighlightedItemInAX
 12253                              <2> 
 12254                              <2> 
 12255                              <2> ALIGN JUMP_ALIGN
 12256                              <2> .IdleProcessing:
 12257 0000122A 31C9                <2> 	xor		cx, cx						; Item 0 is used as input line
 12258 0000122C E840F9              <2> 	call	MenuText_AdjustDisplayContextForDrawingItemFromCX
 12259 0000122F E81700              <2> 	call	GetWordFromUser
 12260 00001232 E813F7              <2> 	call	MenuInit_CloseMenuWindow
 12261 00001235 F9                  <2> 	stc
 12262 00001236 C3                  <2> 	ret
 12263                              <2> 
 12264                              <2> 
 12265                              <2> ALIGN WORD_ALIGN
 12266                              <2> .rgfnEventHandlers:
 12267                              <2> istruc MENUEVENT
 12268 00001237 [2512]              <2> 	at	MENUEVENT.InitializeMenuinitFromDSSI,	dw	.InitializeMenuinitFromDSSI
 12269 00001239 [560C]              <2> 	at	MENUEVENT.ExitMenu,						dw	Dialog_EventExitMenu
 12270 0000123B [2A12]              <2> 	at	MENUEVENT.IdleProcessing,				dw	.IdleProcessing
 12271 0000123D [510C]              <2> 	at	MENUEVENT.ItemHighlightedFromCX,		dw	Dialog_EventNotHandled
 12272 0000123F [510C]              <2> 	at	MENUEVENT.ItemSelectedFromCX,			dw	Dialog_EventNotHandled
 12273 00001241 [510C]              <2> 	at	MENUEVENT.KeyStrokeInAX,				dw	Dialog_EventNotHandled
 12274 00001243 [C60C]              <2> 	at	MENUEVENT.RefreshTitle,					dw	Dialog_EventRefreshTitle
 12275 00001245 [CD0C]              <2> 	at	MENUEVENT.RefreshInformation,			dw	Dialog_EventRefreshInformation
 12276 00001247 [510C]              <2> 	at	MENUEVENT.RefreshItemFromCX,			dw	Dialog_EventNotHandled
 12277                              <2> iend
 12278                              <2> 
 12279                              <2> 
 12280                              <2> ;--------------------------------------------------------------------
 12281                              <2> ; GetWordFromUser
 12282                              <2> ;	Parameters
 12283                              <2> ;		SS:BP:	Ptr to DIALOG
 12284                              <2> ;	Returns:
 12285                              <2> ;		Nothing (User input stored to WORD_DIALOG_IO)
 12286                              <2> ;	Corrupts registers:
 12287                              <2> ;		AX, BX, DX, SI, DI
 12288                              <2> ;--------------------------------------------------------------------
 12289                              <2> ALIGN JUMP_ALIGN
 12290                              <2> GetWordFromUser:
 12291 00001249 C57614              <2> 	lds		si, [bp+DIALOG.fpDialogIO]
 12292                              <2> 	eMOVZX	bx, [si+WORD_DIALOG_IO.bNumericBase]
 12293                              <3> %ifndef USE_386
 12294                              <3>  %ifidni %1, ax
 12295                              <3>  mov al, %2
 12296                              <3>  xor ah, ah
 12297                              <3>  %elifidni %1, bx
 12298 0000124C 8A5C0D              <3>  mov bl, %2
 12299 0000124F 30FF                <3>  xor bh, bh
 12300                              <3>  %elifidni %1, cx
 12301                              <3>  mov cl, %2
 12302                              <3>  xor ch, ch
 12303                              <3>  %elifidni %1, dx
 12304                              <3>  mov dl, %2
 12305                              <3>  xor dh, dh
 12306                              <3>  %else
 12307                              <3>  push ax
 12308                              <3>  mov al, %2
 12309                              <3>  xor ah, ah
 12310                              <3>  xchg ax, %1
 12311                              <3>  pop ax
 12312                              <3>  %endif
 12313                              <3> 
 12314                              <3> %else
 12315                              <3>  movzx %1, %2
 12316                              <3> %endif
 12317                              <2> ALIGN JUMP_ALIGN
 12318                              <2> .GetUserInputIntilValidOrCancelled:
 12319 00001251 E881F3              <2> 	call	Keyboard_ReadUserInputtedWordWhilePrinting
 12320 00001254 7410                <2> 	jz		SHORT .UserCancellation
 12321                              <2> 
 12322 00001256 3B440E              <2> 	cmp		ax, [si+WORD_DIALOG_IO.wMin]
 12323 00001259 720C                <2> 	jb		SHORT .InputtedWordNotInRange
 12324 0000125B 3B4410              <2> 	cmp		ax, [si+WORD_DIALOG_IO.wMax]
 12325 0000125E 7707                <2> 	ja		SHORT .InputtedWordNotInRange
 12326                              <2> 
 12327 00001260 887C0C              <2> 	mov		[si+WORD_DIALOG_IO.bUserCancellation], bh	; Zero = FALSE
 12328 00001263 894412              <2> 	mov		[si+WORD_DIALOG_IO.wReturnWord], ax
 12329                              <2> .UserCancellation:
 12330 00001266 C3                  <2> 	ret
 12331                              <2> 
 12332                              <2> .InputtedWordNotInRange:
 12333 00001267 E810F4              <2> 	call	Keyboard_PlayBellForUnwantedKeystroke
 12334 0000126A E80200              <2> 	call	.ClearInputtedWordFromDialog
 12335 0000126D EBE2                <2> 	jmp		SHORT .GetUserInputIntilValidOrCancelled
 12336                              <2> 
 12337                              <2> ;--------------------------------------------------------------------
 12338                              <2> ; .ClearInputtedWordFromDialog
 12339                              <2> ;	Parameters
 12340                              <2> ;		SS:BP:	Ptr to DIALOG
 12341                              <2> ;	Returns:
 12342                              <2> ;		Nothing
 12343                              <2> ;	Corrupts registers:
 12344                              <2> ;		AX, CX, DX, DI
 12345                              <2> ;--------------------------------------------------------------------
 12346                              <2> ALIGN JUMP_ALIGN
 12347                              <2> .ClearInputtedWordFromDialog:
 12348                              <2> 	CALL_DISPLAY_LIBRARY GetSoftwareCoordinatesToAX
 12349                              <3>  %ifidn %1, PushDisplayContext
 12350                              <3>  call DisplayContext_Push
 12351                              <3>  %elifidn %1, PopDisplayContext
 12352                              <3>  call DisplayContext_Pop
 12353                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 12354                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 12355                              <3>  %else
 12356 0000126F BF[DC01]            <3>  mov di, %1
 12357 00001272 E8F8ED              <3>  call Display_FunctionFromDI
 12358                              <3>  %endif
 12359 00001275 92                  <2> 	xchg	dx, ax
 12360                              <2> 
 12361 00001276 B020                <2> 	mov		al, ' '
 12362 00001278 B90500              <2> 	mov		cx, 5
 12363                              <2> 	CALL_DISPLAY_LIBRARY PrintRepeatedCharacterFromALwithCountInCX
 12364                              <3>  %ifidn %1, PushDisplayContext
 12365                              <3>  call DisplayContext_Push
 12366                              <3>  %elifidn %1, PopDisplayContext
 12367                              <3>  call DisplayContext_Pop
 12368                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 12369                              <3>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 12370                              <3>  %else
 12371 0000127B BF[D302]            <3>  mov di, %1
 12372 0000127E E8ECED              <3>  call Display_FunctionFromDI
 12373                              <3>  %endif
 12374                              <2> 
 12375 00001281 92                  <2> 	xchg	ax, dx
 12376                              <2> 	JMP_DISPLAY_LIBRARY SetCursorCoordinatesFromAX
 12377                              <3>  %ifidn %1, PushDisplayContext
 12378                              <3>  jmp DisplayContext_Push
 12379                              <3>  %elifidn %1, PopDisplayContext
 12380                              <3>  call DisplayContext_Pop
 12381                              <3>  ret
 12382                              <3>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 12383                              <3>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 12384                              <3>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 12385                              <3>  mov di, %1
 12386                              <3>  call Display_FunctionFromDI
 12387                              <3>  ret
 12388                              <3>  %else
 12389 00001282 BF[C701]            <3>  mov di, %1
 12390 00001285 E9E5ED              <3>  jmp Display_FunctionFromDI
 12391                              <3>  %endif
 12392                              <2> 
 12393                              <1> 		%include "ItemLineSplitter.asm"
 12394                              <2> ; Project name	:	Assembly Library
 12395                              <2> ; Description	:	Functions for splitting strings to item lines.
 12396                              <2> 
 12397                              <2> ;
 12398                              <2> ; XTIDE Universal BIOS and Associated Tools
 12399                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 12400                              <2> ;
 12401                              <2> ; This program is free software; you can redistribute it and/or modify
 12402                              <2> ; it under the terms of the GNU General Public License as published by
 12403                              <2> ; the Free Software Foundation; either version 2 of the License, or
 12404                              <2> ; (at your option) any later version.
 12405                              <2> ;
 12406                              <2> ; This program is distributed in the hope that it will be useful,
 12407                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 12408                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 12409                              <2> ; GNU General Public License for more details.
 12410                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 12411                              <2> ;
 12412                              <2> 
 12413                              <2> struc ITEM_LINE_SPLITTER
 12414 00000000 <res 00000002>      <2> 	.wMaxTextLineLength	resb	2
 12415 00000002 <res 00000002>      <2> 	.wLineToFind		resb	2
 12416 00000004 <res 00000002>      <2> 	.wStartOfLine		resb	2
 12417                              <2> endstruc
 12418                              <2> 
 12419                              <2> ; Section containing code
 12420                              <2> SECTION .text
 12421                              <2> 
 12422                              <2> ;--------------------------------------------------------------------
 12423                              <2> ; ItemLineSplitter_GetLinesToAXforStringInDSSI
 12424                              <2> ;	Parameters:
 12425                              <2> ;		DS:SI:	Ptr to string
 12426                              <2> ;		SS:BP:	Ptr to MENU
 12427                              <2> ;	Returns:
 12428                              <2> ;		AX:		Number of lines on string
 12429                              <2> ;	Corrupts registers:
 12430                              <2> ;		BX, CX, DX, SI
 12431                              <2> ;--------------------------------------------------------------------
 12432                              <2> ALIGN JUMP_ALIGN
 12433                              <2> ItemLineSplitter_GetLinesToAXforStringInDSSI:
 12434 00001288 57                  <2> 	push	di
 12435                              <2> 
 12436 00001289 E825F7              <2> 	call	MenuLocation_GetMaxTextLineLengthToAX
 12437                              <2> 	eENTER_STRUCT	ITEM_LINE_SPLITTER_size
 12438 0000128C 55                  <3>  push bp
 12439 0000128D 83EC06              <3>  sub sp, %1
 12440 00001290 89E5                <3>  mov bp, sp
 12441 00001292 894600              <2> 	mov		[bp+ITEM_LINE_SPLITTER.wMaxTextLineLength], ax
 12442 00001295 C74602FFFF          <2> 	mov		WORD [bp+ITEM_LINE_SPLITTER.wLineToFind], -1
 12443                              <2> 
 12444 0000129A 31DB                <2> 	xor		bx, bx		; Line index
 12445 0000129C 89F7                <2> 	mov		di, si		; Start of first word
 12446 0000129E BA[D912]            <2> 	mov		dx, ProcessCharacterFromStringToSplit
 12447 000012A1 E8F701              <2> 	call	StringProcess_DSSIwithFunctionInDX
 12448                              <2> 
 12449 000012A4 8D4701              <2> 	lea		ax, [bx+1]
 12450                              <2> 	eLEAVE_STRUCT	ITEM_LINE_SPLITTER_size
 12451 000012A7 83C406              <3>  add sp, %1
 12452 000012AA 5D                  <3>  pop bp
 12453 000012AB 5F                  <2> 	pop		di
 12454 000012AC C3                  <2> 	ret
 12455                              <2> 
 12456                              <2> 
 12457                              <2> ;--------------------------------------------------------------------
 12458                              <2> ; ItemLineSplitter_GetLineToDSSIandLengthToCXfromStringInDSSIwithIndexInCX
 12459                              <2> ;	Parameters:
 12460                              <2> ;		CX:		Index of line to search for
 12461                              <2> ;		DS:SI:	Ptr to string
 12462                              <2> ;		SS:BP:	Ptr to MENU
 12463                              <2> ;	Returns:
 12464                              <2> ;		CX:		Line length
 12465                              <2> ;		DS:SI:	Ptr to beginning of line
 12466                              <2> ;		CF:		Set if wanted line was found
 12467                              <2> ;	Corrupts registers:
 12468                              <2> ;		AX, BX, DX
 12469                              <2> ;--------------------------------------------------------------------
 12470                              <2> ALIGN JUMP_ALIGN
 12471                              <2> ItemLineSplitter_GetLineToDSSIandLengthToCXfromStringInDSSIwithIndexInCX:
 12472 000012AD 57                  <2> 	push	di
 12473                              <2> 
 12474 000012AE E800F7              <2> 	call	MenuLocation_GetMaxTextLineLengthToAX
 12475                              <2> 	eENTER_STRUCT	ITEM_LINE_SPLITTER_size
 12476 000012B1 55                  <3>  push bp
 12477 000012B2 83EC06              <3>  sub sp, %1
 12478 000012B5 89E5                <3>  mov bp, sp
 12479 000012B7 894600              <2> 	mov		[bp+ITEM_LINE_SPLITTER.wMaxTextLineLength], ax
 12480 000012BA 894E02              <2> 	mov		[bp+ITEM_LINE_SPLITTER.wLineToFind], cx
 12481 000012BD 897604              <2> 	mov		[bp+ITEM_LINE_SPLITTER.wStartOfLine], si
 12482                              <2> 
 12483 000012C0 31DB                <2> 	xor		bx, bx		; Line index
 12484 000012C2 89F7                <2> 	mov		di, si		; Start of first word
 12485 000012C4 BA[D912]            <2> 	mov		dx, ProcessCharacterFromStringToSplit
 12486 000012C7 E8D101              <2> 	call	StringProcess_DSSIwithFunctionInDX
 12487                              <2> 
 12488 000012CA 8B7604              <2> 	mov		si, [bp+ITEM_LINE_SPLITTER.wStartOfLine]
 12489 000012CD 7203                <2> 	jc		SHORT .ReturnLineInDSSIandLengthInCX
 12490 000012CF E8B201              <2> 	call	String_GetLengthFromDSSItoCX	; Last or invalid line. Just return last line.
 12491                              <2> 
 12492                              <2> ALIGN JUMP_ALIGN
 12493                              <2> .ReturnLineInDSSIandLengthInCX:
 12494                              <2> 	eLEAVE_STRUCT	ITEM_LINE_SPLITTER_size
 12495 000012D2 83C406              <3>  add sp, %1
 12496 000012D5 5D                  <3>  pop bp
 12497 000012D6 5F                  <2> 	pop		di
 12498 000012D7 F9                  <2> 	stc
 12499 000012D8 C3                  <2> 	ret
 12500                              <2> 
 12501                              <2> 
 12502                              <2> ;--------------------------------------------------------------------
 12503                              <2> ; Character processing callback function prototype for StringProcess_DSSIwithFunctionInBX.
 12504                              <2> ; ProcessCharacterFromStringToSplit
 12505                              <2> ;	Parameters:
 12506                              <2> ;		AL:			Character to process
 12507                              <2> ;		BX:			Line index
 12508                              <2> ;		CX:			Number of characters processed (Characters on line so far)
 12509                              <2> ;		DS:SI:		Ptr to next character
 12510                              <2> ;		DS:DI:		Start of current word
 12511                              <2> ;		SS:BP:		Ptr to ITEM_LINE_SPLITTER
 12512                              <2> ;	Returns:
 12513                              <2> ;		CF:			Clear to continue with next character
 12514                              <2> ;					Set to stop processing
 12515                              <2> ;		BX:			Line index
 12516                              <2> ;		CX:			Characters on line so far
 12517                              <2> ;		DS:DI:		Start of current word
 12518                              <2> ;	Corrupts registers:
 12519                              <2> ;		AX
 12520                              <2> ;--------------------------------------------------------------------
 12521                              <2> ALIGN JUMP_ALIGN
 12522                              <2> ProcessCharacterFromStringToSplit:
 12523 000012D9 3C20                <2> 	cmp		al, ' '
 12524 000012DB 770E                <2> 	ja		SHORT .CheckLineLength
 12525 000012DD 89F7                <2> 	mov		di, si				; DS:DI now points start of new word
 12526 000012DF 740A                <2> 	je		SHORT .CheckLineLength
 12527                              <2> 
 12528 000012E1 3C0A                <2> 	cmp		al, LF
 12529 000012E3 740C                <2> 	je		SHORT .ChangeToNextLine
 12530 000012E5 3C0D                <2> 	cmp		al, CR
 12531 000012E7 7516                <2> 	jne		SHORT .IgnoreUnsupportedControlCharacter
 12532 000012E9 31C9                <2> 	xor		cx, cx				; Carriage return so reset line length so far
 12533                              <2> 
 12534                              <2> ALIGN JUMP_ALIGN
 12535                              <2> .CheckLineLength:
 12536 000012EB 394E00              <2> 	cmp		[bp+ITEM_LINE_SPLITTER.wMaxTextLineLength], cx
 12537 000012EE 7201                <2> 	jb		SHORT .ChangeToNextLine
 12538 000012F0 C3                  <2> 	ret		; With CF cleared
 12539                              <2> 
 12540                              <2> ALIGN JUMP_ALIGN
 12541                              <2> .ChangeToNextLine:
 12542 000012F1 3B5E02              <2> 	cmp		bx, [bp+ITEM_LINE_SPLITTER.wLineToFind]
 12543 000012F4 740C                <2> 	je		SHORT .WantedLineFound
 12544                              <2> 
 12545 000012F6 43                  <2> 	inc		bx					; Increment line
 12546 000012F7 31C9                <2> 	xor		cx, cx				; Zero character counter (and clear CF)
 12547 000012F9 89FE                <2> 	mov		si, di				; Start from complete word
 12548 000012FB 897E04              <2> 	mov		[bp+ITEM_LINE_SPLITTER.wStartOfLine], di
 12549 000012FE C3                  <2> 	ret
 12550                              <2> 
 12551                              <2> ALIGN JUMP_ALIGN
 12552                              <2> .IgnoreUnsupportedControlCharacter:
 12553 000012FF 49                  <2> 	dec		cx
 12554 00001300 F8                  <2> 	clc
 12555 00001301 C3                  <2> 	ret
 12556                              <2> 
 12557                              <2> ALIGN JUMP_ALIGN
 12558                              <2> .WantedLineFound:
 12559 00001302 8D4DFF              <2> 	lea		cx, [di-1]
 12560 00001305 2B4E04              <2> 	sub		cx, [bp+ITEM_LINE_SPLITTER.wStartOfLine]
 12561 00001308 F9                  <2> 	stc
 12562 00001309 C3                  <2> 	ret
 12563                              <1> 		%include "StringsForDialogs.asm"
 12564                              <2> ; Project name	:	Assembly Library
 12565                              <2> ; Description	:	Strings used by dialogs.
 12566                              <2> 
 12567                              <2> ;
 12568                              <2> ; XTIDE Universal BIOS and Associated Tools
 12569                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 12570                              <2> ;
 12571                              <2> ; This program is free software; you can redistribute it and/or modify
 12572                              <2> ; it under the terms of the GNU General Public License as published by
 12573                              <2> ; the Free Software Foundation; either version 2 of the License, or
 12574                              <2> ; (at your option) any later version.
 12575                              <2> ;
 12576                              <2> ; This program is distributed in the hope that it will be useful,
 12577                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 12578                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 12579                              <2> ; GNU General Public License for more details.
 12580                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 12581                              <2> ;
 12582                              <2> 
 12583                              <2> ; Strings for Progress Dialog
 12584 0000130A 54696D6520656C6170- <2> g_szTimeElapsed:		db	"Time elapsed  :",NULL
 12585 00001313 73656420203A00      <2>
 12586 0000131A 457374696D61746564- <2> g_szTimeLeft:			db	"Estimated left:",NULL
 12587 00001323 206C6566743A00      <2>
 12588 0000132A 2025322D75206D696E- <2> g_szTimeFormat:			db	" %2-u min %2-u sec",LF,CR,NULL
 12589 00001333 2025322D7520736563- <2>
 12590 0000133C 0A0D00              <2>
 12591                              <2> 
 12592                              <2> ; Strings for Drive Dialog
 12593 0000133F 25633A00            <2> g_szDriveFormat:		db	"%c:",NULL
 12594                              <2> 
 12595                              <2> ; Strings for File Dialog
 12596 00001343 4632204368616E6765- <2> g_szChangeDrive:		db	"F2 Change Drive",LF,CR,NULL
 12597 0000134C 2044726976650A0D00  <2>
 12598 00001355 46332053656C656374- <2> g_szSelectDirectory:	db	"F3 Select Current Directory",LF,CR,NULL
 12599 0000135E 2043757272656E7420- <2>
 12600 00001367 4469726563746F7279- <2>
 12601 00001370 0A0D00              <2>
 12602 00001373 463420496E70757420- <2> g_szCreateNew:			db	"F4 Input new File or Directory",NULL
 12603 0000137C 6E65772046696C6520- <2>
 12604 00001385 6F7220446972656374- <2>
 12605 0000138E 6F727900            <2>
 12606                              <2> 
 12607                              <2> g_szSelectNewDrive:
 12608 00001392 53656C656374206E65- <2> 	db		"Select new drive.",NULL
 12609 0000139B 772064726976652E00  <2>
 12610                              <2> g_szLoadingPleaseWait:
 12611 000013A4 4C6F6164696E672E20- <2> 	db		"Loading. Please wait...",NULL
 12612 000013AD 506C65617365207761- <2>
 12613 000013B6 69742E2E2E00        <2>
 12614                              <2> 
 12615                              <2> g_szEnterNewFileOrDirectory:
 12616 000013BC 456E746572206E616D- <2> 	db		"Enter name for new file or directory.",NULL
 12617 000013C5 6520666F72206E6577- <2>
 12618 000013CE 2066696C65206F7220- <2>
 12619 000013D7 6469726563746F7279- <2>
 12620 000013E0 2E00                <2>
 12621                              <2> 
 12622                              <2> FILE_STRING_LENGTH		EQU		(24+1)	; +1 = LF in directory contents string
 12623                              <2> g_szFileFormat:
 12624 000013E2 2531365325342D7520- <2> 	db		"%16S%4-u %c%cB",LF,NULL
 12625 000013EB 25632563420A00      <2>
 12626                              <2> g_szDirectoryFormat:
 12627 000013F2 2531365325732D4449- <2> 	db		"%16S%s-DIR",LF,NULL
 12628 000013FB 520A00              <2>
 12629                              <2> g_szSub:
 12630 000013FE AF53554200          <2> 	db		ANGLE_QUOTE_RIGHT,"SUB",NULL
 12631                              <2> g_szUp:
 12632 00001403 AE20555000          <2> 	db		ANGLE_QUOTE_LEFT," UP",NULL
 12633                              <2> 
 12634                              <2> g_szSingleItem:			; Used by Dialog.asm for single item line
 12635                              <2> g_szUpdir:
 12636 00001408 2E2E                <2> 	db		".."
 12637                              <2> g_szNull:
 12638 0000140A 00                  <2> 	db		NULL
 12639                              <1> 	%endif
 12640                              <1> %endif
 12641                              <1> 
 12642                              <1> %ifdef INCLUDE_STRING_LIBRARY
 12643                              <1>   %ifndef STRING_JUMP_ALIGN
 12644                              <1> 	%define STRING_JUMP_ALIGN 1
 12645                              <1>   %endif
 12646                              <1> 	%include "Char.asm"
 12647                              <2> ; Project name	:	Assembly Library
 12648                              <2> ; Description	:	Functions for handling characters.
 12649                              <2> 
 12650                              <2> ;
 12651                              <2> ; XTIDE Universal BIOS and Associated Tools
 12652                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 12653                              <2> ;
 12654                              <2> ; This program is free software; you can redistribute it and/or modify
 12655                              <2> ; it under the terms of the GNU General Public License as published by
 12656                              <2> ; the Free Software Foundation; either version 2 of the License, or
 12657                              <2> ; (at your option) any later version.
 12658                              <2> ;
 12659                              <2> ; This program is distributed in the hope that it will be useful,
 12660                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 12661                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 12662                              <2> ; GNU General Public License for more details.
 12663                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 12664                              <2> ;
 12665                              <2> 
 12666                              <2> ; Section containing code
 12667                              <2> SECTION .text
 12668                              <2> 
 12669                              <2> ;--------------------------------------------------------------------
 12670                              <2> ; This macro can only be used within this source file!!!
 12671                              <2> ; IS_BETWEEN_IMMEDIATES
 12672                              <2> ;	Parameters:
 12673                              <2> ;		%1:		Value to check
 12674                              <2> ;		%2:		First accepted value in range
 12675                              <2> ;		%3:		Last accepted value in range
 12676                              <2> ;	Returns:
 12677                              <2> ;		CF:		Set if character in range
 12678                              <2> ;				(Jumps to Char_CharIsNotValid if before range)
 12679                              <2> ;	Corrupts registers:
 12680                              <2> ;		Nothing
 12681                              <2> ;--------------------------------------------------------------------
 12682                              <2> %macro IS_BETWEEN_IMMEDIATES 3
 12683                              <2> 	cmp		%1, %2
 12684                              <2> 	jb		SHORT Char_CharIsNotValid
 12685                              <2> 	cmp		%1, (%3)+1				; Set CF if %1 is lesser
 12686                              <2> %endmacro
 12687                              <2> 
 12688                              <2> 
 12689                              <2> ;--------------------------------------------------------------------
 12690                              <2> ; Char_IsLowerCaseLetterInAL
 12691                              <2> ;	Parameters:
 12692                              <2> ;		AL:		Character to check
 12693                              <2> ;	Returns:
 12694                              <2> ;		CF:		Set if character is lower case letter ('a'...'z')
 12695                              <2> ;				Cleared if character is not lower case letter
 12696                              <2> ;	Corrupts registers:
 12697                              <2> ;		Nothing
 12698                              <2> ;--------------------------------------------------------------------
 12699                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12700                              <2> 	%ifndef MODULE_HOTKEYS
 12701                              <2> 		%define EXCLUDE
 12702                              <2> 	%endif
 12703                              <2> %endif
 12704                              <2> 
 12705                              <2> %ifndef EXCLUDE
 12706                              <2> ALIGN STRING_JUMP_ALIGN
 12707                              <2> Char_IsLowerCaseLetterInAL:
 12708                              <2> 	IS_BETWEEN_IMMEDIATES al, 'a', 'z'
 12709 0000140B 3C61                <3>  cmp %1, %2
 12710 0000140D 7233                <3>  jb SHORT Char_CharIsNotValid
 12711 0000140F 3C7B                <3>  cmp %1, (%3)+1
 12712 00001411 C3                  <2> 	ret
 12713                              <2> %endif
 12714                              <2> %undef EXCLUDE
 12715                              <2> 
 12716                              <2> 
 12717                              <2> ;--------------------------------------------------------------------
 12718                              <2> ; Char_IsUpperCaseLetterInAL
 12719                              <2> ;	Parameters:
 12720                              <2> ;		AL:		Character to check
 12721                              <2> ;	Returns:
 12722                              <2> ;		CF:		Set if character is upper case letter ('A'...'Z')
 12723                              <2> ;				Cleared if character is not upper case letter
 12724                              <2> ;	Corrupts registers:
 12725                              <2> ;		Nothing
 12726                              <2> ;--------------------------------------------------------------------
 12727                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12728                              <2> ALIGN STRING_JUMP_ALIGN
 12729                              <2> Char_IsUpperCaseLetterInAL:
 12730                              <2> 	IS_BETWEEN_IMMEDIATES al, 'A', 'Z'
 12731 00001412 3C41                <3>  cmp %1, %2
 12732 00001414 722C                <3>  jb SHORT Char_CharIsNotValid
 12733 00001416 3C5B                <3>  cmp %1, (%3)+1
 12734 00001418 C3                  <2> 	ret
 12735                              <2> %endif
 12736                              <2> 
 12737                              <2> 
 12738                              <2> ;--------------------------------------------------------------------
 12739                              <2> ; Char_IsHexadecimalDigitInAL
 12740                              <2> ;	Parameters:
 12741                              <2> ;		AL:		Character to check
 12742                              <2> ;	Returns:
 12743                              <2> ;		AL:		Character converted to lower case
 12744                              <2> ;		CF:		Set if character is decimal digit ('0'...'F')
 12745                              <2> ;				Cleared if character is not decimal digit
 12746                              <2> ;	Corrupts registers:
 12747                              <2> ;		Nothing
 12748                              <2> ;--------------------------------------------------------------------
 12749                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12750                              <2> ALIGN STRING_JUMP_ALIGN
 12751                              <2> Char_IsHexadecimalDigitInAL:
 12752 00001419 E80C00              <2> 	call	Char_IsDecimalDigitInAL
 12753 0000141C 7222                <2> 	jc		SHORT Char_CharIsValid
 12754 0000141E E82300              <2> 	call	Char_ALtoLowerCaseLetter
 12755                              <2> 	IS_BETWEEN_IMMEDIATES al, 'a', 'f'
 12756 00001421 3C61                <3>  cmp %1, %2
 12757 00001423 721D                <3>  jb SHORT Char_CharIsNotValid
 12758 00001425 3C67                <3>  cmp %1, (%3)+1
 12759 00001427 C3                  <2> 	ret
 12760                              <2> %endif
 12761                              <2> 
 12762                              <2> 
 12763                              <2> ;--------------------------------------------------------------------
 12764                              <2> ; Char_IsDecimalDigitInAL
 12765                              <2> ;	Parameters:
 12766                              <2> ;		AL:		Character to check
 12767                              <2> ;	Returns:
 12768                              <2> ;		CF:		Set if character is decimal digit ('0'...'9')
 12769                              <2> ;				Cleared if character is not decimal digit
 12770                              <2> ;	Corrupts registers:
 12771                              <2> ;		Nothing
 12772                              <2> ;--------------------------------------------------------------------
 12773                              <2> %ifndef MODULE_STRINGS_COMPRESSED
 12774                              <2> ALIGN STRING_JUMP_ALIGN
 12775                              <2> Char_IsDecimalDigitInAL:
 12776                              <2> 	IS_BETWEEN_IMMEDIATES al, '0', '9'
 12777 00001428 3C30                <3>  cmp %1, %2
 12778 0000142A 7216                <3>  jb SHORT Char_CharIsNotValid
 12779 0000142C 3C3A                <3>  cmp %1, (%3)+1
 12780 0000142E C3                  <2> 	ret
 12781                              <2> %endif
 12782                              <2> 
 12783                              <2> 
 12784                              <2> ;--------------------------------------------------------------------
 12785                              <2> ; Char_ConvertIntegerToALfromDigitInALwithBaseInBX
 12786                              <2> ;	Parameters:
 12787                              <2> ;		AL:		Character to convert
 12788                              <2> ;		BX:		Numeric base (10 or 16)
 12789                              <2> ;	Returns:
 12790                              <2> ;		AL:		Character converted to integer
 12791                              <2> ;		CF:		Set if character was valid
 12792                              <2> ;				Cleared if character was invalid
 12793                              <2> ;	Corrupts registers:
 12794                              <2> ;		Nothing
 12795                              <2> ;--------------------------------------------------------------------
 12796                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12797                              <2> ALIGN STRING_JUMP_ALIGN
 12798                              <2> Char_ConvertIntegerToALfromDigitInALwithBaseInBX:
 12799 0000142F 52                  <2> 	push	dx
 12800 00001430 E81E00              <2> 	call	Char_GetFilterFunctionToDXforNumericBaseInBX
 12801 00001433 FFD2                <2> 	call	dx						; Converts to lower case
 12802 00001435 5A                  <2> 	pop		dx
 12803 00001436 730A                <2> 	jnc		SHORT Char_CharIsNotValid
 12804                              <2> 
 12805 00001438 3C39                <2> 	cmp		al, '9'					; Decimal digit
 12806 0000143A 7602                <2> 	jbe		SHORT .ConvertToDecimalDigit
 12807 0000143C 2C27                <2> 	sub		al, 'a'-'0'-10			; Convert to hexadecimal integer
 12808                              <2> ALIGN STRING_JUMP_ALIGN
 12809                              <2> .ConvertToDecimalDigit:
 12810 0000143E 2C30                <2> 	sub		al, '0'					; Convert to decimal integer
 12811                              <2> 	; Fall to Char_CharIsValid
 12812                              <2> %endif
 12813                              <2> 
 12814                              <2> 
 12815                              <2> ;--------------------------------------------------------------------
 12816                              <2> ; Char_CharIsValid
 12817                              <2> ; Char_CharIsNotValid
 12818                              <2> ;	Parameters:
 12819                              <2> ;		Nothing
 12820                              <2> ;	Returns:
 12821                              <2> ;		CF:		Set for Char_CharIsValid
 12822                              <2> ;				Cleared for Char_CharIsNotValid
 12823                              <2> ;	Corrupts registers:
 12824                              <2> ;		Nothing
 12825                              <2> ;--------------------------------------------------------------------
 12826                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12827                              <2> ALIGN STRING_JUMP_ALIGN
 12828                              <2> Char_CharIsValid:
 12829 00001440 F9                  <2> 	stc
 12830 00001441 C3                  <2> 	ret
 12831                              <2> %endif
 12832                              <2> 
 12833                              <2> 
 12834                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12835                              <2> 	%ifndef MODULE_HOTKEYS
 12836                              <2> 		%define EXCLUDE
 12837                              <2> 	%endif
 12838                              <2> 	%ifndef MODULE_STRINGS_COMPRESSED
 12839                              <2> 		%undef EXCLUDE
 12840                              <2> 	%endif
 12841                              <2> %endif
 12842                              <2> 
 12843                              <2> %ifndef EXCLUDE
 12844                              <2> ALIGN STRING_JUMP_ALIGN
 12845                              <2> Char_CharIsNotValid:
 12846 00001442 F8                  <2> 	clc
 12847 00001443 C3                  <2> 	ret
 12848                              <2> %endif
 12849                              <2> %undef EXCLUDE
 12850                              <2> 
 12851                              <2> 
 12852                              <2> ;--------------------------------------------------------------------
 12853                              <2> ; Char_ALtoLowerCaseLetter
 12854                              <2> ;	Parameters:
 12855                              <2> ;		AL:		Character to convert
 12856                              <2> ;	Returns:
 12857                              <2> ;		AL:		Character with possible conversion
 12858                              <2> ;	Corrupts registers:
 12859                              <2> ;		Nothing
 12860                              <2> ;--------------------------------------------------------------------
 12861                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12862                              <2> ALIGN STRING_JUMP_ALIGN
 12863                              <2> Char_ALtoLowerCaseLetter:
 12864 00001444 E8CBFF              <2> 	call	Char_IsUpperCaseLetterInAL	; Is upper case character?
 12865 00001447 EB03                <2> 	jmp		SHORT Char_ALtoUpperCaseLetter.CheckCF
 12866                              <2> %endif
 12867                              <2> 
 12868                              <2> 
 12869                              <2> ;--------------------------------------------------------------------
 12870                              <2> ; Char_ALtoUpperCaseLetter
 12871                              <2> ;	Parameters:
 12872                              <2> ;		AL:		Character to convert
 12873                              <2> ;	Returns:
 12874                              <2> ;		AL:		Character with possible conversion
 12875                              <2> ;	Corrupts registers:
 12876                              <2> ;		Nothing
 12877                              <2> ;--------------------------------------------------------------------
 12878                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12879                              <2> ALIGN STRING_JUMP_ALIGN
 12880                              <2> Char_ALtoUpperCaseLetter:
 12881 00001449 E8BFFF              <2> 	call	Char_IsLowerCaseLetterInAL	; Is lower case character?
 12882                              <2> .CheckCF:
 12883 0000144C 7302                <2> 	jnc		SHORT Char_ChangeCaseInAL.Return
 12884                              <2> 	; Fall to Char_ChangeCaseInAL
 12885                              <2> %endif
 12886                              <2> 
 12887                              <2> 
 12888                              <2> ;--------------------------------------------------------------------
 12889                              <2> ; Char_ChangeCaseInAL
 12890                              <2> ;	Parameters:
 12891                              <2> ;		AL:		Character to convert (must be A-Z or a-z)
 12892                              <2> ;	Returns:
 12893                              <2> ;		AL:		Character converted
 12894                              <2> ;	Corrupts registers:
 12895                              <2> ;		Nothing
 12896                              <2> ;--------------------------------------------------------------------
 12897                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12898                              <2> Char_ChangeCaseInAL:
 12899 0000144E 3420                <2> 	xor		al, 32
 12900                              <2> .Return:
 12901 00001450 C3                  <2> 	ret
 12902                              <2> %endif
 12903                              <2> 
 12904                              <2> 
 12905                              <2> ;--------------------------------------------------------------------
 12906                              <2> ; Char_GetFilterFunctionToDXforNumericBaseInBX
 12907                              <2> ;	Parameters
 12908                              <2> ;		BX:		Numeric base (10 or 16)
 12909                              <2> ;	Returns:
 12910                              <2> ;		CS:DX:	Ptr to character filter function
 12911                              <2> ;	Corrupts registers:
 12912                              <2> ;		Nothing
 12913                              <2> ;--------------------------------------------------------------------
 12914                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12915                              <2> ALIGN STRING_JUMP_ALIGN
 12916                              <2> Char_GetFilterFunctionToDXforNumericBaseInBX:
 12917 00001451 BA[2814]            <2> 	mov		dx, Char_IsDecimalDigitInAL
 12918 00001454 80FB0A              <2> 	cmp		bl, 10
 12919 00001457 7403                <2> 	je		SHORT .Return
 12920 00001459 BA[1914]            <2> 	mov		dx, Char_IsHexadecimalDigitInAL
 12921                              <2> .Return:
 12922 0000145C C3                  <2> 	ret
 12923                              <2> %endif
 12924                              <1> 	%ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 12925                              <1> 		%include "String.asm"
 12926                              <2> ; Project name	:	Assembly Library
 12927                              <2> ; Description	:	Functions for handling characters.
 12928                              <2> 
 12929                              <2> ;
 12930                              <2> ; XTIDE Universal BIOS and Associated Tools
 12931                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 12932                              <2> ;
 12933                              <2> ; This program is free software; you can redistribute it and/or modify
 12934                              <2> ; it under the terms of the GNU General Public License as published by
 12935                              <2> ; the Free Software Foundation; either version 2 of the License, or
 12936                              <2> ; (at your option) any later version.
 12937                              <2> ;
 12938                              <2> ; This program is distributed in the hope that it will be useful,
 12939                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 12940                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 12941                              <2> ; GNU General Public License for more details.
 12942                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 12943                              <2> ;
 12944                              <2> 
 12945                              <2> ; Section containing code
 12946                              <2> SECTION .text
 12947                              <2> 
 12948                              <2> ;--------------------------------------------------------------------
 12949                              <2> ; String_ConvertDSSItoLowerCase
 12950                              <2> ;	Parameters:
 12951                              <2> ;		DS:SI:	Ptr to string to convert
 12952                              <2> ;	Returns:
 12953                              <2> ;		CX:		Number of characters processed
 12954                              <2> ;		SI:		Updated
 12955                              <2> ;	Corrupts registers:
 12956                              <2> ;		Nothing
 12957                              <2> ;--------------------------------------------------------------------
 12958                              <2> ALIGN STRING_JUMP_ALIGN
 12959                              <2> String_ConvertDSSItoLowerCase:
 12960 0000145D 52                  <2> 	push	dx
 12961 0000145E 50                  <2> 	push	ax
 12962                              <2> 
 12963 0000145F BA[AC14]            <2> 	mov		dx, StringProcess_ConvertToLowerCase
 12964 00001462 E83600              <2> 	call	StringProcess_DSSIwithFunctionInDX
 12965                              <2> 
 12966 00001465 58                  <2> 	pop		ax
 12967 00001466 5A                  <2> 	pop		dx
 12968 00001467 C3                  <2> 	ret
 12969                              <2> 
 12970                              <2> 
 12971                              <2> ;--------------------------------------------------------------------
 12972                              <2> ; String_ConvertWordToAXfromStringInDSSIwithBaseInBX
 12973                              <2> ;	Parameters:
 12974                              <2> ;		BX:		Numeric base (10 or 16)
 12975                              <2> ;		DS:SI:	Ptr to string to convert
 12976                              <2> ;	Returns:
 12977                              <2> ;		AX:		Word converted from string
 12978                              <2> ;		CX:		Number of characters processed
 12979                              <2> ;		SI:		Updated
 12980                              <2> ;		CF:		Cleared if successful
 12981                              <2> ;				Set if error during conversion
 12982                              <2> ;	Corrupts registers:
 12983                              <2> ;		Nothing
 12984                              <2> ;--------------------------------------------------------------------
 12985                              <2> ALIGN STRING_JUMP_ALIGN
 12986                              <2> String_ConvertWordToAXfromStringInDSSIwithBaseInBX:
 12987 00001468 57                  <2> 	push	di
 12988 00001469 52                  <2> 	push	dx
 12989                              <2> 
 12990 0000146A 31FF                <2> 	xor		di, di
 12991 0000146C BA[B414]            <2> 	mov		dx, StringProcess_ConvertToWordInDIWithBaseInBX
 12992 0000146F E82900              <2> 	call	StringProcess_DSSIwithFunctionInDX
 12993 00001472 97                  <2> 	xchg	ax, di
 12994                              <2> 
 12995 00001473 5A                  <2> 	pop		dx
 12996 00001474 5F                  <2> 	pop		di
 12997 00001475 C3                  <2> 	ret
 12998                              <2> 
 12999                              <2> 
 13000                              <2> ;--------------------------------------------------------------------
 13001                              <2> ; String_CopyDSSItoESDIandGetLengthToCX
 13002                              <2> ;	Parameters:
 13003                              <2> ;		DS:SI:	Ptr to source NULL terminated string
 13004                              <2> ;		ES:DI:	Ptr to destination buffer
 13005                              <2> ;	Returns:
 13006                              <2> ;		CX:		Number of characters copied
 13007                              <2> ;		SI,DI:	Updated by CX characters
 13008                              <2> ;	Corrupts registers:
 13009                              <2> ;		Nothing
 13010                              <2> ;--------------------------------------------------------------------
 13011                              <2> ALIGN STRING_JUMP_ALIGN
 13012                              <2> String_CopyDSSItoESDIandGetLengthToCX:
 13013 00001476 50                  <2> 	push	ax
 13014                              <2> 
 13015 00001477 31C9                <2> 	xor		cx, cx
 13016                              <2> ALIGN STRING_JUMP_ALIGN
 13017                              <2> .CopyNextCharacter:
 13018 00001479 AC                  <2> 	lodsb						; Load from DS:SI to AL
 13019 0000147A 84C0                <2> 	test	al, al				; NULL to end string?
 13020 0000147C 7404                <2> 	jz		SHORT .EndOfString
 13021 0000147E AA                  <2> 	stosb						; Store from AL to ES:DI
 13022 0000147F 41                  <2> 	inc		cx					; Increment number of characters written
 13023 00001480 EBF7                <2> 	jmp		SHORT .CopyNextCharacter
 13024                              <2> 
 13025                              <2> ALIGN STRING_JUMP_ALIGN
 13026                              <2> .EndOfString:
 13027 00001482 58                  <2> 	pop		ax
 13028 00001483 C3                  <2> 	ret
 13029                              <2> 
 13030                              <2> 
 13031                              <2> ;--------------------------------------------------------------------
 13032                              <2> ; String_GetLengthFromDSSItoCX
 13033                              <2> ;	Parameters:
 13034                              <2> ;		DS:SI:	Ptr to NULL terminated string
 13035                              <2> ;	Returns:
 13036                              <2> ;		CX:		String length in characters
 13037                              <2> ;	Corrupts registers:
 13038                              <2> ;		Nothing
 13039                              <2> ;--------------------------------------------------------------------
 13040                              <2> ALIGN STRING_JUMP_ALIGN
 13041                              <2> String_GetLengthFromDSSItoCX:
 13042 00001484 50                  <2> 	push	ax
 13043 00001485 56                  <2> 	push	si
 13044                              <2> 
 13045 00001486 E8D500              <2> 	call	Registers_ExchangeDSSIwithESDI
 13046 00001489 31C0                <2> 	xor		ax, ax		; Find NULL
 13047 0000148B B9FFFF              <2> 	mov		cx, -1		; Full segment if necessary
 13048 0000148E F2AE                <2> 	repne scasb
 13049 00001490 89F9                <2> 	mov		cx, di
 13050 00001492 E8C900              <2> 	call	Registers_ExchangeDSSIwithESDI
 13051                              <2> 
 13052 00001495 5E                  <2> 	pop		si
 13053 00001496 F9                  <2> 	stc
 13054 00001497 19F1                <2> 	sbb		cx, si		; Subtract NULL
 13055 00001499 58                  <2> 	pop		ax
 13056 0000149A C3                  <2> 	ret
 13057                              <1> 		%include "StringProcess.asm"
 13058                              <2> ; Project name	:	Assembly Library
 13059                              <2> ; Description	:	Functions for processing characters in a string.
 13060                              <2> 
 13061                              <2> ;
 13062                              <2> ; XTIDE Universal BIOS and Associated Tools
 13063                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 13064                              <2> ;
 13065                              <2> ; This program is free software; you can redistribute it and/or modify
 13066                              <2> ; it under the terms of the GNU General Public License as published by
 13067                              <2> ; the Free Software Foundation; either version 2 of the License, or
 13068                              <2> ; (at your option) any later version.
 13069                              <2> ;
 13070                              <2> ; This program is distributed in the hope that it will be useful,
 13071                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 13072                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 13073                              <2> ; GNU General Public License for more details.
 13074                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 13075                              <2> ;
 13076                              <2> 
 13077                              <2> ; Section containing code
 13078                              <2> SECTION .text
 13079                              <2> 
 13080                              <2> ;--------------------------------------------------------------------
 13081                              <2> ; Character processing callback function prototype for StringProcess_DSSIwithFunctionInDX.
 13082                              <2> ;	Parameters:
 13083                              <2> ;		AL:			Character to process
 13084                              <2> ;		CX:			Character number (index for next character)
 13085                              <2> ;		DS:SI:		Ptr to next character
 13086                              <2> ;		BX,DI,ES:	Free to use by processing function
 13087                              <2> ;	Returns:
 13088                              <2> ;		CF:			Clear to continue with next character
 13089                              <2> ;					Set to stop processing
 13090                              <2> ;		BX,DI,ES:	Free to use by processing function
 13091                              <2> ;	Corrupts registers:
 13092                              <2> ;		AX
 13093                              <2> ;--------------------------------------------------------------------
 13094                              <2> 
 13095                              <2> 
 13096                              <2> ;--------------------------------------------------------------------
 13097                              <2> ; StringProcess_DSSIwithFunctionInDX
 13098                              <2> ;	Parameters:
 13099                              <2> ;		DX:		Character processing function
 13100                              <2> ;		DS:SI:	Ptr to NULL terminated string to convert
 13101                              <2> ;	Returns:
 13102                              <2> ;		CX:		Number of characters processed
 13103                              <2> ;		CF:		Clear if all characters processed
 13104                              <2> ;				Set if terminated by processing function
 13105                              <2> ;	Corrupts registers:
 13106                              <2> ;		Nothing (processing function can corrupt BX,DI,ES)
 13107                              <2> ;--------------------------------------------------------------------
 13108                              <2> ALIGN STRING_JUMP_ALIGN
 13109                              <2> StringProcess_DSSIwithFunctionInDX:
 13110 0000149B 56                  <2> 	push	si
 13111 0000149C 50                  <2> 	push	ax
 13112                              <2> 
 13113 0000149D 31C9                <2> 	xor		cx, cx
 13114                              <2> ALIGN STRING_JUMP_ALIGN
 13115                              <2> .ProcessNextCharacter:
 13116 0000149F AC                  <2> 	lodsb
 13117 000014A0 84C0                <2> 	test	al, al				; NULL to end string
 13118 000014A2 7405                <2> 	jz		SHORT .EndOfString	; Return with CF cleared
 13119 000014A4 41                  <2> 	inc		cx
 13120 000014A5 FFD2                <2> 	call	dx
 13121 000014A7 73F6                <2> 	jnc		SHORT .ProcessNextCharacter
 13122                              <2> 
 13123                              <2> ALIGN STRING_JUMP_ALIGN
 13124                              <2> .EndOfString:
 13125 000014A9 58                  <2> 	pop		ax
 13126 000014AA 5E                  <2> 	pop		si
 13127 000014AB C3                  <2> 	ret
 13128                              <2> 
 13129                              <2> 
 13130                              <2> ;--------------------------------------------------------------------
 13131                              <2> ; StringProcess_ConvertToLowerCase (callback function for StringProcess_DSSIwithFunctionInDX)
 13132                              <2> ;	Parameters:
 13133                              <2> ;		AL:		Character to convert to lower case
 13134                              <2> ;		DS:SI:	Ptr to next character
 13135                              <2> ;	Returns:
 13136                              <2> ;		CF:		Clear to continue processing
 13137                              <2> ;	Corrupts registers:
 13138                              <2> ;		AL
 13139                              <2> ;--------------------------------------------------------------------
 13140                              <2> ALIGN STRING_JUMP_ALIGN
 13141                              <2> StringProcess_ConvertToLowerCase:
 13142 000014AC E895FF              <2> 	call	Char_ALtoLowerCaseLetter
 13143 000014AF 8844FF              <2> 	mov		[si-1], al
 13144 000014B2 F8                  <2> 	clc
 13145 000014B3 C3                  <2> 	ret
 13146                              <2> 
 13147                              <2> 
 13148                              <2> ;--------------------------------------------------------------------
 13149                              <2> ; StringProcess_ConvertToWordInDIWithBaseInBX (callback function for StringProcess_DSSIwithFunctionInDX)
 13150                              <2> ;	Parameters:
 13151                              <2> ;		AL:		Character to convert to lower case
 13152                              <2> ;		BX:		Numeric base (2, 10 or 16)
 13153                              <2> ;	Returns:
 13154                              <2> ;		CF:		Clear to continue processing
 13155                              <2> ;				Set if error
 13156                              <2> ;	Corrupts registers:
 13157                              <2> ;		AX
 13158                              <2> ;--------------------------------------------------------------------
 13159                              <2> ALIGN STRING_JUMP_ALIGN
 13160                              <2> StringProcess_ConvertToWordInDIWithBaseInBX:
 13161 000014B4 E878FF              <2> 	call	Char_ConvertIntegerToALfromDigitInALwithBaseInBX
 13162 000014B7 F5                  <2> 	cmc
 13163 000014B8 720B                <2> 	jc		SHORT .InvalidCharacter
 13164 000014BA 52                  <2> 	push	dx
 13165                              <2> 
 13166 000014BB 30E4                <2> 	xor		ah, ah		; Digit converted to integer now in AX
 13167 000014BD 97                  <2> 	xchg	ax, di
 13168 000014BE F7E3                <2> 	mul		bx			; Old WORD *= base
 13169 000014C0 7202                <2> 	jc		SHORT .Overflow
 13170 000014C2 01C7                <2> 	add		di, ax		; Add old WORD to new integer
 13171                              <2> 
 13172                              <2> .Overflow:
 13173 000014C4 5A                  <2> 	pop		dx
 13174                              <2> .InvalidCharacter:
 13175 000014C5 C3                  <2> 	ret
 13176                              <1> 	%endif
 13177                              <1> %endif
 13178                              <1> 
 13179                              <1> %ifdef INCLUDE_SERIAL_LIBRARY
 13180                              <1> 	%include "Serial.inc"
 13181                              <2> ; Project name	:	AssemblyLibrary
 13182                              <2> ; Description	:	Defines for display library.
 13183                              <2> 
 13184                              <2> %ifndef SERIAL_INC
 13185                              <2> %define SERIAL_INC
 13186                              <2> 
 13187                              <2> ;--------------- UART Equates -----------------------------
 13188                              <2> ;
 13189                              <2> ; Serial Programming References:
 13190                              <2> ;    http://en.wikibooks.org/wiki/Serial_Programming
 13191                              <2> ;
 13192                              <2> 
 13193                              <2> Serial_UART_base						EQU		0
 13194                              <2> Serial_UART_transmitByte				EQU		0
 13195                              <2> Serial_UART_receiveByte					EQU		0
 13196                              <2> 
 13197                              <2> ;
 13198                              <2> ; Values for UART_divisorLow:
 13199                              <2> ; 60h = 1200, 30h = 2400, 18h = 4800, 0ch = 9600, 6 = 19200, 4 = 28800, 3 = 38400, 2 = 57600, 1 = 115200
 13200                              <2> ;
 13201                              <2> Serial_UART_divisorLow					EQU		0
 13202                              <2> 
 13203                              <2> ;
 13204                              <2> ; UART_divisorHigh is zero for all speeds including and above 1200 baud (which is all we do)
 13205                              <2> ;
 13206                              <2> Serial_UART_divisorHigh					EQU		1
 13207                              <2> 
 13208                              <2> Serial_UART_interruptIdent				EQU		2
 13209                              <2> Serial_UART_FIFOControl					EQU		2
 13210                              <2> 
 13211                              <2> Serial_UART_lineControl					EQU		3
 13212                              <2> 
 13213                              <2> Serial_UART_modemControl				EQU		4
 13214                              <2> 
 13215                              <2> Serial_UART_lineStatus					EQU		5
 13216                              <2> 
 13217                              <2> Serial_UART_modemStatus					EQU		6
 13218                              <2> 
 13219                              <2> Serial_UART_scratch						EQU		7
 13220                              <2> 
 13221                              <2> ;----------------------------------------------------------------------
 13222                              <2> ;
 13223                              <2> ; COM Number to I/O Port Address Mapping
 13224                              <2> ;
 13225                              <2> ; COM Number:                               1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12
 13226                              <2> ; Corresponds to I/O port:                3f8,  2f8,  3e8,  2e8,  2f0,  3e0,  2e0,  260,  368,  268,  360,  270
 13227                              <2> ; Corresponds to Packed I/O port (hex):    37,   17,   35,   15,   16,   34,   14,    4,   25,    5,   24,    6
 13228                              <2> ;
 13229                              <2> SERIAL_COM1_IOADDRESS	EQU		3f8h
 13230                              <2> SERIAL_COM2_IOADDRESS	EQU		2f8h
 13231                              <2> SERIAL_COM3_IOADDRESS	EQU		3e8h
 13232                              <2> SERIAL_COM4_IOADDRESS	EQU		2e8h
 13233                              <2> SERIAL_COM5_IOADDRESS	EQU		2f0h
 13234                              <2> SERIAL_COM6_IOADDRESS	EQU		3e0h
 13235                              <2> SERIAL_COM7_IOADDRESS	EQU		2e0h
 13236                              <2> SERIAL_COM8_IOADDRESS	EQU		260h
 13237                              <2> SERIAL_COM9_IOADDRESS	EQU		368h
 13238                              <2> SERIAL_COMA_IOADDRESS	EQU		268h
 13239                              <2> SERIAL_COMB_IOADDRESS	EQU		360h
 13240                              <2> SERIAL_COMC_IOADDRESS	EQU		270h
 13241                              <2> 
 13242                              <2> %endif
 13243                              <1> %endif
 13244                              <1> %ifdef INCLUDE_SERIALSERVER_LIBRARY
 13245                              <1> 	%include "SerialServer.asm"
 13246                              <1> 	%include "SerialServerScan.asm"
 13247                              <1> 	%define INCLUDE_TIME_LIBRARY
 13248                              <1> %endif
 13249                              <1> 
 13250                              <1> %ifdef INCLUDE_TIME_LIBRARY
 13251                              <1> 	%ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13252                              <1> 		%include "Delay.asm"
 13253                              <2> ; Project name	:	Assembly Library
 13254                              <2> ; Description	:	Delay functions.
 13255                              <2> 
 13256                              <2> ;
 13257                              <2> ; XTIDE Universal BIOS and Associated Tools
 13258                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 13259                              <2> ;
 13260                              <2> ; This program is free software; you can redistribute it and/or modify
 13261                              <2> ; it under the terms of the GNU General Public License as published by
 13262                              <2> ; the Free Software Foundation; either version 2 of the License, or
 13263                              <2> ; (at your option) any later version.
 13264                              <2> ;
 13265                              <2> ; This program is distributed in the hope that it will be useful,
 13266                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 13267                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 13268                              <2> ; GNU General Public License for more details.
 13269                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 13270                              <2> ;
 13271                              <2> 
 13272                              <2> ; Section containing code
 13273                              <2> SECTION .text
 13274                              <2> 
 13275                              <2> ;--------------------------------------------------------------------
 13276                              <2> ; Delay is always at least one millisecond since
 13277                              <2> ; RTC resolution is 977 microsecs.
 13278                              <2> ;
 13279                              <2> ; Delay_MicrosecondsFromAX
 13280                              <2> ;	Parameters:
 13281                              <2> ;		AX:		Number of microsecs to wait
 13282                              <2> ;	Returns:
 13283                              <2> ;		Nothing
 13284                              <2> ;	Corrupts registers:
 13285                              <2> ;		AX
 13286                              <2> ;--------------------------------------------------------------------
 13287                              <2> ALIGN JUMP_ALIGN
 13288                              <2> Delay_MicrosecondsFromAX:
 13289 000014C6 52                  <2> 	push	dx
 13290 000014C7 51                  <2> 	push	cx
 13291                              <2> 
 13292 000014C8 31C9                <2> 	xor		cx, cx
 13293 000014CA 92                  <2> 	xchg	dx, ax							; Microsecs now in CX:DX
 13294 000014CB B486                <2> 	mov		ah, EVENT_WAIT					; Event Wait
 13295 000014CD CD15                <2> 	int		BIOS_SYSTEM_INTERRUPT_15h
 13296 000014CF FB                  <2> 	sti										; XT BIOSes return with interrupt disabled
 13297                              <2> 
 13298 000014D0 59                  <2> 	pop		cx
 13299 000014D1 5A                  <2> 	pop		dx
 13300 000014D2 B80100              <2> 	mov		ax, 1							; Prepare to wait 1 timer tick
 13301 000014D5 7201                <2> 	jc		SHORT Delay_TimerTicksFromAX	; Event Wait was unsupported or busy
 13302 000014D7 C3                  <2> 	ret
 13303                              <2> 
 13304                              <2> 
 13305                              <2> ;--------------------------------------------------------------------
 13306                              <2> ; First tick might take 0...54.9 ms and remaining ticks
 13307                              <2> ; will occur at 54.9 ms intervals.
 13308                              <2> ;
 13309                              <2> ; Delay_TimerTicksFromAX
 13310                              <2> ;	Parameters:
 13311                              <2> ;		AX:		Number of timer ticks to wait
 13312                              <2> ;	Returns:
 13313                              <2> ;		Nothing
 13314                              <2> ;	Corrupts registers:
 13315                              <2> ;		AX
 13316                              <2> ;--------------------------------------------------------------------
 13317                              <2> ALIGN JUMP_ALIGN
 13318                              <2> Delay_TimerTicksFromAX:
 13319 000014D8 52                  <2> 	push	dx
 13320                              <2> 
 13321 000014D9 FB                  <2> 	sti							; Make sure that interrupts are enabled
 13322 000014DA 92                  <2> 	xchg	dx, ax
 13323 000014DB E83D00              <2> 	call	TimerTicks_ReadFromBdaToAX
 13324 000014DE 01C2                <2> 	add		dx, ax				; DX = end time
 13325                              <2> .WaitLoop:
 13326 000014E0 E83800              <2> 	call	TimerTicks_ReadFromBdaToAX
 13327 000014E3 39D0                <2> 	cmp		ax, dx
 13328 000014E5 72F9                <2> 	jb		SHORT .WaitLoop		; Loop until end time is reached
 13329                              <2> 
 13330 000014E7 5A                  <2> 	pop		dx
 13331 000014E8 C3                  <2> 	ret
 13332                              <1> 		%ifndef EXCLUDE_FROM_XTIDECFG
 13333                              <1> 			%include "SystemTimer.asm"
 13334                              <1> 		%endif
 13335                              <1> 	%endif
 13336                              <1> 	%include "TimerTicks.asm"
 13337                              <2> ; Project name	:	Assembly Library
 13338                              <2> ; Description	:	Functions for system timer related operations.
 13339                              <2> 
 13340                              <2> ;
 13341                              <2> ; XTIDE Universal BIOS and Associated Tools
 13342                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 13343                              <2> ;
 13344                              <2> ; This program is free software; you can redistribute it and/or modify
 13345                              <2> ; it under the terms of the GNU General Public License as published by
 13346                              <2> ; the Free Software Foundation; either version 2 of the License, or
 13347                              <2> ; (at your option) any later version.
 13348                              <2> ;
 13349                              <2> ; This program is distributed in the hope that it will be useful,
 13350                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 13351                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 13352                              <2> ; GNU General Public License for more details.
 13353                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 13354                              <2> ;
 13355                              <2> 
 13356                              <2> ; With a PIT input clock of 1193181.6666... Hz and a maximum
 13357                              <2> ; 16 bit divisor of 65536 (if PIT programmed with 0) we get:
 13358                              <2> ;
 13359                              <2> ; Clock / Divisor = ~18.2065 ticks per second
 13360                              <2> ; Clock * SecondsPerMinute / Divisor = ~1092 ticks per minute
 13361                              <2> ; Clock * SecondsPerHour / Divisor = ~65543 ticks per hour
 13362                              <2> ;
 13363                              <2> ; Since 65543 can't fit in a 16 bit register we use the
 13364                              <2> ; maximum possible instead and disregard the last ~8 ticks.
 13365                              <2> 
 13366                              <2> TICKS_PER_HOUR			EQU		65535
 13367                              <2> TICKS_PER_MINUTE		EQU		1092
 13368                              <2> TICKS_PER_SECOND		EQU		18
 13369                              <2> 
 13370                              <2> 
 13371                              <2> ; Section containing code
 13372                              <2> SECTION .text
 13373                              <2> 
 13374                              <2> ;--------------------------------------------------------------------
 13375                              <2> ; TimerTicks_GetHoursToAXandRemainderTicksToDXfromTicksInDXAX
 13376                              <2> ; TimerTicks_GetMinutesToAXandRemainderTicksToDXfromTicksInDX
 13377                              <2> ; TimerTicks_GetSecondsToAXandRemainderTicksToDXfromTicksInDX
 13378                              <2> ;	Parameters
 13379                              <2> ;		DX(:AX):	Timer ticks to convert
 13380                              <2> ;	Returns:
 13381                              <2> ;		AX:			Hours, minutes or seconds
 13382                              <2> ;		DX:			Remainder ticks
 13383                              <2> ;	Corrupts registers:
 13384                              <2> ;		CX
 13385                              <2> ;--------------------------------------------------------------------
 13386                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13387                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
 13388                              <2> ALIGN JUMP_ALIGN
 13389                              <2> TimerTicks_GetHoursToAXandRemainderTicksToDXfromTicksInDXAX:
 13390                              <2> 	mov		cx, TICKS_PER_HOUR
 13391                              <2> 	div		cx		; Divide DX:AX by CX, Hours to AX, remainder ticks to DX
 13392                              <2> 	ret
 13393                              <2> %endif ; EXCLUDE_FROM_XTIDECFG
 13394                              <2> 
 13395                              <2> ALIGN JUMP_ALIGN
 13396                              <2> TimerTicks_GetMinutesToAXandRemainderTicksToDXfromTicksInDX:
 13397 000014E9 31C0                <2> 	xor		ax, ax
 13398 000014EB 92                  <2> 	xchg	ax, dx	; Ticks now in DX:AX
 13399 000014EC B94404              <2> 	mov		cx, TICKS_PER_MINUTE
 13400 000014EF F7F1                <2> 	div		cx		; Divide DX:AX by CX, Minutes to AX, remainder ticks to DX
 13401 000014F1 C3                  <2> 	ret
 13402                              <2> %endif ; EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13403                              <2> 
 13404                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
 13405                              <2> ALIGN JUMP_ALIGN
 13406                              <2> TimerTicks_GetSecondsToAXandRemainderTicksToDXfromTicksInDX:
 13407                              <2> 	; This procedure can handle at most 4607 ticks in DX (almost 256 seconds)
 13408                              <2> 	; More than 4607 ticks will generate a divide overflow exception!
 13409                              <2> 	xchg	ax, dx	; Ticks now in AX
 13410                              <2> 	mov		cl, TICKS_PER_SECOND
 13411                              <2> 	div		cl		; Divide AX by CL, Seconds to AL, remainder ticks to AH
 13412                              <2> 	xor		dx, dx
 13413                              <2> 	xchg	dl, ah	; Seconds in AX, remainder in DX
 13414                              <2> 	ret
 13415                              <2> %endif
 13416                              <2> 
 13417                              <2> 
 13418                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13419                              <2> 	%ifndef MODULE_BOOT_MENU
 13420                              <2> 		%define EXCLUDE
 13421                              <2> 	%endif
 13422                              <2> %endif
 13423                              <2> ;--------------------------------------------------------------------
 13424                              <2> ; TimerTicks_GetSecondsToAXfromTicksInDX
 13425                              <2> ;	Parameters
 13426                              <2> ;		DX:			Timer ticks to convert
 13427                              <2> ;	Returns:
 13428                              <2> ;		AX:			Seconds
 13429                              <2> ;	Corrupts registers:
 13430                              <2> ;		DX
 13431                              <2> ;--------------------------------------------------------------------
 13432                              <2> %ifndef EXCLUDE	; 1 of 3
 13433                              <2> ALIGN JUMP_ALIGN
 13434                              <2> TimerTicks_GetSecondsToAXfromTicksInDX:
 13435 000014F2 B8100E              <2> 	mov		ax, 3600	; Approximately 65536 / (Clock / Divisor)
 13436 000014F5 F7E2                <2> 	mul		dx
 13437 000014F7 92                  <2> 	xchg	dx, ax
 13438 000014F8 C3                  <2> 	ret
 13439                              <2> %endif
 13440                              <2> 
 13441                              <2> 
 13442                              <2> ;--------------------------------------------------------------------
 13443                              <2> ; First tick might take 0...54.9 ms and remaining ticks
 13444                              <2> ; will occur at 54.9 ms intervals. Use delay of two (or more) ticks to
 13445                              <2> ; ensure at least 54.9 ms timeout.
 13446                              <2> ;
 13447                              <2> ; TimerTicks_InitializeTimeoutFromAX
 13448                              <2> ;	Parameters:
 13449                              <2> ;		AX:			Timeout ticks (54.9 ms) before timeout
 13450                              <2> ;		DS:BX:		Ptr to timeout variable WORD
 13451                              <2> ;	Returns:
 13452                              <2> ;		[DS:BX]:	Initialized for TimerTicks_SetCarryIfTimeoutFromDSBX
 13453                              <2> ;	Corrupts registers:
 13454                              <2> ;		AX
 13455                              <2> ;--------------------------------------------------------------------
 13456                              <2> %ifndef EXCLUDE	; 2 of 3
 13457                              <2> ALIGN JUMP_ALIGN
 13458                              <2> TimerTicks_InitializeTimeoutFromAX:
 13459 000014F9 8907                <2> 	mov		[bx], ax					; Store timeout ticks
 13460 000014FB E81D00              <2> 	call	TimerTicks_ReadFromBdaToAX
 13461 000014FE 0107                <2> 	add		[bx], ax					; [bx] now contains end time for timeout
 13462 00001500 C3                  <2> 	ret
 13463                              <2> %endif
 13464                              <2> 
 13465                              <2> 
 13466                              <2> ;--------------------------------------------------------------------
 13467                              <2> ; TimerTicks_GetTimeoutTicksLeftToAXfromDSBX
 13468                              <2> ;	Parameters:
 13469                              <2> ;		DS:BX:		Ptr to timeout variable WORD
 13470                              <2> ;	Returns:
 13471                              <2> ;		AX:			Number of ticks left before timeout
 13472                              <2> ;		CF:			Set if timeout
 13473                              <2> ;					Cleared if time left
 13474                              <2> ;	Corrupts registers:
 13475                              <2> ;		Nothing
 13476                              <2> ;--------------------------------------------------------------------
 13477                              <2> %ifndef EXCLUDE	; 3 of 3
 13478                              <2> ALIGN JUMP_ALIGN
 13479                              <2> TimerTicks_GetTimeoutTicksLeftToAXfromDSBX:
 13480 00001501 52                  <2> 	push	dx
 13481 00001502 8B17                <2> 	mov		dx, [bx]
 13482 00001504 E81400              <2> 	call	TimerTicks_ReadFromBdaToAX
 13483 00001507 92                  <2> 	xchg	ax, dx
 13484 00001508 29D0                <2> 	sub		ax, dx		; AX = End time - current time
 13485 0000150A 5A                  <2> 	pop		dx
 13486 0000150B C3                  <2> 	ret
 13487                              <2> %endif
 13488                              <2> 
 13489                              <2> %undef EXCLUDE
 13490                              <2> 
 13491                              <2> 
 13492                              <2> ;--------------------------------------------------------------------
 13493                              <2> ; TimerTicks_GetElapsedToAXandResetDSBX
 13494                              <2> ;	Parameters
 13495                              <2> ;		DS:BX:		Ptr to WORD containing previous reset time
 13496                              <2> ;	Returns:
 13497                              <2> ;		AX:			54.9 ms ticks elapsed since last reset
 13498                              <2> ;		[DS:BX]:	Reset to latest time
 13499                              <2> ;	Corrupts registers:
 13500                              <2> ;		Nothing
 13501                              <2> ;--------------------------------------------------------------------
 13502                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13503                              <2> ALIGN JUMP_ALIGN
 13504                              <2> TimerTicks_GetElapsedToAXandResetDSBX:
 13505 0000150C E80C00              <2> 	call	TimerTicks_ReadFromBdaToAX
 13506 0000150F 50                  <2> 	push	ax
 13507 00001510 2B07                <2> 	sub		ax, [bx]
 13508 00001512 8F07                <2> 	pop		WORD [bx]			; Latest time to [DS:BX]
 13509 00001514 C3                  <2> 	ret
 13510                              <2> %endif
 13511                              <2> 
 13512                              <2> 
 13513                              <2> ;--------------------------------------------------------------------
 13514                              <2> ; TimerTicks_GetElapsedToAXfromDSBX
 13515                              <2> ;	Parameters
 13516                              <2> ;		DS:BX:		Ptr to WORD containing previous update time
 13517                              <2> ;	Returns:
 13518                              <2> ;		AX:			54.9 ms ticks elapsed since initializing [DS:BX]
 13519                              <2> ;	Corrupts registers:
 13520                              <2> ;		Nothing
 13521                              <2> ;--------------------------------------------------------------------
 13522                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13523                              <2> ALIGN JUMP_ALIGN
 13524                              <2> TimerTicks_GetElapsedToAXfromDSBX:
 13525 00001515 E80300              <2> 	call	TimerTicks_ReadFromBdaToAX
 13526 00001518 2B07                <2> 	sub		ax, [bx]
 13527 0000151A C3                  <2> 	ret
 13528                              <2> %endif
 13529                              <2> 
 13530                              <2> 
 13531                              <2> ;--------------------------------------------------------------------
 13532                              <2> ; TimerTicks_ReadFromBdaToAX
 13533                              <2> ;	Parameters
 13534                              <2> ;		Nothing
 13535                              <2> ;	Returns:
 13536                              <2> ;		AX:		System time in 54.9 ms ticks
 13537                              <2> ;	Corrupts registers:
 13538                              <2> ;		Nothing
 13539                              <2> ;--------------------------------------------------------------------
 13540                              <2> %ifdef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13541                              <2> 	%ifndef MODULE_BOOT_MENU OR MODULE_HOTKEYS
 13542                              <2> 		%define EXCLUDE
 13543                              <2> 	%endif
 13544                              <2> %endif
 13545                              <2> 
 13546                              <2> %ifndef EXCLUDE
 13547                              <2> ALIGN JUMP_ALIGN
 13548                              <2> TimerTicks_ReadFromBdaToAX:
 13549 0000151B 1E                  <2> 	push	ds
 13550                              <2> 
 13551                              <2> 	LOAD_BDA_SEGMENT_TO	ds, ax
 13552                              <3> %ifndef USE_186
 13553 0000151C 31C0                <3>  xor %2, %2
 13554 0000151E 8ED8                <3>  mov %1, %2
 13555                              <3> %elifidn %3, !
 13556                              <3>  xor %2, %2
 13557                              <3>  mov %1, %2
 13558                              <3> %else
 13559                              <3>  push BYTE 0
 13560                              <3>  pop %1
 13561                              <3> %endif
 13562 00001520 A16C04              <2> 	mov		ax, [BDA.dwTimerTicks]	; Read low WORD only
 13563                              <2> 
 13564 00001523 1F                  <2> 	pop		ds
 13565 00001524 C3                  <2> 	ret
 13566                              <2> %endif
 13567                              <2> %undef EXCLUDE
 13568                              <1> %endif
 13569                              <1> 
 13570                              <1> %ifdef INCLUDE_UTIL_LIBRARY
 13571                              <1>   %ifndef UTIL_SIZE_JUMP_ALIGN
 13572                              <1> 	%define UTIL_SIZE_JUMP_ALIGN 1
 13573                              <1>   %endif
 13574                              <1> 	%ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13575                              <1> 		%include "Bit.asm"
 13576                              <2> ; Project name	:	Assembly Library
 13577                              <2> ; Description	:	Functions for bit handling.
 13578                              <2> 
 13579                              <2> ;
 13580                              <2> ; XTIDE Universal BIOS and Associated Tools
 13581                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 13582                              <2> ;
 13583                              <2> ; This program is free software; you can redistribute it and/or modify
 13584                              <2> ; it under the terms of the GNU General Public License as published by
 13585                              <2> ; the Free Software Foundation; either version 2 of the License, or
 13586                              <2> ; (at your option) any later version.
 13587                              <2> ;
 13588                              <2> ; This program is distributed in the hope that it will be useful,
 13589                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 13590                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 13591                              <2> ; GNU General Public License for more details.
 13592                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 13593                              <2> ;
 13594                              <2> 
 13595                              <2> ; Section containing code
 13596                              <2> SECTION .text
 13597                              <2> 
 13598                              <2> ;--------------------------------------------------------------------
 13599                              <2> ; Bit_GetSetCountToCXfromDXAX
 13600                              <2> ;	Parameters
 13601                              <2> ;		DX:AX:		Source DWORD
 13602                              <2> ;	Returns:
 13603                              <2> ;		CX:		Number of bits set in DX:AX
 13604                              <2> ;	Corrupts registers:
 13605                              <2> ;		Nothing
 13606                              <2> ;--------------------------------------------------------------------
 13607                              <2> ALIGN JUMP_ALIGN
 13608                              <2> Bit_GetSetCountToCXfromDXAX:
 13609 00001525 53                  <2> 	push	bx
 13610                              <2> 
 13611 00001526 E80B00              <2> 	call	Bit_GetSetCountToCXfromAX
 13612 00001529 89CB                <2> 	mov		bx, cx
 13613 0000152B 92                  <2> 	xchg	ax, dx
 13614 0000152C E80500              <2> 	call	Bit_GetSetCountToCXfromAX
 13615 0000152F 92                  <2> 	xchg	ax, dx
 13616 00001530 01D9                <2> 	add		cx, bx
 13617                              <2> 
 13618 00001532 5B                  <2> 	pop		bx
 13619 00001533 C3                  <2> 	ret
 13620                              <2> 
 13621                              <2> 
 13622                              <2> ;--------------------------------------------------------------------
 13623                              <2> ; Bit_GetSetCountToCXfromAX
 13624                              <2> ;	Parameters
 13625                              <2> ;		AX:		Source WORD
 13626                              <2> ;	Returns:
 13627                              <2> ;		CX:		Number of bits set in AX
 13628                              <2> ;	Corrupts registers:
 13629                              <2> ;		Nothing
 13630                              <2> ;--------------------------------------------------------------------
 13631                              <2> ALIGN JUMP_ALIGN
 13632                              <2> Bit_GetSetCountToCXfromAX:
 13633 00001534 50                  <2> 	push	ax
 13634                              <2> 
 13635 00001535 31C9                <2> 	xor		cx, cx
 13636                              <2> ALIGN JUMP_ALIGN
 13637                              <2> .BitScanLoop:
 13638 00001537 D1E8                <2> 	shr		ax, 1
 13639 00001539 7404                <2> 	jz		SHORT .LastBitInCF
 13640 0000153B 10E9                <2> 	adc		cl, ch
 13641 0000153D EBF8                <2> 	jmp		SHORT .BitScanLoop
 13642                              <2> ALIGN JUMP_ALIGN
 13643                              <2> .LastBitInCF:
 13644 0000153F 10E9                <2> 	adc		cl, ch
 13645                              <2> 
 13646 00001541 58                  <2> 	pop		ax
 13647 00001542 C3                  <2> 	ret
 13648                              <2> 
 13649                              <2> 
 13650                              <2> ;--------------------------------------------------------------------
 13651                              <2> ; Bit_SetToDXAXfromIndexInCL
 13652                              <2> ;	Parameters:
 13653                              <2> ;		CL:		Index of bit to set (0...31)
 13654                              <2> ;		DX:AX:	Destination DWORD with flag to be set
 13655                              <2> ;	Returns:
 13656                              <2> ;		DX:AX:	DWORD with wanted bit set
 13657                              <2> ;	Corrupts registers:
 13658                              <2> ;		Nothing
 13659                              <2> ;--------------------------------------------------------------------
 13660                              <2> ALIGN JUMP_ALIGN
 13661                              <2> Bit_SetToDXAXfromIndexInCL:
 13662 00001543 80F910              <2> 	cmp		cl, 16
 13663 00001546 720C                <2> 	jb		SHORT Bit_SetToAXfromIndexInCL
 13664                              <2> 
 13665 00001548 80E910              <2> 	sub		cl, 16
 13666 0000154B 92                  <2> 	xchg	ax, dx
 13667 0000154C E80500              <2> 	call	Bit_SetToAXfromIndexInCL
 13668 0000154F 92                  <2> 	xchg	dx, ax
 13669 00001550 80C110              <2> 	add		cl, 16
 13670 00001553 C3                  <2> 	ret
 13671                              <2> 
 13672                              <2> ;--------------------------------------------------------------------
 13673                              <2> ; Bit_SetToAXfromIndexInCL
 13674                              <2> ;	Parameters:
 13675                              <2> ;		CL:		Index of bit to set (0...15)
 13676                              <2> ;		AX:		Destination WORD with flag to be set
 13677                              <2> ;	Returns:
 13678                              <2> ;		AX:		WORD with wanted bit set
 13679                              <2> ;	Corrupts registers:
 13680                              <2> ;		Nothing
 13681                              <2> ;--------------------------------------------------------------------
 13682                              <2> ALIGN JUMP_ALIGN
 13683                              <2> Bit_SetToAXfromIndexInCL:
 13684 00001554 52                  <2> 	push	dx
 13685                              <2> 
 13686 00001555 BA0100              <2> 	mov		dx, 1
 13687 00001558 D3E2                <2> 	shl		dx, cl
 13688 0000155A 09D0                <2> 	or		ax, dx
 13689                              <2> 
 13690 0000155C 5A                  <2> 	pop		dx
 13691 0000155D C3                  <2> 	ret
 13692                              <1> 	%endif
 13693                              <1> 	%include "Math.asm"
 13694                              <2> ; Project name	:	Assembly Library
 13695                              <2> ; Description	:	Functions for register operations.
 13696                              <2> 
 13697                              <2> ;
 13698                              <2> ; XTIDE Universal BIOS and Associated Tools
 13699                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 13700                              <2> ;
 13701                              <2> ; This program is free software; you can redistribute it and/or modify
 13702                              <2> ; it under the terms of the GNU General Public License as published by
 13703                              <2> ; the Free Software Foundation; either version 2 of the License, or
 13704                              <2> ; (at your option) any later version.
 13705                              <2> ;
 13706                              <2> ; This program is distributed in the hope that it will be useful,
 13707                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 13708                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 13709                              <2> ; GNU General Public License for more details.
 13710                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 13711                              <2> ;
 13712                              <2> 
 13713                              <2> 
 13714                              <2> ; Section containing code
 13715                              <2> SECTION .text
 13716                              <2> 
 13717                              <2> ;--------------------------------------------------------------------
 13718                              <2> ; Math_DivQWatSSBPbyCX
 13719                              <2> ;	Parameters:
 13720                              <2> ;		[SS:BP]:	64-bit unsigned divident
 13721                              <2> ;		CX:			16-bit unsigned divisor
 13722                              <2> ;	Returns:
 13723                              <2> ;		[SS:BP]:	64-bit unsigned quotient
 13724                              <2> ;		DX:			16-bit unsigned remainder
 13725                              <2> ;	Corrupts registers:
 13726                              <2> ;		AX
 13727                              <2> ;--------------------------------------------------------------------
 13728                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
 13729                              <2> ALIGN JUMP_ALIGN
 13730                              <2> Math_DivQWatSSBPbyCX:
 13731                              <2> 	xor		dx, dx
 13732                              <2> 	mov		ax, [bp+6]		; Load highest divident WORD to DX:AX
 13733                              <2> 	div		cx
 13734                              <2> 	mov		[bp+6], ax		; Store quotient
 13735                              <2> 
 13736                              <2> 	mov		ax, [bp+4]
 13737                              <2> 	div		cx
 13738                              <2> 	mov		[bp+4], ax
 13739                              <2> 
 13740                              <2> 	mov		ax, [bp+2]
 13741                              <2> 	div		cx
 13742                              <2> 	mov		[bp+2], ax
 13743                              <2> 
 13744                              <2> 	mov		ax, [bp]
 13745                              <2> 	div		cx
 13746                              <2> 	mov		[bp], ax
 13747                              <2> 	ret
 13748                              <2> %endif
 13749                              <2> 
 13750                              <2> 
 13751                              <2> ;--------------------------------------------------------------------
 13752                              <2> ; Math_DivDXAXbyCX
 13753                              <2> ;	Parameters:
 13754                              <2> ;		DX:AX:	32-bit unsigned divident
 13755                              <2> ;		CX:		16-bit unsigned divisor
 13756                              <2> ;	Returns:
 13757                              <2> ;		DX:AX:	32-bit unsigned quotient
 13758                              <2> ;		BX:		16-bit unsigned remainder
 13759                              <2> ;	Corrupts registers:
 13760                              <2> ;		Nothing
 13761                              <2> ;--------------------------------------------------------------------
 13762                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
 13763                              <2> ALIGN JUMP_ALIGN
 13764                              <2> Math_DivDXAXbyCX:
 13765                              <2> 	xor		bx, bx
 13766                              <2> 	xchg	bx, ax
 13767                              <2> 	xchg	dx, ax
 13768                              <2> 	div		cx
 13769                              <2> 	xchg	ax, bx
 13770                              <2> 	div		cx
 13771                              <2> 	xchg	dx, bx
 13772                              <2> 	ret
 13773                              <2> %endif
 13774                              <1> 	%include "Registers.asm"
 13775                              <2> ; Project name	:	Assembly Library
 13776                              <2> ; Description	:	Functions for register operations.
 13777                              <2> 
 13778                              <2> ;
 13779                              <2> ; XTIDE Universal BIOS and Associated Tools
 13780                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 13781                              <2> ;
 13782                              <2> ; This program is free software; you can redistribute it and/or modify
 13783                              <2> ; it under the terms of the GNU General Public License as published by
 13784                              <2> ; the Free Software Foundation; either version 2 of the License, or
 13785                              <2> ; (at your option) any later version.
 13786                              <2> ;
 13787                              <2> ; This program is distributed in the hope that it will be useful,
 13788                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 13789                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 13790                              <2> ; GNU General Public License for more details.
 13791                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 13792                              <2> ;
 13793                              <2> 
 13794                              <2> ; Section containing code
 13795                              <2> SECTION .text
 13796                              <2> 
 13797                              <2> ;--------------------------------------------------------------------
 13798                              <2> ; Registers_ExchangeDSSIwithESDI
 13799                              <2> ;	Parameters
 13800                              <2> ;		Nothing
 13801                              <2> ;	Returns:
 13802                              <2> ;		DS:SI and ES:DI are exchanged.
 13803                              <2> ;	Corrupts registers:
 13804                              <2> ;		Nothing
 13805                              <2> ;--------------------------------------------------------------------
 13806                              <2> ALIGN JUMP_ALIGN
 13807                              <2> Registers_ExchangeDSSIwithESDI:
 13808 0000155E 1E                  <2> 	push	ds
 13809 0000155F 06                  <2> 	push	es
 13810 00001560 1F                  <2> 	pop		ds
 13811 00001561 07                  <2> 	pop		es
 13812 00001562 87F7                <2> 	xchg	si, di
 13813 00001564 C3                  <2> 	ret
 13814                              <2> 
 13815                              <2> 
 13816                              <2> ;--------------------------------------------------------------------
 13817                              <2> ; Registers_CopySSBPtoESDI
 13818                              <2> ; Registers_CopySSBPtoDSSI
 13819                              <2> ; Registers_CopyDSSItoESDI
 13820                              <2> ; Registers_CopyESDItoDSSI
 13821                              <2> ;	Parameters
 13822                              <2> ;		Nothing
 13823                              <2> ;	Returns:
 13824                              <2> ;		Copies farm pointer to different segment/pointer register pair
 13825                              <2> ;	Corrupts registers:
 13826                              <2> ;		Nothing
 13827                              <2> ;--------------------------------------------------------------------
 13828                              <2> %ifdef INCLUDE_MENU_LIBRARY
 13829                              <2> ALIGN JUMP_ALIGN
 13830                              <2> Registers_CopySSBPtoESDI:
 13831                              <2> 	COPY_SSBP_TO_ESDI
 13832 00001565 16                  <3>  push ss
 13833 00001566 07                  <3>  pop es
 13834 00001567 89EF                <3>  mov di, bp
 13835 00001569 C3                  <2> 	ret
 13836                              <2> %endif
 13837                              <2> 
 13838                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13839                              <2> ALIGN JUMP_ALIGN
 13840                              <2> Registers_CopySSBPtoDSSI:
 13841                              <2> 	COPY_SSBP_TO_DSSI
 13842 0000156A 16                  <3>  push ss
 13843 0000156B 1F                  <3>  pop ds
 13844 0000156C 89EE                <3>  mov si, bp
 13845 0000156E C3                  <2> 	ret
 13846                              <2> 
 13847                              <2> ALIGN JUMP_ALIGN
 13848                              <2> Registers_CopyDSSItoESDI:
 13849                              <2> 	COPY_DSSI_TO_ESDI
 13850 0000156F 1E                  <3>  push ds
 13851 00001570 07                  <3>  pop es
 13852 00001571 89F7                <3>  mov di, si
 13853 00001573 C3                  <2> 	ret
 13854                              <2> 
 13855                              <2> ALIGN JUMP_ALIGN
 13856                              <2> Registers_CopyESDItoDSSI:
 13857                              <2> 	COPY_ESDI_to_DSSI
 13858 00001574 06                  <3>  push es
 13859 00001575 1F                  <3>  pop ds
 13860 00001576 89FE                <3>  mov si, di
 13861 00001578 C3                  <2> 	ret
 13862                              <2> %endif
 13863                              <2> 
 13864                              <2> 
 13865                              <2> ;--------------------------------------------------------------------
 13866                              <2> ; Registers_NormalizeESSI
 13867                              <2> ; Registers_NormalizeESDI
 13868                              <2> ;	Parameters
 13869                              <2> ;		DS:SI or ES:DI:	Ptr to normalize
 13870                              <2> ;	Returns:
 13871                              <2> ;		DS:SI or ES:DI:	Normalized pointer
 13872                              <2> ;	Corrupts registers:
 13873                              <2> ;		AX, CX
 13874                              <2> ;
 13875                              <2> ; Inline of NORMALIZE_FAR_POINTER so that we can share the last 2/3 of the
 13876                              <2> ; routine with Registers_NormalizeFinish.
 13877                              <2> ;
 13878                              <2> ;--------------------------------------------------------------------
 13879                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS OR EXCLUDE_FROM_XTIDECFG
 13880                              <2> ALIGN JUMP_ALIGN
 13881                              <2> Registers_NormalizeESSI:
 13882                              <2> 	mov			cx, si
 13883                              <2> 	and			si, byte 0fh
 13884                              <2> 	jmp			Registers_NormalizeFinish
 13885                              <2> 
 13886                              <2> ALIGN JUMP_ALIGN
 13887                              <2> Registers_NormalizeESDI:
 13888                              <2> 	mov			cx, di
 13889                              <2> 	and			di, byte 0fh
 13890                              <2> ;;; fall-through
 13891                              <2> 
 13892                              <2> ALIGN JUMP_ALIGN
 13893                              <2> Registers_NormalizeFinish:
 13894                              <2> 	eSHR_IM		cx, 4
 13895                              <2> 	mov			ax, es
 13896                              <2> 	add			ax, cx
 13897                              <2> 	mov			es, ax
 13898                              <2> 	ret
 13899                              <2> %endif
 13900                              <2> 
 13901                              <2> 
 13902                              <2> ;--------------------------------------------------------------------
 13903                              <2> ; Registers_SetZFifNullPointerInDSSI (commented to save bytes)
 13904                              <2> ;	Parameters
 13905                              <2> ;		DS:SI:	Far pointer
 13906                              <2> ;	Returns:
 13907                              <2> ;		ZF:		Set if NULL pointer in DS:SI
 13908                              <2> ;	Corrupts registers:
 13909                              <2> ;		Nothing
 13910                              <2> ;--------------------------------------------------------------------
 13911                              <2> ;ALIGN JUMP_ALIGN
 13912                              <2> ;Registers_SetZFifNullPointerInDSSI:
 13913                              <2> ;	push	ax
 13914                              <2> ;	mov		ax, ds
 13915                              <2> ;	or		ax, si
 13916                              <2> ;	pop		ax
 13917                              <2> ;	ret
 13918                              <1> 	%include "Reboot.asm"
 13919                              <2> ; Project name	:	Assembly Library
 13920                              <2> ; Description	:	Functions for rebooting computer.
 13921                              <2> 
 13922                              <2> ;
 13923                              <2> ; XTIDE Universal BIOS and Associated Tools
 13924                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 13925                              <2> ;
 13926                              <2> ; This program is free software; you can redistribute it and/or modify
 13927                              <2> ; it under the terms of the GNU General Public License as published by
 13928                              <2> ; the Free Software Foundation; either version 2 of the License, or
 13929                              <2> ; (at your option) any later version.
 13930                              <2> ;
 13931                              <2> ; This program is distributed in the hope that it will be useful,
 13932                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 13933                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 13934                              <2> ; GNU General Public License for more details.
 13935                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 13936                              <2> ;
 13937                              <2> 
 13938                              <2> ; Section containing code
 13939                              <2> SECTION .text
 13940                              <2> 
 13941                              <2> ;--------------------------------------------------------------------
 13942                              <2> ; Reboot_ComputerWithBootFlagInAX
 13943                              <2> ;	Parameters:
 13944                              <2> ; 		AX:		Boot Flag
 13945                              <2> ;	Returns:
 13946                              <2> ;		Nothing, function never returns
 13947                              <2> ;--------------------------------------------------------------------
 13948                              <2> Reboot_ComputerWithBootFlagInAX:
 13949                              <2> 	LOAD_BDA_SEGMENT_TO	ds, bx
 13950                              <3> %ifndef USE_186
 13951 00001579 31DB                <3>  xor %2, %2
 13952 0000157B 8EDB                <3>  mov %1, %2
 13953                              <3> %elifidn %3, !
 13954                              <3>  xor %2, %2
 13955                              <3>  mov %1, %2
 13956                              <3> %else
 13957                              <3>  push BYTE 0
 13958                              <3>  pop %1
 13959                              <3> %endif
 13960 0000157D A37204              <2> 	mov		[BDA.wBoot], ax			; Store boot flag
 13961                              <2> 	; Fall to Reboot_AT
 13962                              <2> 
 13963                              <2> 
 13964                              <2> ;--------------------------------------------------------------------
 13965                              <2> ; Reboot_AT
 13966                              <2> ;	Parameters:
 13967                              <2> ; 		Nothing
 13968                              <2> ;	Returns:
 13969                              <2> ;		Nothing, function never returns
 13970                              <2> ;--------------------------------------------------------------------
 13971                              <2> Reboot_AT:
 13972 00001580 B0FE                <2> 	mov		al, 0FEh				; System reset (AT+ keyboard controller)
 13973 00001582 E664                <2> 	out		64h, al					; Reset computer (AT+)
 13974                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 13975                              <2> 	%ifdef INCLUDE_TIME_LIBRARY
 13976 00001584 B80A00              <2> 		mov		ax, 10
 13977 00001587 E83CFF              <2> 		call	Delay_MicrosecondsFromAX
 13978                              <2> 	%else
 13979                              <2> 		JMP_DELAY
 13980                              <2> 	%endif
 13981                              <2> %else
 13982                              <2> 	JMP_DELAY
 13983                              <2> %endif
 13984                              <2> 	; Fall to Reboot_XT
 13985                              <2> 
 13986                              <2> 
 13987                              <2> ;--------------------------------------------------------------------
 13988                              <2> ; Reboot_XT
 13989                              <2> ;	Parameters:
 13990                              <2> ; 		Nothing
 13991                              <2> ;	Returns:
 13992                              <2> ;		Nothing, function never returns
 13993                              <2> ;--------------------------------------------------------------------
 13994                              <2> Reboot_XT:
 13995 0000158A 31C0                <2> 	xor		ax, ax
 13996 0000158C 50                  <2> 	push	ax
 13997 0000158D 9D                  <2> 	popf							; Clear FLAGS (disables interrupt)
 13998 0000158E 8ED8                <2> 	mov		ds, ax
 13999 00001590 8EC0                <2> 	mov		es, ax
 14000 00001592 8ED0                <2> 	mov		ss, ax
 14001 00001594 EA0000FFFF          <2> 	jmp		0FFFFh:0				; XT reset
 14002                              <1> 	%include "Memory.asm"
 14003                              <2> ; Project name	:	Assembly Library
 14004                              <2> ; Description	:	Functions for memory access.
 14005                              <2> 
 14006                              <2> ;
 14007                              <2> ; XTIDE Universal BIOS and Associated Tools
 14008                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 14009                              <2> ;
 14010                              <2> ; This program is free software; you can redistribute it and/or modify
 14011                              <2> ; it under the terms of the GNU General Public License as published by
 14012                              <2> ; the Free Software Foundation; either version 2 of the License, or
 14013                              <2> ; (at your option) any later version.
 14014                              <2> ;
 14015                              <2> ; This program is distributed in the hope that it will be useful,
 14016                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 14017                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 14018                              <2> ; GNU General Public License for more details.
 14019                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 14020                              <2> ;
 14021                              <2> 
 14022                              <2> ; Section containing code
 14023                              <2> SECTION .text
 14024                              <2> 
 14025                              <2> ;--------------------------------------------------------------------
 14026                              <2> ; OPTIMIZE_STRING_OPERATION
 14027                              <2> ;	Parameters
 14028                              <2> ;		%1:		Repeat instruction
 14029                              <2> ;		%2:		String instruction without size (for example MOVS and not MOVSB or MOVSW)
 14030                              <2> ;		CX:		Number of BYTEs to operate
 14031                              <2> ;		DS:SI:	Ptr to source data
 14032                              <2> ;		ES:DI:	Ptr to destination
 14033                              <2> ;	Returns:
 14034                              <2> ;		SI, DI:	Updated by number of bytes operated
 14035                              <2> ;	Corrupts registers:
 14036                              <2> ;		Nothing
 14037                              <2> ;--------------------------------------------------------------------
 14038                              <2> %macro OPTIMIZE_STRING_OPERATION 2
 14039                              <2> 	push	cx
 14040                              <2> 
 14041                              <2> 	shr		cx, 1			; Operate with WORDs for performance
 14042                              <2> 	jz	%%HandleRemainingByte
 14043                              <2> 	%1		%2w
 14044                              <2> %%HandleRemainingByte:
 14045                              <2> 	jnc		SHORT %%OperationCompleted
 14046                              <2> 	%2b
 14047                              <2> 
 14048                              <2> ALIGN JUMP_ALIGN
 14049                              <2> %%OperationCompleted:
 14050                              <2> 	pop		cx
 14051                              <2> %endmacro
 14052                              <2> 
 14053                              <2> 
 14054                              <2> ;--------------------------------------------------------------------
 14055                              <2> ; Memory_CopyCXbytesFromDSSItoESDI
 14056                              <2> ;	Parameters
 14057                              <2> ;		CX:		Number of bytes to copy
 14058                              <2> ;		DS:SI:	Ptr to source data
 14059                              <2> ;		ES:DI:	Ptr to destination buffer
 14060                              <2> ;	Returns:
 14061                              <2> ;		SI, DI:	Updated by number of bytes copied
 14062                              <2> ;	Corrupts registers:
 14063                              <2> ;		Nothing
 14064                              <2> ;--------------------------------------------------------------------
 14065                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 14066                              <2> ALIGN JUMP_ALIGN
 14067                              <2> Memory_CopyCXbytesFromDSSItoESDI:
 14068                              <2> 	OPTIMIZE_STRING_OPERATION rep, movs
 14069 00001599 51                  <3>  push cx
 14070                              <3> 
 14071 0000159A D1E9                <3>  shr cx, 1
 14072 0000159C 7402                <3>  jz %%HandleRemainingByte
 14073 0000159E F3A5                <3>  %1 %2w
 14074                              <3> %%HandleRemainingByte:
 14075 000015A0 7301                <3>  jnc SHORT %%OperationCompleted
 14076 000015A2 A4                  <3>  %2b
 14077                              <3> 
 14078                              <3> ALIGN JUMP_ALIGN
 14079                              <3> %%OperationCompleted:
 14080 000015A3 59                  <3>  pop cx
 14081 000015A4 C3                  <2> 	ret
 14082                              <2> %endif
 14083                              <2> 
 14084                              <2> 
 14085                              <2> ;--------------------------------------------------------------------
 14086                              <2> ; Memory_ZeroSSBPwithSizeInCX
 14087                              <2> ;	Parameters
 14088                              <2> ;		CX:		Number of bytes to zero
 14089                              <2> ;		SS:BP:	Ptr to buffer to zero
 14090                              <2> ;	Returns:
 14091                              <2> ;		Nothing
 14092                              <2> ;	Corrupts registers:
 14093                              <2> ;		Nothing
 14094                              <2> ;--------------------------------------------------------------------
 14095                              <2> %ifdef INCLUDE_MENU_LIBRARY
 14096                              <2> ALIGN JUMP_ALIGN
 14097                              <2> Memory_ZeroSSBPwithSizeInCX:
 14098 000015A5 06                  <2> 	push	es
 14099 000015A6 57                  <2> 	push	di
 14100 000015A7 50                  <2> 	push	ax
 14101 000015A8 E8BAFF              <2> 	call	Registers_CopySSBPtoESDI
 14102 000015AB E80400              <2> 	call	Memory_ZeroESDIwithSizeInCX
 14103 000015AE 58                  <2> 	pop		ax
 14104 000015AF 5F                  <2> 	pop		di
 14105 000015B0 07                  <2> 	pop		es
 14106 000015B1 C3                  <2> 	ret
 14107                              <2> %endif
 14108                              <2> 
 14109                              <2> 
 14110                              <2> ;--------------------------------------------------------------------
 14111                              <2> ; Memory_ZeroESDIwithSizeInCX
 14112                              <2> ;	Parameters
 14113                              <2> ;		CX:		Number of bytes to zero
 14114                              <2> ;		ES:DI:	Ptr to destination buffer
 14115                              <2> ;	Returns:
 14116                              <2> ;		DI:		Updated by number of BYTEs stored
 14117                              <2> ;	Corrupts registers:
 14118                              <2> ;		AX
 14119                              <2> ;--------------------------------------------------------------------
 14120                              <2> ALIGN JUMP_ALIGN
 14121                              <2> Memory_ZeroESDIwithSizeInCX:
 14122 000015B2 31C0                <2> 	xor		ax, ax
 14123                              <2> 	; Fall to Memory_StoreCXbytesFromAccumToESDI
 14124                              <2> 
 14125                              <2> ;--------------------------------------------------------------------
 14126                              <2> ; Memory_StoreCXbytesFromAccumToESDI
 14127                              <2> ;	Parameters
 14128                              <2> ;		AX:		Word to use to fill buffer
 14129                              <2> ;		CX:		Number of BYTEs to store
 14130                              <2> ;		ES:DI:	Ptr to destination buffer
 14131                              <2> ;	Returns:
 14132                              <2> ;		DI:		Updated by number of BYTEs stored
 14133                              <2> ;	Corrupts registers:
 14134                              <2> ;		Nothing
 14135                              <2> ;--------------------------------------------------------------------
 14136                              <2> ALIGN JUMP_ALIGN
 14137                              <2> Memory_StoreCXbytesFromAccumToESDI:
 14138                              <2> 	OPTIMIZE_STRING_OPERATION rep, stos
 14139 000015B4 51                  <3>  push cx
 14140                              <3> 
 14141 000015B5 D1E9                <3>  shr cx, 1
 14142 000015B7 7402                <3>  jz %%HandleRemainingByte
 14143 000015B9 F3AB                <3>  %1 %2w
 14144                              <3> %%HandleRemainingByte:
 14145 000015BB 7301                <3>  jnc SHORT %%OperationCompleted
 14146 000015BD AA                  <3>  %2b
 14147                              <3> 
 14148                              <3> ALIGN JUMP_ALIGN
 14149                              <3> %%OperationCompleted:
 14150 000015BE 59                  <3>  pop cx
 14151 000015BF C3                  <2> 	ret
 14152                              <2> 
 14153                              <2> 
 14154                              <2> ;--------------------------------------------------------------------
 14155                              <2> ; Memory_ReserveCXbytesFromStackToDSSI
 14156                              <2> ;	Parameters
 14157                              <2> ;		CX:		Number of bytes to reserve
 14158                              <2> ;	Returns:
 14159                              <2> ;		DS:SI:	Ptr to reserved buffer
 14160                              <2> ;	Corrupts registers:
 14161                              <2> ;		AX
 14162                              <2> ;--------------------------------------------------------------------
 14163                              <2> %ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 14164                              <2> ALIGN JUMP_ALIGN
 14165                              <2> Memory_ReserveCXbytesFromStackToDSSI:
 14166 000015C0 58                  <2> 	pop		ax
 14167 000015C1 16                  <2> 	push	ss
 14168 000015C2 1F                  <2> 	pop		ds
 14169 000015C3 29CC                <2> 	sub		sp, cx
 14170 000015C5 89E6                <2> 	mov		si, sp
 14171 000015C7 FFE0                <2> 	jmp		ax
 14172                              <2> %endif
 14173                              <2> 
 14174                              <2> 
 14175                              <2> ;--------------------------------------------------------------------
 14176                              <2> ; Memory_SumCXbytesFromESSItoAL
 14177                              <2> ;	Parameters
 14178                              <2> ;		CX:		Number of bytes to sum (0=65536)
 14179                              <2> ;		ES:SI:	Ptr to buffer containing the bytes to sum
 14180                              <2> ;	Returns:
 14181                              <2> ;		AL:		Sum of bytes
 14182                              <2> ;		ZF:		Set if result is zero
 14183                              <2> ;				Cleared if result is non-zero
 14184                              <2> ;	Corrupts registers:
 14185                              <2> ;		CX
 14186                              <2> ;--------------------------------------------------------------------
 14187                              <2> %ifndef EXCLUDE_FROM_XTIDECFG
 14188                              <2> ALIGN JUMP_ALIGN
 14189                              <2> Memory_SumCXbytesFromESSItoAL:
 14190                              <2> 	push	si
 14191                              <2> 	dec		si
 14192                              <2> 	xor		al, al
 14193                              <2> ALIGN JUMP_ALIGN
 14194                              <2> .AddNextByteToAL:
 14195                              <2> 	inc		si
 14196                              <2> 	add		al, [es:si]
 14197                              <2> 	loop	.AddNextByteToAL
 14198                              <2> 	pop		si
 14199                              <2> 	ret
 14200                              <2> %endif
 14201                              <1> 	%include "Size.asm"
 14202                              <2> ; Project name	:	Assembly Library
 14203                              <2> ; Description	:	Functions for size calculations.
 14204                              <2> 
 14205                              <2> ;
 14206                              <2> ; XTIDE Universal BIOS and Associated Tools
 14207                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 14208                              <2> ;
 14209                              <2> ; This program is free software; you can redistribute it and/or modify
 14210                              <2> ; it under the terms of the GNU General Public License as published by
 14211                              <2> ; the Free Software Foundation; either version 2 of the License, or
 14212                              <2> ; (at your option) any later version.
 14213                              <2> ;
 14214                              <2> ; This program is distributed in the hope that it will be useful,
 14215                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 14216                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 14217                              <2> ; GNU General Public License for more details.
 14218                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 14219                              <2> ;
 14220                              <2> 
 14221                              <2> %ifdef INCLUDE_MENU_LIBRARY
 14222                              <2> struc BYTE_MULTIPLES
 14223 00000000 <res 00000001>      <2> 	.B			resb	1
 14224 00000001 <res 00000001>      <2> 	.kiB		resb	1
 14225 00000002 <res 00000001>      <2> 	.MiB		resb	1
 14226 00000003 <res 00000001>      <2> 	.GiB		resb	1
 14227 00000004 <res 00000001>      <2> 	.TiB		resb	1
 14228                              <2> endstruc
 14229                              <2> 
 14230                              <2> ; Section containing code
 14231                              <2> SECTION .text
 14232                              <2> 
 14233                              <2> ;--------------------------------------------------------------------
 14234                              <2> ; Size_GetSizeToAXAndCharToDLfromBXDXAXwithMagnitudeInCX
 14235                              <2> ;	Parameters:
 14236                              <2> ;		BX:DX:AX:	Size in magnitude
 14237                              <2> ;		CX:			Magnitude in BYTE_MULTIPLES
 14238                              <2> ;	Returns:
 14239                              <2> ;		AX:			Size in magnitude
 14240                              <2> ;		CX:			Tenths
 14241                              <2> ;		DL:			Magnitude character:
 14242                              <2> ;						'k' = *1024   B = kiB
 14243                              <2> ;						'M' = *1024 kiB = MiB
 14244                              <2> ;						'G' = *1024 MiB = GiB
 14245                              <2> ;						'T' = *1024 GiB = TiB
 14246                              <2> ;						'P' = *1024 TiB = PiB
 14247                              <2> ;	Corrupts registers:
 14248                              <2> ;		BX, DH
 14249                              <2> ;--------------------------------------------------------------------
 14250                              <2> ALIGN UTIL_SIZE_JUMP_ALIGN
 14251                              <2> Size_GetSizeToAXAndCharToDLfromBXDXAXwithMagnitudeInCX:
 14252                              <2> %ifndef USE_186		; If 8086/8088
 14253 000015C9 57                  <2> 	push	di
 14254                              <2> %endif
 14255 000015CA 56                  <2> 	push	si
 14256                              <2> 
 14257                              <2> ALIGN UTIL_SIZE_JUMP_ALIGN
 14258                              <2> .MagnitudeConversionLoop:
 14259                              <2> 	ePUSH_T	di, .MagnitudeConversionLoop; DI corrupted only on 8086/8088 build
 14260                              <3> %ifndef USE_186
 14261                              <3>  %ifidni %2, 0
 14262                              <3>  xor %1, %1
 14263                              <3>  %else
 14264 000015CB BF[CB15]            <3>  mov %1, %2
 14265                              <3>  %endif
 14266 000015CE 57                  <3>  push %1
 14267                              <3> 
 14268                              <3> %else
 14269                              <3>  push %2
 14270                              <3> %endif
 14271 000015CF 85DB                <2> 	test	bx, bx						; Bits 32...47 in use?
 14272 000015D1 7529                <2> 	jnz		SHORT Size_DivideSizeInBXDXAXby1024andIncrementMagnitudeInCX
 14273 000015D3 85D2                <2> 	test	dx, dx						; Bits 16...31 in use?
 14274 000015D5 7525                <2> 	jnz		SHORT Size_DivideSizeInBXDXAXby1024andIncrementMagnitudeInCX
 14275 000015D7 3D1027              <2> 	cmp		ax, 10000					; 5 digits needed?
 14276 000015DA 7320                <2> 	jae		SHORT Size_DivideSizeInBXDXAXby1024andIncrementMagnitudeInCX
 14277 000015DC 83C402              <2> 	add		sp, BYTE 2					; Clean return address from stack
 14278 000015DF 87F1                <2> 	xchg	si, cx						; CX = Remainder (0...1023), SI = Magnitude
 14279                              <2> 
 14280                              <2> 	; Convert remainder to tenths
 14281 000015E1 93                  <2> 	xchg	bx, ax						; Store AX
 14282 000015E2 B80500              <2> 	mov		ax, 5
 14283 000015E5 F7E1                <2> 	mul		cx							; DX:AX = remainder * (10 / 2)
 14284                              <2> %ifdef USE_186
 14285                              <2> 	shr		ax, 9						; Divide AX by (1024 / 2)
 14286                              <2> %else
 14287 000015E7 D1E8                <2> 	shr		ax, 1
 14288 000015E9 88E0                <2> 	mov		al, ah
 14289 000015EB 98                  <2> 	cbw
 14290                              <2> %endif
 14291 000015EC 91                  <2> 	xchg	cx, ax						; CX = tenths
 14292 000015ED 93                  <2> 	xchg	ax, bx
 14293                              <2> 
 14294                              <2> 	; Convert magnitude to character
 14295 000015EE 2E8A94[F615]        <2> 	mov		dl, [cs:si+.rgbMagnitudeToChar]
 14296                              <2> 
 14297 000015F3 5E                  <2> 	pop		si
 14298                              <2> %ifndef USE_186
 14299 000015F4 5F                  <2> 	pop		di
 14300                              <2> %endif
 14301 000015F5 C3                  <2> 	ret
 14302 000015F6 206B4D475450        <2> .rgbMagnitudeToChar:	db	" kMGTP"
 14303                              <2> %endif
 14304                              <2> 
 14305                              <2> ;--------------------------------------------------------------------
 14306                              <2> ; Size_DivideSizeInBXDXAXby1024andIncrementMagnitudeInCX
 14307                              <2> ;	Parameters:
 14308                              <2> ;		BX:DX:AX:	Size
 14309                              <2> ;		CX:			Magnitude in BYTE_MULTIPLES
 14310                              <2> ;	Returns:
 14311                              <2> ;		BX:DX:AX:	Size in magnitude
 14312                              <2> ;		SI:			Remainder (0...1023)
 14313                              <2> ;		CX:			Magnitude in BYTE_MULTIPLES
 14314                              <2> ;	Corrupts registers:
 14315                              <2> ;		Nothing
 14316                              <2> ;--------------------------------------------------------------------
 14317                              <2> ALIGN UTIL_SIZE_JUMP_ALIGN
 14318                              <2> Size_DivideSizeInBXDXAXby1024andIncrementMagnitudeInCX:
 14319 000015FC 51                  <2> 	push	cx
 14320 000015FD 31F6                <2> 	xor		si, si					; Zero remainder
 14321 000015FF B10A                <2> 	mov		cl, 10					; Divide by 1024
 14322                              <2> ALIGN UTIL_SIZE_JUMP_ALIGN
 14323                              <2> .ShiftLoop:
 14324 00001601 E80D00              <2> 	call	Size_DivideBXDXAXbyTwo
 14325 00001604 D1DE                <2> 	rcr		si, 1					; Update remainder
 14326 00001606 E2F9                <2> 	loop	.ShiftLoop
 14327                              <2> 	eSHR_IM	si, 6					; Remainder to SI beginning
 14328                              <3>  eSHIFT_IM %1, %2, shr
 14329                              <4> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 14330                              <4> %ifndef USE_186
 14331                              <4>  %ifidni %1, cl
 14332                              <4>  times %2 %3 %1, 1
 14333                              <4>  %elifidni %1, ch
 14334                              <4>  times %2 %3 %1, 1
 14335                              <4>  %elifidni %1, cx
 14336                              <4>  times %2 %3 %1, 1
 14337                              <4>  %else
 14338                              <4>  %if %2 > 3
 14339 00001608 51                  <4>  push cx
 14340 00001609 B106                <4>  mov cl, %2
 14341 0000160B D3EE                <4>  %3 %1, cl
 14342 0000160D 59                  <4>  pop cx
 14343                              <4>  %else
 14344                              <4>  times %2 %3 %1, 1
 14345                              <4>  %endif
 14346                              <4>  %endif
 14347                              <4> 
 14348                              <4> %else
 14349                              <4>  %3 %1, %2
 14350                              <4> %endif
 14351                              <4> %endif
 14352 0000160E 59                  <2> 	pop		cx
 14353 0000160F 41                  <2> 	inc		cx						; Increment magnitude
 14354 00001610 C3                  <2> 	ret
 14355                              <2> 
 14356                              <2> ;--------------------------------------------------------------------
 14357                              <2> ; Size_ConvertSectorCountInBXDXAXtoKiB
 14358                              <2> ; Size_DivideBXDXAXbyTwo
 14359                              <2> ;	Parameters:
 14360                              <2> ;		BX:DX:AX:	Total sector count
 14361                              <2> ;	Returns:
 14362                              <2> ;		BX:DX:AX:	Total size in kiB
 14363                              <2> ;		CF:			Remainder from division
 14364                              <2> ;	Corrupts registers:
 14365                              <2> ;		Nothing
 14366                              <2> ;--------------------------------------------------------------------
 14367                              <2> ALIGN UTIL_SIZE_JUMP_ALIGN
 14368                              <2> Size_ConvertSectorCountInBXDXAXtoKiB:	; unused entrypoint ok
 14369                              <2> Size_DivideBXDXAXbyTwo:
 14370 00001611 D1EB                <2> 	shr		bx, 1					; Divide sector count by 2...
 14371 00001613 D1DA                <2> 	rcr		dx, 1					; ...to get disk size in...
 14372 00001615 D1D8                <2> 	rcr		ax, 1					; ...kiB
 14373 00001617 C3                  <2> 	ret
 14374                              <1> 	%ifndef EXCLUDE_FROM_XTIDE_UNIVERSAL_BIOS
 14375                              <1> 		%include "Sort.asm"
 14376                              <2> ; Project name	:	Assembly Library
 14377                              <2> ; Description	:	Sorting algorithms
 14378                              <2> 
 14379                              <2> ;
 14380                              <2> ; XTIDE Universal BIOS and Associated Tools
 14381                              <2> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 14382                              <2> ;
 14383                              <2> ; This program is free software; you can redistribute it and/or modify
 14384                              <2> ; it under the terms of the GNU General Public License as published by
 14385                              <2> ; the Free Software Foundation; either version 2 of the License, or
 14386                              <2> ; (at your option) any later version.
 14387                              <2> ;
 14388                              <2> ; This program is distributed in the hope that it will be useful,
 14389                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 14390                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 14391                              <2> ; GNU General Public License for more details.
 14392                              <2> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 14393                              <2> ;
 14394                              <2> 
 14395                              <2> ; Algorith is from http://www.algolist.net/Algorithms/Sorting/Quicksort
 14396                              <2> 
 14397                              <2> struc QSORT_PARAMS
 14398 00000000 <res 00000004>      <2> 	.lpItems			resb	4
 14399                              <2> 	.tempAndPivotItems:
 14400                              <2> endstruc
 14401                              <2> 
 14402                              <2> ;--------------------------------------------------------------------
 14403                              <2> ; Prototype for comparator callback function
 14404                              <2> ;	Parameters:
 14405                              <2> ;		CX:		Item size in bytes
 14406                              <2> ;		DS:SI:	Ptr to first item to compare
 14407                              <2> ;		ES:DI:	Ptr to second item to compare
 14408                              <2> ;	Returns:
 14409                              <2> ;		FLAGS:	Signed comparition between first and second item
 14410                              <2> ;	Corrupts registers:
 14411                              <2> ;		Nothing
 14412                              <2> ;--------------------------------------------------------------------
 14413                              <2> 
 14414                              <2> 
 14415                              <2> ; Section containing code
 14416                              <2> SECTION .text
 14417                              <2> 
 14418                              <2> ;--------------------------------------------------------------------
 14419                              <2> ; Sort_ItemsFromDSSIwithCountInDXsizeInCXandComparatorInBX
 14420                              <2> ;	Parameters:
 14421                              <2> ;		CX:		Item size in bytes
 14422                              <2> ;		DX:		Number of items to sort (signed)
 14423                              <2> ;		CS:BX:	Comparator function
 14424                              <2> ;		DS:SI:	Ptr to array of items to sort
 14425                              <2> ;	Returns:
 14426                              <2> ;		Nothing
 14427                              <2> ;	Corrupts registers:
 14428                              <2> ;		AX, CX, DX
 14429                              <2> ;--------------------------------------------------------------------
 14430                              <2> ALIGN JUMP_ALIGN
 14431                              <2> Sort_ItemsFromDSSIwithCountInDXsizeInCXandComparatorInBX:
 14432 00001618 06                  <2> 	push	es
 14433 00001619 57                  <2> 	push	di
 14434 0000161A 89CF                <2> 	mov		di, cx
 14435                              <2> 	eSHL_IM	cx, 1						; Reserve temp and pivot items
 14436                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 14437                              <3> %ifdef USE_386
 14438                              <3>  %if %2 = 1
 14439                              <3>  add %1, %1
 14440                              <3>  %else
 14441                              <3>  eSHIFT_IM %1, %2, shl
 14442                              <3>  %endif
 14443                              <3> %else
 14444                              <3>  eSHIFT_IM %1, %2, shl
 14445                              <4> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 14446                              <4> %ifndef USE_186
 14447                              <4>  %ifidni %1, cl
 14448                              <4>  times %2 %3 %1, 1
 14449                              <4>  %elifidni %1, ch
 14450                              <4>  times %2 %3 %1, 1
 14451                              <4>  %elifidni %1, cx
 14452 0000161C D1E1                <4>  times %2 %3 %1, 1
 14453                              <4>  %else
 14454                              <4>  %if %2 > 3
 14455                              <4>  push cx
 14456                              <4>  mov cl, %2
 14457                              <4>  %3 %1, cl
 14458                              <4>  pop cx
 14459                              <4>  %else
 14460                              <4>  times %2 %3 %1, 1
 14461                              <4>  %endif
 14462                              <4>  %endif
 14463                              <4> 
 14464                              <4> %else
 14465                              <4>  %3 %1, %2
 14466                              <4> %endif
 14467                              <4> %endif
 14468                              <3> %endif
 14469                              <3> %endif
 14470 0000161E 83C104              <2> 	add		cx, BYTE QSORT_PARAMS_size
 14471                              <2> 	eENTER_STRUCT cx
 14472 00001621 55                  <3>  push bp
 14473 00001622 29CC                <3>  sub sp, %1
 14474 00001624 89E5                <3>  mov bp, sp
 14475 00001626 51                  <2> 	push	cx
 14476                              <2> 
 14477 00001627 FC                  <2> 	cld
 14478 00001628 89F9                <2> 	mov		cx, di						; Restore item size to CX
 14479 0000162A 31C0                <2> 	xor		ax, ax						; Zero starting index
 14480 0000162C 4A                  <2> 	dec		dx							; Count to index of last item
 14481 0000162D 897600              <2> 	mov		[bp+QSORT_PARAMS.lpItems], si
 14482 00001630 8C5E02              <2> 	mov		[bp+QSORT_PARAMS.lpItems+2], ds
 14483 00001633 E80A00              <2> 	call	QuicksortItemsInRangeFromAXtoDXwithQsortParamsInSSBP
 14484                              <2> 
 14485 00001636 C57600              <2> 	lds		si, [bp+QSORT_PARAMS.lpItems]
 14486 00001639 58                  <2> 	pop		ax
 14487                              <2> 	eLEAVE_STRUCT ax
 14488 0000163A 01C4                <3>  add sp, %1
 14489 0000163C 5D                  <3>  pop bp
 14490 0000163D 5F                  <2> 	pop		di
 14491 0000163E 07                  <2> 	pop		es
 14492 0000163F C3                  <2> 	ret
 14493                              <2> 
 14494                              <2> 
 14495                              <2> ;--------------------------------------------------------------------
 14496                              <2> ; QuicksortItemsInRangeFromAXtoDXwithQsortParamsInSSBP
 14497                              <2> ;	Parameters:
 14498                              <2> ;		AX:		Index of first item in range
 14499                              <2> ;		BX:		Comparator function
 14500                              <2> ;		CX:		Size of struct in bytes
 14501                              <2> ;		DX:		Index of last (included) item in range
 14502                              <2> ;		SS:BP:	Ptr to QSORT_PARAMS
 14503                              <2> ;	Returns:
 14504                              <2> ;		Nothing
 14505                              <2> ;	Corrupts registers:
 14506                              <2> ;		DS, ES
 14507                              <2> ;		AX, DX (not for recursion)
 14508                              <2> ;--------------------------------------------------------------------
 14509                              <2> ALIGN JUMP_ALIGN
 14510                              <2> QuicksortItemsInRangeFromAXtoDXwithQsortParamsInSSBP:
 14511 00001640 57                  <2> 	push	di
 14512 00001641 56                  <2> 	push	si
 14513                              <2> 
 14514 00001642 89C6                <2> 	mov		si, ax			; First index to SI
 14515 00001644 89D7                <2> 	mov		di, dx			; Last index to DI
 14516 00001646 E81500              <2> 	call	ArrangeItemsInRangeAXtoDXusingMiddleItemAsPivot
 14517                              <2> 
 14518                              <2> 	; Does left partition need more sorting
 14519 00001649 39D6                <2> 	cmp		si, dx			; if (first index < Index of rightmost unsorted item)
 14520 0000164B 7D05                <2> 	jge		SHORT .CheckIfRightPartitionNeedsMoreSorting
 14521 0000164D 96                  <2> 	xchg	ax, si			; AX = first index, SI = Index of leftmost unsorted item
 14522 0000164E E8EFFF              <2> 	call	QuicksortItemsInRangeFromAXtoDXwithQsortParamsInSSBP
 14523 00001651 96                  <2> 	xchg	ax, si			; AX = Index of leftmost unsorted item
 14524                              <2> 
 14525                              <2> .CheckIfRightPartitionNeedsMoreSorting:
 14526 00001652 39F8                <2> 	cmp		ax, di			; if (Index of leftmost unsorted item < last index)
 14527 00001654 7D05                <2> 	jge		SHORT .SortCompleted
 14528 00001656 89FA                <2> 	mov		dx, di			; DI = Index of leftmost unsorted item
 14529 00001658 E8E5FF              <2> 	call	QuicksortItemsInRangeFromAXtoDXwithQsortParamsInSSBP
 14530                              <2> 
 14531                              <2> ALIGN JUMP_ALIGN
 14532                              <2> .SortCompleted:
 14533 0000165B 5E                  <2> 	pop		si
 14534 0000165C 5F                  <2> 	pop		di
 14535 0000165D C3                  <2> 	ret
 14536                              <2> 
 14537                              <2> 
 14538                              <2> ;--------------------------------------------------------------------
 14539                              <2> ; ArrangeItemsInRangeAXtoDXusingMiddleItemAsPivot
 14540                              <2> ;	Parameters:
 14541                              <2> ;		AX:		Index of first item in range
 14542                              <2> ;		BX:		Comparator function
 14543                              <2> ;		CX:		Size of struct in bytes
 14544                              <2> ;		DX:		Index of last (included) item in range
 14545                              <2> ;		SS:BP:	Ptr to QSORT_PARAMS
 14546                              <2> ;	Returns:
 14547                              <2> ;		AX:		Index of first unsorted item
 14548                              <2> ;		DX:		Index of last unsorted item
 14549                              <2> ;	Corrupts registers:
 14550                              <2> ;		DS, ES
 14551                              <2> ;--------------------------------------------------------------------
 14552                              <2> ALIGN JUMP_ALIGN
 14553                              <2> ArrangeItemsInRangeAXtoDXusingMiddleItemAsPivot:
 14554 0000165E 57                  <2> 	push	di
 14555 0000165F 56                  <2> 	push	si
 14556                              <2> 
 14557 00001660 E80600              <2> 	call	.GetPivotPointerToESDI
 14558 00001663 E81700              <2> 	call	ArrangeItemsInRangeAXtoDXtoBothSidesOfPivotInESDI
 14559                              <2> 
 14560 00001666 5E                  <2> 	pop		si
 14561 00001667 5F                  <2> 	pop		di
 14562 00001668 C3                  <2> 	ret
 14563                              <2> 
 14564                              <2> ALIGN JUMP_ALIGN
 14565                              <2> .GetPivotPointerToESDI:
 14566 00001669 50                  <2> 	push	ax
 14567                              <2> 
 14568 0000166A 01D0                <2> 	add		ax, dx
 14569 0000166C D1E8                <2> 	shr		ax, 1			; AX = Middle index in partition
 14570 0000166E E86600              <2> 	call	GetItemPointerToDSSIfromIndexInAX
 14571 00001671 E85700              <2> 	call	GetPointerToTemporaryItemToESDI
 14572 00001674 01CF                <2> 	add		di, cx			; Pivot is after temporary item
 14573 00001676 E86A00              <2> 	call	CopyItemFromDSSItoESDI
 14574 00001679 29CF                <2> 	sub		di, cx			; Restore DI
 14575                              <2> 
 14576 0000167B 58                  <2> 	pop		ax
 14577 0000167C C3                  <2> 	ret
 14578                              <2> 
 14579                              <2> 
 14580                              <2> ;--------------------------------------------------------------------
 14581                              <2> ; ArrangeItemsInRangeAXtoDXtoBothSidesOfPivotInESDI
 14582                              <2> ;	Parameters:
 14583                              <2> ;		AX:		Index of first item in range
 14584                              <2> ;		BX:		Comparator function
 14585                              <2> ;		CX:		Size of struct in bytes
 14586                              <2> ;		DX:		Index of last (included) item in range
 14587                              <2> ;		ES:DI:	Ptr to Pivot item
 14588                              <2> ;		SS:BP:	Ptr to QSORT_PARAMS
 14589                              <2> ;	Returns:
 14590                              <2> ;		AX:		Index of first unsorted item
 14591                              <2> ;		DX:		Index of last unsorted item
 14592                              <2> ;	Corrupts registers:
 14593                              <2> ;		SI, DS
 14594                              <2> ;--------------------------------------------------------------------
 14595                              <2> ALIGN JUMP_ALIGN
 14596                              <2> ArrangeItemsInRangeAXtoDXtoBothSidesOfPivotInESDI:
 14597 0000167D 39D0                <2> 	cmp		ax, dx	; while (left <= right)
 14598 0000167F 7F29                <2> 	jg		SHORT .BreakLoopSinceAllItemsExamined
 14599                              <2> 
 14600 00001681 E85300              <2> 	call	GetItemPointerToDSSIfromIndexInAX
 14601 00001684 E81100              <2> 	call	.GetIndexOfLeftmostItemToAXforItemThatIsGreaterThanEqualToPivotInESDI
 14602                              <2> 
 14603 00001687 E84700              <2> 	call	GetItemPointerToDSSIfromIndexInDX
 14604 0000168A E81400              <2> 	call	.GetIndexOfRightmostItemToDXforItemThatIsGreaterThanPivotInESDI
 14605                              <2> 
 14606 0000168D 39D0                <2> 	cmp		ax, dx	; If (left <= right)
 14607 0000168F 7FEC                <2> 	jg		SHORT ArrangeItemsInRangeAXtoDXtoBothSidesOfPivotInESDI
 14608 00001691 E81700              <2> 	call	SwapItemsFromIndexesAXandDX
 14609 00001694 40                  <2> 	inc		ax
 14610 00001695 4A                  <2> 	dec		dx
 14611 00001696 EBE5                <2> 	jmp		SHORT ArrangeItemsInRangeAXtoDXtoBothSidesOfPivotInESDI
 14612                              <2> 
 14613                              <2> ALIGN JUMP_ALIGN
 14614                              <2> .GetIndexOfLeftmostItemToAXforItemThatIsGreaterThanEqualToPivotInESDI:
 14615 00001698 FFD3                <2> 	call	bx
 14616 0000169A 7D0E                <2> 	jge		SHORT .NoNeedToIncrementOrDecrementAnyMore
 14617 0000169C 40                  <2> 	inc		ax				; Increment item index
 14618 0000169D 01CE                <2> 	add		si, cx			; Point to next struct
 14619 0000169F EBF7                <2> 	jmp		SHORT .GetIndexOfLeftmostItemToAXforItemThatIsGreaterThanEqualToPivotInESDI
 14620                              <2> 
 14621                              <2> ALIGN JUMP_ALIGN
 14622                              <2> .GetIndexOfRightmostItemToDXforItemThatIsGreaterThanPivotInESDI:
 14623 000016A1 FFD3                <2> 	call	bx
 14624 000016A3 7E05                <2> 	jle		SHORT .NoNeedToIncrementOrDecrementAnyMore
 14625 000016A5 4A                  <2> 	dec		dx
 14626 000016A6 29CE                <2> 	sub		si, cx
 14627 000016A8 EBF7                <2> 	jmp		SHORT .GetIndexOfRightmostItemToDXforItemThatIsGreaterThanPivotInESDI
 14628                              <2> 
 14629                              <2> ALIGN JUMP_ALIGN
 14630                              <2> .NoNeedToIncrementOrDecrementAnyMore:
 14631                              <2> .BreakLoopSinceAllItemsExamined:
 14632 000016AA C3                  <2> 	ret
 14633                              <2> 
 14634                              <2> 
 14635                              <2> ;--------------------------------------------------------------------
 14636                              <2> ; SwapItemsFromIndexesAXandDX
 14637                              <2> ;	Parameters:
 14638                              <2> ;		AX:		Index of item 1
 14639                              <2> ;		CX:		Size of struct in bytes
 14640                              <2> ;		DX:		Index of item 2
 14641                              <2> ;		SS:BP:	Ptr to QSORT_PARAMS
 14642                              <2> ;	Returns:
 14643                              <2> ;		Nothing
 14644                              <2> ;	Corrupts registers:
 14645                              <2> ;		SI, DS
 14646                              <2> ;--------------------------------------------------------------------
 14647                              <2> ALIGN JUMP_ALIGN
 14648                              <2> SwapItemsFromIndexesAXandDX:
 14649 000016AB 06                  <2> 	push	es
 14650 000016AC 57                  <2> 	push	di
 14651                              <2> 
 14652                              <2> 	; Item AX to stack
 14653 000016AD E81B00              <2> 	call	GetPointerToTemporaryItemToESDI
 14654 000016B0 E82400              <2> 	call	GetItemPointerToDSSIfromIndexInAX
 14655 000016B3 E82D00              <2> 	call	CopyItemFromDSSItoESDI
 14656                              <2> 
 14657                              <2> 	; Item DX to Item AX
 14658 000016B6 E8A5FE              <2> 	call	Registers_ExchangeDSSIwithESDI
 14659 000016B9 E81500              <2> 	call	GetItemPointerToDSSIfromIndexInDX
 14660 000016BC E82400              <2> 	call	CopyItemFromDSSItoESDI
 14661                              <2> 
 14662                              <2> 	; Stack to Item DX
 14663 000016BF E80900              <2> 	call	GetPointerToTemporaryItemToESDI
 14664 000016C2 E899FE              <2> 	call	Registers_ExchangeDSSIwithESDI
 14665 000016C5 E81B00              <2> 	call	CopyItemFromDSSItoESDI
 14666                              <2> 
 14667 000016C8 5F                  <2> 	pop		di
 14668 000016C9 07                  <2> 	pop		es
 14669 000016CA C3                  <2> 	ret
 14670                              <2> 
 14671                              <2> 
 14672                              <2> ;--------------------------------------------------------------------
 14673                              <2> ; GetPointerToTemporaryItemToESDI
 14674                              <2> ;	Parameters:
 14675                              <2> ;		SS:BP:	Ptr to QSORT_PARAMS
 14676                              <2> ;	Returns:
 14677                              <2> ;		ES:DI:	Ptr to temporary item
 14678                              <2> ;	Corrupts registers:
 14679                              <2> ;		Nothing
 14680                              <2> ;--------------------------------------------------------------------
 14681                              <2> ALIGN JUMP_ALIGN
 14682                              <2> GetPointerToTemporaryItemToESDI:
 14683 000016CB 8D7E04              <2> 	lea		di, [bp+QSORT_PARAMS.tempAndPivotItems]
 14684 000016CE 16                  <2> 	push	ss
 14685 000016CF 07                  <2> 	pop		es
 14686 000016D0 C3                  <2> 	ret
 14687                              <2> 
 14688                              <2> 
 14689                              <2> ;--------------------------------------------------------------------
 14690                              <2> ; GetItemPointerToDSSIfromIndexInDX
 14691                              <2> ; GetItemPointerToDSSIfromIndexInAX
 14692                              <2> ;	Parameters:
 14693                              <2> ;		AX or DX:	Item index
 14694                              <2> ;		CX:			Size of struct in bytes
 14695                              <2> ;		SS:BP:		Ptr to QSORT_PARAMS
 14696                              <2> ;	Returns:
 14697                              <2> ;		DS:SI:		Ptr to item
 14698                              <2> ;	Corrupts registers:
 14699                              <2> ;		Nothing
 14700                              <2> ;--------------------------------------------------------------------
 14701                              <2> ALIGN JUMP_ALIGN
 14702                              <2> GetItemPointerToDSSIfromIndexInDX:
 14703 000016D1 92                  <2> 	xchg	ax, dx
 14704 000016D2 E80200              <2> 	call	GetItemPointerToDSSIfromIndexInAX
 14705 000016D5 92                  <2> 	xchg	dx, ax
 14706 000016D6 C3                  <2> 	ret
 14707                              <2> 
 14708                              <2> ALIGN JUMP_ALIGN
 14709                              <2> GetItemPointerToDSSIfromIndexInAX:
 14710 000016D7 52                  <2> 	push	dx
 14711 000016D8 50                  <2> 	push	ax
 14712                              <2> 
 14713 000016D9 F7E1                <2> 	mul		cx		; DX:AX = index (AX) * size of struct (CX)
 14714 000016DB C57600              <2> 	lds		si, [bp+QSORT_PARAMS.lpItems]
 14715 000016DE 01C6                <2> 	add		si, ax
 14716                              <2> 
 14717 000016E0 58                  <2> 	pop		ax
 14718 000016E1 5A                  <2> 	pop		dx
 14719 000016E2 C3                  <2> 	ret
 14720                              <2> 
 14721                              <2> 
 14722                              <2> ;--------------------------------------------------------------------
 14723                              <2> ; CopyItemFromDSSItoESDI
 14724                              <2> ;	Parameters:
 14725                              <2> ;		CX:		Item size in bytes
 14726                              <2> ;		DS:SI:	Ptr to source item
 14727                              <2> ;		ES:DI:	Ptr to destination buffer
 14728                              <2> ;	Returns:
 14729                              <2> ;		Nothing
 14730                              <2> ;	Corrupts registers:
 14731                              <2> ;		DI
 14732                              <2> ;--------------------------------------------------------------------
 14733                              <2> ALIGN JUMP_ALIGN
 14734                              <2> CopyItemFromDSSItoESDI:
 14735 000016E3 E8B3FE              <2> 	call	Memory_CopyCXbytesFromDSSItoESDI
 14736 000016E6 29CE                <2> 	sub		si, cx			; Restore SI
 14737 000016E8 C3                  <2> 	ret
 14738                              <1> 	%endif
 14739                              <1> %endif
 14740                              <1> 
 14741                                  
 14742                                  ; Include sources for this program
 14743                                  %include "AutoConfigure.asm"
 14744                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 14745                              <1> ; Description	:	Functions to automatically configure XTIDE
 14746                              <1> ;					Universal BIOS for current system.
 14747                              <1> 
 14748                              <1> ;
 14749                              <1> ; XTIDE Universal BIOS and Associated Tools
 14750                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 14751                              <1> ;
 14752                              <1> ; This program is free software; you can redistribute it and/or modify
 14753                              <1> ; it under the terms of the GNU General Public License as published by
 14754                              <1> ; the Free Software Foundation; either version 2 of the License, or
 14755                              <1> ; (at your option) any later version.
 14756                              <1> ;
 14757                              <1> ; This program is distributed in the hope that it will be useful,
 14758                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 14759                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 14760                              <1> ; GNU General Public License for more details.
 14761                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 14762                              <1> ;
 14763                              <1> 
 14764                              <1> ; Section containing code
 14765                              <1> SECTION .text
 14766                              <1> 
 14767                              <1> 
 14768                              <1> ;--------------------------------------------------------------------
 14769                              <1> ; AutoConfigure_ForThisSystem
 14770                              <1> ; MENUITEM activation function (.fnActivate)
 14771                              <1> ;	Parameters:
 14772                              <1> ;		SS:BP:	Ptr to MENU
 14773                              <1> ;	Returns:
 14774                              <1> ;		Nothing
 14775                              <1> ;	Corrupts registers:
 14776                              <1> ;		All, except segments
 14777                              <1> ;--------------------------------------------------------------------
 14778                              <1> ALIGN JUMP_ALIGN
 14779                              <1> AutoConfigure_ForThisSystem:
 14780 000016E9 06                  <1> 	push	es
 14781 000016EA 1E                  <1> 	push	ds
 14782                              <1> 
 14783 000016EB E84C02              <1> 	call	Buffers_GetFileBufferToESDI		; ROMVARS now in ES:DI
 14784 000016EE 06                  <1> 	push	es
 14785 000016EF 1F                  <1> 	pop		ds								; ROMVARS now in DS:DI
 14786 000016F0 E80C00              <1> 	call	ResetIdevarsToDefaultValues
 14787 000016F3 E83300              <1> 	call	DetectIdePortsAndDevices
 14788 000016F6 E85800              <1> 	call	EnableInterruptsForPrimaryAndSecondaryControllers
 14789 000016F9 E87800              <1> 	call	StoreAndDisplayNumberOfControllers
 14790                              <1> 
 14791 000016FC 1F                  <1> 	pop		ds
 14792 000016FD 07                  <1> 	pop		es
 14793 000016FE C3                  <1> 	ret
 14794                              <1> 
 14795                              <1> 
 14796                              <1> ;--------------------------------------------------------------------
 14797                              <1> ; ResetIdevarsToDefaultValues
 14798                              <1> ;	Parameters:
 14799                              <1> ;		DS:DI:	Ptr to ROMVARS
 14800                              <1> ;	Returns:
 14801                              <1> ;		Nothing
 14802                              <1> ;	Corrupts registers:
 14803                              <1> ;		AX, CX
 14804                              <1> ;--------------------------------------------------------------------
 14805                              <1> ALIGN JUMP_ALIGN
 14806                              <1> ResetIdevarsToDefaultValues:
 14807 000016FF 57                  <1> 	push	di
 14808 00001700 83C751              <1> 	add		di, BYTE ROMVARS.ideVarsBegin
 14809 00001703 B94800              <1> 	mov		cx, ROMVARS.ideVarsEnd - ROMVARS.ideVarsBegin
 14810 00001706 E8A9FE              <1> 	call	Memory_ZeroESDIwithSizeInCX	; Never clears ROMVARS.ideVarsSerialAuto
 14811 00001709 5F                  <1> 	pop		di
 14812                              <1> 
 14813                              <1> 	; Set default values (other than zero)
 14814 0000170A B81D00              <1> 	mov		ax, DISABLE_WRITE_CACHE | (TRANSLATEMODE_AUTO<<TRANSLATEMODE_FIELD_POSITION) | FLG_DRVPARAMS_BLOCKMODE
 14815 0000170D 894557              <1> 	mov		[di+ROMVARS.ideVars0+IDEVARS.drvParamsMaster+DRVPARAMS.wFlags], ax
 14816 00001710 89455D              <1> 	mov		[di+ROMVARS.ideVars0+IDEVARS.drvParamsSlave+DRVPARAMS.wFlags], ax
 14817                              <1> 
 14818 00001713 894569              <1> 	mov		[di+ROMVARS.ideVars1+IDEVARS.drvParamsMaster+DRVPARAMS.wFlags], ax
 14819 00001716 89456F              <1> 	mov		[di+ROMVARS.ideVars1+IDEVARS.drvParamsSlave+DRVPARAMS.wFlags], ax
 14820                              <1> 
 14821 00001719 89457B              <1> 	mov		[di+ROMVARS.ideVars2+IDEVARS.drvParamsMaster+DRVPARAMS.wFlags], ax
 14822 0000171C 89858100            <1> 	mov		[di+ROMVARS.ideVars2+IDEVARS.drvParamsSlave+DRVPARAMS.wFlags], ax
 14823                              <1> 
 14824 00001720 89858D00            <1> 	mov		[di+ROMVARS.ideVars3+IDEVARS.drvParamsMaster+DRVPARAMS.wFlags], ax
 14825 00001724 89859300            <1> 	mov		[di+ROMVARS.ideVars3+IDEVARS.drvParamsSlave+DRVPARAMS.wFlags], ax
 14826 00001728 C3                  <1> 	ret
 14827                              <1> 
 14828                              <1> 
 14829                              <1> ;--------------------------------------------------------------------
 14830                              <1> ; DetectIdePortsAndDevices
 14831                              <1> ;	Parameters:
 14832                              <1> ;		DS:DI:	Ptr to ROMVARS
 14833                              <1> ;	Returns:
 14834                              <1> ;		CX:		Number of controllers detected
 14835                              <1> ;	Corrupts registers:
 14836                              <1> ;		AX, BX, DX, SI
 14837                              <1> ;--------------------------------------------------------------------
 14838                              <1> ALIGN JUMP_ALIGN
 14839                              <1> DetectIdePortsAndDevices:
 14840 00001729 31C9                <1> 	xor		cx, cx							; Number of devices found
 14841 0000172B 31D2                <1> 	xor		dx, dx							; IDE_PORT_TO_START_DETECTION
 14842 0000172D 8D7551              <1> 	lea		si, [di+ROMVARS.ideVarsBegin]	; DS:SI points to first IDEVARS
 14843                              <1> 
 14844                              <1> .DetectFromNextPort:
 14845 00001730 E8CE05              <1> 	call	IdeAutodetect_IncrementDXtoNextIdeBasePort
 14846 00001733 741B                <1> 	jz		SHORT .AllPortsAlreadyDetected
 14847 00001735 56                  <1> 	push	si
 14848 00001736 E81805              <1> 	call	IdeAutodetect_DetectIdeDeviceFromPortDXAndReturnControlBlockInSI
 14849 00001739 89F3                <1> 	mov		bx, si
 14850 0000173B 5E                  <1> 	pop		si
 14851 0000173C 72F2                <1> 	jc		SHORT .DetectFromNextPort
 14852                              <1> 
 14853                              <1> 	; Device found from port DX, Device Type returned in AL
 14854 0000173E 41                  <1> 	inc		cx	; Increment number of controllers found
 14855 0000173F 8914                <1> 	mov		[si+IDEVARS.wBasePort], dx
 14856 00001741 895C02              <1> 	mov		[si+IDEVARS.wControlBlockPort], bx
 14857 00001744 884404              <1> 	mov		[si+IDEVARS.bDevice], al
 14858                              <1> 
 14859                              <1> 	; Point to next IDEVARS
 14860 00001747 83C612              <1> 	add		si, IDEVARS_size
 14861 0000174A 81FE8700            <1> 	cmp		si, ROMVARS.ideVars3
 14862 0000174E 76E0                <1> 	jbe		SHORT .DetectFromNextPort
 14863                              <1> .AllPortsAlreadyDetected:
 14864 00001750 C3                  <1> 	ret
 14865                              <1> 
 14866                              <1> 
 14867                              <1> ;--------------------------------------------------------------------
 14868                              <1> ; EnableInterruptsForPrimaryAndSecondaryControllers
 14869                              <1> ;	Parameters:
 14870                              <1> ;		DS:DI:	Ptr to ROMVARS
 14871                              <1> ;		CX:		Number of controllers detected
 14872                              <1> ;	Returns:
 14873                              <1> ;		Nothing
 14874                              <1> ;	Corrupts registers:
 14875                              <1> ;		AX, ES
 14876                              <1> ;--------------------------------------------------------------------
 14877                              <1> ALIGN JUMP_ALIGN
 14878                              <1> EnableInterruptsForPrimaryAndSecondaryControllers:
 14879 00001751 E320                <1> 	jcxz	.NoControllersDetected
 14880 00001753 E82B01              <1> 	call	Buffers_IsXTbuildLoaded
 14881 00001756 741B                <1> 	je		SHORT .DoNotEnableIRQforXTbuilds
 14882 00001758 57                  <1> 	push	di
 14883 00001759 51                  <1> 	push	cx
 14884                              <1> 
 14885 0000175A 83C751              <1> 	add		di, BYTE ROMVARS.ideVars0	; DS:DI now points first IDEVARS
 14886                              <1> .CheckNextController:
 14887 0000175D B00E                <1> 	mov		al, 14
 14888 0000175F 813DF001            <1> 	cmp		WORD [di+IDEVARS.wBasePort], DEVICE_ATA_PRIMARY_PORT
 14889 00001763 7407                <1> 	je		SHORT .EnableIrqAL
 14890                              <1> 
 14891 00001765 40                  <1> 	inc		ax	; 15
 14892 00001766 813D7001            <1> 	cmp		WORD [di+IDEVARS.wBasePort], DEVICE_ATA_SECONDARY_PORT
 14893 0000176A 7503                <1> 	jne		SHORT .DoNotEnableIRQ
 14894                              <1> 
 14895                              <1> .EnableIrqAL:
 14896 0000176C 884505              <1> 	mov		[di+IDEVARS.bIRQ], al
 14897                              <1> .DoNotEnableIRQ:
 14898 0000176F E2EC                <1> 	loop	.CheckNextController
 14899 00001771 59                  <1> 	pop		cx
 14900 00001772 5F                  <1> 	pop		di
 14901                              <1> .DoNotEnableIRQforXTbuilds:
 14902                              <1> .NoControllersDetected:
 14903 00001773 C3                  <1> 	ret
 14904                              <1> 
 14905                              <1> 
 14906                              <1> ;--------------------------------------------------------------------
 14907                              <1> ; StoreAndDisplayNumberOfControllers
 14908                              <1> ;	Parameters:
 14909                              <1> ;		CX:		Number of controllers detected
 14910                              <1> ;		DS:DI:	Ptr to ROMVARS
 14911                              <1> ;		SS:BP:	Ptr to MENU
 14912                              <1> ;	Returns:
 14913                              <1> ;		Nothing
 14914                              <1> ;	Corrupts registers:
 14915                              <1> ;		AX, BX, DX, DI, SI, DS, ES
 14916                              <1> ;--------------------------------------------------------------------
 14917                              <1> ALIGN JUMP_ALIGN
 14918                              <1> StoreAndDisplayNumberOfControllers:
 14919 00001774 31C0                <1> 	xor		ax, ax
 14920 00001776 08C8                <1> 	or		al, cl
 14921 00001778 7501                <1> 	jnz		SHORT .AtLeastOneController
 14922 0000177A 40                  <1> 	inc		ax							; Cannot store zero
 14923                              <1> .AtLeastOneController:
 14924 0000177B F6454601            <1> 	test	BYTE [di+ROMVARS.wFlags], FLG_ROMVARS_FULLMODE
 14925 0000177F 7506                <1> 	jnz		SHORT .FullModeSoNoNeedToLimit
 14926                              <1> 	MIN_U	al, MAX_LITE_MODE_CONTROLLERS
 14927 00001781 3C02                <2>  cmp %1, %2
 14928 00001783 7202                <2>  jb %%Return
 14929 00001785 B002                <2>  mov %1, %2
 14930                              <2> ALIGN JUMP_ALIGN
 14931                              <2> %%Return:
 14932                              <1> .FullModeSoNoNeedToLimit:
 14933                              <1> 
 14934                              <1> 	; Store number of IDE Controllers. This will also modify
 14935                              <1> 	; menu and set unsaved changes flag.
 14936 00001787 0E                  <1> 	push	cs
 14937 00001788 1F                  <1> 	pop		ds
 14938 00001789 BE[F83D]            <1> 	mov		si, g_MenuitemConfigurationIdeControllers
 14939 0000178C E88A07              <1> 	call	Menuitem_StoreValueFromAXtoMenuitemInDSSI
 14940                              <1> 
 14941                              <1> 	; Display results (should be changed to proper string formatting)
 14942 0000178F 80C130              <1> 	add		cl, '0'
 14943 00001792 2E880E[B109]        <1> 	mov		[cs:g_bControllersDetected], cl
 14944 00001797 BA[AB09]            <1> 	mov		dx, g_szDlgAutoConfigure
 14945 0000179A E9B901              <1> 	jmp		Dialogs_DisplayNotificationFromCSDX
 14946                                  %include "BiosFile.asm"
 14947                              <1> ; Project name	:	XTIDE Univeral BIOS Configurator v2
 14948                              <1> ; Description	:	Functions for loading and saving BIOS image file.
 14949                              <1> 
 14950                              <1> ;
 14951                              <1> ; XTIDE Universal BIOS and Associated Tools
 14952                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 14953                              <1> ;
 14954                              <1> ; This program is free software; you can redistribute it and/or modify
 14955                              <1> ; it under the terms of the GNU General Public License as published by
 14956                              <1> ; the Free Software Foundation; either version 2 of the License, or
 14957                              <1> ; (at your option) any later version.
 14958                              <1> ;
 14959                              <1> ; This program is distributed in the hope that it will be useful,
 14960                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 14961                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 14962                              <1> ; GNU General Public License for more details.
 14963                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 14964                              <1> ;
 14965                              <1> 
 14966                              <1> ; Section containing code
 14967                              <1> SECTION .text
 14968                              <1> 
 14969                              <1> ;--------------------------------------------------------------------
 14970                              <1> ; BiosFile_LoadFileFromDSSItoRamBuffer
 14971                              <1> ;	Parameters:
 14972                              <1> ;		DS:SI:	Name of file to open
 14973                              <1> ;		SS:BP:	Menu handle
 14974                              <1> ;	Returns:
 14975                              <1> ;		Nothing
 14976                              <1> ;	Corrupts registers:
 14977                              <1> ;		AX, BX, CX, DX, SI, DI
 14978                              <1> ;--------------------------------------------------------------------
 14979                              <1> ALIGN JUMP_ALIGN
 14980                              <1> BiosFile_LoadFileFromDSSItoRamBuffer:
 14981 0000179D 1E                  <1> 	push	ds
 14982                              <1> 
 14983 0000179E E81D00              <1> 	call	.OpenFileForLoadingFromDSSIandGetSizeToDXCX
 14984 000017A1 7213                <1> 	jc		SHORT .DisplayErrorMessage
 14985 000017A3 E83800              <1> 	call	.LoadFileWithNameInDSSIhandleInBXandSizeInDXCXtoRamBuffer
 14986 000017A6 720E                <1> 	jc		SHORT .DisplayErrorMessage
 14987                              <1> 
 14988 000017A8 B80100              <1> 	mov		ax, FLG_CFGVARS_FILELOADED
 14989 000017AB E8DD00              <1> 	call	Buffers_NewBiosWithSizeInDXCXandSourceInAXhasBeenLoadedForConfiguration
 14990 000017AE E81CEE              <1> 	call	FileIO_CloseUsingHandleFromBX
 14991 000017B1 E88000              <1> 	call	DisplayFileLoadedSuccessfully
 14992 000017B4 EB06                <1> 	jmp		SHORT .Return
 14993                              <1> 
 14994                              <1> .DisplayErrorMessage:
 14995 000017B6 E814EE              <1> 	call	FileIO_CloseUsingHandleFromBX
 14996 000017B9 E88400              <1> 	call	DisplayFailedToLoadFile
 14997                              <1> ALIGN JUMP_ALIGN
 14998                              <1> .Return:
 14999 000017BC 1F                  <1> 	pop		ds
 15000 000017BD C3                  <1> 	ret
 15001                              <1> 
 15002                              <1> ;--------------------------------------------------------------------
 15003                              <1> ; .OpenFileForLoadingFromDSSIandGetSizeInBytesToDXCX
 15004                              <1> ;	Parameters:
 15005                              <1> ;		DS:SI:	Name of file to open
 15006                              <1> ;	Returns:
 15007                              <1> ;		BX:		File handle (if successful)
 15008                              <1> ;		DX:CX:	File size (if successful)
 15009                              <1> ;		CF:		Clear if successful
 15010                              <1> ;				Set if error
 15011                              <1> ;	Corrupts registers:
 15012                              <1> ;		AX
 15013                              <1> ;--------------------------------------------------------------------
 15014                              <1> ALIGN JUMP_ALIGN
 15015                              <1> .OpenFileForLoadingFromDSSIandGetSizeToDXCX:
 15016 000017BE B000                <1> 	mov		al, FILE_ACCESS.ReadOnly
 15017 000017C0 E884ED              <1> 	call	FileIO_OpenWithPathInDSSIandFileAccessInAL
 15018 000017C3 7218                <1> 	jc		SHORT .FileError
 15019 000017C5 E8ECED              <1> 	call	FileIO_GetFileSizeToDXAXusingHandleFromBXandResetFilePosition
 15020 000017C8 7213                <1> 	jc		SHORT .FileError
 15021                              <1> 
 15022 000017CA 83FA01              <1> 	cmp		dx, MAX_EEPROM_SIZE_IN_BYTES >> 16
 15023 000017CD 770A                <1> 	ja		SHORT .FileTooBig
 15024 000017CF 7205                <1> 	jb		SHORT .FileNotTooBig
 15025 000017D1 83F800              <1> 	cmp		ax, MAX_EEPROM_SIZE_IN_BYTES & 0FFFFh
 15026 000017D4 7703                <1> 	ja		SHORT .FileTooBig
 15027                              <1> .FileNotTooBig:
 15028 000017D6 91                  <1> 	xchg	cx, ax
 15029 000017D7 F8                  <1> 	clc
 15030 000017D8 C3                  <1> 	ret
 15031                              <1> .FileTooBig:
 15032 000017D9 E87000              <1> 	call	DisplayFileTooBig
 15033 000017DC F9                  <1> 	stc
 15034                              <1> .FileError:
 15035 000017DD C3                  <1> 	ret
 15036                              <1> 
 15037                              <1> ;--------------------------------------------------------------------
 15038                              <1> ; .LoadFileWithNameInDSSIhandleInBXandSizeInDXCXtoRamBuffer
 15039                              <1> ;	Parameters:
 15040                              <1> ;		BX:		File Handle
 15041                              <1> ;		DX:CX:	File size
 15042                              <1> ;		DS:SI:	File name
 15043                              <1> ;	Returns:
 15044                              <1> ;		CF:		Clear if successful
 15045                              <1> ;				Set if error
 15046                              <1> ;	Corrupts registers:
 15047                              <1> ;		AX, SI, DI, DS
 15048                              <1> ;--------------------------------------------------------------------
 15049                              <1> ALIGN JUMP_ALIGN
 15050                              <1> .LoadFileWithNameInDSSIhandleInBXandSizeInDXCXtoRamBuffer:
 15051 000017DE 06                  <1> 	push	es
 15052                              <1> 
 15053 000017DF E85801              <1> 	call	Buffers_GetFileBufferToESDI
 15054 000017E2 E879FD              <1> 	call	Registers_ExchangeDSSIwithESDI
 15055 000017E5 E86AED              <1> 	call	FileIO_ReadDXCXbytesToDSSIusingHandleFromBX
 15056 000017E8 720F                <1> 	jc		SHORT .ReturnError
 15057                              <1> 
 15058                              <1> 	; Store filename to Cfgvars from ESDI
 15059 000017EA 51                  <1> 	push	cx
 15060                              <1> 
 15061 000017EB E886FD              <1> 	call	Registers_CopyESDItoDSSI	; File name in DS:SI
 15062 000017EE 0E                  <1> 	push	cs
 15063 000017EF 07                  <1> 	pop		es
 15064 000017F0 BF[D043]            <1> 	mov		di, g_cfgVars+CFGVARS.szOpenedFile
 15065 000017F3 FC                  <1> 	cld
 15066 000017F4 E87FFC              <1> 	call	String_CopyDSSItoESDIandGetLengthToCX
 15067 000017F7 F8                  <1> 	clc
 15068                              <1> 
 15069 000017F8 59                  <1> 	pop		cx
 15070                              <1> ALIGN JUMP_ALIGN
 15071                              <1> .ReturnError:
 15072 000017F9 07                  <1> 	pop		es
 15073 000017FA C3                  <1> 	ret
 15074                              <1> 
 15075                              <1> 
 15076                              <1> ;--------------------------------------------------------------------
 15077                              <1> ; BiosFile_SaveUnsavedChanges
 15078                              <1> ;	Parameters:
 15079                              <1> ;		SS:BP:	Menu handle
 15080                              <1> ;	Returns:
 15081                              <1> ;		Nothing
 15082                              <1> ;	Corrupts registers:
 15083                              <1> ;		AX, BX, CX, SI, DI
 15084                              <1> ;--------------------------------------------------------------------
 15085                              <1> ALIGN JUMP_ALIGN
 15086                              <1> BiosFile_SaveUnsavedChanges:
 15087 000017FB 1E                  <1> 	push	ds
 15088                              <1> 
 15089 000017FC 0E                  <1> 	push	cs
 15090 000017FD 1F                  <1> 	pop		ds
 15091 000017FE BE[D043]            <1> 	mov		si, g_cfgVars+CFGVARS.szOpenedFile
 15092 00001801 E80200              <1> 	call	BiosFile_SaveRamBufferToFileInDSSI
 15093                              <1> 
 15094 00001804 1F                  <1> 	pop		ds
 15095 00001805 C3                  <1> 	ret
 15096                              <1> 
 15097                              <1> 
 15098                              <1> ;--------------------------------------------------------------------
 15099                              <1> ; BiosFile_SaveRamBufferToFileInDSSI
 15100                              <1> ;	Parameters:
 15101                              <1> ;		DS:SI:	Name of file to save
 15102                              <1> ;		SS:BP:	Menu handle
 15103                              <1> ;	Returns:
 15104                              <1> ;		Nothing
 15105                              <1> ;	Corrupts registers:
 15106                              <1> ;		AX, BX, CX, SI, DI
 15107                              <1> ;--------------------------------------------------------------------
 15108                              <1> ALIGN JUMP_ALIGN
 15109                              <1> BiosFile_SaveRamBufferToFileInDSSI:
 15110 00001806 06                  <1> 	push	es
 15111 00001807 1E                  <1> 	push	ds
 15112                              <1> 
 15113 00001808 E8E300              <1> 	call	Buffers_GenerateChecksum
 15114 0000180B E82C01              <1> 	call	Buffers_GetFileBufferToESDI
 15115 0000180E E81B02              <1> 	call	EEPROM_GetXtideUniversalBiosSizeFromESDItoDXCX
 15116                              <1> 
 15117 00001811 B001                <1> 	mov		al, FILE_ACCESS.WriteOnly
 15118 00001813 E831ED              <1> 	call	FileIO_OpenWithPathInDSSIandFileAccessInAL
 15119 00001816 7213                <1> 	jc		SHORT .DisplayErrorMessage
 15120                              <1> 
 15121 00001818 E859FD              <1> 	call	Registers_CopyESDItoDSSI
 15122 0000181B E83DED              <1> 	call	FileIO_WriteDXCXbytesFromDSSIusingHandleFromBX
 15123 0000181E 720B                <1> 	jc		SHORT .DisplayErrorMessage
 15124                              <1> 
 15125 00001820 E8AAED              <1> 	call	FileIO_CloseUsingHandleFromBX
 15126 00001823 E88400              <1> 	call	Buffers_ClearUnsavedChanges
 15127 00001826 E81100              <1> 	call	DisplayFileSavedSuccessfully
 15128 00001829 EB06                <1> 	jmp		SHORT .Return
 15129                              <1> 
 15130                              <1> .DisplayErrorMessage:
 15131 0000182B E89FED              <1> 	call	FileIO_CloseUsingHandleFromBX
 15132 0000182E E81500              <1> 	call	DisplayFailedToSaveFile
 15133                              <1> ALIGN JUMP_ALIGN
 15134                              <1> .Return:
 15135 00001831 1F                  <1> 	pop		ds
 15136 00001832 07                  <1> 	pop		es
 15137 00001833 C3                  <1> 	ret
 15138                              <1> 
 15139                              <1> 
 15140                              <1> ;--------------------------------------------------------------------
 15141                              <1> ; DisplayFileLoadedSuccessfully
 15142                              <1> ; DisplayFileSavedSuccessfully
 15143                              <1> ; DisplayFailedToLoadFile
 15144                              <1> ; DisplayFailedToSaveFile
 15145                              <1> ; DisplayFileTooBig
 15146                              <1> ;	Parameters:
 15147                              <1> ;		SS:BP:	Menu handle
 15148                              <1> ;	Returns:
 15149                              <1> ;		Nothing
 15150                              <1> ;	Corrupts registers:
 15151                              <1> ;		AX, DX
 15152                              <1> ;--------------------------------------------------------------------
 15153                              <1> ALIGN JUMP_ALIGN
 15154                              <1> DisplayFileLoadedSuccessfully:
 15155 00001834 BA[A803]            <1> 	mov		dx, g_szDlgMainLoadFile
 15156 00001837 E91C01              <1> 	jmp		Dialogs_DisplayNotificationFromCSDX
 15157                              <1> 
 15158                              <1> ALIGN JUMP_ALIGN
 15159                              <1> DisplayFileSavedSuccessfully:
 15160 0000183A BA[CF03]            <1> 	mov		dx, g_szDlgMainSaveFile
 15161 0000183D E91601              <1> 	jmp		Dialogs_DisplayNotificationFromCSDX
 15162                              <1> 
 15163                              <1> DisplayFailedToLoadFile:
 15164 00001840 BA[3404]            <1> 	mov		dx, g_szDlgMainLoadErr
 15165 00001843 E92301              <1> 	jmp		Dialogs_DisplayErrorFromCSDX
 15166                              <1> 
 15167                              <1> DisplayFailedToSaveFile:
 15168 00001846 BA[4904]            <1> 	mov		dx, g_szDlgMainSaveErr
 15169 00001849 E91D01              <1> 	jmp		Dialogs_DisplayErrorFromCSDX
 15170                              <1> 
 15171                              <1> DisplayFileTooBig:
 15172 0000184C BA[0004]            <1> 	mov		dx, g_szDlgMainFileTooBig
 15173 0000184F E91701              <1> 	jmp		Dialogs_DisplayErrorFromCSDX
 15174                                  %include "Buffers.asm"
 15175                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 15176                              <1> ; Description	:	Functions for accessing file and flash buffers.
 15177                              <1> 
 15178                              <1> ;
 15179                              <1> ; XTIDE Universal BIOS and Associated Tools
 15180                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 15181                              <1> ;
 15182                              <1> ; This program is free software; you can redistribute it and/or modify
 15183                              <1> ; it under the terms of the GNU General Public License as published by
 15184                              <1> ; the Free Software Foundation; either version 2 of the License, or
 15185                              <1> ; (at your option) any later version.
 15186                              <1> ;
 15187                              <1> ; This program is distributed in the hope that it will be useful,
 15188                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 15189                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 15190                              <1> ; GNU General Public License for more details.
 15191                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 15192                              <1> ;
 15193                              <1> 
 15194                              <1> ; Section containing code
 15195                              <1> SECTION .text
 15196                              <1> 
 15197                              <1> ;--------------------------------------------------------------------
 15198                              <1> ; Buffers_Clear
 15199                              <1> ;	Parameters:
 15200                              <1> ;		Nothing
 15201                              <1> ;	Returns:
 15202                              <1> ;		Nothing
 15203                              <1> ;	Corrupts registers:
 15204                              <1> ;		AX, CX, DI, ES
 15205                              <1> ;--------------------------------------------------------------------
 15206                              <1> ALIGN JUMP_ALIGN
 15207                              <1> Buffers_Clear:
 15208 00001852 E8E500              <1> 	call	Buffers_GetFileBufferToESDI
 15209 00001855 B99900              <1> 	mov		cx, ROMVARS_size
 15210 00001858 E957FD              <1> 	jmp		Memory_ZeroESDIwithSizeInCX
 15211                              <1> 
 15212                              <1> 
 15213                              <1> ;--------------------------------------------------------------------
 15214                              <1> ; Buffers_IsXtideUniversalBiosLoaded
 15215                              <1> ;	Parameters:
 15216                              <1> ;		Nothing
 15217                              <1> ;	Returns:
 15218                              <1> ;		ZF:		Set if supported version of XTIDE Universal BIOS is loaded
 15219                              <1> ;				Cleared no file or some other file is loaded
 15220                              <1> ;	Corrupts registers:
 15221                              <1> ;		CX, SI, DI, ES
 15222                              <1> ;--------------------------------------------------------------------
 15223                              <1> ALIGN JUMP_ALIGN
 15224                              <1> Buffers_IsXtideUniversalBiosLoaded:
 15225 0000185B 2EF706[C643]0300    <1> 	test	WORD [cs:g_cfgVars+CFGVARS.wFlags], FLG_CFGVARS_FILELOADED | FLG_CFGVARS_ROMLOADED
 15226 00001862 7405                <1> 	jz		SHORT .NoFileOrBiosLoaded
 15227                              <1> 
 15228 00001864 E8D300              <1> 	call	Buffers_GetFileBufferToESDI
 15229 00001867 EB04                <1> 	jmp		SHORT Buffers_IsXtideUniversalBiosSignatureInESDI
 15230                              <1> .NoFileOrBiosLoaded:
 15231 00001869 80C901              <1> 	or		cl, 1		; Clear ZF
 15232 0000186C C3                  <1> 	ret
 15233                              <1> 
 15234                              <1> 
 15235                              <1> ;--------------------------------------------------------------------
 15236                              <1> ; Buffers_IsXtideUniversalBiosSignatureInESDI
 15237                              <1> ;	Parameters:
 15238                              <1> ;		ES:DI:	Ptr to possible XTIDE Universal BIOS location
 15239                              <1> ;	Returns:
 15240                              <1> ;		ZF:		Set if supported version of XTIDE Universal BIOS is loaded
 15241                              <1> ;				Cleared no file or some other file is loaded
 15242                              <1> ;	Corrupts registers:
 15243                              <1> ;		CX, SI
 15244                              <1> ;--------------------------------------------------------------------
 15245                              <1> ALIGN JUMP_ALIGN
 15246                              <1> Buffers_IsXtideUniversalBiosSignatureInESDI:
 15247 0000186D 57                  <1> 	push	di
 15248                              <1> 
 15249 0000186E BE[6200]            <1> 	mov		si, g_szXtideUniversalBiosSignature
 15250 00001871 83C706              <1> 	add		di, BYTE ROMVARS.rgbSign
 15251 00001874 B90400              <1> 	mov		cx, XTIDE_SIGNATURE_LENGTH / 2
 15252 00001877 FC                  <1> 	cld
 15253                              <1> 	eSEG_STR repe, cs, cmpsw
 15254                              <2> %ifndef USE_186
 15255                              <2>  %%Loop:
 15256 00001878 F3                  <2>  %1
 15257 00001879 2E                  <2>  %2
 15258 0000187A A7                  <2>  %3
 15259 0000187B E302                <2>  jcxz %%End
 15260 0000187D EBF9                <2>  jmp SHORT %%Loop
 15261                              <2>  %%End:
 15262                              <2> %else
 15263                              <2>  %2
 15264                              <2>  %1 %3
 15265                              <2> %endif
 15266                              <1> 
 15267 0000187F 5F                  <1> 	pop		di
 15268 00001880 C3                  <1> 	ret
 15269                              <1> 
 15270                              <1> 
 15271                              <1> ;--------------------------------------------------------------------
 15272                              <1> ; Buffers_IsXTbuildLoaded
 15273                              <1> ;	Parameters:
 15274                              <1> ;		Nothing
 15275                              <1> ;	Returns:
 15276                              <1> ;		ZF:		Set if XT or XT+ build is loaded
 15277                              <1> ;				Cleared if some other (AT, 386) build is loaded
 15278                              <1> ;	Corrupts registers:
 15279                              <1> ;		DI, ES
 15280                              <1> ;--------------------------------------------------------------------
 15281                              <1> ALIGN JUMP_ALIGN
 15282                              <1> Buffers_IsXTbuildLoaded:
 15283                              <1> %strlen BUILD_TYPE_OFFSET	TITLE_STRING_START
 15284 00001881 E8B600              <1> 	call	Buffers_GetFileBufferToESDI
 15285 00001884 26817D265854        <1> 	cmp		WORD [es:di+ROMVARS.szTitle+BUILD_TYPE_OFFSET+1], 'XT'	; +1 is for '('
 15286 0000188A C3                  <1> 	ret
 15287                              <1> %undef BUILD_TYPE_OFFSET
 15288                              <1> 
 15289                              <1> 
 15290                              <1> ;--------------------------------------------------------------------
 15291                              <1> ; Buffers_NewBiosWithSizeInDXCXandSourceInAXhasBeenLoadedForConfiguration
 15292                              <1> ;	Parameters:
 15293                              <1> ;		AX:		EEPROM source (FLG_CFGVARS_FILELOADED or FLG_CFGVARS_ROMLOADED)
 15294                              <1> ;		DX:CX:	EEPROM size in bytes
 15295                              <1> ;	Returns:
 15296                              <1> ;		Nothing
 15297                              <1> ;	Corrupts registers:
 15298                              <1> ;		AX, CX, DX
 15299                              <1> ;--------------------------------------------------------------------
 15300                              <1> ALIGN JUMP_ALIGN
 15301                              <1> Buffers_NewBiosWithSizeInDXCXandSourceInAXhasBeenLoadedForConfiguration:
 15302 0000188B 2E8326[C643]F8      <1> 	and		WORD [cs:g_cfgVars+CFGVARS.wFlags], ~(FLG_CFGVARS_FILELOADED | FLG_CFGVARS_ROMLOADED | FLG_CFGVARS_UNSAVED)
 15303 00001891 2E0906[C643]        <1> 	or		WORD [cs:g_cfgVars+CFGVARS.wFlags], ax
 15304 00001896 D1EA                <1> 	shr		dx, 1
 15305 00001898 D1D9                <1> 	rcr		cx, 1
 15306 0000189A 83D100              <1> 	adc		cx, BYTE 0		; Round up to next WORD
 15307 0000189D 2E890E[C843]        <1> 	mov		[cs:g_cfgVars+CFGVARS.wImageSizeInWords], cx
 15308 000018A2 C3                  <1> 	ret
 15309                              <1> 
 15310                              <1> 
 15311                              <1> ;--------------------------------------------------------------------
 15312                              <1> ; Buffers_SetUnsavedChanges
 15313                              <1> ; Buffers_ClearUnsavedChanges
 15314                              <1> ;	Parameters:
 15315                              <1> ;		SS:BP:	Menu handle
 15316                              <1> ;	Returns:
 15317                              <1> ;		Nothing
 15318                              <1> ;	Corrupts registers:
 15319                              <1> ;		Nothing
 15320                              <1> ;--------------------------------------------------------------------
 15321                              <1> ALIGN JUMP_ALIGN
 15322                              <1> Buffers_SetUnsavedChanges:
 15323 000018A3 2E830E[C643]04      <1> 	or		WORD [cs:g_cfgVars+CFGVARS.wFlags], FLG_CFGVARS_UNSAVED
 15324 000018A9 C3                  <1> 	ret
 15325                              <1> 
 15326                              <1> ALIGN JUMP_ALIGN
 15327                              <1> Buffers_ClearUnsavedChanges:
 15328 000018AA 2E8326[C643]FB      <1> 	and		WORD [cs:g_cfgVars+CFGVARS.wFlags], ~FLG_CFGVARS_UNSAVED
 15329 000018B0 C3                  <1> 	ret
 15330                              <1> 
 15331                              <1> 
 15332                              <1> ;--------------------------------------------------------------------
 15333                              <1> ; Buffers_SaveChangesIfFileLoaded
 15334                              <1> ;	Parameters:
 15335                              <1> ;		Nothing
 15336                              <1> ;	Returns:
 15337                              <1> ;		Nothing
 15338                              <1> ;	Corrupts registers:
 15339                              <1> ;		AX, BX, CX, SI, DI
 15340                              <1> ;--------------------------------------------------------------------
 15341                              <1> ALIGN JUMP_ALIGN
 15342                              <1> Buffers_SaveChangesIfFileLoaded:
 15343 000018B1 2EA1[C643]          <1> 	mov		ax, [cs:g_cfgVars+CFGVARS.wFlags]
 15344 000018B5 83E005              <1> 	and		ax, BYTE (FLG_CFGVARS_FILELOADED | FLG_CFGVARS_UNSAVED)
 15345 000018B8 83F805              <1> 	cmp		ax, BYTE (FLG_CFGVARS_FILELOADED | FLG_CFGVARS_UNSAVED)
 15346 000018BB 7508                <1> 	jne		SHORT .NothingToSave
 15347 000018BD E80401              <1> 	call	Dialogs_DisplaySaveChangesDialog
 15348 000018C0 7503                <1> 	jnz		SHORT .NothingToSave
 15349 000018C2 E936FF              <1> 	jmp		BiosFile_SaveUnsavedChanges
 15350                              <1> ALIGN JUMP_ALIGN
 15351                              <1> .NothingToSave:
 15352 000018C5 C3                  <1> 	ret
 15353                              <1> 
 15354                              <1> 
 15355                              <1> ;--------------------------------------------------------------------
 15356                              <1> ; Buffers_AppendZeroesIfNeeded
 15357                              <1> ;	Parameters:
 15358                              <1> ;		Nothing
 15359                              <1> ;	Returns:
 15360                              <1> ;		Nothing
 15361                              <1> ;	Corrupts registers:
 15362                              <1> ;		AX, CX, DI
 15363                              <1> ;--------------------------------------------------------------------
 15364                              <1> ALIGN JUMP_ALIGN
 15365                              <1> Buffers_AppendZeroesIfNeeded:
 15366 000018C6 06                  <1> 	push	es
 15367                              <1> 
 15368                              <1> 	eMOVZX	di, [cs:g_cfgVars+CFGVARS.bEepromType]
 15369                              <2> %ifndef USE_386
 15370                              <2>  %ifidni %1, ax
 15371                              <2>  mov al, %2
 15372                              <2>  xor ah, ah
 15373                              <2>  %elifidni %1, bx
 15374                              <2>  mov bl, %2
 15375                              <2>  xor bh, bh
 15376                              <2>  %elifidni %1, cx
 15377                              <2>  mov cl, %2
 15378                              <2>  xor ch, ch
 15379                              <2>  %elifidni %1, dx
 15380                              <2>  mov dl, %2
 15381                              <2>  xor dh, dh
 15382                              <2>  %else
 15383 000018C7 50                  <2>  push ax
 15384 000018C8 2EA0[CC43]          <2>  mov al, %2
 15385 000018CC 30E4                <2>  xor ah, ah
 15386 000018CE 97                  <2>  xchg ax, %1
 15387 000018CF 58                  <2>  pop ax
 15388                              <2>  %endif
 15389                              <2> 
 15390                              <2> %else
 15391                              <2>  movzx %1, %2
 15392                              <2> %endif
 15393 000018D0 2E8B8D[0000]        <1> 	mov		cx, [cs:di+g_rgwEepromTypeToSizeInWords]
 15394 000018D5 2E2B0E[C843]        <1> 	sub		cx, [cs:g_cfgVars+CFGVARS.wImageSizeInWords]	; CX = WORDs to append
 15395 000018DA 7E10                <1> 	jle		SHORT .NoNeedToAppendZeroes
 15396                              <1> 
 15397 000018DC E85B00              <1> 	call	Buffers_GetFileBufferToESDI
 15398 000018DF 2EA1[C843]          <1> 	mov		ax, [cs:g_cfgVars+CFGVARS.wImageSizeInWords]
 15399 000018E3 D1E0                <1> 	shl		ax, 1
 15400 000018E5 01C7                <1> 	add		di, ax			; ES:DI now point first unused image byte
 15401 000018E7 31C0                <1> 	xor		ax, ax
 15402 000018E9 FC                  <1> 	cld
 15403 000018EA F3AB                <1> 	rep stosw
 15404                              <1> ALIGN JUMP_ALIGN
 15405                              <1> .NoNeedToAppendZeroes:
 15406 000018EC 07                  <1> 	pop		es
 15407 000018ED C3                  <1> 	ret
 15408                              <1> 
 15409                              <1> 
 15410                              <1> ;--------------------------------------------------------------------
 15411                              <1> ; Buffers_GenerateChecksum
 15412                              <1> ;	Parameters:
 15413                              <1> ;		Nothing
 15414                              <1> ;	Returns:
 15415                              <1> ;		Nothing
 15416                              <1> ;	Corrupts registers:
 15417                              <1> ;		AX, BX, CX, DI
 15418                              <1> ;--------------------------------------------------------------------
 15419                              <1> ALIGN JUMP_ALIGN
 15420                              <1> Buffers_GenerateChecksum:
 15421 000018EE 06                  <1> 	push	es
 15422 000018EF 52                  <1> 	push	dx
 15423                              <1> 
 15424 000018F0 E84700              <1> 	call	Buffers_GetFileBufferToESDI
 15425 000018F3 E83601              <1> 	call	EEPROM_GetXtideUniversalBiosSizeFromESDItoDXCX
 15426 000018F6 49                  <1> 	dec		cx				; Leave space for checksum byte
 15427 000018F7 31C0                <1> 	xor		ax, ax
 15428                              <1> ALIGN JUMP_ALIGN
 15429                              <1> .SumNextByte:
 15430 000018F9 260205              <1> 	add		al, [es:di]
 15431 000018FC 47                  <1> 	inc		di
 15432 000018FD E2FA                <1> 	loop	.SumNextByte
 15433 000018FF F6D8                <1> 	neg		al
 15434 00001901 268805              <1> 	mov		[es:di], al
 15435                              <1> 
 15436 00001904 5A                  <1> 	pop		dx
 15437 00001905 07                  <1> 	pop		es
 15438 00001906 C3                  <1> 	ret
 15439                              <1> 
 15440                              <1> 
 15441                              <1> ;--------------------------------------------------------------------
 15442                              <1> ; Buffers_GetRomvarsFlagsToAX
 15443                              <1> ;	Parameters:
 15444                              <1> ;		Nothing
 15445                              <1> ;	Returns:
 15446                              <1> ;		AX:		ROMVARS.wFlags
 15447                              <1> ;	Corrupts registers:
 15448                              <1> ;		BX
 15449                              <1> ;--------------------------------------------------------------------
 15450                              <1> ALIGN JUMP_ALIGN
 15451                              <1> Buffers_GetRomvarsFlagsToAX:
 15452 00001907 BB4600              <1> 	mov		bx, ROMVARS.wFlags
 15453                              <1> 	; Fall to Buffers_GetRomvarsValueToAXfromOffsetInBX
 15454                              <1> 
 15455                              <1> ;--------------------------------------------------------------------
 15456                              <1> ; Buffers_GetRomvarsValueToAXfromOffsetInBX
 15457                              <1> ;	Parameters:
 15458                              <1> ;		BX:		ROMVARS offset
 15459                              <1> ;	Returns:
 15460                              <1> ;		AX:		Value
 15461                              <1> ;	Corrupts registers:
 15462                              <1> ;		Nothing
 15463                              <1> ;--------------------------------------------------------------------
 15464                              <1> ALIGN JUMP_ALIGN
 15465                              <1> Buffers_GetRomvarsValueToAXfromOffsetInBX:
 15466 0000190A 06                  <1> 	push	es
 15467 0000190B 57                  <1> 	push	di
 15468 0000190C E82B00              <1> 	call	Buffers_GetFileBufferToESDI
 15469 0000190F 268B01              <1> 	mov		ax, [es:bx+di]
 15470 00001912 5F                  <1> 	pop		di
 15471 00001913 07                  <1> 	pop		es
 15472 00001914 C3                  <1> 	ret
 15473                              <1> 
 15474                              <1> 
 15475                              <1> ;--------------------------------------------------------------------
 15476                              <1> ; Buffers_GetIdeControllerCountToCX
 15477                              <1> ;	Parameters:
 15478                              <1> ;		SS:BP:	Menu handle
 15479                              <1> ;	Returns:
 15480                              <1> ;		CX:		Number of IDE controllers to configure
 15481                              <1> ;		ES:DI:	Ptr to file buffer
 15482                              <1> ;	Corrupts registers:
 15483                              <1> ;		AX
 15484                              <1> ;--------------------------------------------------------------------
 15485                              <1> ALIGN JUMP_ALIGN
 15486                              <1> Buffers_GetIdeControllerCountToCX:
 15487 00001915 E82200              <1> 	call	Buffers_GetFileBufferToESDI
 15488 00001918 268A454C            <1> 	mov		al, [es:di+ROMVARS.bIdeCnt]
 15489                              <1> 
 15490                              <1> 	; Limit controller count for lite mode
 15491 0000191C 26F6454601          <1> 	test	BYTE [es:di+ROMVARS.wFlags], FLG_ROMVARS_FULLMODE
 15492 00001921 7506                <1> 	jnz		SHORT .ReturnControllerCountInCX
 15493                              <1> 	MIN_U	al, MAX_LITE_MODE_CONTROLLERS
 15494 00001923 3C02                <2>  cmp %1, %2
 15495 00001925 7202                <2>  jb %%Return
 15496 00001927 B002                <2>  mov %1, %2
 15497                              <2> ALIGN JUMP_ALIGN
 15498                              <2> %%Return:
 15499                              <1> 
 15500                              <1> .ReturnControllerCountInCX:
 15501 00001929 98                  <1> 	cbw		; A maximum of 127 controllers should be sufficient
 15502 0000192A 91                  <1> 	xchg	cx, ax
 15503 0000192B C3                  <1> 	ret
 15504                              <1> 
 15505                              <1> 
 15506                              <1> ;--------------------------------------------------------------------
 15507                              <1> ; Buffers_GetFileBufferToESDI
 15508                              <1> ; Buffers_GetFlashComparisonBufferToESDI
 15509                              <1> ; Buffers_GetFileDialogItemBufferToESDI
 15510                              <1> ;	Parameters:
 15511                              <1> ;		Nothing
 15512                              <1> ;	Returns:
 15513                              <1> ;		ES:DI:	Ptr to file buffer
 15514                              <1> ;	Corrupts registers:
 15515                              <1> ;		Nothing
 15516                              <1> ;--------------------------------------------------------------------
 15517                              <1> ALIGN JUMP_ALIGN
 15518                              <1> Buffers_GetFlashComparisonBufferToESDI:
 15519                              <1> Buffers_GetFileDialogItemBufferToESDI:
 15520 0000192C E80B00              <1> 	call	Buffers_GetFileBufferToESDI
 15521 0000192F 57                  <1> 	push	di
 15522 00001930 8CC7                <1> 	mov		di, es
 15523 00001932 81C70010            <1> 	add		di, 1000h		; Third 64k page
 15524 00001936 8EC7                <1> 	mov		es, di
 15525 00001938 5F                  <1> 	pop		di
 15526 00001939 C3                  <1> 	ret
 15527                              <1> ALIGN JUMP_ALIGN
 15528                              <1> Buffers_GetFileBufferToESDI:
 15529 0000193A 8CCF                <1> 	mov		di, cs
 15530 0000193C 81C70010            <1> 	add		di, 1000h		; Change to next 64k page
 15531 00001940 8EC7                <1> 	mov		es, di
 15532 00001942 31FF                <1> 	xor		di, di			; Ptr now in ES:DI
 15533 00001944 C3                  <1> 	ret
 15534                                  %include "Dialogs.asm"
 15535                              <1> ; Project name	:	XTIDE Univeral BIOS Configurator v2
 15536                              <1> ; Description	:	Functions for displaying dialogs.
 15537                              <1> 
 15538                              <1> ;
 15539                              <1> ; XTIDE Universal BIOS and Associated Tools
 15540                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 15541                              <1> ;
 15542                              <1> ; This program is free software; you can redistribute it and/or modify
 15543                              <1> ; it under the terms of the GNU General Public License as published by
 15544                              <1> ; the Free Software Foundation; either version 2 of the License, or
 15545                              <1> ; (at your option) any later version.
 15546                              <1> ;
 15547                              <1> ; This program is distributed in the hope that it will be useful,
 15548                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 15549                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 15550                              <1> ; GNU General Public License for more details.
 15551                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 15552                              <1> ;
 15553                              <1> 
 15554                              <1> ; Section containing code
 15555                              <1> SECTION .text
 15556                              <1> 
 15557                              <1> ;--------------------------------------------------------------------
 15558                              <1> ; Dialogs_DisplayHelpFromCSDXwithTitleInCSDI
 15559                              <1> ;	Parameters:
 15560                              <1> ;		CS:DX:	Ptr to help string to display
 15561                              <1> ;		CS:DI:	Ptr to title string for help dialog
 15562                              <1> ;		SS:BP:	Menu handle
 15563                              <1> ;	Returns:
 15564                              <1> ;		Nothing
 15565                              <1> ;	Corrupts registers:
 15566                              <1> ;		AX
 15567                              <1> ;--------------------------------------------------------------------
 15568                              <1> ALIGN JUMP_ALIGN
 15569                              <1> Dialogs_DisplayHelpFromCSDXwithTitleInCSDI:
 15570 00001945 1E                  <1> 	push	ds
 15571 00001946 56                  <1> 	push	si
 15572 00001947 57                  <1> 	push	di
 15573 00001948 51                  <1> 	push	cx
 15574                              <1> 
 15575 00001949 B90C00              <1> 	mov		cx, DIALOG_INPUT_size
 15576 0000194C E871FC              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 15577 0000194F E8BA00              <1> 	call	InitializeDialogInputFromDSSI
 15578 00001952 893C                <1> 	mov		[si+DIALOG_INPUT.fszTitle], di
 15579 00001954 EB21                <1> 	jmp		SHORT DisplayMessageDialogWithMessageInCSDXandDialogInputInDSSI
 15580                              <1> 
 15581                              <1> ;--------------------------------------------------------------------
 15582                              <1> ; Dialogs_DisplayNotificationFromCSDX
 15583                              <1> ; Dialogs_DisplayErrorFromCSDX
 15584                              <1> ;	Parameters:
 15585                              <1> ;		CS:DX:	Ptr to notification string to display
 15586                              <1> ;		SS:BP:	Menu handle
 15587                              <1> ;	Returns:
 15588                              <1> ;		Nothing
 15589                              <1> ;	Corrupts registers:
 15590                              <1> ;		AX
 15591                              <1> ;--------------------------------------------------------------------
 15592                              <1> ALIGN JUMP_ALIGN
 15593                              <1> Dialogs_DisplayNotificationFromCSDX:
 15594 00001956 1E                  <1> 	push	ds
 15595 00001957 56                  <1> 	push	si
 15596 00001958 57                  <1> 	push	di
 15597 00001959 51                  <1> 	push	cx
 15598                              <1> 
 15599 0000195A B90C00              <1> 	mov		cx, DIALOG_INPUT_size
 15600 0000195D E860FC              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 15601 00001960 E8A900              <1> 	call	InitializeDialogInputFromDSSI
 15602 00001963 C704[0801]          <1> 	mov		WORD [si+DIALOG_INPUT.fszTitle], g_szNotificationDialog
 15603 00001967 EB0E                <1> 	jmp		SHORT DisplayMessageDialogWithMessageInCSDXandDialogInputInDSSI
 15604                              <1> 
 15605                              <1> ALIGN JUMP_ALIGN
 15606                              <1> Dialogs_DisplayErrorFromCSDX:
 15607 00001969 1E                  <1> 	push	ds
 15608 0000196A 56                  <1> 	push	si
 15609 0000196B 57                  <1> 	push	di
 15610 0000196C 51                  <1> 	push	cx
 15611                              <1> 
 15612 0000196D B90C00              <1> 	mov		cx, DIALOG_INPUT_size
 15613 00001970 E84DFC              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 15614 00001973 C704[1601]          <1> 	mov		WORD [si+DIALOG_INPUT.fszTitle], g_szErrorDialog
 15615                              <1> ALIGN JUMP_ALIGN
 15616                              <1> DisplayMessageDialogWithMessageInCSDXandDialogInputInDSSI:
 15617 00001977 E89200              <1> 	call	InitializeDialogInputFromDSSI
 15618 0000197A 895404              <1> 	mov		[si+DIALOG_INPUT.fszItems], dx
 15619                              <1> 	CALL_MENU_LIBRARY DisplayMessageWithInputInDSSI
 15620                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 15621                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 15622                              <2>  %elifidn %1, Close
 15623                              <2>  call MenuInit_CloseMenuWindow
 15624                              <2>  %elifidn %1, SetUserDataFromDSSI
 15625                              <2>  call MenuInit_SetUserDataFromDSSI
 15626                              <2>  %elifidn %1, GetUserDataToDSSI
 15627                              <2>  call MenuInit_GetUserDataToDSSI
 15628                              <2>  %elifidn %1, SetTitleHeightFromAL
 15629                              <2>  call MenuInit_SetTitleHeightFromAL
 15630                              <2>  %elifidn %1, GetHighlightedItemToAX
 15631                              <2>  call MenuInit_GetHighlightedItemToAX
 15632                              <2>  %elifidn %1, SetTotalItemsFromAX
 15633                              <2>  call MenuInit_SetTotalItemsFromAX
 15634                              <2>  %elifidn %1, SetInformationHeightFromAL
 15635                              <2>  call MenuInit_SetInformationHeightFromAL
 15636                              <2>  %elifidn %1, SetTimeoutValueFromAX
 15637                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 15638                              <2>  %else
 15639 0000197D BF[3710]            <2>  mov di, %1
 15640 00001980 E87CED              <2>  call Menu_FunctionFromDI
 15641                              <2>  %endif
 15642                              <1> 
 15643 00001983 83C40C              <1> 	add		sp, BYTE DIALOG_INPUT_size
 15644 00001986 59                  <1> 	pop		cx
 15645 00001987 5F                  <1> 	pop		di
 15646 00001988 5E                  <1> 	pop		si
 15647 00001989 1F                  <1> 	pop		ds
 15648 0000198A C3                  <1> 	ret
 15649                              <1> 
 15650                              <1> 
 15651                              <1> ;--------------------------------------------------------------------
 15652                              <1> ; Dialogs_DisplayFileDialogWithDialogIoInDSSI
 15653                              <1> ;	Parameters:
 15654                              <1> ;		DS:SI:	Ptr to FILE_DIALOG_IO
 15655                              <1> ;		SS:BP:	Menu handle
 15656                              <1> ;	Returns:
 15657                              <1> ;		Nothing
 15658                              <1> ;	Corrupts registers:
 15659                              <1> ;		AX, DI
 15660                              <1> ;--------------------------------------------------------------------
 15661                              <1> ALIGN JUMP_ALIGN
 15662                              <1> Dialogs_DisplayFileDialogWithDialogIoInDSSI:
 15663 0000198B 06                  <1> 	push	es
 15664                              <1> 
 15665 0000198C E89DFF              <1> 	call	Buffers_GetFileDialogItemBufferToESDI
 15666 0000198F C704[5E04]          <1> 	mov		WORD [si+FILE_DIALOG_IO.fszTitle], g_szDlgFileTitle
 15667 00001993 8C4C02              <1> 	mov		[si+FILE_DIALOG_IO.fszTitle+2], cs
 15668 00001996 897C04              <1> 	mov		[si+FILE_DIALOG_IO.fszItemBuffer], di
 15669 00001999 8C4406              <1> 	mov		[si+FILE_DIALOG_IO.fszItemBuffer+2], es
 15670 0000199C C6440E01            <1> 	mov		BYTE [si+FILE_DIALOG_IO.bDialogFlags], FLG_FILEDIALOG_DRIVES
 15671 000019A0 C6440F30            <1> 	mov		BYTE [si+FILE_DIALOG_IO.bFileAttributes], FLG_FILEATTR_DIRECTORY | FLG_FILEATTR_ARCHIVE
 15672 000019A4 C74412[7904]        <1> 	mov		WORD [si+FILE_DIALOG_IO.fpFileFilterString], g_szDlgFileFilter
 15673 000019A9 8C4C14              <1> 	mov		[si+FILE_DIALOG_IO.fpFileFilterString+2], cs
 15674                              <1> 	CALL_MENU_LIBRARY GetFileNameWithIoInDSSI
 15675                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 15676                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 15677                              <2>  %elifidn %1, Close
 15678                              <2>  call MenuInit_CloseMenuWindow
 15679                              <2>  %elifidn %1, SetUserDataFromDSSI
 15680                              <2>  call MenuInit_SetUserDataFromDSSI
 15681                              <2>  %elifidn %1, GetUserDataToDSSI
 15682                              <2>  call MenuInit_GetUserDataToDSSI
 15683                              <2>  %elifidn %1, SetTitleHeightFromAL
 15684                              <2>  call MenuInit_SetTitleHeightFromAL
 15685                              <2>  %elifidn %1, GetHighlightedItemToAX
 15686                              <2>  call MenuInit_GetHighlightedItemToAX
 15687                              <2>  %elifidn %1, SetTotalItemsFromAX
 15688                              <2>  call MenuInit_SetTotalItemsFromAX
 15689                              <2>  %elifidn %1, SetInformationHeightFromAL
 15690                              <2>  call MenuInit_SetInformationHeightFromAL
 15691                              <2>  %elifidn %1, SetTimeoutValueFromAX
 15692                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 15693                              <2>  %else
 15694 000019AC BF[AB0D]            <2>  mov di, %1
 15695 000019AF E84DED              <2>  call Menu_FunctionFromDI
 15696                              <2>  %endif
 15697                              <1> 
 15698 000019B2 07                  <1> 	pop		es
 15699 000019B3 C3                  <1> 	ret
 15700                              <1> 
 15701                              <1> 
 15702                              <1> ;--------------------------------------------------------------------
 15703                              <1> ; Dialogs_DisplayQuitDialog
 15704                              <1> ; Dialogs_DisplaySaveChangesDialog
 15705                              <1> ;	Parameters:
 15706                              <1> ;		SS:BP:	Menu handle
 15707                              <1> ;	Returns:
 15708                              <1> ;		ZF:		Set if user wants to do the action
 15709                              <1> ;				Cleared if user wants to cancel
 15710                              <1> ;	Corrupts registers:
 15711                              <1> ;		AX, CX
 15712                              <1> ;--------------------------------------------------------------------
 15713                              <1> ALIGN JUMP_ALIGN
 15714                              <1> Dialogs_DisplayQuitDialog:
 15715 000019B4 1E                  <1> 	push	ds
 15716                              <1> 
 15717 000019B5 B90C00              <1> 	mov		cx, DIALOG_INPUT_size
 15718 000019B8 E805FC              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 15719 000019BB E84E00              <1> 	call	InitializeDialogInputFromDSSI
 15720 000019BE C704[BB00]          <1> 	mov		WORD [si+DIALOG_INPUT.fszTitle], g_szDlgExitToDos
 15721 000019C2 EB0E                <1> 	jmp		Dialogs_DisplayQuitAndSaveChangesDialogsSharedEnding
 15722                              <1> 
 15723                              <1> 
 15724                              <1> ALIGN JUMP_ALIGN
 15725                              <1> Dialogs_DisplaySaveChangesDialog:
 15726 000019C4 1E                  <1> 	push	ds
 15727                              <1> 
 15728 000019C5 B90C00              <1> 	mov		cx, DIALOG_INPUT_size
 15729 000019C8 E8F5FB              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 15730 000019CB E83E00              <1> 	call	InitializeDialogInputFromDSSI
 15731 000019CE C704[C800]          <1> 	mov		WORD [si+DIALOG_INPUT.fszTitle], g_szDlgSaveChanges
 15732                              <1> Dialogs_DisplayQuitAndSaveChangesDialogsSharedEnding:
 15733 000019D2 C74404[B400]        <1> 	mov		WORD [si+DIALOG_INPUT.fszItems], g_szMultichoiceBooleanFlag
 15734                              <1> 	CALL_MENU_LIBRARY GetSelectionToAXwithInputInDSSI
 15735                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 15736                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 15737                              <2>  %elifidn %1, Close
 15738                              <2>  call MenuInit_CloseMenuWindow
 15739                              <2>  %elifidn %1, SetUserDataFromDSSI
 15740                              <2>  call MenuInit_SetUserDataFromDSSI
 15741                              <2>  %elifidn %1, GetUserDataToDSSI
 15742                              <2>  call MenuInit_GetUserDataToDSSI
 15743                              <2>  %elifidn %1, SetTitleHeightFromAL
 15744                              <2>  call MenuInit_SetTitleHeightFromAL
 15745                              <2>  %elifidn %1, GetHighlightedItemToAX
 15746                              <2>  call MenuInit_GetHighlightedItemToAX
 15747                              <2>  %elifidn %1, SetTotalItemsFromAX
 15748                              <2>  call MenuInit_SetTotalItemsFromAX
 15749                              <2>  %elifidn %1, SetInformationHeightFromAL
 15750                              <2>  call MenuInit_SetInformationHeightFromAL
 15751                              <2>  %elifidn %1, SetTimeoutValueFromAX
 15752                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 15753                              <2>  %else
 15754 000019D7 BF[9D11]            <2>  mov di, %1
 15755 000019DA E822ED              <2>  call Menu_FunctionFromDI
 15756                              <2>  %endif
 15757 000019DD 83C40C              <1> 	add		sp, BYTE DIALOG_INPUT_size
 15758 000019E0 83F801              <1> 	cmp		ax, BYTE 1		; 1 = YES
 15759                              <1> 
 15760 000019E3 1F                  <1> 	pop		ds
 15761 000019E4 C3                  <1> 	ret
 15762                              <1> 
 15763                              <1> 
 15764                              <1> ;--------------------------------------------------------------------
 15765                              <1> ; Dialogs_DisplayProgressDialogForFlashingWithDialogIoInDSSIandFlashvarsInDSBX
 15766                              <1> ;	Parameters:
 15767                              <1> ;		DS:BX:	Ptr to FLASHVARS
 15768                              <1> ;		DS:SI:	Ptr to PROGRESS_DIALOG_IO
 15769                              <1> ;		SS:BP:	Menu handle
 15770                              <1> ;	Returns:
 15771                              <1> ;		Nothing
 15772                              <1> ;	Corrupts registers:
 15773                              <1> ;		AX, DX, DI
 15774                              <1> ;--------------------------------------------------------------------
 15775                              <1> ALIGN JUMP_ALIGN
 15776                              <1> Dialogs_DisplayProgressDialogForFlashingWithDialogIoInDSSIandFlashvarsInDSBX:
 15777                              <1> 	; Initialize progress dialog I/O in DS:SI with flashvars in DS:BX
 15778 000019E5 E82400              <1> 	call	InitializeDialogInputFromDSSI
 15779 000019E8 C704[4101]          <1> 	mov		WORD [si+DIALOG_INPUT.fszTitle], g_szFlashTitle
 15780                              <1> 
 15781 000019EC 31C0                <1> 	xor		ax, ax
 15782 000019EE 89440E              <1> 	mov		[si+PROGRESS_DIALOG_IO.wCurrentProgressValue], ax
 15783 000019F1 8B570C              <1> 	mov		dx, [bx+FLASHVARS.wPagesToFlash]
 15784 000019F4 895410              <1> 	mov		[si+PROGRESS_DIALOG_IO.wMaxProgressValue], dx
 15785 000019F7 894412              <1> 	mov		[si+PROGRESS_DIALOG_IO.wMinProgressValue], ax
 15786 000019FA C74414[9D1A]        <1> 	mov		WORD [si+PROGRESS_DIALOG_IO.fnTaskWithParamInDSSI], Flash_EepromWithFlashvarsInDSSI
 15787 000019FF 8C4C16              <1> 	mov		[si+PROGRESS_DIALOG_IO.fnTaskWithParamInDSSI+2], cs
 15788                              <1> 	; Init done
 15789                              <1> 
 15790 00001A02 8CDA                <1> 	mov		dx, ds
 15791 00001A04 89D8                <1> 	mov		ax, bx
 15792                              <1> 	JMP_MENU_LIBRARY StartProgressTaskWithIoInDSSIandParamInDXAX
 15793                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 15794                              <2>  jmp MenuInit_CloseMenuIfExitEventAllows
 15795                              <2>  %elifidn %1, Close
 15796                              <2>  jmp MenuInit_CloseMenuWindow
 15797                              <2>  %elifidn %1, SetUserDataFromDSSI
 15798                              <2>  jmp MenuInit_SetUserDataFromDSSI
 15799                              <2>  %elifidn %1, GetUserDataToDSSI
 15800                              <2>  jmp MenuInit_GetUserDataToDSSI
 15801                              <2>  %elifidn %1, SetTitleHeightFromAL
 15802                              <2>  jmp MenuInit_SetTitleHeightFromAL
 15803                              <2>  %elifidn %1, GetHighlightedItemToAX
 15804                              <2>  jmp MenuInit_GetHighlightedItemToAX
 15805                              <2>  %elifidn %1, SetTotalItemsFromAX
 15806                              <2>  jmp MenuInit_SetTotalItemsFromAX
 15807                              <2>  %elifidn %1, SetInformationHeightFromAL
 15808                              <2>  jmp MenuInit_SetInformationHeightFromAL
 15809                              <2>  %elifidn %1, SetTimeoutValueFromAX
 15810                              <2>  jmp MenuTime_SetSelectionTimeoutValueFromAX
 15811                              <2>  %else
 15812 00001A06 BF[9510]            <2>  mov di, %1
 15813 00001A09 E9F3EC              <2>  jmp Menu_FunctionFromDI
 15814                              <2>  %endif
 15815                              <1> 
 15816                              <1> 
 15817                              <1> ;--------------------------------------------------------------------
 15818                              <1> ; InitializeDialogInputFromDSSI
 15819                              <1> ;	Parameters:
 15820                              <1> ;		DS:SI:	Ptr to DIALOG_INPUT
 15821                              <1> ;	Returns:
 15822                              <1> ;		Nothing
 15823                              <1> ;	Corrupts registers:
 15824                              <1> ;		Nothing
 15825                              <1> ;--------------------------------------------------------------------
 15826                              <1> ALIGN JUMP_ALIGN
 15827                              <1> InitializeDialogInputFromDSSI:
 15828 00001A0C 8C4C02              <1> 	mov		[si+DIALOG_INPUT.fszTitle+2], cs
 15829 00001A0F 8C4C06              <1> 	mov		[si+DIALOG_INPUT.fszItems+2], cs
 15830 00001A12 C74408[1D01]        <1> 	mov		WORD [si+DIALOG_INPUT.fszInfo], g_szGenericDialogInfo
 15831 00001A17 8C4C0A              <1> 	mov		[si+DIALOG_INPUT.fszInfo+2], cs
 15832 00001A1A C3                  <1> 	ret
 15833                                  %include "EEPROM.asm"
 15834                              <1> ; Project name	:	XTIDE Univeral BIOS Configurator v2
 15835                              <1> ; Description	:	Functions for managing EEPROM contents.
 15836                              <1> 
 15837                              <1> ;
 15838                              <1> ; XTIDE Universal BIOS and Associated Tools
 15839                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 15840                              <1> ;
 15841                              <1> ; This program is free software; you can redistribute it and/or modify
 15842                              <1> ; it under the terms of the GNU General Public License as published by
 15843                              <1> ; the Free Software Foundation; either version 2 of the License, or
 15844                              <1> ; (at your option) any later version.
 15845                              <1> ;
 15846                              <1> ; This program is distributed in the hope that it will be useful,
 15847                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 15848                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 15849                              <1> ; GNU General Public License for more details.
 15850                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 15851                              <1> ;
 15852                              <1> 
 15853                              <1> ; Section containing initialized data
 15854                              <1> SECTION .data
 15855                              <1> 
 15856                              <1> ALIGN WORD_ALIGN
 15857                              <1> g_rgwEepromTypeToSizeInWords:
 15858 00000000 0004                <1> 	dw		(2<<10) / 2		; EEPROM_TYPE.2816_2kiB
 15859 00000002 0010                <1> 	dw		(8<<10) / 2
 15860 00000004 0010                <1> 	dw		(8<<10) / 2		; EEPROM_TYPE.2864_8kiB_MOD
 15861 00000006 0040                <1> 	dw		(32<<10) / 2
 15862 00000008 0080                <1> 	dw		(64<<10) / 2
 15863                              <1> 
 15864                              <1> g_rgwEepromPageToSizeInBytes:
 15865 0000000A 0100                <1> 	dw		1				; EEPROM_PAGE.1_byte
 15866 0000000C 0200                <1> 	dw		2
 15867 0000000E 0400                <1> 	dw		4
 15868 00000010 0800                <1> 	dw		8
 15869 00000012 1000                <1> 	dw		16
 15870 00000014 2000                <1> 	dw		32
 15871 00000016 4000                <1> 	dw		64
 15872                              <1> 
 15873                              <1> 
 15874                              <1> 
 15875                              <1> ; Section containing code
 15876                              <1> SECTION .text
 15877                              <1> 
 15878                              <1> ;--------------------------------------------------------------------
 15879                              <1> ; EEPROM_LoadXtideUniversalBiosFromRomToRamBufferAndReturnSizeInDXCX
 15880                              <1> ;	Parameters:
 15881                              <1> ;		Nothing
 15882                              <1> ;	Returns:
 15883                              <1> ;		DX:CX:	BIOS size in bytes
 15884                              <1> ;	Corrupts registers:
 15885                              <1> ;		AX, BX, SI, DI
 15886                              <1> ;--------------------------------------------------------------------
 15887                              <1> ALIGN JUMP_ALIGN
 15888                              <1> EEPROM_LoadXtideUniversalBiosFromRomToRamBufferAndReturnSizeInDXCX:
 15889 00001A1B 06                  <1> 	push	es
 15890                              <1> 
 15891 00001A1C E84600              <1> 	call	EEPROM_FindXtideUniversalBiosROMtoESDI
 15892 00001A1F E80A00              <1> 	call	EEPROM_GetXtideUniversalBiosSizeFromESDItoDXCX
 15893 00001A22 31F6                <1> 	xor		si, si				; Load from beginning of ROM
 15894 00001A24 E82600              <1> 	call	LoadBytesFromRomToRamBuffer
 15895                              <1> 
 15896 00001A27 E80200              <1> 	call	EEPROM_GetXtideUniversalBiosSizeFromESDItoDXCX
 15897 00001A2A 07                  <1> 	pop		es
 15898 00001A2B C3                  <1> 	ret
 15899                              <1> 
 15900                              <1> 
 15901                              <1> ;--------------------------------------------------------------------
 15902                              <1> ; EEPROM_GetXtideUniversalBiosSizeFromESDItoDXCX
 15903                              <1> ;	Parameters:
 15904                              <1> ;		ES:DI:	Ptr to XTIDE Universal BIOS
 15905                              <1> ;	Returns:
 15906                              <1> ;		DX:CX:	Bios size in bytes
 15907                              <1> ;	Corrupts registers:
 15908                              <1> ;		Nothing
 15909                              <1> ;--------------------------------------------------------------------
 15910                              <1> ALIGN JUMP_ALIGN
 15911                              <1> EEPROM_GetXtideUniversalBiosSizeFromESDItoDXCX:
 15912 00001A2C 31D2                <1> 	xor		dx, dx
 15913                              <1> 	eMOVZX	cx, BYTE [es:di+ROMVARS.bRomSize]
 15914                              <2> %ifndef USE_386
 15915                              <2>  %ifidni %1, ax
 15916                              <2>  mov al, %2
 15917                              <2>  xor ah, ah
 15918                              <2>  %elifidni %1, bx
 15919                              <2>  mov bl, %2
 15920                              <2>  xor bh, bh
 15921                              <2>  %elifidni %1, cx
 15922 00001A2E 268A4D02            <2>  mov cl, %2
 15923 00001A32 30ED                <2>  xor ch, ch
 15924                              <2>  %elifidni %1, dx
 15925                              <2>  mov dl, %2
 15926                              <2>  xor dh, dh
 15927                              <2>  %else
 15928                              <2>  push ax
 15929                              <2>  mov al, %2
 15930                              <2>  xor ah, ah
 15931                              <2>  xchg ax, %1
 15932                              <2>  pop ax
 15933                              <2>  %endif
 15934                              <2> 
 15935                              <2> %else
 15936                              <2>  movzx %1, %2
 15937                              <2> %endif
 15938                              <1> 	eSHL_IM	cx, 9				; *= 512 for byte count
 15939                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 15940                              <2> %ifdef USE_386
 15941                              <2>  %if %2 = 1
 15942                              <2>  add %1, %1
 15943                              <2>  %else
 15944                              <2>  eSHIFT_IM %1, %2, shl
 15945                              <2>  %endif
 15946                              <2> %else
 15947                              <2>  eSHIFT_IM %1, %2, shl
 15948                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 15949                              <3> %ifndef USE_186
 15950                              <3>  %ifidni %1, cl
 15951                              <3>  times %2 %3 %1, 1
 15952                              <3>  %elifidni %1, ch
 15953                              <3>  times %2 %3 %1, 1
 15954                              <3>  %elifidni %1, cx
 15955 00001A34 D1E1<rept>          <3>  times %2 %3 %1, 1
 15956                              <3>  %else
 15957                              <3>  %if %2 > 3
 15958                              <3>  push cx
 15959                              <3>  mov cl, %2
 15960                              <3>  %3 %1, cl
 15961                              <3>  pop cx
 15962                              <3>  %else
 15963                              <3>  times %2 %3 %1, 1
 15964                              <3>  %endif
 15965                              <3>  %endif
 15966                              <3> 
 15967                              <3> %else
 15968                              <3>  %3 %1, %2
 15969                              <3> %endif
 15970                              <3> %endif
 15971                              <2> %endif
 15972                              <2> %endif
 15973 00001A46 C3                  <1> 	ret
 15974                              <1> 
 15975                              <1> 
 15976                              <1> ;--------------------------------------------------------------------
 15977                              <1> ; EEPROM_LoadOldSettingsFromRomToRamBuffer
 15978                              <1> ;	Parameters:
 15979                              <1> ;		Nothing
 15980                              <1> ;	Returns:
 15981                              <1> ;		CF:		Set if EEPROM was found
 15982                              <1> ;				Cleared if EEPROM not found
 15983                              <1> ;	Corrupts registers:
 15984                              <1> ;		AX, BX, CX, SI, DI
 15985                              <1> ;--------------------------------------------------------------------
 15986                              <1> ALIGN JUMP_ALIGN
 15987                              <1> EEPROM_LoadOldSettingsFromRomToRamBuffer:
 15988 00001A47 B95300              <1> 	mov		cx, ROMVARS_size - ROMVARS.wFlags	; Number of bytes to load
 15989 00001A4A BE4600              <1> 	mov		si, ROMVARS.wFlags					; Offset where to start loading
 15990                              <1> 	; Fall to LoadBytesFromRomToRamBuffer
 15991                              <1> 
 15992                              <1> ;--------------------------------------------------------------------
 15993                              <1> ; LoadBytesFromRomToRamBuffer
 15994                              <1> ;	Parameters:
 15995                              <1> ;		CX:		Number of bytes to load from ROM
 15996                              <1> ;		SI:		Offset to first byte to load
 15997                              <1> ;	Returns:
 15998                              <1> ;		CF:		Set if EEPROM was found
 15999                              <1> ;				Cleared if EEPROM not found
 16000                              <1> ;	Corrupts registers:
 16001                              <1> ;		AX, BX, CX, SI
 16002                              <1> ;--------------------------------------------------------------------
 16003                              <1> ALIGN JUMP_ALIGN
 16004                              <1> LoadBytesFromRomToRamBuffer:
 16005 00001A4D 06                  <1> 	push	es
 16006 00001A4E 1E                  <1> 	push	ds
 16007 00001A4F 57                  <1> 	push	di
 16008                              <1> 
 16009 00001A50 E81200              <1> 	call	EEPROM_FindXtideUniversalBiosROMtoESDI
 16010 00001A53 730C                <1> 	jnc		SHORT .XtideUniversalBiosNotFound
 16011 00001A55 06                  <1> 	push	es
 16012 00001A56 1F                  <1> 	pop		ds											; DS:SI points to ROM
 16013                              <1> 
 16014 00001A57 E8E0FE              <1> 	call	Buffers_GetFileBufferToESDI
 16015 00001A5A 89F7                <1> 	mov		di, si										; ES:DI points to RAM buffer
 16016                              <1> 
 16017 00001A5C FC                  <1> 	cld
 16018 00001A5D E839FB              <1> 	call	Memory_CopyCXbytesFromDSSItoESDI
 16019 00001A60 F9                  <1> 	stc
 16020                              <1> 
 16021                              <1> .XtideUniversalBiosNotFound:
 16022 00001A61 5F                  <1> 	pop		di
 16023 00001A62 1F                  <1> 	pop		ds
 16024 00001A63 07                  <1> 	pop		es
 16025 00001A64 C3                  <1> 	ret
 16026                              <1> 
 16027                              <1> 
 16028                              <1> ;--------------------------------------------------------------------
 16029                              <1> ; EEPROM_FindXtideUniversalBiosROMtoESDI
 16030                              <1> ;	Parameters:
 16031                              <1> ;		Nothing
 16032                              <1> ;	Returns:
 16033                              <1> ;		ES:DI:	EEPROM segment
 16034                              <1> ;		CF:		Set if EEPROM was found
 16035                              <1> ;				Cleared if EEPROM not found
 16036                              <1> ;	Corrupts registers:
 16037                              <1> ;		AX, BX
 16038                              <1> ;--------------------------------------------------------------------
 16039                              <1> ALIGN JUMP_ALIGN
 16040                              <1> EEPROM_FindXtideUniversalBiosROMtoESDI:
 16041 00001A65 56                  <1> 	push	si
 16042 00001A66 51                  <1> 	push	cx
 16043                              <1> 
 16044 00001A67 31FF                <1> 	xor		di, di					; Zero DI (offset)
 16045 00001A69 BB00C0              <1> 	mov		bx, 0C000h				; First possible ROM segment
 16046                              <1> ALIGN JUMP_ALIGN
 16047                              <1> .SegmentLoop:
 16048 00001A6C 8EC3                <1> 	mov		es, bx					; Possible ROM segment to ES
 16049 00001A6E E8FCFD              <1> 	call	Buffers_IsXtideUniversalBiosSignatureInESDI
 16050 00001A71 7408                <1> 	je		SHORT .RomFound
 16051 00001A73 80C702              <1> 	add		bh, 2					; Increment by 8kB
 16052 00001A76 73F4                <1> 	jnc		SHORT .SegmentLoop		; Loop until segment overflows
 16053 00001A78 F8                  <1> 	clc
 16054 00001A79 EB01                <1> 	jmp		SHORT .ReturnWithoutUpdatingCF
 16055                              <1> ALIGN JUMP_ALIGN
 16056                              <1> .RomFound:
 16057 00001A7B F9                  <1> 	stc
 16058                              <1> .ReturnWithoutUpdatingCF:
 16059 00001A7C 59                  <1> 	pop		cx
 16060 00001A7D 5E                  <1> 	pop		si
 16061 00001A7E C3                  <1> 	ret
 16062                              <1> 
 16063                              <1> 
 16064                              <1> ;--------------------------------------------------------------------
 16065                              <1> ; EEPROM_LoadFromRomToRamComparisonBuffer
 16066                              <1> ;	Parameters:
 16067                              <1> ;		Nothing
 16068                              <1> ;	Returns:
 16069                              <1> ;		Nothing
 16070                              <1> ;	Corrupts registers:
 16071                              <1> ;		BX, CX, SI, DI
 16072                              <1> ;--------------------------------------------------------------------
 16073                              <1> ALIGN JUMP_ALIGN
 16074                              <1> EEPROM_LoadFromRomToRamComparisonBuffer:
 16075 00001A7F 06                  <1> 	push	es
 16076 00001A80 1E                  <1> 	push	ds
 16077                              <1> 
 16078 00001A81 2E8E1E[CA43]        <1> 	mov		ds, [cs:g_cfgVars+CFGVARS.wEepromSegment]
 16079 00001A86 31F6                <1> 	xor		si, si
 16080 00001A88 E8A1FE              <1> 	call	Buffers_GetFlashComparisonBufferToESDI
 16081                              <1> 	eMOVZX	bx, [cs:g_cfgVars+CFGVARS.bEepromType]
 16082                              <2> %ifndef USE_386
 16083                              <2>  %ifidni %1, ax
 16084                              <2>  mov al, %2
 16085                              <2>  xor ah, ah
 16086                              <2>  %elifidni %1, bx
 16087 00001A8B 2E8A1E[CC43]        <2>  mov bl, %2
 16088 00001A90 30FF                <2>  xor bh, bh
 16089                              <2>  %elifidni %1, cx
 16090                              <2>  mov cl, %2
 16091                              <2>  xor ch, ch
 16092                              <2>  %elifidni %1, dx
 16093                              <2>  mov dl, %2
 16094                              <2>  xor dh, dh
 16095                              <2>  %else
 16096                              <2>  push ax
 16097                              <2>  mov al, %2
 16098                              <2>  xor ah, ah
 16099                              <2>  xchg ax, %1
 16100                              <2>  pop ax
 16101                              <2>  %endif
 16102                              <2> 
 16103                              <2> %else
 16104                              <2>  movzx %1, %2
 16105                              <2> %endif
 16106 00001A92 2E8B8F[0000]        <1> 	mov		cx, [cs:bx+g_rgwEepromTypeToSizeInWords]
 16107 00001A97 FC                  <1> 	cld
 16108 00001A98 F3A5                <1> 	rep movsw
 16109                              <1> 
 16110 00001A9A 1F                  <1> 	pop		ds
 16111 00001A9B 07                  <1> 	pop		es
 16112 00001A9C C3                  <1> 	ret
 16113                                  %include "Flash.asm"
 16114                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 16115                              <1> ; Description	:	Functions for flashing the EEPROM.
 16116                              <1> 
 16117                              <1> ;
 16118                              <1> ; XTIDE Universal BIOS and Associated Tools
 16119                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 16120                              <1> ;
 16121                              <1> ; This program is free software; you can redistribute it and/or modify
 16122                              <1> ; it under the terms of the GNU General Public License as published by
 16123                              <1> ; the Free Software Foundation; either version 2 of the License, or
 16124                              <1> ; (at your option) any later version.
 16125                              <1> ;
 16126                              <1> ; This program is distributed in the hope that it will be useful,
 16127                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 16128                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 16129                              <1> ; GNU General Public License for more details.
 16130                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 16131                              <1> ;
 16132                              <1> 
 16133                              <1> ; Section containing code
 16134                              <1> SECTION .text
 16135                              <1> 
 16136                              <1> ;--------------------------------------------------------------------
 16137                              <1> ; Flash_EepromWithFlashvarsInDSSI
 16138                              <1> ;	Parameters:
 16139                              <1> ;		DS:SI:	Ptr to FLASHVARS
 16140                              <1> ;	Returns:
 16141                              <1> ;		FLASHVARS.flashResult
 16142                              <1> ;	Corrupts registers:
 16143                              <1> ;		All, including segments
 16144                              <1> ;--------------------------------------------------------------------
 16145                              <1> ALIGN JUMP_ALIGN
 16146                              <1> Flash_EepromWithFlashvarsInDSSI:
 16147 00001A9D 896C12              <1> 	mov		[si+FLASHVARS.wProgressUpdateParam], bp	; Store handle to progress DIALOG
 16148 00001AA0 89F5                <1> 	mov		bp, si									; Flashvars now in SS:BP
 16149 00001AA2 8B4E0C              <1> 	mov		cx, [bp+FLASHVARS.wPagesToFlash]
 16150                              <1> ALIGN JUMP_ALIGN
 16151                              <1> .FlashNextPage:
 16152 00001AA5 E89801              <1> 	call	DisplayFlashProgressWithPagesLeftInCXandFlashvarsInSSBP
 16153 00001AA8 E82300              <1> 	call	Flash_SinglePageWithFlashvarsInSSBP
 16154 00001AAB 7217                <1> 	jc		SHORT .PollingError
 16155 00001AAD E86E00              <1> 	call	AreSourceAndDestinationPagesEqualFromFlashvarsInSSBP
 16156 00001AB0 7517                <1> 	jne		SHORT .DataVerifyError
 16157                              <1> 
 16158 00001AB2 8B460E              <1> 	mov		ax, [bp+FLASHVARS.wEepromPageSize]
 16159 00001AB5 014600              <1> 	add		[bp+FLASHVARS.fpNextSourcePage], ax
 16160 00001AB8 014604              <1> 	add		[bp+FLASHVARS.fpNextComparisonPage], ax
 16161 00001ABB 014608              <1> 	add		[bp+FLASHVARS.fpNextDestinationPage], ax
 16162                              <1> 
 16163 00001ABE E2E5                <1> 	loop	.FlashNextPage
 16164                              <1> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 16165                              <1> %if FLASH_RESULT.success = 0	; Just in case this should ever change
 16166 00001AC0 884E19              <1> 	mov		[bp+FLASHVARS.flashResult], cl
 16167                              <1> %else
 16168                              <1> 	mov		BYTE [bp+FLASHVARS.flashResult], FLASH_RESULT.success
 16169                              <1> %endif
 16170                              <1> %endif
 16171 00001AC3 C3                  <1> 	ret
 16172                              <1> 
 16173                              <1> .PollingError:
 16174 00001AC4 C6461902            <1> 	mov		BYTE [bp+FLASHVARS.flashResult], FLASH_RESULT.PollingTimeoutError
 16175 00001AC8 C3                  <1> 	ret
 16176                              <1> .DataVerifyError:
 16177 00001AC9 C6461904            <1> 	mov		BYTE [bp+FLASHVARS.flashResult], FLASH_RESULT.DataVerifyError
 16178 00001ACD C3                  <1> 	ret
 16179                              <1> 
 16180                              <1> 
 16181                              <1> ;--------------------------------------------------------------------
 16182                              <1> ; Flash_SinglePageWithFlashvarsInSSBP
 16183                              <1> ;	Parameters:
 16184                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16185                              <1> ;	Returns:
 16186                              <1> ;		CF:		Set if polling timeout error
 16187                              <1> ;				Cleared if page written successfully
 16188                              <1> ;	Corrupts registers:
 16189                              <1> ;		AX, BX, DX, SI, DI, DS, ES
 16190                              <1> ;--------------------------------------------------------------------
 16191                              <1> ALIGN JUMP_ALIGN
 16192                              <1> Flash_SinglePageWithFlashvarsInSSBP:
 16193 00001ACE FC                  <1> 	cld
 16194 00001ACF E84C00              <1> 	call	AreSourceAndDestinationPagesEqualFromFlashvarsInSSBP
 16195 00001AD2 7414                <1> 	je		SHORT .NoNeedToFlashThePage	; CF cleared
 16196                              <1> 
 16197 00001AD4 51                  <1> 	push	cx
 16198 00001AD5 E81100              <1> 	call	.GetSdpCommandFunctionToDXwithFlashvarsInSSBP
 16199 00001AD8 8B4E0E              <1> 	mov		cx, [bp+FLASHVARS.wEepromPageSize]
 16200 00001ADB 8B7600              <1> 	mov		si, [bp+FLASHVARS.fpNextSourcePage]
 16201 00001ADE C47E04              <1> 	les		di, [bp+FLASHVARS.fpNextComparisonPage]
 16202 00001AE1 8B5E08              <1> 	mov		bx, [bp+FLASHVARS.fpNextDestinationPage]
 16203 00001AE4 E80D01              <1> 	call	WriteAllChangedBytesFromPageToEeprom
 16204 00001AE7 59                  <1> 	pop		cx
 16205                              <1> .NoNeedToFlashThePage:
 16206 00001AE8 C3                  <1> 	ret
 16207                              <1> 
 16208                              <1> ;--------------------------------------------------------------------
 16209                              <1> ; .GetSdpCommandFunctionToDXwithFlashvarsInSSBP
 16210                              <1> ;	Parameters:
 16211                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16212                              <1> ;	Returns:
 16213                              <1> ;		DX:		Ptr to SDP Command function
 16214                              <1> ;	Corrupts registers:
 16215                              <1> ;		BX, SI
 16216                              <1> ;--------------------------------------------------------------------
 16217                              <1> ALIGN JUMP_ALIGN
 16218                              <1> .GetSdpCommandFunctionToDXwithFlashvarsInSSBP:
 16219                              <1> 	eMOVZX	bx, [bp+FLASHVARS.bEepromSdpCommand]
 16220                              <2> %ifndef USE_386
 16221                              <2>  %ifidni %1, ax
 16222                              <2>  mov al, %2
 16223                              <2>  xor ah, ah
 16224                              <2>  %elifidni %1, bx
 16225 00001AE9 8A5E10              <2>  mov bl, %2
 16226 00001AEC 30FF                <2>  xor bh, bh
 16227                              <2>  %elifidni %1, cx
 16228                              <2>  mov cl, %2
 16229                              <2>  xor ch, ch
 16230                              <2>  %elifidni %1, dx
 16231                              <2>  mov dl, %2
 16232                              <2>  xor dh, dh
 16233                              <2>  %else
 16234                              <2>  push ax
 16235                              <2>  mov al, %2
 16236                              <2>  xor ah, ah
 16237                              <2>  xchg ax, %1
 16238                              <2>  pop ax
 16239                              <2>  %endif
 16240                              <2> 
 16241                              <2> %else
 16242                              <2>  movzx %1, %2
 16243                              <2> %endif
 16244 00001AEE 2E8BB7[FA1A]        <1> 	mov		si, [cs:bx+.rgpSdpCommandToEepromTypeLookupTable]
 16245 00001AF3 8A5E11              <1> 	mov		bl, [bp+FLASHVARS.bEepromType]
 16246 00001AF6 2E8B10              <1> 	mov		dx, [cs:bx+si]
 16247 00001AF9 C3                  <1> 	ret
 16248                              <1> 
 16249                              <1> ALIGN WORD_ALIGN
 16250                              <1> .rgpSdpCommandToEepromTypeLookupTable:
 16251 00001AFA [001B]              <1> 	dw		.rgfnFlashWithoutSDP					; SDP_COMMAND.none
 16252 00001AFC [0A1B]              <1> 	dw		.rgfnEnableSdpAndFlash					; SDP_COMMAND.enable
 16253 00001AFE [141B]              <1> 	dw		.rgfnDisableSdpAndFlash					; SDP_COMMAND.disable
 16254                              <1> .rgfnFlashWithoutSDP:		; SDP_COMMAND.none
 16255 00001B00 [F21B]              <1> 	dw		DoNotWriteAnySdpCommand					; EEPROM_TYPE.2816_2kiB
 16256 00001B02 [F21B]              <1> 	dw		DoNotWriteAnySdpCommand					; EEPROM_TYPE.2864_8kiB
 16257 00001B04 [F21B]              <1> 	dw		DoNotWriteAnySdpCommand					; EEPROM_TYPE.2864_8kiB_MOD
 16258 00001B06 [F21B]              <1> 	dw		DoNotWriteAnySdpCommand					; EEPROM_TYPE.28256_32kiB
 16259 00001B08 [F21B]              <1> 	dw		DoNotWriteAnySdpCommand					; EEPROM_TYPE.28512_64kiB
 16260                              <1> .rgfnEnableSdpAndFlash:		; SDP_COMMAND.enable
 16261 00001B0A [2C1B]              <1> 	dw		WriteSdpEnableCommandFor2816			; EEPROM_TYPE.2816_2kiB
 16262 00001B0C [3E1B]              <1> 	dw		WriteSdpEnableCommandFor2864			; EEPROM_TYPE.2864_8kiB
 16263 00001B0E [501B]              <1> 	dw		WriteSdpEnableCommandFor2864mod			; EEPROM_TYPE.2864_8kiB_MOD
 16264 00001B10 [621B]              <1> 	dw		WriteSdpEnableCommandFor28256or28512	; EEPROM_TYPE.28256_32kiB
 16265 00001B12 [621B]              <1> 	dw		WriteSdpEnableCommandFor28256or28512	; EEPROM_TYPE.28512_64kiB
 16266                              <1> .rgfnDisableSdpAndFlash:	; SDP_COMMAND.disable
 16267 00001B14 [741B]              <1> 	dw		WriteSdpDisableCommandFor2816			; EEPROM_TYPE.2816_2kiB
 16268 00001B16 [941B]              <1> 	dw		WriteSdpDisableCommandFor2864			; EEPROM_TYPE.2864_8kiB
 16269 00001B18 [B41B]              <1> 	dw		WriteSdpDisableCommandFor2864mod		; EEPROM_TYPE.2864_8kiB_MOD
 16270 00001B1A [D41B]              <1> 	dw		WriteSdpDisableCommandFor28256or28512	; EEPROM_TYPE.28256_32kiB
 16271 00001B1C [D41B]              <1> 	dw		WriteSdpDisableCommandFor28256or28512	; EEPROM_TYPE.28512_64kiB
 16272                              <1> 
 16273                              <1> 
 16274                              <1> ;--------------------------------------------------------------------
 16275                              <1> ; AreSourceAndDestinationPagesEqualFromFlashvarsInSSBP
 16276                              <1> ;	Parameters:
 16277                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16278                              <1> ;	Returns:
 16279                              <1> ;		ZF:		Set if pages are equal
 16280                              <1> ;				Cleared if pages are not equal
 16281                              <1> ;	Corrupts registers:
 16282                              <1> ;		SI, DI
 16283                              <1> ;--------------------------------------------------------------------
 16284                              <1> ALIGN JUMP_ALIGN
 16285                              <1> AreSourceAndDestinationPagesEqualFromFlashvarsInSSBP:
 16286 00001B1E 51                  <1> 	push	cx
 16287 00001B1F 8B4E0E              <1> 	mov		cx, [bp+FLASHVARS.wEepromPageSize]
 16288 00001B22 C57600              <1> 	lds		si, [bp+FLASHVARS.fpNextSourcePage]
 16289 00001B25 C47E08              <1> 	les		di, [bp+FLASHVARS.fpNextDestinationPage]
 16290 00001B28 F3A6                <1> 	repe cmpsb
 16291 00001B2A 59                  <1> 	pop		cx
 16292 00001B2B C3                  <1> 	ret
 16293                              <1> 
 16294                              <1> 
 16295                              <1> ;--------------------------------------------------------------------
 16296                              <1> ; ENABLE_SDP
 16297                              <1> ;	Parameters:
 16298                              <1> ;		%1:		Offset for first command byte
 16299                              <1> ;		%2:		Offset for second command byte
 16300                              <1> ;		DS:		Segment to beginning of EEPROM
 16301                              <1> ;	Returns:
 16302                              <1> ;		Nothing
 16303                              <1> ;	Corrupts registers:
 16304                              <1> ;		Nothing
 16305                              <1> ;--------------------------------------------------------------------
 16306                              <1> %macro ENABLE_SDP 2
 16307                              <1> 	mov		BYTE [%1], 0AAh
 16308                              <1> 	mov		BYTE [%2], 55h
 16309                              <1> 	mov		BYTE [%1], 0A0h
 16310                              <1> %endmacro
 16311                              <1> 
 16312                              <1> ;--------------------------------------------------------------------
 16313                              <1> ; DISABLE_SDP
 16314                              <1> ;	Parameters:
 16315                              <1> ;		%1:		Offset for first command byte
 16316                              <1> ;		%2:		Offset for second command byte
 16317                              <1> ;		DS:		Segment to beginning of EEPROM
 16318                              <1> ;	Returns:
 16319                              <1> ;		Nothing
 16320                              <1> ;	Corrupts registers:
 16321                              <1> ;		Nothing
 16322                              <1> ;--------------------------------------------------------------------
 16323                              <1> %macro DISABLE_SDP 2
 16324                              <1> 	mov		BYTE [%1], 0AAh
 16325                              <1> 	mov		BYTE [%2], 55h
 16326                              <1> 	mov		BYTE [%1], 80h
 16327                              <1> 	mov		BYTE [%1], 0AAh
 16328                              <1> 	mov		BYTE [%2], 55h
 16329                              <1> 	mov		BYTE [%1], 20h
 16330                              <1> %endmacro
 16331                              <1> 
 16332                              <1> ;--------------------------------------------------------------------
 16333                              <1> ; SDP Command Functions
 16334                              <1> ;	Parameters:
 16335                              <1> ;		DS:		Segment to beginning of EEPROM
 16336                              <1> ;	Returns:
 16337                              <1> ;		Nothing but jumps to WriteActualDataByteAfterSdpCommand
 16338                              <1> ;	Corrupts registers:
 16339                              <1> ;		Nothing
 16340                              <1> ;--------------------------------------------------------------------
 16341                              <1> ALIGN JUMP_ALIGN
 16342                              <1> WriteSdpEnableCommandFor2816:
 16343                              <1> 	ENABLE_SDP 555h, 2AAh
 16344 00001B2C C6065505AA          <2>  mov BYTE [%1], 0AAh
 16345 00001B31 C606AA0255          <2>  mov BYTE [%2], 55h
 16346 00001B36 C6065505A0          <2>  mov BYTE [%1], 0A0h
 16347 00001B3B E9BF00              <1> 	jmp		ReturnFromSdpCommand
 16348                              <1> 
 16349                              <1> ALIGN JUMP_ALIGN
 16350                              <1> WriteSdpEnableCommandFor2864:
 16351                              <1> 	ENABLE_SDP 1555h, 0AAAh
 16352 00001B3E C6065515AA          <2>  mov BYTE [%1], 0AAh
 16353 00001B43 C606AA0A55          <2>  mov BYTE [%2], 55h
 16354 00001B48 C6065515A0          <2>  mov BYTE [%1], 0A0h
 16355 00001B4D E9AD00              <1> 	jmp		ReturnFromSdpCommand
 16356                              <1> 
 16357                              <1> ALIGN JUMP_ALIGN
 16358                              <1> WriteSdpEnableCommandFor2864mod:
 16359                              <1> 	ENABLE_SDP 155Ch, 0AA3h
 16360 00001B50 C6065C15AA          <2>  mov BYTE [%1], 0AAh
 16361 00001B55 C606A30A55          <2>  mov BYTE [%2], 55h
 16362 00001B5A C6065C15A0          <2>  mov BYTE [%1], 0A0h
 16363 00001B5F E99B00              <1> 	jmp		ReturnFromSdpCommand
 16364                              <1> 
 16365                              <1> ALIGN JUMP_ALIGN
 16366                              <1> WriteSdpEnableCommandFor28256or28512:
 16367                              <1> 	ENABLE_SDP 5555h, 2AAAh
 16368 00001B62 C6065555AA          <2>  mov BYTE [%1], 0AAh
 16369 00001B67 C606AA2A55          <2>  mov BYTE [%2], 55h
 16370 00001B6C C6065555A0          <2>  mov BYTE [%1], 0A0h
 16371 00001B71 E98900              <1> 	jmp		ReturnFromSdpCommand
 16372                              <1> 
 16373                              <1> 
 16374                              <1> ALIGN JUMP_ALIGN
 16375                              <1> WriteSdpDisableCommandFor2816:
 16376                              <1> 	DISABLE_SDP 555h, 2AAh
 16377 00001B74 C6065505AA          <2>  mov BYTE [%1], 0AAh
 16378 00001B79 C606AA0255          <2>  mov BYTE [%2], 55h
 16379 00001B7E C606550580          <2>  mov BYTE [%1], 80h
 16380 00001B83 C6065505AA          <2>  mov BYTE [%1], 0AAh
 16381 00001B88 C606AA0255          <2>  mov BYTE [%2], 55h
 16382 00001B8D C606550520          <2>  mov BYTE [%1], 20h
 16383 00001B92 EB69                <1> 	jmp		SHORT ReturnFromSdpCommand
 16384                              <1> 
 16385                              <1> ALIGN JUMP_ALIGN
 16386                              <1> WriteSdpDisableCommandFor2864:
 16387                              <1> 	DISABLE_SDP 1555h, 0AAAh
 16388 00001B94 C6065515AA          <2>  mov BYTE [%1], 0AAh
 16389 00001B99 C606AA0A55          <2>  mov BYTE [%2], 55h
 16390 00001B9E C606551580          <2>  mov BYTE [%1], 80h
 16391 00001BA3 C6065515AA          <2>  mov BYTE [%1], 0AAh
 16392 00001BA8 C606AA0A55          <2>  mov BYTE [%2], 55h
 16393 00001BAD C606551520          <2>  mov BYTE [%1], 20h
 16394 00001BB2 EB49                <1> 	jmp		SHORT ReturnFromSdpCommand
 16395                              <1> 
 16396                              <1> ALIGN JUMP_ALIGN
 16397                              <1> WriteSdpDisableCommandFor2864mod:
 16398                              <1> 	DISABLE_SDP 155Ch, 0AA3h
 16399 00001BB4 C6065C15AA          <2>  mov BYTE [%1], 0AAh
 16400 00001BB9 C606A30A55          <2>  mov BYTE [%2], 55h
 16401 00001BBE C6065C1580          <2>  mov BYTE [%1], 80h
 16402 00001BC3 C6065C15AA          <2>  mov BYTE [%1], 0AAh
 16403 00001BC8 C606A30A55          <2>  mov BYTE [%2], 55h
 16404 00001BCD C6065C1520          <2>  mov BYTE [%1], 20h
 16405 00001BD2 EB29                <1> 	jmp		SHORT ReturnFromSdpCommand
 16406                              <1> 
 16407                              <1> ALIGN JUMP_ALIGN
 16408                              <1> WriteSdpDisableCommandFor28256or28512:
 16409                              <1> 	DISABLE_SDP 5555h, 2AAAh
 16410 00001BD4 C6065555AA          <2>  mov BYTE [%1], 0AAh
 16411 00001BD9 C606AA2A55          <2>  mov BYTE [%2], 55h
 16412 00001BDE C606555580          <2>  mov BYTE [%1], 80h
 16413 00001BE3 C6065555AA          <2>  mov BYTE [%1], 0AAh
 16414 00001BE8 C606AA2A55          <2>  mov BYTE [%2], 55h
 16415 00001BED C606555520          <2>  mov BYTE [%1], 20h
 16416                              <1> DoNotWriteAnySdpCommand:
 16417 00001BF2 EB09                <1> 	jmp		SHORT ReturnFromSdpCommand
 16418                              <1> 
 16419                              <1> 
 16420                              <1> ;--------------------------------------------------------------------
 16421                              <1> ; WriteNextChangedByteFromPageToEeprom
 16422                              <1> ;	Parameters:
 16423                              <1> ;		CX:		Number of bytes left to write
 16424                              <1> ;		DX:		Offset to SDP command function
 16425                              <1> ;		BX:		Offset to next destination byte
 16426                              <1> ;		SI:		Offset to next source byte
 16427                              <1> ;		ES:DI:	Ptr to next comparison byte
 16428                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16429                              <1> ;	Returns:
 16430                              <1> ;		CF:		Set if polling timeout error
 16431                              <1> ;				Cleared if page written successfully
 16432                              <1> ;	Corrupts registers:
 16433                              <1> ;		AX, BX, CX, SI, DI, DS, ES
 16434                              <1> ;--------------------------------------------------------------------
 16435                              <1> ALIGN JUMP_ALIGN
 16436                              <1> WriteAllChangedBytesFromPageToEeprom:
 16437 00001BF4 8B4602              <1> 	mov		ax, [bp+FLASHVARS.fpNextSourcePage+2]		; AX = Source segment
 16438 00001BF7 8E5E0A              <1> 	mov		ds, [bp+FLASHVARS.fpNextDestinationPage+2]	; DS = EEPROM segment
 16439 00001BFA FA                  <1> 	cli						; Disable interrupts
 16440 00001BFB FFE2                <1> 	jmp		dx				; Write SDP command (once to the beginning of page)
 16441                              <1> ALIGN JUMP_ALIGN
 16442                              <1> ReturnFromSdpCommand:
 16443 00001BFD 8ED8                <1> 	mov		ds, ax			; DS:SI now points to source byte
 16444                              <1> 
 16445                              <1> ALIGN JUMP_ALIGN
 16446                              <1> .WriteActualDataByteAfterSdpCommand:
 16447 00001BFF AC                  <1> 	lodsb					; Load source byte to AL
 16448 00001C00 AE                  <1> 	scasb					; Compare source byte to comparison byte
 16449 00001C01 740E                <1> 	je		SHORT .NoChangesForThisByte
 16450                              <1> 
 16451 00001C03 8E5E0A              <1> 	mov		ds, [bp+FLASHVARS.fpNextDestinationPage+2]	; DS:BX now points to EEPROM
 16452 00001C06 8807                <1> 	mov		[bx], al		; Write byte to EEPROM
 16453 00001C08 8E5E02              <1> 	mov		ds, [bp+FLASHVARS.fpNextSourcePage+2]		; Restore DS
 16454 00001C0B 895E16              <1> 	mov		[bp+FLASHVARS.wLastOffsetWritten], bx
 16455 00001C0E 884618              <1> 	mov		[bp+FLASHVARS.bLastByteWritten], al
 16456                              <1> 
 16457                              <1> ALIGN JUMP_ALIGN
 16458                              <1> .NoChangesForThisByte:
 16459 00001C11 43                  <1> 	inc		bx				; Increment destination offset
 16460 00001C12 E2EB                <1> 	loop	.WriteActualDataByteAfterSdpCommand
 16461 00001C14 FB                  <1> 	sti						; Enable interrupts
 16462                              <1> 	; Fall to WaitUntilEepromPageWriteHasCompleted
 16463                              <1> 
 16464                              <1> 
 16465                              <1> ;--------------------------------------------------------------------
 16466                              <1> ; WaitUntilEepromPageWriteHasCompleted
 16467                              <1> ;	Parameters:
 16468                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16469                              <1> ;	Returns:
 16470                              <1> ;		CF:		Set if polling timeout error
 16471                              <1> ;				Cleared if page written successfully
 16472                              <1> ;	Corrupts registers:
 16473                              <1> ;		AX, BX, DI, DS, ES
 16474                              <1> ;--------------------------------------------------------------------
 16475                              <1> ALIGN JUMP_ALIGN
 16476                              <1> WaitUntilEepromPageWriteHasCompleted:
 16477 00001C15 E81100              <1> 	call	.InitializeTimeoutCounterForEepromPollingWithFlashvarsInSSBP
 16478 00001C18 8E460A              <1> 	mov		es, [bp+FLASHVARS.fpNextDestinationPage+2]
 16479 00001C1B 8B7E16              <1> 	mov		di, [bp+FLASHVARS.wLastOffsetWritten]
 16480                              <1> ALIGN JUMP_ALIGN
 16481                              <1> .PollEeprom:
 16482 00001C1E E81300              <1> 	call	.HasWriteCycleCompleted
 16483 00001C21 7405                <1> 	je		SHORT .PageWriteCompleted	; CF cleared
 16484 00001C23 E8DBF8              <1> 	call	TimerTicks_GetTimeoutTicksLeftToAXfromDSBX
 16485 00001C26 73F6                <1> 	jnc		SHORT .PollEeprom
 16486                              <1> ALIGN JUMP_ALIGN
 16487                              <1> .PageWriteCompleted:
 16488 00001C28 C3                  <1> 	ret
 16489                              <1> 
 16490                              <1> ;--------------------------------------------------------------------
 16491                              <1> ; .InitializeTimeoutCounterForEepromPollingWithFlashvarsInSSBP
 16492                              <1> ;	Parameters:
 16493                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16494                              <1> ;	Returns:
 16495                              <1> ;		DS:BX:	Ptr to timeout counter variable
 16496                              <1> ;	Corrupts registers:
 16497                              <1> ;		AX
 16498                              <1> ;--------------------------------------------------------------------
 16499                              <1> ALIGN JUMP_ALIGN
 16500                              <1> .InitializeTimeoutCounterForEepromPollingWithFlashvarsInSSBP:
 16501 00001C29 16                  <1> 	push	ss
 16502 00001C2A 1F                  <1> 	pop		ds
 16503 00001C2B 8D5E14              <1> 	lea		bx, [bp+FLASHVARS.wTimeoutCounter]
 16504 00001C2E B80300              <1> 	mov		ax, EEPROM_POLLING_TIMEOUT_TICKS
 16505 00001C31 E9C5F8              <1> 	jmp		TimerTicks_InitializeTimeoutFromAX
 16506                              <1> 
 16507                              <1> ;--------------------------------------------------------------------
 16508                              <1> ; .HasWriteCycleCompleted
 16509                              <1> ;	Parameters:
 16510                              <1> ;		ES:DI:	Ptr to last written byte in EEPROM
 16511                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16512                              <1> ;	Returns:
 16513                              <1> ;		ZF:		Set if write cycle has completed
 16514                              <1> ;				Cleared if write cycle in progress
 16515                              <1> ;	Corrupts registers:
 16516                              <1> ;		AX
 16517                              <1> ;--------------------------------------------------------------------
 16518                              <1> ALIGN JUMP_ALIGN
 16519                              <1> .HasWriteCycleCompleted:
 16520 00001C34 268A25              <1> 	mov		ah, [es:di]		; Load byte from EEPROM
 16521 00001C37 8A4618              <1> 	mov		al, [bp+FLASHVARS.bLastByteWritten]
 16522 00001C3A 258080              <1> 	and		ax, 8080h		; Clear all but bit 7 from both bytes
 16523 00001C3D 38E0                <1> 	cmp		al, ah			; Set ZF if high bits are the same
 16524 00001C3F C3                  <1> 	ret
 16525                              <1> 
 16526                              <1> 
 16527                              <1> ;--------------------------------------------------------------------
 16528                              <1> ; DisplayFlashProgressWithPagesLeftInCXandFlashvarsInSSBP
 16529                              <1> ;	Parameters:
 16530                              <1> ;		CX:		Number of pages left to flash
 16531                              <1> ;		SS:BP:	Ptr to FLASHVARS
 16532                              <1> ;	Returns:
 16533                              <1> ;		Nothing
 16534                              <1> ;	Corrupts registers:
 16535                              <1> ;		AX, DI
 16536                              <1> ;--------------------------------------------------------------------
 16537                              <1> ALIGN JUMP_ALIGN
 16538                              <1> DisplayFlashProgressWithPagesLeftInCXandFlashvarsInSSBP:
 16539 00001C40 55                  <1> 	push	bp
 16540                              <1> 
 16541 00001C41 8B460C              <1> 	mov		ax, [bp+FLASHVARS.wPagesToFlash]
 16542 00001C44 29C8                <1> 	sub		ax, cx
 16543 00001C46 8B6E12              <1> 	mov		bp, [bp+FLASHVARS.wProgressUpdateParam]	; BP now has MENU handle
 16544                              <1> 	CALL_MENU_LIBRARY SetProgressValueFromAX
 16545                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 16546                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 16547                              <2>  %elifidn %1, Close
 16548                              <2>  call MenuInit_CloseMenuWindow
 16549                              <2>  %elifidn %1, SetUserDataFromDSSI
 16550                              <2>  call MenuInit_SetUserDataFromDSSI
 16551                              <2>  %elifidn %1, GetUserDataToDSSI
 16552                              <2>  call MenuInit_GetUserDataToDSSI
 16553                              <2>  %elifidn %1, SetTitleHeightFromAL
 16554                              <2>  call MenuInit_SetTitleHeightFromAL
 16555                              <2>  %elifidn %1, GetHighlightedItemToAX
 16556                              <2>  call MenuInit_GetHighlightedItemToAX
 16557                              <2>  %elifidn %1, SetTotalItemsFromAX
 16558                              <2>  call MenuInit_SetTotalItemsFromAX
 16559                              <2>  %elifidn %1, SetInformationHeightFromAL
 16560                              <2>  call MenuInit_SetInformationHeightFromAL
 16561                              <2>  %elifidn %1, SetTimeoutValueFromAX
 16562                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 16563                              <2>  %else
 16564 00001C49 BF[9B10]            <2>  mov di, %1
 16565 00001C4C E8B0EA              <2>  call Menu_FunctionFromDI
 16566                              <2>  %endif
 16567                              <1> 
 16568 00001C4F 5D                  <1> 	pop		bp
 16569 00001C50 C3                  <1> 	ret
 16570                                  %include "IdeAutodetect.asm"
 16571                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 16572                              <1> ; Description	:	Functions to detect ports and devices.
 16573                              <1> 
 16574                              <1> ;
 16575                              <1> ; XTIDE Universal BIOS and Associated Tools
 16576                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 16577                              <1> ;
 16578                              <1> ; This program is free software; you can redistribute it and/or modify
 16579                              <1> ; it under the terms of the GNU General Public License as published by
 16580                              <1> ; the Free Software Foundation; either version 2 of the License, or
 16581                              <1> ; (at your option) any later version.
 16582                              <1> ;
 16583                              <1> ; This program is distributed in the hope that it will be useful,
 16584                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 16585                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 16586                              <1> ; GNU General Public License for more details.
 16587                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 16588                              <1> ;
 16589                              <1> 
 16590                              <1> ; Section containing code
 16591                              <1> SECTION .text
 16592                              <1> 
 16593                              <1> IDE_PORT_TO_START_DETECTION			EQU	00h		; Must be zero (not actual port)
 16594                              <1> FIRST_MEMORY_SEGMENT_ADDRESS		EQU	0C000h
 16595                              <1> 
 16596                              <1> ;--------------------------------------------------------------------
 16597                              <1> ; IdeAutodetect_DetectIdeDeviceFromPortDXAndReturnControlBlockInSI
 16598                              <1> ;	Parameters:
 16599                              <1> ;		DX:		IDE Base Port or segment address (Command Block)
 16600                              <1> ;		DS:DI:	Ptr to ROMVARS
 16601                              <1> ;	Returns:
 16602                              <1> ;		AL:		Device Type
 16603                              <1> ;		SI:		IDE Control Block Base port (port mapped devices only)
 16604                              <1> ;		CF:		Clear if IDE Device found
 16605                              <1> ;				Set if IDE Device not found
 16606                              <1> ;	Corrupts registers:
 16607                              <1> ;		AH, BX
 16608                              <1> ;--------------------------------------------------------------------
 16609                              <1> IdeAutodetect_DetectIdeDeviceFromPortDXAndReturnControlBlockInSI:
 16610 00001C51 81FA00C0            <1> 	cmp		dx, FIRST_MEMORY_SEGMENT_ADDRESS
 16611 00001C55 721C                <1> 	jb		SHORT DetectPortMappedDeviceFromPortDX
 16612                              <1> 	; Fall to DetectMemoryMappedDeviceFromSegmentDX
 16613                              <1> 
 16614                              <1> ;--------------------------------------------------------------------
 16615                              <1> ; DetectMemoryMappedDeviceFromSegmentDX
 16616                              <1> ;	Parameters:
 16617                              <1> ;		DX:		Segment address for Memory Mapped Device
 16618                              <1> ;		DS:DI:	Ptr to ROMVARS
 16619                              <1> ;	Returns:
 16620                              <1> ;		AL:		Device Type
 16621                              <1> ;		CF:		Clear if IDE Device found
 16622                              <1> ;				Set if IDE Device not found
 16623                              <1> ;	Corrupts registers:
 16624                              <1> ;		AH, BX
 16625                              <1> ;--------------------------------------------------------------------
 16626                              <1> DetectMemoryMappedDeviceFromSegmentDX:
 16627                              <1> 	; *** Try to detect JR-IDE/ISA (only if MODULE_8BIT_IDE_ADVANCED is present) ***
 16628 00001C57 F745468000          <1> 	test	WORD [di+ROMVARS.wFlags], FLG_ROMVARS_MODULE_8BIT_IDE_ADVANCED
 16629 00001C5C 747F                <1> 	jz		SHORT NoIdeDeviceFound
 16630                              <1> 
 16631 00001C5E 1E                  <1> 	push	ds
 16632 00001C5F 8EDA                <1> 	mov		ds, dx
 16633 00001C61 FA                  <1> 	cli									; Disable Interrupts
 16634 00001C62 8A26073E            <1> 	mov		ah, [JRIDE_COMMAND_BLOCK_REGISTER_WINDOW_OFFSET + STATUS_REGISTER_in]
 16635 00001C66 A00E3E              <1> 	mov		al, [JRIDE_CONTROL_BLOCK_REGISTER_WINDOW_OFFSET + ALTERNATE_STATUS_REGISTER_in]
 16636 00001C69 FB                  <1> 	sti									; Enable Interrupts
 16637 00001C6A 1F                  <1> 	pop		ds
 16638 00001C6B E86200              <1> 	call	CompareIdeStatusRegistersFromALandAH
 16639 00001C6E B010                <1> 	mov		al, DEVICE_8BIT_JRIDE_ISA	; Assume CF was cleared
 16640 00001C70 89D6                <1> 	mov		si, dx						; For IDEDTCT.COM
 16641 00001C72 C3                  <1> 	ret									; No need to return Control Block Port
 16642                              <1> 
 16643                              <1> 
 16644                              <1> ;--------------------------------------------------------------------
 16645                              <1> ; DetectPortMappedDeviceFromPortDX
 16646                              <1> ;	Parameters:
 16647                              <1> ;		DX:		IDE Base Port (Command Block)
 16648                              <1> ;		DS:DI:	Ptr to ROMVARS
 16649                              <1> ;	Returns:
 16650                              <1> ;		AL:		Device Type
 16651                              <1> ;		SI:		IDE Control Block Base port
 16652                              <1> ;		CF:		Clear if IDE Device found
 16653                              <1> ;				Set if IDE Device not found
 16654                              <1> ;	Corrupts registers:
 16655                              <1> ;		AH, BX
 16656                              <1> ;--------------------------------------------------------------------
 16657                              <1> DetectPortMappedDeviceFromPortDX:
 16658                              <1> 	; *** Try to detect Standard 16- and 32-bit IDE Devices ***
 16659 00001C73 B000                <1> 	mov		al, DEVICE_16BIT_ATA		; Assume 16-bit ISA slot for AT builds
 16660 00001C75 E809FC              <1> 	call	Buffers_IsXTbuildLoaded
 16661                              <1> 	eCMOVE	al, DEVICE_8BIT_ATA			; Assume 8-bit ISA slot for XT builds
 16662                              <2>  eCMOVZ %1, %2
 16663 00001C78 7502                <3>  jnz SHORT %%Return
 16664 00001C7A B004                <3>  mov %1, %2
 16665                              <3> %%Return:
 16666                              <1> 
 16667                              <1> 	; Start with standard Control Block base port used by Primary and Secondary IDE
 16668 00001C7C 89D6                <1> 	mov		si, dx
 16669 00001C7E 81C60002            <1> 	add		si, STANDARD_CONTROL_BLOCK_OFFSET
 16670 00001C82 BB0706              <1> 	mov		bx, STATUS_REGISTER_in | (ALTERNATE_STATUS_REGISTER_in << 8)
 16671                              <1> .RedetectTertiaryOrQuaternaryWithDifferentControlBlockAddress:
 16672 00001C85 50                  <1> 	push	ax							; Store device type
 16673 00001C86 E83900              <1> 	call	DetectIdeDeviceFromPortsDXandSIwithOffsetsInBLandBH
 16674 00001C89 58                  <1> 	pop		ax							; Restore device type
 16675 00001C8A 7334                <1> 	jnc		SHORT .IdeDeviceFound
 16676                              <1> 
 16677                              <1> 	; 16- or 32-bit IDE Device was not found but we may have used wrong Control Block port if we were trying
 16678                              <1> 	; to detect Tertiary or Quaternary IDE controllers. Control Block port location is not standardized. For
 16679                              <1> 	; example Promise FloppyMAX has Control Block at STANDARD_CONTROL_BLOCK_OFFSET but Sound Blaster 16 (CT2290)
 16680                              <1> 	; use DEVICE_ATA_SECONDARY_PORTCTRL for Tertiary and Quaternary even though only Secondary should use that.
 16681 00001C8C E85000              <1> 	call	ChangeDifferentControlBlockAddressToSI
 16682 00001C8F 74F4                <1> 	je		SHORT .RedetectTertiaryOrQuaternaryWithDifferentControlBlockAddress
 16683                              <1> 
 16684                              <1> 
 16685                              <1> 	; Detect 8-bit devices only if MODULE_8BIT_IDE is available
 16686 00001C91 F6454640            <1> 	test	BYTE [di+ROMVARS.wFlags], FLG_ROMVARS_MODULE_8BIT_IDE
 16687 00001C95 7446                <1> 	jz		SHORT NoIdeDeviceFound
 16688                              <1> 
 16689                              <1> 	; *** Try to detect XT-CF ***
 16690 00001C97 89D6                <1> 	mov		si, dx
 16691 00001C99 83C610              <1> 	add		si, BYTE XTCF_CONTROL_BLOCK_OFFSET
 16692 00001C9C D1E3                <1> 	shl		bx, 1						; SHL 1 register offsets for XT-CF
 16693 00001C9E E82100              <1> 	call	DetectIdeDeviceFromPortsDXandSIwithOffsetsInBLandBH
 16694 00001CA1 B00A                <1> 	mov		al, DEVICE_8BIT_XTCF_PIO8
 16695 00001CA3 731B                <1> 	jnc		SHORT .IdeDeviceFound
 16696                              <1> 
 16697                              <1> 
 16698                              <1> 	; *** Try to detect 8-bit XT-IDE rev 1 or rev 2 ***
 16699                              <1> 	; Note that A0<->A3 address swaps Status Register and Alternative
 16700                              <1> 	; Status Register addresses. That is why we need another step
 16701                              <1> 	; to check is this XT-IDE rev 1 or rev 2.
 16702 00001CA5 83EE08              <1> 	sub		si, BYTE XTCF_CONTROL_BLOCK_OFFSET >> 1
 16703 00001CA8 D1EB                <1> 	shr		bx, 1
 16704 00001CAA E81500              <1> 	call	DetectIdeDeviceFromPortsDXandSIwithOffsetsInBLandBH
 16705 00001CAD 722E                <1> 	jc		SHORT NoIdeDeviceFound		; No XT-IDE rev 1 or rev 2 found
 16706                              <1> 
 16707                              <1> 	; Now we can be sure that we have XT-IDE rev 1 or rev 2.
 16708                              <1> 	; Rev 2 swaps address lines A0 and A3 thus LBA Low Register
 16709                              <1> 	; moves from offset 3h to offset Ah. There is no Register at
 16710                              <1> 	; offset Ah so if we can write to it and read back, then we
 16711                              <1> 	; must have XT-IDE rev 2 or modded rev 1.
 16712 00001CAF 52                  <1> 	push	dx
 16713 00001CB0 83C20A              <1> 	add		dx, BYTE 0Ah				; LBA Low Register for XT-IDE rev 2
 16714 00001CB3 B008                <1> 	mov		al, DEVICE_8BIT_XTIDE_REV2	; Our test byte
 16715 00001CB5 EE                  <1> 	out		dx, al						; Output our test byte
 16716                              <1> 	JMP_DELAY
 16717 00001CB6 EB00                <2>  jmp SHORT %%NextInstruction
 16718                              <2> %%NextInstruction:
 16719 00001CB8 EC                  <1> 	in		al, dx						; Read back
 16720 00001CB9 5A                  <1> 	pop		dx
 16721 00001CBA 3C08                <1> 	cmp		al, DEVICE_8BIT_XTIDE_REV2
 16722 00001CBC 7402                <1> 	je		SHORT .IdeDeviceFound
 16723 00001CBE B006                <1> 	mov		al, DEVICE_8BIT_XTIDE_REV1	; We must have rev 1
 16724                              <1> .IdeDeviceFound:
 16725 00001CC0 F8                  <1> 	clc
 16726 00001CC1 C3                  <1> 	ret
 16727                              <1> 
 16728                              <1> 
 16729                              <1> ;--------------------------------------------------------------------
 16730                              <1> ; DetectIdeDeviceFromPortsDXandSIwithOffsetsInBLandBH
 16731                              <1> ;	Parameters:
 16732                              <1> ;		BL:		Offset to IDE Status Register
 16733                              <1> ;		BH:		Offset to Alternative Status Register
 16734                              <1> ;		DX:		IDE Base Port address
 16735                              <1> ;		SI:		IDE Control Block address
 16736                              <1> ;	Returns:
 16737                              <1> ;		CF:		Clear if IDE Device found
 16738                              <1> ;				Set if IDE Device not found
 16739                              <1> ;	Corrupts registers:
 16740                              <1> ;		AX
 16741                              <1> ;--------------------------------------------------------------------
 16742                              <1> DetectIdeDeviceFromPortsDXandSIwithOffsetsInBLandBH:
 16743                              <1> 	; Read Status and Alternative Status Registers
 16744 00001CC2 52                  <1> 	push	dx
 16745                              <1> 
 16746 00001CC3 00DA                <1> 	add		dl, bl
 16747 00001CC5 FA                  <1> 	cli							; Disable Interrupts
 16748 00001CC6 EC                  <1> 	in		al, dx				; Read Status Register...
 16749 00001CC7 88C4                <1> 	mov		ah, al				; ...to AH
 16750 00001CC9 89F2                <1> 	mov		dx, si
 16751 00001CCB 00FA                <1> 	add		dl, bh
 16752 00001CCD EC                  <1> 	in		al, dx				; Read Alternative Status Register to AL
 16753 00001CCE FB                  <1> 	sti							; Enable Interrupts
 16754                              <1> 
 16755 00001CCF 5A                  <1> 	pop		dx
 16756                              <1> 	; Fall to CompareIdeStatusRegistersFromALandAH
 16757                              <1> 
 16758                              <1> 
 16759                              <1> ;--------------------------------------------------------------------
 16760                              <1> ; CompareIdeStatusRegistersFromALandAH
 16761                              <1> ;	Parameters:
 16762                              <1> ;		AH:		Possible IDE Status Register contents
 16763                              <1> ;		AL:		Possible IDE Alternative Status Register contents
 16764                              <1> ;	Returns:
 16765                              <1> ;		CF:		Clear if valid Status Register Contents
 16766                              <1> ;				Set if not possible IDE Status Registers
 16767                              <1> ;	Corrupts registers:
 16768                              <1> ;		Nothing
 16769                              <1> ;--------------------------------------------------------------------
 16770                              <1> CompareIdeStatusRegistersFromALandAH:
 16771                              <1> 	; Status Register now in AH and Alternative Status Register in AL.
 16772                              <1> 	; They must be the same if base port was in use by IDE device.
 16773 00001CD0 38E0                <1> 	cmp		al, ah
 16774 00001CD2 7509                <1> 	jne		SHORT NoIdeDeviceFound
 16775                              <1> 
 16776                              <1> 	; Bytes were the same but it is possible they were both FFh, for
 16777                              <1> 	; example. We must make sure bits are what is expected from valid
 16778                              <1> 	; IDE Status Register. So far all drives I've tested return 50h
 16779                              <1> 	; (FLG_STATUS_DRDY and FLG_STATUS_DSC set) or 00h.
 16780                              <1> 	; I suspect that the zero might mean non available drive is selected. For example if Master
 16781                              <1> 	; drive is present but Slave is selected from IDE Drive and Head Select Register,
 16782                              <1> 	; then the Status Register can be 00h. We cannot accept 00h as valid byte
 16783                              <1> 	; since that can easily cause invalid JR-IDE/ISA detections.
 16784 00001CD4 A8A9                <1> 	test	al, FLG_STATUS_BSY | FLG_STATUS_DF | FLG_STATUS_DRQ | FLG_STATUS_ERR
 16785 00001CD6 7505                <1> 	jnz		SHORT NoIdeDeviceFound	; Busy or Errors cannot be set
 16786 00001CD8 A840                <1> 	test	al, FLG_STATUS_DRDY
 16787 00001CDA 7401                <1> 	jz		SHORT NoIdeDeviceFound	; Device needs to be ready
 16788 00001CDC C3                  <1> 	ret										; Return with CF cleared
 16789                              <1> 
 16790                              <1> NoIdeDeviceFound:
 16791 00001CDD F9                  <1> 	stc
 16792 00001CDE C3                  <1> 	ret
 16793                              <1> 
 16794                              <1> 
 16795                              <1> ;--------------------------------------------------------------------
 16796                              <1> ; ChangeDifferentControlBlockAddressToSI
 16797                              <1> ;	Parameters:
 16798                              <1> ;		DX:		IDE Base Port address
 16799                              <1> ;		SI:		IDE Control Block address
 16800                              <1> ;	Returns:
 16801                              <1> ;		ZF:		Set if SI changed
 16802                              <1> ;				Cleared if different control block address is not possible
 16803                              <1> ;	Corrupts registers:
 16804                              <1> ;		AH
 16805                              <1> ;--------------------------------------------------------------------
 16806                              <1> ChangeDifferentControlBlockAddressToSI:
 16807 00001CDF 81FE6803            <1> 	cmp		si, 368h
 16808 00001CE3 7416                <1> 	je		SHORT .TrySecondAlternative
 16809 00001CE5 81FEE803            <1> 	cmp		si, 3E8h
 16810 00001CE9 7410                <1> 	je		SHORT .TrySecondAlternative
 16811                              <1> 
 16812 00001CEB 81FE6003            <1> 	cmp		si, 360h
 16813 00001CEF 7407                <1> 	je		SHORT .TryLastAlternative
 16814 00001CF1 81FEE003            <1> 	cmp		si, 3E0h
 16815 00001CF5 7401                <1> 	je		SHORT .TryLastAlternative
 16816 00001CF7 C3                  <1> 	ret		; Return with ZF cleared
 16817                              <1> 
 16818                              <1> .TryLastAlternative:
 16819 00001CF8 BE7803              <1> 	mov		si, DEVICE_ATA_SECONDARY_PORTCTRL + 8	; Changes to 370h used by Sound Blaster 16 (CT2290)
 16820                              <1> 	; Fall to .TrySecondAlternative
 16821                              <1> .TrySecondAlternative:
 16822 00001CFB 83EE08              <1> 	sub		si, BYTE 8h		; 368h to 360h, 3E8h to 3E0h
 16823 00001CFE 30E4                <1> 	xor		ah, ah			; Set ZF
 16824 00001D00 C3                  <1> 	ret
 16825                              <1> 
 16826                              <1> 
 16827                              <1> ;--------------------------------------------------------------------
 16828                              <1> ; IdeAutodetect_IncrementDXtoNextIdeBasePort
 16829                              <1> ;	Parameters:
 16830                              <1> ;		DX:		Previous IDE Base Port or IDE_PORT_TO_START_DETECTION
 16831                              <1> ;	Returns:
 16832                              <1> ;		DX:		Next IDE Base Port
 16833                              <1> ;		ZF:		Set if no more Base Ports (DX was last base port on entry)
 16834                              <1> ;				Clear if new base port returned in DX
 16835                              <1> ;	Corrupts registers:
 16836                              <1> ;		AX
 16837                              <1> ;--------------------------------------------------------------------
 16838                              <1> ALIGN JUMP_ALIGN
 16839                              <1> IdeAutodetect_IncrementDXtoNextIdeBasePort:
 16840 00001D01 2E3B16[531D]        <1> 	cmp		dx, [cs:.wLastIdePort]
 16841 00001D06 7412                <1> 	je		SHORT .AllPortsAlreadyDetected
 16842                              <1> 
 16843 00001D08 56                  <1> 	push	si
 16844 00001D09 BE[1B1D]            <1> 	mov		si, .rgwIdeBasePorts
 16845                              <1> .CompareNextIdeBasePort:
 16846 00001D0C 2E3914              <1> 	cmp		[cs:si], dx
 16847 00001D0F 8D7402              <1> 	lea		si, [si+2]	; Increment SI and preserve FLAGS
 16848 00001D12 75F8                <1> 	jne		SHORT .CompareNextIdeBasePort
 16849                              <1> 
 16850 00001D14 2E8B14              <1> 	mov		dx, [cs:si]			; Get next port
 16851 00001D17 85D2                <1> 	test	dx, dx				; Clear ZF
 16852 00001D19 5E                  <1> 	pop		si
 16853                              <1> .AllPortsAlreadyDetected:
 16854 00001D1A C3                  <1> 	ret
 16855                              <1> 
 16856                              <1> 
 16857                              <1> 	; All ports used in autodetection. Ports can be in any order.
 16858                              <1> ALIGN WORD_ALIGN
 16859                              <1> .rgwIdeBasePorts:
 16860 00001D1B 0000                <1> 	dw		IDE_PORT_TO_START_DETECTION		; Must be first
 16861                              <1> 	; Standard IDE
 16862 00001D1D F001                <1> 	dw		DEVICE_ATA_PRIMARY_PORT
 16863 00001D1F 7001                <1> 	dw		DEVICE_ATA_SECONDARY_PORT
 16864 00001D21 E801                <1> 	dw		DEVICE_ATA_TERTIARY_PORT
 16865 00001D23 6801                <1> 	dw		DEVICE_ATA_QUATERNARY_PORT
 16866                              <1> 	; 8-bit Devices
 16867 00001D25 0002                <1> 	dw		200h
 16868 00001D27 2002                <1> 	dw		220h
 16869 00001D29 4002                <1> 	dw		240h
 16870 00001D2B 6002                <1> 	dw		260h
 16871 00001D2D 8002                <1> 	dw		280h
 16872 00001D2F A002                <1> 	dw		2A0h
 16873 00001D31 C002                <1> 	dw		2C0h
 16874 00001D33 E002                <1> 	dw		2E0h
 16875 00001D35 0003                <1> 	dw		300h
 16876 00001D37 2003                <1> 	dw		320h
 16877 00001D39 4003                <1> 	dw		340h
 16878 00001D3B 6003                <1> 	dw		360h
 16879 00001D3D 8003                <1> 	dw		380h
 16880 00001D3F A003                <1> 	dw		3A0h
 16881 00001D41 C003                <1> 	dw		3C0h
 16882 00001D43 E003                <1> 	dw		3E0h
 16883                              <1> 	; JR-IDE/ISA (Memory Segment Addresses)
 16884 00001D45 00C0                <1> 	dw		0C000h
 16885 00001D47 00C4                <1> 	dw		0C400h
 16886 00001D49 00C8                <1> 	dw		0C800h
 16887 00001D4B 00CC                <1> 	dw		0CC00h
 16888 00001D4D 00D0                <1> 	dw		0D000h
 16889 00001D4F 00D4                <1> 	dw		0D400h
 16890 00001D51 00D8                <1> 	dw		0D800h
 16891                              <1> .wLastIdePort:
 16892 00001D53 00DC                <1> 	dw		0DC00h
 16893                                  %include "MenuEvents.asm"
 16894                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 16895                              <1> ; Description	:	Menu event handling.
 16896                              <1> 
 16897                              <1> ;
 16898                              <1> ; XTIDE Universal BIOS and Associated Tools
 16899                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 16900                              <1> ;
 16901                              <1> ; This program is free software; you can redistribute it and/or modify
 16902                              <1> ; it under the terms of the GNU General Public License as published by
 16903                              <1> ; the Free Software Foundation; either version 2 of the License, or
 16904                              <1> ; (at your option) any later version.
 16905                              <1> ;
 16906                              <1> ; This program is distributed in the hope that it will be useful,
 16907                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 16908                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 16909                              <1> ; GNU General Public License for more details.
 16910                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 16911                              <1> ;
 16912                              <1> 
 16913                              <1> ; Section containing code
 16914                              <1> SECTION .text
 16915                              <1> 
 16916                              <1> ;--------------------------------------------------------------------
 16917                              <1> ; MenuEvents_DisplayMenu
 16918                              <1> ;	Parameters:
 16919                              <1> ;		Nothing
 16920                              <1> ;	Returns:
 16921                              <1> ;		Nothing
 16922                              <1> ;	Corrupts registers:
 16923                              <1> ;		All, except segments
 16924                              <1> ;--------------------------------------------------------------------
 16925                              <1> ALIGN JUMP_ALIGN
 16926                              <1> MenuEvents_DisplayMenu:
 16927 00001D55 BB[5E1D]            <1> 	mov		bx, MenuEventHandler
 16928                              <1> 	JMP_MENU_LIBRARY DisplayWithHandlerInBXandUserDataInDXAX
 16929                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 16930                              <2>  jmp MenuInit_CloseMenuIfExitEventAllows
 16931                              <2>  %elifidn %1, Close
 16932                              <2>  jmp MenuInit_CloseMenuWindow
 16933                              <2>  %elifidn %1, SetUserDataFromDSSI
 16934                              <2>  jmp MenuInit_SetUserDataFromDSSI
 16935                              <2>  %elifidn %1, GetUserDataToDSSI
 16936                              <2>  jmp MenuInit_GetUserDataToDSSI
 16937                              <2>  %elifidn %1, SetTitleHeightFromAL
 16938                              <2>  jmp MenuInit_SetTitleHeightFromAL
 16939                              <2>  %elifidn %1, GetHighlightedItemToAX
 16940                              <2>  jmp MenuInit_GetHighlightedItemToAX
 16941                              <2>  %elifidn %1, SetTotalItemsFromAX
 16942                              <2>  jmp MenuInit_SetTotalItemsFromAX
 16943                              <2>  %elifidn %1, SetInformationHeightFromAL
 16944                              <2>  jmp MenuInit_SetInformationHeightFromAL
 16945                              <2>  %elifidn %1, SetTimeoutValueFromAX
 16946                              <2>  jmp MenuTime_SetSelectionTimeoutValueFromAX
 16947                              <2>  %else
 16948 00001D58 BF[F808]            <2>  mov di, %1
 16949 00001D5B E9A1E9              <2>  jmp Menu_FunctionFromDI
 16950                              <2>  %endif
 16951                              <1> 
 16952                              <1> 
 16953                              <1> ;--------------------------------------------------------------------
 16954                              <1> ; MenuEventHandler
 16955                              <1> ;	Common parameters for all events:
 16956                              <1> ;		BX:			Menu event (anything from MENUEVENT struct)
 16957                              <1> ;		SS:BP:		Menu library handle
 16958                              <1> ;	Common return values for all events:
 16959                              <1> ;		CF:			Set if event processed
 16960                              <1> ;					Cleared if event not processed
 16961                              <1> ;	Corrupts registers:
 16962                              <1> ;		All
 16963                              <1> ;--------------------------------------------------------------------
 16964                              <1> ALIGN JUMP_ALIGN
 16965                              <1> MenuEventHandler:
 16966 00001D5E 83FB10              <1> 	cmp		bx, MENUEVENT.RefreshItemFromCX	; Above last supported item?
 16967 00001D61 7705                <1> 	ja		SHORT .EventNotHandled
 16968 00001D63 2EFFA7[6A1D]        <1> 	jmp		[cs:bx+.rgfnEventSpecificHandlers]
 16969                              <1> .EventNotHandled:
 16970                              <1> .IdleProcessing:
 16971 00001D68 F8                  <1> 	clc
 16972 00001D69 C3                  <1> 	ret
 16973                              <1> 
 16974                              <1> ALIGN WORD_ALIGN
 16975                              <1> .rgfnEventSpecificHandlers:
 16976 00001D6A [7C1D]              <1> 	dw		.InitializeMenuinitFromDSSI
 16977 00001D6C [A71D]              <1> 	dw		.ExitMenu
 16978 00001D6E [681D]              <1> 	dw		.IdleProcessing
 16979 00001D70 [C61D]              <1> 	dw		.ItemHighlightedFromCX
 16980 00001D72 [D41D]              <1> 	dw		.ItemSelectedFromCX
 16981 00001D74 [DE1D]              <1> 	dw		.KeyStrokeInAX
 16982 00001D76 [141E]              <1> 	dw		.RefreshTitle
 16983 00001D78 [041E]              <1> 	dw		.RefreshInformation
 16984 00001D7A [F21D]              <1> 	dw		.RefreshItemFromCX
 16985                              <1> 
 16986                              <1> 
 16987                              <1> ; Parameters:
 16988                              <1> ;	DS:SI:		Ptr to MENUINIT struct to initialize
 16989                              <1> ; Returns:
 16990                              <1> ;	DS:SI:		Ptr to initialized MENUINIT struct
 16991                              <1> ALIGN JUMP_ALIGN
 16992                              <1> .InitializeMenuinitFromDSSI:
 16993 00001D7C 1E                  <1> 	push	ds
 16994 00001D7D 0E                  <1> 	push	cs
 16995 00001D7E 1F                  <1> 	pop		ds
 16996 00001D7F BF[7541]            <1> 	mov		di, g_MenupageForMainMenu
 16997 00001D82 E89B03              <1> 	call	Menupage_SetActiveMenupageFromDSDI
 16998 00001D85 E8A403              <1> 	call	Menupage_GetVisibleMenuitemsToAXfromDSDI
 16999 00001D88 1F                  <1> 	pop		ds
 17000                              <1> 
 17001 00001D89 8904                <1> 	mov		WORD [si+MENUINIT.wItems], ax
 17002 00001D8B C744040300          <1> 	mov		WORD [si+MENUINIT.bTitleLines], TITLE_LINES_IN_MENU
 17003 00001D90 C744050600          <1> 	mov		WORD [si+MENUINIT.bInfoLines], INFO_LINES_IN_MENU
 17004 00001D95 C6440628            <1> 	mov		BYTE [si+MENUINIT.bWidth], MENU_WIDTH
 17005                              <1> 	CALL_DISPLAY_LIBRARY GetColumnsToALandRowsToAH
 17006                              <2>  %ifidn %1, PushDisplayContext
 17007                              <2>  call DisplayContext_Push
 17008                              <2>  %elifidn %1, PopDisplayContext
 17009                              <2>  call DisplayContext_Pop
 17010                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17011                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17012                              <2>  %else
 17013 00001D99 BF[1F02]            <2>  mov di, %1
 17014 00001D9C E8CEE2              <2>  call Display_FunctionFromDI
 17015                              <2>  %endif
 17016 00001D9F 886407              <1> 	mov		[si+MENUINIT.bHeight], ah
 17017 00001DA2 E8B207              <1> 	call	MainMenu_EnterMenuOrModifyItemVisibility
 17018 00001DA5 F9                  <1> 	stc
 17019 00001DA6 C3                  <1> 	ret
 17020                              <1> 
 17021                              <1> 
 17022                              <1> ; Parameters:
 17023                              <1> ;	None
 17024                              <1> ; Returns:
 17025                              <1> ;	CF:		Set to exit menu
 17026                              <1> ;			Clear to cancel exit
 17027                              <1> ALIGN JUMP_ALIGN
 17028                              <1> .ExitMenu:
 17029 00001DA7 E87B03              <1> 	call	Menupage_GetActiveMenupageToDSDI
 17030 00001DAA 8B7502              <1> 	mov		si, [di+MENUPAGE.fnBack]
 17031 00001DAD 81FE[E525]          <1> 	cmp		si, ExitToDosFromBackButton
 17032 00001DB1 7404                <1> 	je		SHORT .QuitProgram
 17033 00001DB3 FFD6                <1> 	call	si					; Back to previous menu
 17034 00001DB5 F8                  <1> 	clc
 17035 00001DB6 C3                  <1> 	ret
 17036                              <1> 
 17037                              <1> ALIGN JUMP_ALIGN
 17038                              <1> .QuitProgram:
 17039 00001DB7 E8FAFB              <1> 	call	Dialogs_DisplayQuitDialog
 17040 00001DBA 7402                <1> 	jz		SHORT .ExitToDOS
 17041 00001DBC F8                  <1> 	clc
 17042 00001DBD C3                  <1> 	ret
 17043                              <1> .ExitToDOS:
 17044 00001DBE E8F0FA              <1> 	call	Buffers_SaveChangesIfFileLoaded
 17045                              <1> 	CALL_MENU_LIBRARY Close
 17046                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17047                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17048                              <2>  %elifidn %1, Close
 17049 00001DC1 E884EB              <2>  call MenuInit_CloseMenuWindow
 17050                              <2>  %elifidn %1, SetUserDataFromDSSI
 17051                              <2>  call MenuInit_SetUserDataFromDSSI
 17052                              <2>  %elifidn %1, GetUserDataToDSSI
 17053                              <2>  call MenuInit_GetUserDataToDSSI
 17054                              <2>  %elifidn %1, SetTitleHeightFromAL
 17055                              <2>  call MenuInit_SetTitleHeightFromAL
 17056                              <2>  %elifidn %1, GetHighlightedItemToAX
 17057                              <2>  call MenuInit_GetHighlightedItemToAX
 17058                              <2>  %elifidn %1, SetTotalItemsFromAX
 17059                              <2>  call MenuInit_SetTotalItemsFromAX
 17060                              <2>  %elifidn %1, SetInformationHeightFromAL
 17061                              <2>  call MenuInit_SetInformationHeightFromAL
 17062                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17063                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17064                              <2>  %else
 17065                              <2>  mov di, %1
 17066                              <2>  call Menu_FunctionFromDI
 17067                              <2>  %endif
 17068 00001DC4 F9                  <1> 	stc
 17069 00001DC5 C3                  <1> 	ret
 17070                              <1> 
 17071                              <1> 
 17072                              <1> ; Parameters:
 17073                              <1> ;	CX:			Index of new highlighted item
 17074                              <1> ;	DX:			Index of previously highlighted item or NO_ITEM_HIGHLIGHTED
 17075                              <1> ALIGN JUMP_ALIGN
 17076                              <1> .ItemHighlightedFromCX:
 17077                              <1> 	CALL_MENU_LIBRARY ClearInformationArea
 17078                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17079                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17080                              <2>  %elifidn %1, Close
 17081                              <2>  call MenuInit_CloseMenuWindow
 17082                              <2>  %elifidn %1, SetUserDataFromDSSI
 17083                              <2>  call MenuInit_SetUserDataFromDSSI
 17084                              <2>  %elifidn %1, GetUserDataToDSSI
 17085                              <2>  call MenuInit_GetUserDataToDSSI
 17086                              <2>  %elifidn %1, SetTitleHeightFromAL
 17087                              <2>  call MenuInit_SetTitleHeightFromAL
 17088                              <2>  %elifidn %1, GetHighlightedItemToAX
 17089                              <2>  call MenuInit_GetHighlightedItemToAX
 17090                              <2>  %elifidn %1, SetTotalItemsFromAX
 17091                              <2>  call MenuInit_SetTotalItemsFromAX
 17092                              <2>  %elifidn %1, SetInformationHeightFromAL
 17093                              <2>  call MenuInit_SetInformationHeightFromAL
 17094                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17095                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17096                              <2>  %else
 17097 00001DC6 BF[010B]            <2>  mov di, %1
 17098 00001DC9 E833E9              <2>  call Menu_FunctionFromDI
 17099                              <2>  %endif
 17100                              <1> 	CALL_MENU_LIBRARY RefreshInformation
 17101                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17102                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17103                              <2>  %elifidn %1, Close
 17104                              <2>  call MenuInit_CloseMenuWindow
 17105                              <2>  %elifidn %1, SetUserDataFromDSSI
 17106                              <2>  call MenuInit_SetUserDataFromDSSI
 17107                              <2>  %elifidn %1, GetUserDataToDSSI
 17108                              <2>  call MenuInit_GetUserDataToDSSI
 17109                              <2>  %elifidn %1, SetTitleHeightFromAL
 17110                              <2>  call MenuInit_SetTitleHeightFromAL
 17111                              <2>  %elifidn %1, GetHighlightedItemToAX
 17112                              <2>  call MenuInit_GetHighlightedItemToAX
 17113                              <2>  %elifidn %1, SetTotalItemsFromAX
 17114                              <2>  call MenuInit_SetTotalItemsFromAX
 17115                              <2>  %elifidn %1, SetInformationHeightFromAL
 17116                              <2>  call MenuInit_SetInformationHeightFromAL
 17117                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17118                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17119                              <2>  %else
 17120 00001DCC BF[2A0B]            <2>  mov di, %1
 17121 00001DCF E82DE9              <2>  call Menu_FunctionFromDI
 17122                              <2>  %endif
 17123 00001DD2 F9                  <1> 	stc
 17124 00001DD3 C3                  <1> 	ret
 17125                              <1> 
 17126                              <1> 
 17127                              <1> ; Parameters:
 17128                              <1> ;	CX:			Index of selected item
 17129                              <1> ALIGN JUMP_ALIGN
 17130                              <1> .ItemSelectedFromCX:
 17131 00001DD4 E84E03              <1> 	call	Menupage_GetActiveMenupageToDSDI
 17132 00001DD7 E86703              <1> 	call	Menupage_GetCXthVisibleMenuitemToDSSIfromDSDI
 17133 00001DDA FF14                <1> 	call	[si+MENUITEM.fnActivate]
 17134 00001DDC F9                  <1> 	stc
 17135 00001DDD C3                  <1> 	ret
 17136                              <1> 
 17137                              <1> 
 17138                              <1> ; Parameters:
 17139                              <1> ;	AL:			ASCII character for the key
 17140                              <1> ;	AH:			Keyboard library scan code for the key
 17141                              <1> ALIGN JUMP_ALIGN
 17142                              <1> .KeyStrokeInAX:
 17143 00001DDE 80FC3B              <1> 	cmp		ah, KEY_DISPLAY_ITEM_HELP
 17144 00001DE1 7585                <1> 	jne		SHORT .EventNotHandled
 17145                              <1> 
 17146                              <1> ;ALIGN JUMP_ALIGN
 17147                              <1> ;.DisplayHelp:
 17148 00001DE3 E83F03              <1> 	call	Menupage_GetActiveMenupageToDSDI
 17149                              <1> 	CALL_MENU_LIBRARY GetHighlightedItemToAX
 17150                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17151                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17152                              <2>  %elifidn %1, Close
 17153                              <2>  call MenuInit_CloseMenuWindow
 17154                              <2>  %elifidn %1, SetUserDataFromDSSI
 17155                              <2>  call MenuInit_SetUserDataFromDSSI
 17156                              <2>  %elifidn %1, GetUserDataToDSSI
 17157                              <2>  call MenuInit_GetUserDataToDSSI
 17158                              <2>  %elifidn %1, SetTitleHeightFromAL
 17159                              <2>  call MenuInit_SetTitleHeightFromAL
 17160                              <2>  %elifidn %1, GetHighlightedItemToAX
 17161 00001DE6 E86AEB              <2>  call MenuInit_GetHighlightedItemToAX
 17162                              <2>  %elifidn %1, SetTotalItemsFromAX
 17163                              <2>  call MenuInit_SetTotalItemsFromAX
 17164                              <2>  %elifidn %1, SetInformationHeightFromAL
 17165                              <2>  call MenuInit_SetInformationHeightFromAL
 17166                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17167                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17168                              <2>  %else
 17169                              <2>  mov di, %1
 17170                              <2>  call Menu_FunctionFromDI
 17171                              <2>  %endif
 17172 00001DE9 91                  <1> 	xchg	cx, ax
 17173 00001DEA E85403              <1> 	call	Menupage_GetCXthVisibleMenuitemToDSSIfromDSDI
 17174 00001DED E89000              <1> 	call	Menuitem_DisplayHelpMessageFromDSSI
 17175 00001DF0 F9                  <1> 	stc
 17176 00001DF1 C3                  <1> 	ret
 17177                              <1> 
 17178                              <1> 
 17179                              <1> ; Parameters:
 17180                              <1> ;	CX:			Index of item to refresh
 17181                              <1> ;	Cursor has been positioned to the beginning of item line
 17182                              <1> ALIGN JUMP_ALIGN
 17183                              <1> .RefreshItemFromCX:
 17184 00001DF2 83F9FF              <1> 	cmp		cx, NO_ITEM_HIGHLIGHTED
 17185 00001DF5 740B                <1> 	je		SHORT .NothingToRefresh
 17186 00001DF7 E82B03              <1> 	call	Menupage_GetActiveMenupageToDSDI
 17187 00001DFA E84403              <1> 	call	Menupage_GetCXthVisibleMenuitemToDSSIfromDSDI
 17188 00001DFD 7303                <1> 	jnc		SHORT .NothingToRefresh
 17189 00001DFF E82C02              <1> 	call	MenuitemPrint_NameWithPossibleValueFromDSSI
 17190                              <1> .NothingToRefresh:
 17191 00001E02 F9                  <1> 	stc
 17192 00001E03 C3                  <1> 	ret
 17193                              <1> 
 17194                              <1> 
 17195                              <1> ; Parameters:
 17196                              <1> ;	CX:			Index of highlighted item
 17197                              <1> ;	Cursor has been positioned to the beginning of first line
 17198                              <1> ALIGN JUMP_ALIGN
 17199                              <1> .RefreshInformation:
 17200 00001E04 83F9FF              <1> 	cmp		cx, NO_ITEM_HIGHLIGHTED
 17201 00001E07 74F9                <1> 	je		SHORT .NothingToRefresh
 17202 00001E09 E81903              <1> 	call	Menupage_GetActiveMenupageToDSDI
 17203 00001E0C E83203              <1> 	call	Menupage_GetCXthVisibleMenuitemToDSSIfromDSDI
 17204 00001E0F E81002              <1> 	call	MenuitemPrint_PrintQuickInfoFromDSSI
 17205 00001E12 F9                  <1> 	stc
 17206 00001E13 C3                  <1> 	ret
 17207                              <1> 
 17208                              <1> 
 17209                              <1> ; Parameters:
 17210                              <1> ;	CX:			Index of highlighted item
 17211                              <1> ;	Cursor has been positioned to the beginning of first line
 17212                              <1> ALIGN JUMP_ALIGN
 17213                              <1> .RefreshTitle:
 17214 00001E14 E80800              <1> 	call	.PrintProgramName
 17215 00001E17 E80E00              <1> 	call	.PrintLoadStatus
 17216 00001E1A E85200              <1> 	call	.PrintStatusOfUnsavedChanges
 17217 00001E1D F9                  <1> 	stc
 17218                              <1> .ReturnSinceNothingToPrint:
 17219 00001E1E C3                  <1> 	ret
 17220                              <1> 
 17221                              <1> ALIGN JUMP_ALIGN
 17222                              <1> .PrintProgramName:
 17223 00001E1F BE[1C00]            <1> 	mov		si, g_szProgramTitle
 17224                              <1> 	JMP_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 17225                              <2>  %ifidn %1, PushDisplayContext
 17226                              <2>  jmp DisplayContext_Push
 17227                              <2>  %elifidn %1, PopDisplayContext
 17228                              <2>  call DisplayContext_Pop
 17229                              <2>  ret
 17230                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17231                              <2>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17232                              <2>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 17233                              <2>  mov di, %1
 17234                              <2>  call Display_FunctionFromDI
 17235                              <2>  ret
 17236                              <2>  %else
 17237 00001E22 BF[DF02]            <2>  mov di, %1
 17238 00001E25 E945E2              <2>  jmp Display_FunctionFromDI
 17239                              <2>  %endif
 17240                              <1> 
 17241                              <1> ALIGN JUMP_ALIGN
 17242                              <1> .PrintLoadStatus:
 17243 00001E28 A1[C643]            <1> 	mov		ax, [g_cfgVars+CFGVARS.wFlags]
 17244 00001E2B A90100              <1> 	test	ax, FLG_CFGVARS_FILELOADED
 17245 00001E2E 7511                <1> 	jnz		SHORT .PrintNameOfLoadedFile
 17246 00001E30 A90200              <1> 	test	ax, FLG_CFGVARS_ROMLOADED
 17247 00001E33 BE[7F00]            <1> 	mov		si, g_szEEPROM
 17248 00001E36 750C                <1> 	jnz		SHORT .PrintNameOfLoadedFileOrEeprom
 17249                              <1> 	; Fall to .PrintNothingLoaded
 17250                              <1> 
 17251                              <1> .PrintNothingLoaded:
 17252 00001E38 BE[6B00]            <1> 	mov		si, g_szBiosIsNotLoaded
 17253                              <1> 	JMP_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 17254                              <2>  %ifidn %1, PushDisplayContext
 17255                              <2>  jmp DisplayContext_Push
 17256                              <2>  %elifidn %1, PopDisplayContext
 17257                              <2>  call DisplayContext_Pop
 17258                              <2>  ret
 17259                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17260                              <2>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17261                              <2>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 17262                              <2>  mov di, %1
 17263                              <2>  call Display_FunctionFromDI
 17264                              <2>  ret
 17265                              <2>  %else
 17266 00001E3B BF[DF02]            <2>  mov di, %1
 17267 00001E3E E92CE2              <2>  jmp Display_FunctionFromDI
 17268                              <2>  %endif
 17269                              <1> 
 17270                              <1> ALIGN JUMP_ALIGN
 17271                              <1> .PrintNameOfLoadedFile:
 17272 00001E41 BE[D043]            <1> 	mov		si, g_cfgVars+CFGVARS.szOpenedFile
 17273                              <1> 	; Fall to .PrintNameOfLoadedFileOrEeprom
 17274                              <1> 
 17275                              <1> ALIGN JUMP_ALIGN
 17276                              <1> .PrintNameOfLoadedFileOrEeprom:
 17277                              <1> 	CALL_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 17278                              <2>  %ifidn %1, PushDisplayContext
 17279                              <2>  call DisplayContext_Push
 17280                              <2>  %elifidn %1, PopDisplayContext
 17281                              <2>  call DisplayContext_Pop
 17282                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17283                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17284                              <2>  %else
 17285 00001E44 BF[DF02]            <2>  mov di, %1
 17286 00001E47 E823E2              <2>  call Display_FunctionFromDI
 17287                              <2>  %endif
 17288                              <1> 	; Fall to .PrintTypeOfLoadedBios
 17289                              <1> 
 17290                              <1> .PrintTypeOfLoadedBios:
 17291 00001E4A BE[8600]            <1> 	mov		si, g_szSourceAndTypeSeparator
 17292                              <1> 	CALL_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 17293                              <2>  %ifidn %1, PushDisplayContext
 17294                              <2>  call DisplayContext_Push
 17295                              <2>  %elifidn %1, PopDisplayContext
 17296                              <2>  call DisplayContext_Pop
 17297                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17298                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17299                              <2>  %else
 17300 00001E4D BF[DF02]            <2>  mov di, %1
 17301 00001E50 E81AE2              <2>  call Display_FunctionFromDI
 17302                              <2>  %endif
 17303 00001E53 E805FA              <1> 	call	Buffers_IsXtideUniversalBiosLoaded
 17304 00001E56 750E                <1> 	jne		SHORT .PrintUnidentifiedType
 17305                              <1> 
 17306 00001E58 E8DFFA              <1> 	call	Buffers_GetFileBufferToESDI
 17307 00001E5B 8CC3                <1> 	mov		bx, es
 17308 00001E5D 8D752D              <1> 	lea		si, [di+ROMVARS.szVersion]
 17309                              <1> 	JMP_DISPLAY_LIBRARY PrintNullTerminatedStringFromBXSI
 17310                              <2>  %ifidn %1, PushDisplayContext
 17311                              <2>  jmp DisplayContext_Push
 17312                              <2>  %elifidn %1, PopDisplayContext
 17313                              <2>  call DisplayContext_Pop
 17314                              <2>  ret
 17315                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17316                              <2>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17317                              <2>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 17318                              <2>  mov di, %1
 17319                              <2>  call Display_FunctionFromDI
 17320                              <2>  ret
 17321                              <2>  %else
 17322 00001E60 BF[FA02]            <2>  mov di, %1
 17323 00001E63 E907E2              <2>  jmp Display_FunctionFromDI
 17324                              <2>  %endif
 17325                              <1> 
 17326                              <1> ALIGN JUMP_ALIGN
 17327                              <1> .PrintUnidentifiedType:
 17328 00001E66 BE[8A00]            <1> 	mov		si, g_szUnidentified
 17329                              <1> 	JMP_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 17330                              <2>  %ifidn %1, PushDisplayContext
 17331                              <2>  jmp DisplayContext_Push
 17332                              <2>  %elifidn %1, PopDisplayContext
 17333                              <2>  call DisplayContext_Pop
 17334                              <2>  ret
 17335                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17336                              <2>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17337                              <2>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 17338                              <2>  mov di, %1
 17339                              <2>  call Display_FunctionFromDI
 17340                              <2>  ret
 17341                              <2>  %else
 17342 00001E69 BF[DF02]            <2>  mov di, %1
 17343 00001E6C E9FEE1              <2>  jmp Display_FunctionFromDI
 17344                              <2>  %endif
 17345                              <1> 
 17346                              <1> ALIGN JUMP_ALIGN
 17347                              <1> .PrintStatusOfUnsavedChanges:
 17348 00001E6F F706[C643]0400      <1> 	test	WORD [g_cfgVars+CFGVARS.wFlags], FLG_CFGVARS_UNSAVED
 17349 00001E75 74A7                <1> 	jz		SHORT .ReturnSinceNothingToPrint
 17350 00001E77 BE[9700]            <1> 	mov		si, g_szUnsaved
 17351                              <1> 	JMP_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 17352                              <2>  %ifidn %1, PushDisplayContext
 17353                              <2>  jmp DisplayContext_Push
 17354                              <2>  %elifidn %1, PopDisplayContext
 17355                              <2>  call DisplayContext_Pop
 17356                              <2>  ret
 17357                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17358                              <2>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17359                              <2>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 17360                              <2>  mov di, %1
 17361                              <2>  call Display_FunctionFromDI
 17362                              <2>  ret
 17363                              <2>  %else
 17364 00001E7A BF[DF02]            <2>  mov di, %1
 17365 00001E7D E9EDE1              <2>  jmp Display_FunctionFromDI
 17366                              <2>  %endif
 17367                                  %include "Menuitem.asm"
 17368                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 17369                              <1> ; Description	:	Functions for accessing MENUITEM structs.
 17370                              <1> 
 17371                              <1> ;
 17372                              <1> ; XTIDE Universal BIOS and Associated Tools
 17373                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 17374                              <1> ;
 17375                              <1> ; This program is free software; you can redistribute it and/or modify
 17376                              <1> ; it under the terms of the GNU General Public License as published by
 17377                              <1> ; the Free Software Foundation; either version 2 of the License, or
 17378                              <1> ; (at your option) any later version.
 17379                              <1> ;
 17380                              <1> ; This program is distributed in the hope that it will be useful,
 17381                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 17382                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 17383                              <1> ; GNU General Public License for more details.
 17384                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 17385                              <1> ;
 17386                              <1> 
 17387                              <1> ; Section containing code
 17388                              <1> SECTION .text
 17389                              <1> 
 17390                              <1> ;--------------------------------------------------------------------
 17391                              <1> ; Menuitem_DisplayHelpMessageFromDSSI
 17392                              <1> ;	Parameters:
 17393                              <1> ;		DS:SI:	Ptr to MENUITEM
 17394                              <1> ;	Returns:
 17395                              <1> ;		Nothing
 17396                              <1> ;	Corrupts registers:
 17397                              <1> ;		AX, DX, DI
 17398                              <1> ;--------------------------------------------------------------------
 17399                              <1> ALIGN JUMP_ALIGN
 17400                              <1> Menuitem_DisplayHelpMessageFromDSSI:
 17401 00001E80 8B7C04              <1> 	mov		di, [si+MENUITEM.szName]
 17402 00001E83 8B5408              <1> 	mov		dx, [si+MENUITEM.szHelp]
 17403 00001E86 E9BCFA              <1> 	jmp		Dialogs_DisplayHelpFromCSDXwithTitleInCSDI
 17404                              <1> 
 17405                              <1> 
 17406                              <1> ;--------------------------------------------------------------------
 17407                              <1> ; Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 17408                              <1> ;	Parameters:
 17409                              <1> ;		DS:SI:	Ptr to MENUITEM
 17410                              <1> ;	Returns:
 17411                              <1> ;		Nothing
 17412                              <1> ;	Corrupts registers:
 17413                              <1> ;		AX, BX, CX, SI, DI, ES
 17414                              <1> ;--------------------------------------------------------------------
 17415                              <1> ALIGN JUMP_ALIGN
 17416                              <1> Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI:
 17417 00001E89 E8E3F6              <1> 	call	Registers_CopyDSSItoESDI
 17418                              <1> 
 17419 00001E8C B90C00              <1> 	mov		cx, DIALOG_INPUT_size
 17420 00001E8F E82EF7              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 17421 00001E92 E86D00              <1> 	call	InitializeDialogInputInDSSIfromMenuitemInESDI
 17422 00001E95 268B4510            <1> 	mov		ax, [es:di+MENUITEM.itemValue + ITEM_VALUE.szMultichoice]
 17423 00001E99 894404              <1> 	mov		[si+DIALOG_INPUT.fszItems], ax
 17424 00001E9C 57                  <1> 	push	di
 17425                              <1> 	CALL_MENU_LIBRARY GetSelectionToAXwithInputInDSSI
 17426                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17427                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17428                              <2>  %elifidn %1, Close
 17429                              <2>  call MenuInit_CloseMenuWindow
 17430                              <2>  %elifidn %1, SetUserDataFromDSSI
 17431                              <2>  call MenuInit_SetUserDataFromDSSI
 17432                              <2>  %elifidn %1, GetUserDataToDSSI
 17433                              <2>  call MenuInit_GetUserDataToDSSI
 17434                              <2>  %elifidn %1, SetTitleHeightFromAL
 17435                              <2>  call MenuInit_SetTitleHeightFromAL
 17436                              <2>  %elifidn %1, GetHighlightedItemToAX
 17437                              <2>  call MenuInit_GetHighlightedItemToAX
 17438                              <2>  %elifidn %1, SetTotalItemsFromAX
 17439                              <2>  call MenuInit_SetTotalItemsFromAX
 17440                              <2>  %elifidn %1, SetInformationHeightFromAL
 17441                              <2>  call MenuInit_SetInformationHeightFromAL
 17442                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17443                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17444                              <2>  %else
 17445 00001E9D BF[9D11]            <2>  mov di, %1
 17446 00001EA0 E85CE8              <2>  call Menu_FunctionFromDI
 17447                              <2>  %endif
 17448 00001EA3 5F                  <1> 	pop		di
 17449                              <1> 
 17450 00001EA4 83F8FF              <1> 	cmp		ax, BYTE NO_ITEM_SELECTED
 17451 00001EA7 7406                <1> 	je		SHORT .NothingToChange
 17452 00001EA9 E8C8F6              <1> 	call	Registers_CopyESDItoDSSI
 17453 00001EAC E86A00              <1> 	call	Menuitem_StoreValueFromAXtoMenuitemInDSSI
 17454                              <1> .NothingToChange:
 17455 00001EAF 83C40C              <1> 	add		sp, BYTE DIALOG_INPUT_size
 17456 00001EB2 C3                  <1> 	ret
 17457                              <1> 
 17458                              <1> 
 17459                              <1> ;--------------------------------------------------------------------
 17460                              <1> ; Menuitem_ActivateHexInputForMenuitemInDSSI
 17461                              <1> ;	Parameters:
 17462                              <1> ;		DS:SI:	Ptr to MENUITEM
 17463                              <1> ;	Returns:
 17464                              <1> ;		Nothing
 17465                              <1> ;	Corrupts registers:
 17466                              <1> ;		AX, BX, CX, SI, DI, ES
 17467                              <1> ;--------------------------------------------------------------------
 17468                              <1> ALIGN JUMP_ALIGN
 17469                              <1> Menuitem_ActivateHexInputForMenuitemInDSSI:
 17470 00001EB3 E8B9F6              <1> 	call	Registers_CopyDSSItoESDI
 17471                              <1> 
 17472 00001EB6 B91400              <1> 	mov		cx, WORD_DIALOG_IO_size
 17473 00001EB9 E804F7              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 17474 00001EBC E84300              <1> 	call	InitializeDialogInputInDSSIfromMenuitemInESDI
 17475 00001EBF C6440D10            <1> 	mov		BYTE [si+WORD_DIALOG_IO.bNumericBase], 16
 17476 00001EC3 EB10                <1> 	jmp		SHORT ContinueWordInput
 17477                              <1> 
 17478                              <1> ;--------------------------------------------------------------------
 17479                              <1> ; Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 17480                              <1> ;	Parameters:
 17481                              <1> ;		DS:SI:	Ptr to MENUITEM
 17482                              <1> ;	Returns:
 17483                              <1> ;		CF:		Cleared if value inputted
 17484                              <1> ;				Set if user cancellation
 17485                              <1> ;	Corrupts registers:
 17486                              <1> ;		AX, BX, CX, SI, DI, ES
 17487                              <1> ;--------------------------------------------------------------------
 17488                              <1> ALIGN JUMP_ALIGN
 17489                              <1> Menuitem_ActivateUnsignedInputForMenuitemInDSSI:
 17490 00001EC5 E8A7F6              <1> 	call	Registers_CopyDSSItoESDI
 17491                              <1> 
 17492 00001EC8 B91400              <1> 	mov		cx, WORD_DIALOG_IO_size
 17493 00001ECB E8F2F6              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 17494 00001ECE E83100              <1> 	call	InitializeDialogInputInDSSIfromMenuitemInESDI
 17495 00001ED1 C6440D0A            <1> 	mov		BYTE [si+WORD_DIALOG_IO.bNumericBase], 10
 17496                              <1> ContinueWordInput:
 17497 00001ED5 268B4514            <1> 	mov		ax, [es:di+MENUITEM.itemValue + ITEM_VALUE.wMinValue]
 17498 00001ED9 89440E              <1> 	mov		[si+WORD_DIALOG_IO.wMin], ax
 17499 00001EDC 268B4516            <1> 	mov		ax, [es:di+MENUITEM.itemValue + ITEM_VALUE.wMaxValue]
 17500 00001EE0 894410              <1> 	mov		[si+WORD_DIALOG_IO.wMax], ax
 17501 00001EE3 57                  <1> 	push	di
 17502                              <1> 	CALL_MENU_LIBRARY GetWordWithIoInDSSI
 17503                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17504                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17505                              <2>  %elifidn %1, Close
 17506                              <2>  call MenuInit_CloseMenuWindow
 17507                              <2>  %elifidn %1, SetUserDataFromDSSI
 17508                              <2>  call MenuInit_SetUserDataFromDSSI
 17509                              <2>  %elifidn %1, GetUserDataToDSSI
 17510                              <2>  call MenuInit_GetUserDataToDSSI
 17511                              <2>  %elifidn %1, SetTitleHeightFromAL
 17512                              <2>  call MenuInit_SetTitleHeightFromAL
 17513                              <2>  %elifidn %1, GetHighlightedItemToAX
 17514                              <2>  call MenuInit_GetHighlightedItemToAX
 17515                              <2>  %elifidn %1, SetTotalItemsFromAX
 17516                              <2>  call MenuInit_SetTotalItemsFromAX
 17517                              <2>  %elifidn %1, SetInformationHeightFromAL
 17518                              <2>  call MenuInit_SetInformationHeightFromAL
 17519                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17520                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17521                              <2>  %else
 17522 00001EE4 BF[1612]            <2>  mov di, %1
 17523 00001EE7 E815E8              <2>  call Menu_FunctionFromDI
 17524                              <2>  %endif
 17525 00001EEA 5F                  <1> 	pop		di
 17526                              <1> 
 17527 00001EEB 8A4C0C              <1> 	mov		cl, [si+WORD_DIALOG_IO.bUserCancellation]
 17528 00001EEE 80F901              <1> 	cmp		cl, TRUE
 17529 00001EF1 7409                <1> 	je		SHORT .NothingToChange
 17530 00001EF3 8B4412              <1> 	mov		ax, [si+WORD_DIALOG_IO.wReturnWord]
 17531 00001EF6 E87BF6              <1> 	call	Registers_CopyESDItoDSSI
 17532 00001EF9 E81D00              <1> 	call	Menuitem_StoreValueFromAXtoMenuitemInDSSI
 17533                              <1> .NothingToChange:
 17534 00001EFC 83C414              <1> 	add		sp, BYTE WORD_DIALOG_IO_size
 17535 00001EFF D0E9                <1> 	shr		cl, 1
 17536 00001F01 C3                  <1> 	ret
 17537                              <1> 
 17538                              <1> 
 17539                              <1> ;--------------------------------------------------------------------
 17540                              <1> ; InitializeDialogInputInDSSIfromMenuitemInESDI
 17541                              <1> ;	Parameters:
 17542                              <1> ;		DS:SI:	Ptr to DIALOG_INPUT
 17543                              <1> ;		ES:DI:	Ptr to MENUITEM
 17544                              <1> ;	Returns:
 17545                              <1> ;		Nothing
 17546                              <1> ;	Corrupts registers:
 17547                              <1> ;		AX
 17548                              <1> ;--------------------------------------------------------------------
 17549                              <1> ALIGN JUMP_ALIGN
 17550                              <1> InitializeDialogInputInDSSIfromMenuitemInESDI:
 17551 00001F02 268B450E            <1> 	mov		ax, [es:di+MENUITEM.itemValue + ITEM_VALUE.szDialogTitle]
 17552 00001F06 8904                <1> 	mov		[si+DIALOG_INPUT.fszTitle], ax
 17553 00001F08 8C4C02              <1> 	mov		[si+DIALOG_INPUT.fszTitle+2], cs
 17554                              <1> 
 17555 00001F0B 8C4C06              <1> 	mov		[si+DIALOG_INPUT.fszItems+2], cs
 17556                              <1> 
 17557 00001F0E 268B4506            <1> 	mov		ax, [es:di+MENUITEM.szQuickInfo]
 17558 00001F12 894408              <1> 	mov		[si+DIALOG_INPUT.fszInfo], ax
 17559 00001F15 8C4C0A              <1> 	mov		[si+DIALOG_INPUT.fszInfo+2], cs
 17560 00001F18 C3                  <1> 	ret
 17561                              <1> 
 17562                              <1> ;--------------------------------------------------------------------
 17563                              <1> ; Menuitem_StoreValueFromAXtoMenuitemInDSSI
 17564                              <1> ;	Parameters:
 17565                              <1> ;		AX:		Value or multichoice selection to store
 17566                              <1> ;		DS:SI:	Ptr to MENUITEM
 17567                              <1> ;		SS:BP:	Menu handle
 17568                              <1> ;	Returns:
 17569                              <1> ;		Nothing
 17570                              <1> ;	Corrupts registers:
 17571                              <1> ;		AX, BX, DI, ES
 17572                              <1> ;--------------------------------------------------------------------
 17573                              <1> ALIGN JUMP_ALIGN
 17574                              <1> Menuitem_StoreValueFromAXtoMenuitemInDSSI:
 17575                              <1> 	eMOVZX	bx, [si+MENUITEM.bType]
 17576                              <2> %ifndef USE_386
 17577                              <2>  %ifidni %1, ax
 17578                              <2>  mov al, %2
 17579                              <2>  xor ah, ah
 17580                              <2>  %elifidni %1, bx
 17581 00001F19 8A5C0B              <2>  mov bl, %2
 17582 00001F1C 30FF                <2>  xor bh, bh
 17583                              <2>  %elifidni %1, cx
 17584                              <2>  mov cl, %2
 17585                              <2>  xor ch, ch
 17586                              <2>  %elifidni %1, dx
 17587                              <2>  mov dl, %2
 17588                              <2>  xor dh, dh
 17589                              <2>  %else
 17590                              <2>  push ax
 17591                              <2>  mov al, %2
 17592                              <2>  xor ah, ah
 17593                              <2>  xchg ax, %1
 17594                              <2>  pop ax
 17595                              <2>  %endif
 17596                              <2> 
 17597                              <2> %else
 17598                              <2>  movzx %1, %2
 17599                              <2> %endif
 17600 00001F1E 80FB0A              <1> 	cmp		bl, TYPE_MENUITEM_HEX
 17601 00001F21 7716                <1> 	ja		SHORT .InvalidItemType
 17602                              <1> 
 17603 00001F23 E8ED00              <1> 	call	GetConfigurationBufferToESDIforMenuitemInDSSI
 17604 00001F26 037C0C              <1> 	add		di, [si+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 17605                              <1> 
 17606 00001F29 53                  <1> 	push	bx
 17607 00001F2A 8B5C1A              <1> 	mov		bx,[si+MENUITEM.itemValue+ITEM_VALUE.fnValueWriter]
 17608 00001F2D 85DB                <1> 	test	bx,bx
 17609 00001F2F 7402                <1> 	jz		SHORT .NoWriter
 17610 00001F31 FFD3                <1> 	call	bx
 17611                              <1> .NoWriter:
 17612 00001F33 5B                  <1> 	pop		bx
 17613                              <1> 
 17614 00001F34 2EFFA7[3A1F]        <1> 	jmp		[cs:bx+.rgfnJumpToStoreValueBasedOnItemType]
 17615                              <1> .InvalidItemType:
 17616 00001F39 C3                  <1> 	ret
 17617                              <1> 
 17618                              <1> ALIGN WORD_ALIGN
 17619                              <1> .rgfnJumpToStoreValueBasedOnItemType:
 17620 00001F3A [391F]              <1> 	dw		.InvalidItemType									; TYPE_MENUITEM_PAGEBACK
 17621 00001F3C [391F]              <1> 	dw		.InvalidItemType									; TYPE_MENUITEM_PAGENEXT
 17622 00001F3E [391F]              <1> 	dw		.InvalidItemType									; TYPE_MENUITEM_ACTION
 17623 00001F40 [461F]              <1> 	dw		.StoreMultichoiceValueFromAXtoESDIwithItemInDSSI	; TYPE_MENUITEM_MULTICHOICE
 17624 00001F42 [7A1F]              <1> 	dw		.StoreByteOrWordValueFromAXtoESDIwithItemInDSSI		; TYPE_MENUITEM_UNSIGNED
 17625 00001F44 [7A1F]              <1> 	dw		.StoreByteOrWordValueFromAXtoESDIwithItemInDSSI		; TYPE_MENUITEM_HEX
 17626                              <1> 
 17627                              <1> ;--------------------------------------------------------------------
 17628                              <1> ; .StoreMultichoiceValueFromAXtoESDIwithItemInDSSI
 17629                              <1> ;	Parameters:
 17630                              <1> ;		AX:		Multichoice selection (index)
 17631                              <1> ;		DS:SI:	Ptr to MENUITEM
 17632                              <1> ;		ES:DI:	Ptr to value variable
 17633                              <1> ;		SS:BP:	Menu handle
 17634                              <1> ;	Returns:
 17635                              <1> ;		Nothing
 17636                              <1> ;	Corrupts registers:
 17637                              <1> ;		AX, BX, DI
 17638                              <1> ;--------------------------------------------------------------------
 17639                              <1> ALIGN JUMP_ALIGN
 17640                              <1> .StoreMultichoiceValueFromAXtoESDIwithItemInDSSI:
 17641 00001F46 F6440A40            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_MASKVALUE
 17642 00001F4A 7519                <1> 	jnz		SHORT .ClearBitsUsingMask
 17643 00001F4C F6440A04            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_FLAGVALUE
 17644 00001F50 741B                <1> 	jz		SHORT .TranslateChoiceToValueUsingLookupTable
 17645                              <1> 
 17646 00001F52 85C0                <1> 	test	ax, ax			; Setting item flag?
 17647 00001F54 8B4416              <1> 	mov		ax, [si+MENUITEM.itemValue+ITEM_VALUE.wValueBitmask]
 17648 00001F57 7507                <1> 	jnz		SHORT .SetFlagFromAX
 17649 00001F59 F7D0                <1> 	not		ax
 17650 00001F5B 262105              <1> 	and		[es:di], ax		; Clear flag
 17651 00001F5E EB39                <1> 	jmp		SHORT .SetUnsavedChanges
 17652                              <1> ALIGN JUMP_ALIGN
 17653                              <1> .SetFlagFromAX:
 17654 00001F60 260905              <1> 	or		[es:di], ax
 17655 00001F63 EB34                <1> 	jmp		SHORT .SetUnsavedChanges
 17656                              <1> 
 17657                              <1> ALIGN JUMP_ALIGN
 17658                              <1> .ClearBitsUsingMask:
 17659 00001F65 8B5C16              <1> 	mov		bx, [si+MENUITEM.itemValue+ITEM_VALUE.wValueBitmask]
 17660 00001F68 F7D3                <1> 	not		bx
 17661 00001F6A 26211D              <1> 	and		[es:di], bx
 17662                              <1> 	; Fall to .TranslateChoiceToValueUsingLookupTable
 17663                              <1> 
 17664                              <1> 
 17665                              <1> ALIGN JUMP_ALIGN
 17666                              <1> .TranslateChoiceToValueUsingLookupTable:
 17667                              <1> ;
 17668                              <1> ; if the lookup pointer is NULL, no translation is needed
 17669                              <1> ;
 17670 00001F6D 8B5C12              <1> 	mov		bx, [si+MENUITEM.itemValue+ITEM_VALUE.rgwChoiceToValueLookup]
 17671 00001F70 85DB                <1> 	test	bx, bx
 17672 00001F72 7406                <1> 	jz		.StoreByteOrWordValueFromAXtoESDIwithItemInDSSI
 17673                              <1> 
 17674 00001F74 D1E0                <1> 	shl		ax, 1			; Shift for WORD lookup
 17675 00001F76 01C3                <1> 	add		bx, ax
 17676 00001F78 8B07                <1> 	mov		ax, [bx]		; Lookup complete
 17677                              <1> 	; Fall to .StoreByteOrWordValueFromAXtoESDIwithItemInDSSI
 17678                              <1> 
 17679                              <1> ;--------------------------------------------------------------------
 17680                              <1> ; .StoreByteOrWordValueFromAXtoESDIwithItemInDSSI
 17681                              <1> ;	Parameters:
 17682                              <1> ;		AX:		Value to store
 17683                              <1> ;		DS:SI:	Ptr to MENUITEM
 17684                              <1> ;		ES:DI:	Ptr to value variable
 17685                              <1> ;		SS:BP:	Menu handle
 17686                              <1> ;	Returns:
 17687                              <1> ;		Nothing
 17688                              <1> ;	Corrupts registers:
 17689                              <1> ;		AX, DI
 17690                              <1> ;--------------------------------------------------------------------
 17691                              <1> ALIGN JUMP_ALIGN
 17692                              <1> .StoreByteOrWordValueFromAXtoESDIwithItemInDSSI:
 17693 00001F7A F6440A40            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_MASKVALUE
 17694 00001F7E 740C                <1> 	jz		SHORT .StoreByteOrWord
 17695 00001F80 51                  <1> 	push	cx
 17696 00001F81 8A4C1C              <1> 	mov		cl, [si+MENUITEM.itemValue+ITEM_VALUE.bFieldPosition]
 17697 00001F84 D3E0                <1> 	shl		ax, cl
 17698 00001F86 59                  <1> 	pop		cx
 17699 00001F87 260905              <1> 	or		[es:di], ax
 17700 00001F8A EB0D                <1> 	jmp		SHORT .SetUnsavedChanges
 17701                              <1> 
 17702                              <1> .StoreByteOrWord:
 17703 00001F8C F6440A08            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_BYTEVALUE
 17704 00001F90 7504                <1> 	jnz		SHORT .StoreByteFromAL
 17705                              <1> 
 17706 00001F92 26886501            <1> 	mov		[es:di+1], ah
 17707                              <1> ALIGN JUMP_ALIGN
 17708                              <1> .StoreByteFromAL:
 17709 00001F96 268805              <1> 	mov		[es:di], al
 17710                              <1> 	; Fall to .SetUnsavedChanges
 17711                              <1> 
 17712                              <1> ;--------------------------------------------------------------------
 17713                              <1> ; .SetUnsavedChanges
 17714                              <1> ;	Parameters:
 17715                              <1> ;		DS:SI:	Ptr to MENUITEM
 17716                              <1> ;		SS:BP:	Menu handle
 17717                              <1> ;	Returns:
 17718                              <1> ;		Nothing
 17719                              <1> ;	Corrupts registers:
 17720                              <1> ;		AX, DI
 17721                              <1> ;--------------------------------------------------------------------
 17722                              <1> ALIGN JUMP_ALIGN
 17723                              <1> .SetUnsavedChanges:
 17724 00001F99 F6440A10            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_PROGRAMVAR
 17725 00001F9D 7503                <1> 	jnz		SHORT .NoUnsavedChangesForProgramVariables
 17726 00001F9F E801F9              <1> 	call	Buffers_SetUnsavedChanges
 17727                              <1> .NoUnsavedChangesForProgramVariables:
 17728 00001FA2 F6440A02            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_MODIFY_MENU
 17729 00001FA6 750F                <1> 	jnz		SHORT .ModifyItemVisibility
 17730                              <1> 	CALL_MENU_LIBRARY RefreshTitle
 17731                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17732                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17733                              <2>  %elifidn %1, Close
 17734                              <2>  call MenuInit_CloseMenuWindow
 17735                              <2>  %elifidn %1, SetUserDataFromDSSI
 17736                              <2>  call MenuInit_SetUserDataFromDSSI
 17737                              <2>  %elifidn %1, GetUserDataToDSSI
 17738                              <2>  call MenuInit_GetUserDataToDSSI
 17739                              <2>  %elifidn %1, SetTitleHeightFromAL
 17740                              <2>  call MenuInit_SetTitleHeightFromAL
 17741                              <2>  %elifidn %1, GetHighlightedItemToAX
 17742                              <2>  call MenuInit_GetHighlightedItemToAX
 17743                              <2>  %elifidn %1, SetTotalItemsFromAX
 17744                              <2>  call MenuInit_SetTotalItemsFromAX
 17745                              <2>  %elifidn %1, SetInformationHeightFromAL
 17746                              <2>  call MenuInit_SetInformationHeightFromAL
 17747                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17748                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17749                              <2>  %else
 17750 00001FA8 BF[1E0B]            <2>  mov di, %1
 17751 00001FAB E851E7              <2>  call Menu_FunctionFromDI
 17752                              <2>  %endif
 17753                              <1> 	CALL_MENU_LIBRARY GetHighlightedItemToAX
 17754                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17755                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 17756                              <2>  %elifidn %1, Close
 17757                              <2>  call MenuInit_CloseMenuWindow
 17758                              <2>  %elifidn %1, SetUserDataFromDSSI
 17759                              <2>  call MenuInit_SetUserDataFromDSSI
 17760                              <2>  %elifidn %1, GetUserDataToDSSI
 17761                              <2>  call MenuInit_GetUserDataToDSSI
 17762                              <2>  %elifidn %1, SetTitleHeightFromAL
 17763                              <2>  call MenuInit_SetTitleHeightFromAL
 17764                              <2>  %elifidn %1, GetHighlightedItemToAX
 17765 00001FAE E8A2E9              <2>  call MenuInit_GetHighlightedItemToAX
 17766                              <2>  %elifidn %1, SetTotalItemsFromAX
 17767                              <2>  call MenuInit_SetTotalItemsFromAX
 17768                              <2>  %elifidn %1, SetInformationHeightFromAL
 17769                              <2>  call MenuInit_SetInformationHeightFromAL
 17770                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17771                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 17772                              <2>  %else
 17773                              <2>  mov di, %1
 17774                              <2>  call Menu_FunctionFromDI
 17775                              <2>  %endif
 17776                              <1> 	JMP_MENU_LIBRARY RefreshItemFromAX
 17777                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 17778                              <2>  jmp MenuInit_CloseMenuIfExitEventAllows
 17779                              <2>  %elifidn %1, Close
 17780                              <2>  jmp MenuInit_CloseMenuWindow
 17781                              <2>  %elifidn %1, SetUserDataFromDSSI
 17782                              <2>  jmp MenuInit_SetUserDataFromDSSI
 17783                              <2>  %elifidn %1, GetUserDataToDSSI
 17784                              <2>  jmp MenuInit_GetUserDataToDSSI
 17785                              <2>  %elifidn %1, SetTitleHeightFromAL
 17786                              <2>  jmp MenuInit_SetTitleHeightFromAL
 17787                              <2>  %elifidn %1, GetHighlightedItemToAX
 17788                              <2>  jmp MenuInit_GetHighlightedItemToAX
 17789                              <2>  %elifidn %1, SetTotalItemsFromAX
 17790                              <2>  jmp MenuInit_SetTotalItemsFromAX
 17791                              <2>  %elifidn %1, SetInformationHeightFromAL
 17792                              <2>  jmp MenuInit_SetInformationHeightFromAL
 17793                              <2>  %elifidn %1, SetTimeoutValueFromAX
 17794                              <2>  jmp MenuTime_SetSelectionTimeoutValueFromAX
 17795                              <2>  %else
 17796 00001FB1 BF[580B]            <2>  mov di, %1
 17797 00001FB4 E948E7              <2>  jmp Menu_FunctionFromDI
 17798                              <2>  %endif
 17799                              <1> 
 17800                              <1> ALIGN JUMP_ALIGN
 17801                              <1> .ModifyItemVisibility:
 17802 00001FB7 06                  <1> 	push	es
 17803 00001FB8 1E                  <1> 	push	ds
 17804                              <1> 	ePUSHA
 17805                              <2> %ifndef USE_186
 17806 00001FB9 50                  <2>  push ax
 17807 00001FBA 51                  <2>  push cx
 17808 00001FBB 52                  <2>  push dx
 17809 00001FBC 53                  <2>  push bx
 17810 00001FBD 54                  <2>  push sp
 17811 00001FBE 55                  <2>  push bp
 17812 00001FBF 56                  <2>  push si
 17813 00001FC0 57                  <2>  push di
 17814                              <2> 
 17815                              <2> %else
 17816                              <2>  pusha
 17817                              <2> %endif
 17818 00001FC1 E86101              <1> 	call	Menupage_GetActiveMenupageToDSDI
 17819 00001FC4 FF15                <1> 	call	[di+MENUPAGE.fnEnter]
 17820                              <1> 	ePOPA
 17821                              <2> %ifndef USE_186
 17822 00001FC6 5F                  <2>  pop di
 17823 00001FC7 5E                  <2>  pop si
 17824 00001FC8 5D                  <2>  pop bp
 17825 00001FC9 58                  <2>  pop ax
 17826 00001FCA 5B                  <2>  pop bx
 17827 00001FCB 5A                  <2>  pop dx
 17828 00001FCC 59                  <2>  pop cx
 17829 00001FCD 58                  <2>  pop ax
 17830                              <2> 
 17831                              <2> %else
 17832                              <2>  popa
 17833                              <2> %endif
 17834 00001FCE 1F                  <1> 	pop		ds
 17835 00001FCF 07                  <1> 	pop		es
 17836 00001FD0 C3                  <1> 	ret
 17837                              <1> 
 17838                              <1> 
 17839                              <1> ;--------------------------------------------------------------------
 17840                              <1> ; Menuitem_GetValueToAXfromMenuitemInDSSI
 17841                              <1> ;	Parameters:
 17842                              <1> ;		DS:SI:	Ptr to MENUITEM
 17843                              <1> ;	Returns:
 17844                              <1> ;		AX:		Menuitem value
 17845                              <1> ;	Corrupts registers:
 17846                              <1> ;		BX
 17847                              <1> ;--------------------------------------------------------------------
 17848                              <1> ALIGN JUMP_ALIGN
 17849                              <1> Menuitem_GetValueToAXfromMenuitemInDSSI:
 17850 00001FD1 06                  <1> 	push	es
 17851 00001FD2 57                  <1> 	push	di
 17852 00001FD3 53                  <1> 	push	bx
 17853 00001FD4 E83C00              <1> 	call	GetConfigurationBufferToESDIforMenuitemInDSSI
 17854 00001FD7 037C0C              <1> 	add		di, [si+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 17855 00001FDA 268B05              <1> 	mov		ax, [es:di]
 17856                              <1> 
 17857 00001FDD F6440A08            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_BYTEVALUE
 17858 00001FE1 7402                <1> 	jz		SHORT .NoConvertWordToByteValue
 17859 00001FE3 30E4                <1> 	xor		ah, ah				; conversion needs to happen before call to the reader,
 17860                              <1> 								; in case the reader unpacks the byte to a word
 17861                              <1> 
 17862                              <1> .NoConvertWordToByteValue:
 17863 00001FE5 8B5C18              <1> 	mov		bx, [si+MENUITEM.itemValue+ITEM_VALUE.fnValueReader]
 17864 00001FE8 85DB                <1> 	test	bx,bx
 17865 00001FEA 7402                <1> 	jz		SHORT .NoReader
 17866                              <1> 
 17867 00001FEC FFD3                <1> 	call	bx
 17868                              <1> 
 17869                              <1> .NoReader:
 17870 00001FEE 5B                  <1> 	pop		bx
 17871 00001FEF 5F                  <1> 	pop		di
 17872 00001FF0 07                  <1> 	pop		es
 17873                              <1> 
 17874 00001FF1 F6440A40            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_MASKVALUE
 17875 00001FF5 740B                <1> 	jz		SHORT .TestIfFlagValue
 17876                              <1> 
 17877 00001FF7 234416              <1> 	and		ax, [si+MENUITEM.itemValue+ITEM_VALUE.wValueBitmask]
 17878 00001FFA 51                  <1> 	push	cx
 17879 00001FFB 8A4C1C              <1> 	mov		cl, [si+MENUITEM.itemValue+ITEM_VALUE.bFieldPosition]
 17880 00001FFE D3E8                <1> 	shr		ax, cl
 17881 00002000 59                  <1> 	pop		cx
 17882 00002001 C3                  <1> 	ret
 17883                              <1> 
 17884                              <1> .TestIfFlagValue:
 17885 00002002 F6440A04            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_FLAGVALUE
 17886 00002006 740A                <1> 	jz		SHORT .Return
 17887                              <1> 
 17888 00002008 854416              <1> 	test	ax, [si+MENUITEM.itemValue+ITEM_VALUE.wValueBitmask]
 17889 0000200B B80200              <1> 	mov		ax, TRUE<<1		; Shift for lookup
 17890 0000200E 7502                <1> 	jnz		SHORT .Return
 17891 00002010 31C0                <1> 	xor		ax, ax
 17892                              <1> 
 17893                              <1> ALIGN JUMP_ALIGN, ret
 17894                              <1> .Return:
 17895 00002012 C3                  <1> 	ret
 17896                              <1> 
 17897                              <1> 
 17898                              <1> ;--------------------------------------------------------------------
 17899                              <1> ; GetConfigurationBufferToESDIforMenuitemInDSSI
 17900                              <1> ;	Parameters:
 17901                              <1> ;		DS:SI:	Ptr to MENUITEM
 17902                              <1> ;	Returns:
 17903                              <1> ;		ES:DI:	Ptr to configuration buffer
 17904                              <1> ;	Corrupts registers:
 17905                              <1> ;		Nothing
 17906                              <1> ;--------------------------------------------------------------------
 17907                              <1> ALIGN JUMP_ALIGN
 17908                              <1> GetConfigurationBufferToESDIforMenuitemInDSSI:
 17909 00002013 F6440A10            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_PROGRAMVAR
 17910 00002017 7503                <1> 	jnz		SHORT .ReturnCfgvarsInESDI
 17911 00002019 E91EF9              <1> 	jmp		Buffers_GetFileBufferToESDI
 17912                              <1> ALIGN JUMP_ALIGN
 17913                              <1> .ReturnCfgvarsInESDI:
 17914 0000201C 0E                  <1> 	push	cs
 17915 0000201D 07                  <1> 	pop		es
 17916 0000201E BF[C443]            <1> 	mov		di, g_cfgVars
 17917 00002021 C3                  <1> 	ret
 17918                                  %include "MenuitemPrint.asm"
 17919                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 17920                              <1> ; Description	:	Functions for printing MENUITEM name and value.
 17921                              <1> 
 17922                              <1> ;
 17923                              <1> ; XTIDE Universal BIOS and Associated Tools
 17924                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 17925                              <1> ;
 17926                              <1> ; This program is free software; you can redistribute it and/or modify
 17927                              <1> ; it under the terms of the GNU General Public License as published by
 17928                              <1> ; the Free Software Foundation; either version 2 of the License, or
 17929                              <1> ; (at your option) any later version.
 17930                              <1> ;
 17931                              <1> ; This program is distributed in the hope that it will be useful,
 17932                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 17933                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 17934                              <1> ; GNU General Public License for more details.
 17935                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 17936                              <1> ;
 17937                              <1> 
 17938                              <1> ; Section containing code
 17939                              <1> SECTION .text
 17940                              <1> 
 17941                              <1> ;--------------------------------------------------------------------
 17942                              <1> ; MenuitemPrint_PrintQuickInfoFromDSSI
 17943                              <1> ;	Parameters:
 17944                              <1> ;		DS:SI:	Ptr to MENUITEM
 17945                              <1> ;	Returns:
 17946                              <1> ;		Nothing
 17947                              <1> ;	Corrupts registers:
 17948                              <1> ;		AX, DI
 17949                              <1> ;--------------------------------------------------------------------
 17950                              <1> ALIGN JUMP_ALIGN
 17951                              <1> MenuitemPrint_PrintQuickInfoFromDSSI:
 17952 00002022 56                  <1> 	push	si
 17953                              <1> 
 17954 00002023 8B7406              <1> 	mov		si, [si+MENUITEM.szQuickInfo]
 17955                              <1> 	CALL_DISPLAY_LIBRARY PrintNullTerminatedStringFromCSSI
 17956                              <2>  %ifidn %1, PushDisplayContext
 17957                              <2>  call DisplayContext_Push
 17958                              <2>  %elifidn %1, PopDisplayContext
 17959                              <2>  call DisplayContext_Pop
 17960                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 17961                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 17962                              <2>  %else
 17963 00002026 BF[DF02]            <2>  mov di, %1
 17964 00002029 E841E0              <2>  call Display_FunctionFromDI
 17965                              <2>  %endif
 17966                              <1> 
 17967 0000202C 5E                  <1> 	pop		si
 17968 0000202D C3                  <1> 	ret
 17969                              <1> 
 17970                              <1> 
 17971                              <1> ;--------------------------------------------------------------------
 17972                              <1> ; MenuitemPrint_NameWithPossibleValueFromDSSI
 17973                              <1> ;	Parameters:
 17974                              <1> ;		DS:SI:	Ptr to MENUITEM
 17975                              <1> ;	Returns:
 17976                              <1> ;		Nothing
 17977                              <1> ;	Corrupts registers:
 17978                              <1> ;		AX, BX, DX, DI
 17979                              <1> ;--------------------------------------------------------------------
 17980                              <1> ALIGN JUMP_ALIGN
 17981                              <1> MenuitemPrint_NameWithPossibleValueFromDSSI:
 17982                              <1> 	eMOVZX	bx, [si+MENUITEM.bType]
 17983                              <2> %ifndef USE_386
 17984                              <2>  %ifidni %1, ax
 17985                              <2>  mov al, %2
 17986                              <2>  xor ah, ah
 17987                              <2>  %elifidni %1, bx
 17988 0000202E 8A5C0B              <2>  mov bl, %2
 17989 00002031 30FF                <2>  xor bh, bh
 17990                              <2>  %elifidni %1, cx
 17991                              <2>  mov cl, %2
 17992                              <2>  xor ch, ch
 17993                              <2>  %elifidni %1, dx
 17994                              <2>  mov dl, %2
 17995                              <2>  xor dh, dh
 17996                              <2>  %else
 17997                              <2>  push ax
 17998                              <2>  mov al, %2
 17999                              <2>  xor ah, ah
 18000                              <2>  xchg ax, %1
 18001                              <2>  pop ax
 18002                              <2>  %endif
 18003                              <2> 
 18004                              <2> %else
 18005                              <2>  movzx %1, %2
 18006                              <2> %endif
 18007 00002033 80FB04              <1> 	cmp		bl, TYPE_MENUITEM_ACTION
 18008 00002036 771E                <1> 	ja		SHORT .PrintNameAndValueFromDSSI
 18009                              <1> 	; Fall to .PrintNameWithoutValueFromDSSI
 18010                              <1> 
 18011                              <1> ;--------------------------------------------------------------------
 18012                              <1> ; .PrintNameWithoutValueFromDSSI
 18013                              <1> ;	Parameters:
 18014                              <1> ;		BX:		Menuitem type (MENUITEM.bType)
 18015                              <1> ;		DS:SI:	Ptr to MENUITEM
 18016                              <1> ;	Returns:
 18017                              <1> ;		Nothing
 18018                              <1> ;	Corrupts registers:
 18019                              <1> ;		AX, DI
 18020                              <1> ;--------------------------------------------------------------------
 18021                              <1> .PrintNameWithoutValueFromDSSI:
 18022 00002038 55                  <1> 	push	bp
 18023 00002039 56                  <1> 	push	si
 18024                              <1> 
 18025 0000203A 89E5                <1> 	mov		bp, sp				; BP = SP before pushing parameters
 18026 0000203C 2EFFB7[5020]        <1> 	push	WORD [cs:bx+.rgwMenuitemTypeCharacter]
 18027 00002041 FF7404              <1> 	push	WORD [si+MENUITEM.szName]
 18028 00002044 BE[A200]            <1> 	mov		si, g_szFormatItemWithoutValue
 18029                              <1> 	CALL_DISPLAY_LIBRARY FormatNullTerminatedStringFromCSSI
 18030                              <2>  %ifidn %1, PushDisplayContext
 18031                              <2>  call DisplayContext_Push
 18032                              <2>  %elifidn %1, PopDisplayContext
 18033                              <2>  call DisplayContext_Pop
 18034                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18035                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18036                              <2>  %else
 18037 00002047 BF[8500]            <2>  mov di, %1
 18038 0000204A E820E0              <2>  call Display_FunctionFromDI
 18039                              <2>  %endif
 18040                              <1> 
 18041 0000204D 5E                  <1> 	pop		si
 18042 0000204E 5D                  <1> 	pop		bp
 18043 0000204F C3                  <1> 	ret
 18044                              <1> .rgwMenuitemTypeCharacter:
 18045 00002050 2D00                <1> 	dw		'-'		; TYPE_MENUITEM_PAGEBACK
 18046 00002052 2B00                <1> 	dw		'+'		; TYPE_MENUITEM_PAGENEXT
 18047 00002054 2A00                <1> 	dw		'*'		; TYPE_MENUITEM_ACTION
 18048                              <1> 
 18049                              <1> 
 18050                              <1> ;--------------------------------------------------------------------
 18051                              <1> ; .PrintNameAndValueFromDSSI
 18052                              <1> ;	Parameters:
 18053                              <1> ;		DS:SI:	Ptr to MENUITEM
 18054                              <1> ;		SS:BP:	Ptr to buffer for item value
 18055                              <1> ;	Returns:
 18056                              <1> ;		Nothing
 18057                              <1> ;	Corrupts registers:
 18058                              <1> ;		AX, BX, DX, DI
 18059                              <1> ;--------------------------------------------------------------------
 18060                              <1> ALIGN JUMP_ALIGN
 18061                              <1> .PrintNameAndValueFromDSSI:
 18062                              <1> 	eENTER_STRUCT	MAX_VALUE_STRING_LENGTH+2	; +2 for NULL and alignment
 18063 00002056 55                  <2>  push bp
 18064 00002057 83EC0E              <2>  sub sp, %1
 18065 0000205A 89E5                <2>  mov bp, sp
 18066 0000205C E80800              <1> 	call	.FormatValueStringFromItemInDSSItoBufferInSSBP
 18067 0000205F E81500              <1> 	call	.FormatNameFromItemInDSSIandValueFromSSBP
 18068                              <1> 	eLEAVE_STRUCT	MAX_VALUE_STRING_LENGTH+2
 18069 00002062 83C40E              <2>  add sp, %1
 18070 00002065 5D                  <2>  pop bp
 18071 00002066 C3                  <1> 	ret
 18072                              <1> 
 18073                              <1> ;--------------------------------------------------------------------
 18074                              <1> ; .FormatValueStringFromItemInDSSItoBufferInSSBP
 18075                              <1> ;	Parameters:
 18076                              <1> ;		DS:SI:	Ptr to MENUITEM
 18077                              <1> ;		SS:BP:	Ptr to buffer for item value
 18078                              <1> ;	Returns:
 18079                              <1> ;		Nothing
 18080                              <1> ;	Corrupts registers:
 18081                              <1> ;		AX, BX, DX, DI
 18082                              <1> ;--------------------------------------------------------------------
 18083                              <1> ALIGN JUMP_ALIGN
 18084                              <1> .FormatValueStringFromItemInDSSItoBufferInSSBP:
 18085 00002067 06                  <1> 	push	es
 18086 00002068 E8FAF4              <1> 	call	Registers_CopySSBPtoESDI
 18087 0000206B B05B                <1> 	mov		al, '['
 18088 0000206D AA                  <1> 	stosb
 18089 0000206E FF5402              <1> 	call	[si+MENUITEM.fnFormatValue]
 18090 00002071 B85D00              <1> 	mov		ax, ']'
 18091 00002074 AB                  <1> 	stosw	; Also terminate with NULL
 18092 00002075 07                  <1> 	pop		es
 18093 00002076 C3                  <1> 	ret
 18094                              <1> 
 18095                              <1> ;--------------------------------------------------------------------
 18096                              <1> ; .FormatNameFromItemInDSSIandValueFromSSBP
 18097                              <1> ;	Parameters:
 18098                              <1> ;		DS:SI:	Ptr to MENUITEM
 18099                              <1> ;		SS:BP:	Ptr to value string
 18100                              <1> ;	Returns:
 18101                              <1> ;		Nothing
 18102                              <1> ;	Corrupts registers:
 18103                              <1> ;		AX, BX, DX
 18104                              <1> ;--------------------------------------------------------------------
 18105                              <1> ALIGN JUMP_ALIGN
 18106                              <1> .FormatNameFromItemInDSSIandValueFromSSBP:
 18107 00002077 56                  <1> 	push	si
 18108                              <1> 
 18109 00002078 89EB                <1> 	mov		bx, bp
 18110 0000207A 89E5                <1> 	mov		bp, sp				; BP = SP before pushing parameters
 18111 0000207C FF7404              <1> 	push	WORD [si+MENUITEM.szName]
 18112 0000207F 53                  <1> 	push	bx
 18113 00002080 16                  <1> 	push	ss
 18114 00002081 BE[A700]            <1> 	mov		si, g_szFormatItemNameWithValue
 18115                              <1> 	CALL_DISPLAY_LIBRARY FormatNullTerminatedStringFromCSSI
 18116                              <2>  %ifidn %1, PushDisplayContext
 18117                              <2>  call DisplayContext_Push
 18118                              <2>  %elifidn %1, PopDisplayContext
 18119                              <2>  call DisplayContext_Pop
 18120                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18121                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18122                              <2>  %else
 18123 00002084 BF[8500]            <2>  mov di, %1
 18124 00002087 E8E3DF              <2>  call Display_FunctionFromDI
 18125                              <2>  %endif
 18126                              <1> 
 18127 0000208A 89DD                <1> 	mov		bp, bx
 18128 0000208C 5E                  <1> 	pop		si
 18129 0000208D C3                  <1> 	ret
 18130                              <1> 
 18131                              <1> 
 18132                              <1> ;--------------------------------------------------------------------
 18133                              <1> ; MenuitemPrint_WriteLookupValueStringToBufferInESDIfromUnshiftedItemInDSSI
 18134                              <1> ; MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 18135                              <1> ;	Parameters:
 18136                              <1> ;		DS:SI:	Ptr to MENUITEM
 18137                              <1> ;		ES:DI:	Ptr to destination buffer
 18138                              <1> ;	Returns:
 18139                              <1> ;		DI:		Updated
 18140                              <1> ;	Corrupts registers:
 18141                              <1> ;		AX, BX, CX
 18142                              <1> ;--------------------------------------------------------------------
 18143                              <1> ALIGN JUMP_ALIGN
 18144                              <1> MenuitemPrint_WriteLookupValueStringToBufferInESDIfromUnshiftedItemInDSSI:
 18145 0000208E E840FF              <1> 	call	Menuitem_GetValueToAXfromMenuitemInDSSI
 18146 00002091 D1E0                <1> 	shl		ax, 1
 18147 00002093 EB03                <1> 	jmp		SHORT PrintLookupValueFromAXtoBufferInESDI
 18148                              <1> 
 18149                              <1> ALIGN JUMP_ALIGN
 18150                              <1> MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI:
 18151                              <1> MenuitemPrint_WriteLookupValueStringToBufferInESDIfromRawItemInDSSI:
 18152 00002095 E839FF              <1> 	call	Menuitem_GetValueToAXfromMenuitemInDSSI
 18153                              <1> 	; Fall to PrintLookupValueFromAXtoBufferInESDI
 18154                              <1> 
 18155                              <1> ;--------------------------------------------------------------------
 18156                              <1> ; MenuitemPrint_WriteLookupValueStringToBufferInESDIfromItemInDSSI
 18157                              <1> ;	Parameters:
 18158                              <1> ;		AX:		Value to print
 18159                              <1> ;		DS:SI:	Ptr to MENUITEM
 18160                              <1> ;		ES:DI:	Ptr to destination buffer
 18161                              <1> ;	Returns:
 18162                              <1> ;		DI:		Updated
 18163                              <1> ;	Corrupts registers:
 18164                              <1> ;		AX, BX, CX
 18165                              <1> ;--------------------------------------------------------------------
 18166                              <1> ALIGN JUMP_ALIGN
 18167                              <1> PrintLookupValueFromAXtoBufferInESDI:
 18168 00002098 56                  <1> 	push	si
 18169 00002099 F6440A20            <1> 	test	byte [si+MENUITEM.bFlags], FLG_MENUITEM_CHOICESTRINGS
 18170 0000209D 750B                <1> 	jnz		.lookupChoice
 18171                              <1> 
 18172 0000209F 034414              <1> 	add		ax, [si+MENUITEM.itemValue+ITEM_VALUE.rgszValueToStringLookup]
 18173 000020A2 93                  <1> 	xchg	bx, ax
 18174                              <1> .found:
 18175 000020A3 8B37                <1> 	mov		si, [bx]
 18176                              <1> .errorReturn:
 18177 000020A5 E8CEF3              <1> 	call	String_CopyDSSItoESDIandGetLengthToCX
 18178 000020A8 5E                  <1> 	pop		si
 18179 000020A9 C3                  <1> 	ret
 18180                              <1> 
 18181                              <1> ;
 18182                              <1> ; With FLG_MENUITEM_CHOICESTRINGS, the array at .rgszChoiceToStringLookup is based on the
 18183                              <1> ; Choice number (offset within .rgwChoiceToValueLookup) instead of the value stored.
 18184                              <1> ; Here, we scan the .rgwChoiceToValueLookup array until we find the value there, and then
 18185                              <1> ; use the same offset in .rgszChoiceToStringLookup.  If we don't find the value, we
 18186                              <1> ; return an "Error!" string instead.
 18187                              <1> ;
 18188                              <1> ; Note that the pointer array at .rgszChoiceToStringLookup must be NULL terminated.  Since the
 18189                              <1> ; value could be zero, we don't use the .rgwChoiceToValueLookup array to find the end.
 18190                              <1> ;
 18191                              <1> .lookupChoice:
 18192 000020AA 8B5C14              <1> 	mov		bx,[si+MENUITEM.itemValue+ITEM_VALUE.rgszChoiceToStringLookup]
 18193 000020AD 8B7412              <1> 	mov		si,[si+MENUITEM.itemValue+ITEM_VALUE.rgwChoiceToValueLookup]
 18194                              <1> 
 18195                              <1> .wordLoop:
 18196 000020B0 3B04                <1> 	cmp		ax,[si]
 18197 000020B2 74EF                <1> 	jz		.found
 18198 000020B4 43                  <1> 	inc		bx
 18199 000020B5 43                  <1> 	inc		bx
 18200 000020B6 46                  <1> 	inc		si
 18201 000020B7 46                  <1> 	inc		si
 18202 000020B8 833F00              <1> 	cmp		word [bx],0
 18203 000020BB 75F3                <1> 	jnz		.wordLoop
 18204                              <1> 
 18205 000020BD BE[083C]            <1> 	mov		si,g_szValueUnknownError
 18206 000020C0 EBE3                <1> 	jmp		.errorReturn
 18207                              <1> 
 18208                              <1> ;--------------------------------------------------------------------
 18209                              <1> ; MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 18210                              <1> ;	Parameters:
 18211                              <1> ;		DS:SI:	Ptr to MENUITEM
 18212                              <1> ;		ES:DI:	Ptr to destination buffer
 18213                              <1> ;	Returns:
 18214                              <1> ;		DI:		Updated
 18215                              <1> ;	Corrupts registers:
 18216                              <1> ;		AX, BX, CX
 18217                              <1> ;--------------------------------------------------------------------
 18218                              <1> ALIGN JUMP_ALIGN
 18219                              <1> MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI:
 18220 000020C2 89FB                <1> 	mov		bx, di
 18221 000020C4 B90C00              <1> 	mov		cx, MAX_VALUE_STRING_LENGTH
 18222                              <1> 	CALL_DISPLAY_LIBRARY PushDisplayContext
 18223                              <2>  %ifidn %1, PushDisplayContext
 18224 000020C7 E846E0              <2>  call DisplayContext_Push
 18225                              <2>  %elifidn %1, PopDisplayContext
 18226                              <2>  call DisplayContext_Pop
 18227                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18228                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18229                              <2>  %else
 18230                              <2>  mov di, %1
 18231                              <2>  call Display_FunctionFromDI
 18232                              <2>  %endif
 18233                              <1> 	CALL_DISPLAY_LIBRARY PrepareOffScreenBufferInESBXwithLengthInCX
 18234                              <2>  %ifidn %1, PushDisplayContext
 18235                              <2>  call DisplayContext_Push
 18236                              <2>  %elifidn %1, PopDisplayContext
 18237                              <2>  call DisplayContext_Pop
 18238                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18239 000020CA E88EE0              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18240                              <2>  %else
 18241                              <2>  mov di, %1
 18242                              <2>  call Display_FunctionFromDI
 18243                              <2>  %endif
 18244                              <1> 
 18245 000020CD E801FF              <1> 	call	Menuitem_GetValueToAXfromMenuitemInDSSI
 18246 000020D0 BB0A00              <1> 	mov		bx, 10
 18247                              <1> 	CALL_DISPLAY_LIBRARY PrintWordFromAXwithBaseInBX
 18248                              <2>  %ifidn %1, PushDisplayContext
 18249                              <2>  call DisplayContext_Push
 18250                              <2>  %elifidn %1, PopDisplayContext
 18251                              <2>  call DisplayContext_Pop
 18252                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18253                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18254                              <2>  %else
 18255 000020D3 BF[5C02]            <2>  mov di, %1
 18256 000020D6 E894DF              <2>  call Display_FunctionFromDI
 18257                              <2>  %endif
 18258 000020D9 EB1F                <1> 	jmp		SHORT MenuitemPrint_FinishPrintingUnsignedOrHexValue
 18259                              <1> 
 18260                              <1> ;--------------------------------------------------------------------
 18261                              <1> ; MenuitemPrint_WriteHexValueStringToBufferInESDIfromItemInDSSI
 18262                              <1> ;	Parameters:
 18263                              <1> ;		DS:SI:	Ptr to MENUITEM
 18264                              <1> ;		ES:DI:	Ptr to destination buffer
 18265                              <1> ;	Returns:
 18266                              <1> ;		DI:		Updated
 18267                              <1> ;	Corrupts registers:
 18268                              <1> ;		AX, BX, CX
 18269                              <1> ;--------------------------------------------------------------------
 18270                              <1> ALIGN JUMP_ALIGN
 18271                              <1> MenuitemPrint_WriteHexValueStringToBufferInESDIfromItemInDSSI:
 18272 000020DB 89FB                <1> 	mov		bx, di
 18273 000020DD B90C00              <1> 	mov		cx, MAX_VALUE_STRING_LENGTH
 18274                              <1> 	CALL_DISPLAY_LIBRARY PushDisplayContext
 18275                              <2>  %ifidn %1, PushDisplayContext
 18276 000020E0 E82DE0              <2>  call DisplayContext_Push
 18277                              <2>  %elifidn %1, PopDisplayContext
 18278                              <2>  call DisplayContext_Pop
 18279                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18280                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18281                              <2>  %else
 18282                              <2>  mov di, %1
 18283                              <2>  call Display_FunctionFromDI
 18284                              <2>  %endif
 18285                              <1> 	CALL_DISPLAY_LIBRARY PrepareOffScreenBufferInESBXwithLengthInCX
 18286                              <2>  %ifidn %1, PushDisplayContext
 18287                              <2>  call DisplayContext_Push
 18288                              <2>  %elifidn %1, PopDisplayContext
 18289                              <2>  call DisplayContext_Pop
 18290                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18291 000020E3 E875E0              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18292                              <2>  %else
 18293                              <2>  mov di, %1
 18294                              <2>  call Display_FunctionFromDI
 18295                              <2>  %endif
 18296                              <1> 
 18297 000020E6 E8E8FE              <1> 	call	Menuitem_GetValueToAXfromMenuitemInDSSI
 18298 000020E9 BB1000              <1> 	mov		bx, 16
 18299                              <1> 	CALL_DISPLAY_LIBRARY PrintWordFromAXwithBaseInBX
 18300                              <2>  %ifidn %1, PushDisplayContext
 18301                              <2>  call DisplayContext_Push
 18302                              <2>  %elifidn %1, PopDisplayContext
 18303                              <2>  call DisplayContext_Pop
 18304                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18305                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18306                              <2>  %else
 18307 000020EC BF[5C02]            <2>  mov di, %1
 18308 000020EF E87BDF              <2>  call Display_FunctionFromDI
 18309                              <2>  %endif
 18310 000020F2 B068                <1> 	mov		al, 'h'
 18311                              <1> 	CALL_DISPLAY_LIBRARY PrintCharacterFromAL
 18312                              <2>  %ifidn %1, PushDisplayContext
 18313                              <2>  call DisplayContext_Push
 18314                              <2>  %elifidn %1, PopDisplayContext
 18315                              <2>  call DisplayContext_Pop
 18316                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18317                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18318                              <2>  %else
 18319 000020F4 BF[EE02]            <2>  mov di, %1
 18320 000020F7 E873DF              <2>  call Display_FunctionFromDI
 18321                              <2>  %endif
 18322                              <1> ALIGN JUMP_ALIGN
 18323                              <1> MenuitemPrint_FinishPrintingUnsignedOrHexValue:
 18324                              <1> 	CALL_DISPLAY_LIBRARY GetCharacterPointerToBXAX
 18325                              <2>  %ifidn %1, PushDisplayContext
 18326                              <2>  call DisplayContext_Push
 18327                              <2>  %elifidn %1, PopDisplayContext
 18328                              <2>  call DisplayContext_Pop
 18329                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18330                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18331                              <2>  %else
 18332 000020FA BF[8101]            <2>  mov di, %1
 18333 000020FD E86DDF              <2>  call Display_FunctionFromDI
 18334                              <2>  %endif
 18335 00002100 93                  <1> 	xchg	bx, ax
 18336                              <1> 
 18337                              <1> 	CALL_DISPLAY_LIBRARY PopDisplayContext
 18338                              <2>  %ifidn %1, PushDisplayContext
 18339                              <2>  call DisplayContext_Push
 18340                              <2>  %elifidn %1, PopDisplayContext
 18341 00002101 E82FE0              <2>  call DisplayContext_Pop
 18342                              <2>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 18343                              <2>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 18344                              <2>  %else
 18345                              <2>  mov di, %1
 18346                              <2>  call Display_FunctionFromDI
 18347                              <2>  %endif
 18348 00002104 89DF                <1> 	mov		di, bx
 18349 00002106 C3                  <1> 	ret
 18350                              <1> 
 18351                              <1> 
 18352                              <1> ; Section containing initialized data
 18353                              <1> SECTION .data
 18354                              <1> 
 18355                              <1> ALIGN WORD_ALIGN
 18356                              <1> g_rgszValueToStringLookupForFlagBooleans:
 18357 00000018 [B100]              <1> 	dw		g_szNo
 18358 0000001A [B700]              <1> 	dw		g_szYes
 18359                                  %include "Menupage.asm"
 18360                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 18361                              <1> ; Description	:	Functions for accessing MENUPAGE structs.
 18362                              <1> 
 18363                              <1> ;
 18364                              <1> ; XTIDE Universal BIOS and Associated Tools
 18365                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 18366                              <1> ;
 18367                              <1> ; This program is free software; you can redistribute it and/or modify
 18368                              <1> ; it under the terms of the GNU General Public License as published by
 18369                              <1> ; the Free Software Foundation; either version 2 of the License, or
 18370                              <1> ; (at your option) any later version.
 18371                              <1> ;
 18372                              <1> ; This program is distributed in the hope that it will be useful,
 18373                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 18374                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 18375                              <1> ; GNU General Public License for more details.
 18376                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 18377                              <1> ;
 18378                              <1> 
 18379                              <1> ; Section containing code
 18380                              <1> SECTION .text
 18381                              <1> 
 18382                              <1> ;--------------------------------------------------------------------
 18383                              <1> ; Menupage_ChangeToNewMenupageInDSSI
 18384                              <1> ;	Parameters:
 18385                              <1> ;		DS:SI:	Ptr to new MENUPAGE
 18386                              <1> ;		SS:BP:	Menu handle
 18387                              <1> ;	Returns:
 18388                              <1> ;		Nothing
 18389                              <1> ;	Corrupts registers:
 18390                              <1> ;		AX, DI
 18391                              <1> ;--------------------------------------------------------------------
 18392                              <1> ALIGN JUMP_ALIGN
 18393                              <1> Menupage_ChangeToNewMenupageInDSSI:
 18394 00002107 89F7                <1> 	mov		di, si
 18395 00002109 E81400              <1> 	call	Menupage_SetActiveMenupageFromDSDI
 18396 0000210C E81D00              <1> 	call	Menupage_GetVisibleMenuitemsToAXfromDSDI
 18397                              <1> 	CALL_MENU_LIBRARY SetTotalItemsFromAX
 18398                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 18399                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 18400                              <2>  %elifidn %1, Close
 18401                              <2>  call MenuInit_CloseMenuWindow
 18402                              <2>  %elifidn %1, SetUserDataFromDSSI
 18403                              <2>  call MenuInit_SetUserDataFromDSSI
 18404                              <2>  %elifidn %1, GetUserDataToDSSI
 18405                              <2>  call MenuInit_GetUserDataToDSSI
 18406                              <2>  %elifidn %1, SetTitleHeightFromAL
 18407                              <2>  call MenuInit_SetTitleHeightFromAL
 18408                              <2>  %elifidn %1, GetHighlightedItemToAX
 18409                              <2>  call MenuInit_GetHighlightedItemToAX
 18410                              <2>  %elifidn %1, SetTotalItemsFromAX
 18411 0000210F E84DE8              <2>  call MenuInit_SetTotalItemsFromAX
 18412                              <2>  %elifidn %1, SetInformationHeightFromAL
 18413                              <2>  call MenuInit_SetInformationHeightFromAL
 18414                              <2>  %elifidn %1, SetTimeoutValueFromAX
 18415                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 18416                              <2>  %else
 18417                              <2>  mov di, %1
 18418                              <2>  call Menu_FunctionFromDI
 18419                              <2>  %endif
 18420 00002112 31C0                <1> 	xor		ax, ax
 18421                              <1> 	CALL_MENU_LIBRARY HighlightItemFromAX
 18422                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 18423                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 18424                              <2>  %elifidn %1, Close
 18425                              <2>  call MenuInit_CloseMenuWindow
 18426                              <2>  %elifidn %1, SetUserDataFromDSSI
 18427                              <2>  call MenuInit_SetUserDataFromDSSI
 18428                              <2>  %elifidn %1, GetUserDataToDSSI
 18429                              <2>  call MenuInit_GetUserDataToDSSI
 18430                              <2>  %elifidn %1, SetTitleHeightFromAL
 18431                              <2>  call MenuInit_SetTitleHeightFromAL
 18432                              <2>  %elifidn %1, GetHighlightedItemToAX
 18433                              <2>  call MenuInit_GetHighlightedItemToAX
 18434                              <2>  %elifidn %1, SetTotalItemsFromAX
 18435                              <2>  call MenuInit_SetTotalItemsFromAX
 18436                              <2>  %elifidn %1, SetInformationHeightFromAL
 18437                              <2>  call MenuInit_SetInformationHeightFromAL
 18438                              <2>  %elifidn %1, SetTimeoutValueFromAX
 18439                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 18440                              <2>  %else
 18441 00002114 BF[4D09]            <2>  mov di, %1
 18442 00002117 E8E5E5              <2>  call Menu_FunctionFromDI
 18443                              <2>  %endif
 18444                              <1> 	JMP_MENU_LIBRARY RefreshWindow
 18445                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 18446                              <2>  jmp MenuInit_CloseMenuIfExitEventAllows
 18447                              <2>  %elifidn %1, Close
 18448                              <2>  jmp MenuInit_CloseMenuWindow
 18449                              <2>  %elifidn %1, SetUserDataFromDSSI
 18450                              <2>  jmp MenuInit_SetUserDataFromDSSI
 18451                              <2>  %elifidn %1, GetUserDataToDSSI
 18452                              <2>  jmp MenuInit_GetUserDataToDSSI
 18453                              <2>  %elifidn %1, SetTitleHeightFromAL
 18454                              <2>  jmp MenuInit_SetTitleHeightFromAL
 18455                              <2>  %elifidn %1, GetHighlightedItemToAX
 18456                              <2>  jmp MenuInit_GetHighlightedItemToAX
 18457                              <2>  %elifidn %1, SetTotalItemsFromAX
 18458                              <2>  jmp MenuInit_SetTotalItemsFromAX
 18459                              <2>  %elifidn %1, SetInformationHeightFromAL
 18460                              <2>  jmp MenuInit_SetInformationHeightFromAL
 18461                              <2>  %elifidn %1, SetTimeoutValueFromAX
 18462                              <2>  jmp MenuTime_SetSelectionTimeoutValueFromAX
 18463                              <2>  %else
 18464 0000211A BF[3609]            <2>  mov di, %1
 18465 0000211D E9DFE5              <2>  jmp Menu_FunctionFromDI
 18466                              <2>  %endif
 18467                              <1> 
 18468                              <1> 
 18469                              <1> ;--------------------------------------------------------------------
 18470                              <1> ; SetActiveMenupageFromDSDI
 18471                              <1> ;	Parameters:
 18472                              <1> ;		DS:DI:	Ptr to MENUPAGE to set active
 18473                              <1> ;		SS:BP:	Menu handle
 18474                              <1> ;	Returns:
 18475                              <1> ;		Nothing
 18476                              <1> ;	Corrupts registers:
 18477                              <1> ;		Nothing
 18478                              <1> ;--------------------------------------------------------------------
 18479                              <1> ALIGN JUMP_ALIGN
 18480                              <1> Menupage_SetActiveMenupageFromDSDI:
 18481 00002120 893E[C443]          <1> 	mov		[g_cfgVars+CFGVARS.pMenupage], di
 18482 00002124 C3                  <1> 	ret
 18483                              <1> 
 18484                              <1> 
 18485                              <1> ;--------------------------------------------------------------------
 18486                              <1> ; Menupage_GetActiveMenupageToDSDI:
 18487                              <1> ;	Parameters:
 18488                              <1> ;		SS:BP:	Menu handle
 18489                              <1> ;	Returns:
 18490                              <1> ;		DS:DI:	Ptr to MENUPAGE
 18491                              <1> ;	Corrupts registers:
 18492                              <1> ;		Nothing
 18493                              <1> ;--------------------------------------------------------------------
 18494                              <1> ALIGN JUMP_ALIGN
 18495                              <1> Menupage_GetActiveMenupageToDSDI:
 18496 00002125 0E                  <1> 	push	cs
 18497 00002126 1F                  <1> 	pop		ds
 18498 00002127 8B3E[C443]          <1> 	mov		di, [g_cfgVars+CFGVARS.pMenupage]
 18499 0000212B C3                  <1> 	ret
 18500                              <1> 
 18501                              <1> 
 18502                              <1> ;--------------------------------------------------------------------
 18503                              <1> ; Menupage_GetVisibleMenuitemsToAXfromDSDI
 18504                              <1> ;	Parameters:
 18505                              <1> ;		DS:DI:	Ptr to MENUPAGE
 18506                              <1> ;	Returns:
 18507                              <1> ;		AX:		Number of visible MENUITEMs in MENUPAGE
 18508                              <1> ;	Corrupts registers:
 18509                              <1> ;		BX, CX
 18510                              <1> ;--------------------------------------------------------------------
 18511                              <1> ALIGN JUMP_ALIGN
 18512                              <1> Menupage_GetVisibleMenuitemsToAXfromDSDI:
 18513 0000212C 31C0                <1> 	xor		ax, ax
 18514 0000212E 8B4D04              <1> 	mov		cx, [di+MENUPAGE.wMenuitems]
 18515 00002131 8D5D06              <1> 	lea		bx, [di+MENUPAGE.rgMenuitem]
 18516                              <1> 
 18517                              <1> ALIGN JUMP_ALIGN
 18518                              <1> .CheckVisibilityFromNextMenuitem:
 18519 00002134 F6470A01            <1> 	test	BYTE [bx+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 18520 00002138 7401                <1> 	jz		SHORT .PrepareToLoop
 18521 0000213A 40                  <1> 	inc		ax
 18522                              <1> .PrepareToLoop:
 18523 0000213B 83C31D              <1> 	add		bx, BYTE MENUITEM_size
 18524 0000213E E2F4                <1> 	loop	.CheckVisibilityFromNextMenuitem
 18525 00002140 C3                  <1> 	ret
 18526                              <1> 
 18527                              <1> 
 18528                              <1> ;--------------------------------------------------------------------
 18529                              <1> ; Menupage_GetCXthVisibleMenuitemToDSSIfromDSDI
 18530                              <1> ;	Parameters:
 18531                              <1> ;		CX:		nth visible MENUITEM to find
 18532                              <1> ;		DS:DI:	Ptr to MENUPAGE
 18533                              <1> ;	Returns:
 18534                              <1> ;		DS:SI:	Ptr to CXth visible MENUITEM
 18535                              <1> ;		CF:		Set if MENUITEM found
 18536                              <1> ;				Cleared if MENUITEM not found
 18537                              <1> ;	Corrupts registers:
 18538                              <1> ;		AX, CX
 18539                              <1> ;--------------------------------------------------------------------
 18540                              <1> ALIGN JUMP_ALIGN
 18541                              <1> Menupage_GetCXthVisibleMenuitemToDSSIfromDSDI:
 18542 00002141 8B4504              <1> 	mov		ax, [di+MENUPAGE.wMenuitems]
 18543 00002144 39C1                <1> 	cmp		cx, ax
 18544 00002146 7313                <1> 	jae		SHORT .MenuitemNotFound
 18545 00002148 91                  <1> 	xchg	ax, cx
 18546 00002149 40                  <1> 	inc		ax
 18547 0000214A 8D7506              <1> 	lea		si, [di+MENUPAGE.rgMenuitem]
 18548                              <1> ALIGN JUMP_ALIGN
 18549                              <1> .CheckNextMenuitem:
 18550 0000214D F6440A01            <1> 	test	BYTE [si+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 18551 00002151 7403                <1> 	jz		SHORT .PrepareToLoop
 18552 00002153 48                  <1> 	dec		ax
 18553 00002154 7407                <1> 	jz		SHORT .MenuitemFound
 18554                              <1> .PrepareToLoop:
 18555 00002156 83C61D              <1> 	add		si, BYTE MENUITEM_size
 18556 00002159 E2F2                <1> 	loop	.CheckNextMenuitem
 18557                              <1> .MenuitemNotFound:
 18558 0000215B F8                  <1> 	clc
 18559 0000215C C3                  <1> 	ret
 18560                              <1> ALIGN JUMP_ALIGN
 18561                              <1> .MenuitemFound:
 18562 0000215D F9                  <1> 	stc
 18563 0000215E C3                  <1> 	ret
 18564                                  %include "Strings.asm"
 18565                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 18566                              <1> ; Description	:	All strings.
 18567                              <1> 
 18568                              <1> ;
 18569                              <1> ; XTIDE Universal BIOS and Associated Tools
 18570                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 18571                              <1> ;
 18572                              <1> ; This program is free software; you can redistribute it and/or modify
 18573                              <1> ; it under the terms of the GNU General Public License as published by
 18574                              <1> ; the Free Software Foundation; either version 2 of the License, or
 18575                              <1> ; (at your option) any later version.
 18576                              <1> ;
 18577                              <1> ; This program is distributed in the hope that it will be useful,
 18578                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 18579                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 18580                              <1> ; GNU General Public License for more details.
 18581                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 18582                              <1> ;
 18583                              <1> 
 18584                              <1> ; Modified by JJP for XT-CFv3 support, Mar-13
 18585                              <1> 
 18586                              <1> ; Section containing initialized data
 18587                              <1> SECTION .data
 18588                              <1> 
 18589                              <1> ; Menu title
 18590                              <1> g_szProgramTitle:
 18591 0000001C 436F6E666967757261- <1> 	db	"Configuration and Flashing program for XTIDE Universal BIOS v2.0.0.",LF,CR,NULL
 18592 00000025 74696F6E20616E6420- <1>
 18593 0000002E 466C617368696E6720- <1>
 18594 00000037 70726F6772616D2066- <1>
 18595 00000040 6F7220585449444520- <1>
 18596 00000049 556E6976657273616C- <1>
 18597 00000052 2042494F532076322E- <1>
 18598 0000005B 302E302E0A0D00      <1>
 18599 00000062 585449444532303300  <1> g_szXtideUniversalBiosSignature:	db	"XTIDE203",NULL
 18600 0000006B 42494F53206973206E- <1> g_szBiosIsNotLoaded:				db	"BIOS is not loaded!",NULL
 18601 00000074 6F74206C6F61646564- <1>
 18602 0000007D 2100                <1>
 18603 0000007F 454550524F4D00      <1> g_szEEPROM:							db	"EEPROM",NULL
 18604 00000086 203A2000            <1> g_szSourceAndTypeSeparator:			db	" : ",NULL
 18605 0000008A 556E6964656E746966- <1> g_szUnidentified:					db	"Unidentified",NULL
 18606 00000093 69656400            <1>
 18607 00000097 20B4                <1> g_szUnsaved:						db	" ",SINGLE_LEFT_HORIZONTAL_TO_VERTICAL,
 18608 00000099 556E7361766564C300  <1> 									db	"Unsaved",SINGLE_RIGHT_HORIZONTAL_TO_VERTICAL,NULL
 18609                              <1> 
 18610                              <1> ; Item formatting
 18611 000000A2 2563257300          <1> g_szFormatItemWithoutValue:			db	"%c%s",NULL
 18612 000000A7 25323573252D313053- <1> g_szFormatItemNameWithValue:		db	"%25s%-10S",NULL
 18613 000000B0 00                  <1>
 18614                              <1> 
 18615                              <1> 
 18616 000000B1 4E6F00              <1> g_szNo:								db	"No",NULL
 18617                              <1> g_szMultichoiceBooleanFlag:
 18618 000000B4 4E6F0A              <1> 									db	"No",LF
 18619 000000B7 59657300            <1> g_szYes:							db	"Yes",NULL
 18620                              <1> 
 18621                              <1> ; Exit messages
 18622 000000BB 4578697420746F2044- <1> g_szDlgExitToDos:		db	"Exit to DOS?",NULL
 18623 000000C4 4F533F00            <1>
 18624 000000C8 446F20796F75207761- <1> g_szDlgSaveChanges:		db	"Do you want to save changes to XTIDE Universal BIOS image file?",NULL
 18625 000000D1 6E7420746F20736176- <1>
 18626 000000DA 65206368616E676573- <1>
 18627 000000E3 20746F205854494445- <1>
 18628 000000EC 20556E697665727361- <1>
 18629 000000F5 6C2042494F5320696D- <1>
 18630 000000FE 6167652066696C653F- <1>
 18631 00000107 00                  <1>
 18632                              <1> 
 18633                              <1> 
 18634                              <1> ; Generic dialog strings
 18635 00000108 4E6F74696669636174- <1> g_szNotificationDialog:	db	"Notification.",NULL
 18636 00000111 696F6E2E00          <1>
 18637 00000116 4572726F722100      <1> g_szErrorDialog:		db	"Error!",NULL
 18638 0000011D 507265737320454E54- <1> g_szGenericDialogInfo:	db	"Press ENTER or ESC to close dialog.",NULL
 18639 00000126 4552206F7220455343- <1>
 18640 0000012F 20746F20636C6F7365- <1>
 18641 00000138 206469616C6F672E00  <1>
 18642                              <1> 
 18643                              <1> ; Flashing related strings
 18644 00000141 466C617368696E6720- <1> g_szFlashTitle:			db	"Flashing EEPROM, please wait.",NULL
 18645 0000014A 454550524F4D2C2070- <1>
 18646 00000153 6C6561736520776169- <1>
 18647 0000015C 742E00              <1>
 18648 0000015F 496D61676520697320- <1> g_szErrEepromTooSmall:	db	"Image is too large for selected EEPROM type!",NULL
 18649 00000168 746F6F206C61726765- <1>
 18650 00000171 20666F722073656C65- <1>
 18651 0000017A 637465642045455052- <1>
 18652 00000183 4F4D20747970652100  <1>
 18653 0000018C 54696D656F75742077- <1> g_szErrEepromPolling:	db	"Timeout when polling EEPROM.",LF
 18654 00000195 68656E20706F6C6C69- <1>
 18655 0000019E 6E6720454550524F4D- <1>
 18656 000001A7 2E0A                <1>
 18657 000001A9 454550524F4D207761- <1> 						db	"EEPROM was not flashed properly!",NULL
 18658 000001B2 73206E6F7420666C61- <1>
 18659 000001BB 736865642070726F70- <1>
 18660 000001C4 65726C792100        <1>
 18661 000001CA 454550524F4D206469- <1> g_szErrEepromVerify:	db	"EEPROM did not return the same byte that was written.",LF
 18662 000001D3 64206E6F7420726574- <1>
 18663 000001DC 75726E207468652073- <1>
 18664 000001E5 616D65206279746520- <1>
 18665 000001EE 746861742077617320- <1>
 18666 000001F7 7772697474656E2E0A  <1>
 18667 00000200 454550524F4D207761- <1> 						db	"EEPROM was not flashed properly!",NULL
 18668 00000209 73206E6F7420666C61- <1>
 18669 00000212 736865642070726F70- <1>
 18670 0000021B 65726C792100        <1>
 18671 00000221 454550524F4D207761- <1> g_szPCFlashSuccessful:	db	"EEPROM was written successfully.",LF
 18672 0000022A 73207772697474656E- <1>
 18673 00000233 207375636365737366- <1>
 18674 0000023C 756C6C792E0A        <1>
 18675 00000242 507265737320616E79- <1> 						db	"Press any key to reboot.",NULL
 18676 0000024B 206B657920746F2072- <1>
 18677 00000254 65626F6F742E00      <1>
 18678 0000025B 454550524F4D207761- <1> g_szForeignFlash:		db	"EEPROM was written successfully.",NULL
 18679 00000264 73207772697474656E- <1>
 18680 0000026D 207375636365737366- <1>
 18681 00000276 756C6C792E00        <1>
 18682                              <1> 
 18683                              <1> 
 18684                              <1> ; Strings for main menu
 18685 0000027C 4578697420746F2044- <1> g_szItemMainExitToDOS:	db	"Exit to DOS",NULL
 18686 00000285 4F5300              <1>
 18687 00000288 4C6F61642042494F53- <1> g_szItemMainLoadFile:	db	"Load BIOS from file",NULL
 18688 00000291 2066726F6D2066696C- <1>
 18689 0000029A 6500                <1>
 18690 0000029C 4C6F61642042494F53- <1> g_szItemMainLoadROM:	db	"Load BIOS from EEPROM",NULL
 18691 000002A5 2066726F6D20454550- <1>
 18692 000002AE 524F4D00            <1>
 18693 000002B2 4C6F6164206F6C6420- <1> g_szItemMainLoadStngs:	db	"Load old settings from EEPROM",NULL
 18694 000002BB 73657474696E677320- <1>
 18695 000002C4 66726F6D2045455052- <1>
 18696 000002CD 4F4D00              <1>
 18697 000002D0 436F6E666967757265- <1> g_szItemMainConfigure:	db	"Configure XTIDE Universal BIOS",NULL
 18698 000002D9 20585449444520556E- <1>
 18699 000002E2 6976657273616C2042- <1>
 18700 000002EB 494F5300            <1>
 18701 000002EF 466C61736820454550- <1> g_szItemMainFlash:		db	"Flash EEPROM",NULL
 18702 000002F8 524F4D00            <1>
 18703 000002FC 536176652042494F53- <1> g_szItemMainSave:		db	"Save BIOS back to original file",NULL
 18704 00000305 206261636B20746F20- <1>
 18705 0000030E 6F726967696E616C20- <1>
 18706 00000317 66696C6500          <1>
 18707 0000031C 436F70797269676874- <1> g_szItemMainLicense:	db  "Copyright and License Information",NULL
 18708 00000325 20616E64204C696365- <1>
 18709 0000032E 6E736520496E666F72- <1>
 18710 00000337 6D6174696F6E00      <1>
 18711 0000033E 576562204C696E6B73- <1> g_szItemMainHomePage:	db  "Web Links",NULL
 18712 00000347 00                  <1>
 18713                              <1> 
 18714 00000348 537563636573736675- <1> g_szDlgMainLoadROM:		db	"Successfully loaded XTIDE Universal BIOS from EEPROM.",NULL
 18715 00000351 6C6C79206C6F616465- <1>
 18716 0000035A 642058544944452055- <1>
 18717 00000363 6E6976657273616C20- <1>
 18718 0000036C 42494F532066726F6D- <1>
 18719 00000375 20454550524F4D2E00  <1>
 18720 0000037E 537563636573736675- <1> g_szDlgMainLoadStngs:	db	"Successfully loaded settings from EEPROM.",NULL
 18721 00000387 6C6C79206C6F616465- <1>
 18722 00000390 642073657474696E67- <1>
 18723 00000399 732066726F6D204545- <1>
 18724 000003A2 50524F4D2E00        <1>
 18725 000003A8 537563636573736675- <1> g_szDlgMainLoadFile:	db	"Successfully loaded file for flashing.",NULL
 18726 000003B1 6C6C79206C6F616465- <1>
 18727 000003BA 642066696C6520666F- <1>
 18728 000003C3 7220666C617368696E- <1>
 18729 000003CC 672E00              <1>
 18730 000003CF 537563636573736675- <1> g_szDlgMainSaveFile:	db	"Successfully saved XTIDE Universal BIOS to file.",NULL
 18731 000003D8 6C6C79207361766564- <1>
 18732 000003E1 20585449444520556E- <1>
 18733 000003EA 6976657273616C2042- <1>
 18734 000003F3 494F5320746F206669- <1>
 18735 000003FC 6C652E00            <1>
 18736 00000400 53656C656374656420- <1> g_szDlgMainFileTooBig:	db	"Selected file is too big to be loaded for flashing!",NULL
 18737 00000409 66696C652069732074- <1>
 18738 00000412 6F6F2062696720746F- <1>
 18739 0000041B 206265206C6F616465- <1>
 18740 00000424 6420666F7220666C61- <1>
 18741 0000042D 7368696E672100      <1>
 18742 00000434 4661696C656420746F- <1> g_szDlgMainLoadErr:		db	"Failed to load file!",NULL
 18743 0000043D 206C6F61642066696C- <1>
 18744 00000446 652100              <1>
 18745 00000449 4661696C656420746F- <1> g_szDlgMainSaveErr:		db	"Failed to save file!",NULL
 18746 00000452 20736176652066696C- <1>
 18747 0000045B 652100              <1>
 18748 0000045E 53656C656374206669- <1> g_szDlgFileTitle:		db	"Select file to be flashed.",NULL
 18749 00000467 6C6520746F20626520- <1>
 18750 00000470 666C61736865642E00  <1>
 18751 00000479 2A2E2A00            <1> g_szDlgFileFilter:		db	"*.*",NULL
 18752                              <1> 
 18753 0000047D 517569747320585449- <1> g_szNfoMainExitToDOS:	db	"Quits XTIDE Universal BIOS Configurator.",NULL
 18754 00000486 444520556E69766572- <1>
 18755 0000048F 73616C2042494F5320- <1>
 18756 00000498 436F6E666967757261- <1>
 18757 000004A1 746F722E00          <1>
 18758 000004A6 4C6F61642042494F53- <1> g_szNfoMainLoadFile:	db	"Load BIOS file to be configured or flashed.",NULL
 18759 000004AF 2066696C6520746F20- <1>
 18760 000004B8 626520636F6E666967- <1>
 18761 000004C1 75726564206F722066- <1>
 18762 000004CA 6C61736865642E00    <1>
 18763 000004D2 4C6F61642042494F53- <1> g_szNfoMainLoadROM:		db	"Load BIOS from EEPROM to be reconfigured.",NULL
 18764 000004DB 2066726F6D20454550- <1>
 18765 000004E4 524F4D20746F206265- <1>
 18766 000004ED 207265636F6E666967- <1>
 18767 000004F6 757265642E00        <1>
 18768 000004FC 4C6F6164206F6C6420- <1> g_szNfoMainLoadStngs:	db	"Load old XTIDE Universal BIOS settings from EEPROM.",NULL
 18769 00000505 585449444520556E69- <1>
 18770 0000050E 76657273616C204249- <1>
 18771 00000517 4F532073657474696E- <1>
 18772 00000520 67732066726F6D2045- <1>
 18773 00000529 4550524F4D2E00      <1>
 18774 00000530 436F6E666967757265- <1> g_szNfoMainConfigure:	db	"Configure XTIDE Universal BIOS settings.",NULL
 18775 00000539 20585449444520556E- <1>
 18776 00000542 6976657273616C2042- <1>
 18777 0000054B 494F53207365747469- <1>
 18778 00000554 6E67732E00          <1>
 18779 00000559 466C617368206C6F61- <1> g_szNfoMainFlash:		db	"Flash loaded BIOS image to EEPROM.",NULL
 18780 00000562 6465642042494F5320- <1>
 18781 0000056B 696D61676520746F20- <1>
 18782 00000574 454550524F4D2E00    <1>
 18783 0000057C 536176652042494F53- <1> g_szNfoMainSave:		db	"Save BIOS changes back to original file from which it was loaded.",NULL
 18784 00000585 206368616E67657320- <1>
 18785 0000058E 6261636B20746F206F- <1>
 18786 00000597 726967696E616C2066- <1>
 18787 000005A0 696C652066726F6D20- <1>
 18788 000005A9 776869636820697420- <1>
 18789 000005B2 776173206C6F616465- <1>
 18790 000005BB 642E00              <1>
 18791 000005BE 585449444520556E69- <1> g_szNfoMainLicense:		db	"XTIDE Universal BIOS and XTIDECFG Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team."
 18792 000005C7 76657273616C204249- <1>
 18793 000005D0 4F5320616E64205854- <1>
 18794 000005D9 49444543464720436F- <1>
 18795 000005E2 707972696768742028- <1>
 18796 000005EB 432920323030392D32- <1>
 18797 000005F4 30313020627920546F- <1>
 18798 000005FD 6D692054696C6C692C- <1>
 18799 00000606 20323031312D323031- <1>
 18800 0000060F 332062792058544944- <1>
 18801 00000618 4520556E6976657273- <1>
 18802 00000621 616C2042494F532054- <1>
 18803 0000062A 65616D2E            <1>
 18804 0000062E 2052656C6561736564- <1> 						db	" Released under GNU GPL v2, with ABSOLUTELY NO WARRANTY. Press ENTER for more details...",NULL
 18805 00000637 20756E64657220474E- <1>
 18806 00000640 552047504C2076322C- <1>
 18807 00000649 207769746820414253- <1>
 18808 00000652 4F4C5554454C59204E- <1>
 18809 0000065B 4F2057415252414E54- <1>
 18810 00000664 592E20507265737320- <1>
 18811 0000066D 454E54455220666F72- <1>
 18812 00000676 206D6F726520646574- <1>
 18813 0000067F 61696C732E2E2E00    <1>
 18814 00000687 566973697420687474- <1> g_szNfoMainHomePage:	db	"Visit http://code.google.com/p/ xtideuniversalbios (home page) and http://vintage-computer.com/ vcforum (support)",NULL
 18815 00000690 703A2F2F636F64652E- <1>
 18816 00000699 676F6F676C652E636F- <1>
 18817 000006A2 6D2F702F2078746964- <1>
 18818 000006AB 65756E697665727361- <1>
 18819 000006B4 6C62696F732028686F- <1>
 18820 000006BD 6D6520706167652920- <1>
 18821 000006C6 616E6420687474703A- <1>
 18822 000006CF 2F2F76696E74616765- <1>
 18823 000006D8 2D636F6D7075746572- <1>
 18824 000006E1 2E636F6D2F20766366- <1>
 18825 000006EA 6F72756D2028737570- <1>
 18826 000006F3 706F72742900        <1>
 18827                              <1> 
 18828 000006F9 <incbin>            <1> g_szHelpMainLicense:	incbin	"Main_License.txt"
 18829 000008CE 00                  <1> 						db	NULL
 18830                              <1> 
 18831                              <1> ; Strings for XTIDE Universal BIOS configuration menu
 18832 000008CF 4261636B20746F204D- <1> g_szItemCfgBackToMain:	db	"Back to Main Menu",NULL
 18833 000008D8 61696E204D656E7500  <1>
 18834 000008E1 5072696D6172792049- <1> g_szItemCfgIde1:		db	"Primary IDE Controller",NULL
 18835 000008EA 444520436F6E74726F- <1>
 18836 000008F3 6C6C657200          <1>
 18837 000008F8 5365636F6E64617279- <1> g_szItemCfgIde2:		db	"Secondary IDE Controller",NULL
 18838 00000901 2049444520436F6E74- <1>
 18839 0000090A 726F6C6C657200      <1>
 18840 00000911 546572746961727920- <1> g_szItemCfgIde3:		db	"Tertiary IDE Controller",NULL
 18841 0000091A 49444520436F6E7472- <1>
 18842 00000923 6F6C6C657200        <1>
 18843 00000929 5175617465726E6172- <1> g_szItemCfgIde4:		db	"Quaternary IDE Controller",NULL
 18844 00000932 792049444520436F6E- <1>
 18845 0000093B 74726F6C6C657200    <1>
 18846 00000943 426F6F742073657474- <1> g_szItemCfgBootMenu:	db	"Boot settings",NULL
 18847 0000094C 696E677300          <1>
 18848 00000951 4175746F20436F6E66- <1> g_szItemAutoConfigure:	db	"Auto Configure",NULL
 18849 0000095A 696775726500        <1>
 18850 00000960 46756C6C206F706572- <1> g_szItemCfgFullMode:	db	"Full operating mode",NULL
 18851 00000969 6174696E67206D6F64- <1>
 18852 00000972 6500                <1>
 18853 00000974 6B694220746F207374- <1> g_szItemCfgStealSize:	db	"kiB to steal from RAM",NULL
 18854 0000097D 65616C2066726F6D20- <1>
 18855 00000986 52414D00            <1>
 18856 0000098A 49444520636F6E7472- <1> g_szItemCfgIdeCnt:		db	"IDE controllers",NULL
 18857 00000993 6F6C6C65727300      <1>
 18858 0000099A 506F776572204D616E- <1> g_szItemCfgIdleTimeout:	db	"Power Management",NULL
 18859 000009A3 6167656D656E7400    <1>
 18860                              <1> 
 18861 000009AB 466F756E6420        <1> g_szDlgAutoConfigure:	db	"Found "
 18862 000009B1 78                  <1> g_bControllersDetected:	db	'x'				; Value stored directly here
 18863 000009B2 20636F6E74726F6C6C- <1> 						db	" controllers.",NULL
 18864 000009BB 6572732E00          <1>
 18865 000009C0 456E61626C65206675- <1> g_szDlgCfgFullMode:		db	"Enable full operating mode?",NULL
 18866 000009C9 6C6C206F7065726174- <1>
 18867 000009D2 696E67206D6F64653F- <1>
 18868 000009DB 00                  <1>
 18869 000009DC 486F77206D616E7920- <1> g_szDlgCfgStealSize:	db	"How many kiB of base memory to steal for XTIDE Universal BIOS variables (1...255)?",NULL
 18870 000009E5 6B6942206F66206261- <1>
 18871 000009EE 7365206D656D6F7279- <1>
 18872 000009F7 20746F20737465616C- <1>
 18873 00000A00 20666F722058544944- <1>
 18874 00000A09 4520556E6976657273- <1>
 18875 00000A12 616C2042494F532076- <1>
 18876 00000A1B 61726961626C657320- <1>
 18877 00000A24 28312E2E2E32353529- <1>
 18878 00000A2D 3F00                <1>
 18879 00000A2F 486F77206D616E7920- <1> g_szDlgCfgIdeCnt:		db	"How many IDE controllers to manage (1...4)?",NULL
 18880 00000A38 49444520636F6E7472- <1>
 18881 00000A41 6F6C6C65727320746F- <1>
 18882 00000A4A 206D616E6167652028- <1>
 18883 00000A53 312E2E2E34293F00    <1>
 18884 00000A5B 53656C656374207468- <1> g_szDlgCfgIdleTimeout:	db	"Select the amount of time before idling drives should enter standby mode.",NULL
 18885 00000A64 6520616D6F756E7420- <1>
 18886 00000A6D 6F662074696D652062- <1>
 18887 00000A76 65666F72652069646C- <1>
 18888 00000A7F 696E67206472697665- <1>
 18889 00000A88 732073686F756C6420- <1>
 18890 00000A91 656E74657220737461- <1>
 18891 00000A9A 6E646279206D6F6465- <1>
 18892 00000AA3 2E00                <1>
 18893                              <1> 
 18894 00000AA5 49444520636F6E7472- <1> g_szNfoCfgIde:			db	"IDE controller and drive configuration.",NULL
 18895 00000AAE 6F6C6C657220616E64- <1>
 18896 00000AB7 20647269766520636F- <1>
 18897 00000AC0 6E6669677572617469- <1>
 18898 00000AC9 6F6E2E00            <1>
 18899 00000ACD 426F6F7420636F6E66- <1> g_szNfoCfgBootMenu:		db	"Boot configuration.",NULL
 18900 00000AD6 696775726174696F6E- <1>
 18901 00000ADF 2E00                <1>
 18902 00000AE1 4175746F6D61746963- <1> g_szNfoAutoConfigure:	db	"Automatically Configure XTIDE Universal BIOS for this system.",NULL
 18903 00000AEA 616C6C7920436F6E66- <1>
 18904 00000AF3 696775726520585449- <1>
 18905 00000AFC 444520556E69766572- <1>
 18906 00000B05 73616C2042494F5320- <1>
 18907 00000B0E 666F72207468697320- <1>
 18908 00000B17 73797374656D2E00    <1>
 18909 00000B1F 46756C6C206D6F6465- <1> g_szNfoCfgFullMode:		db	"Full mode supports multiple controllers and has more features.",NULL
 18910 00000B28 20737570706F727473- <1>
 18911 00000B31 206D756C7469706C65- <1>
 18912 00000B3A 20636F6E74726F6C6C- <1>
 18913 00000B43 65727320616E642068- <1>
 18914 00000B4C 6173206D6F72652066- <1>
 18915 00000B55 656174757265732E00  <1>
 18916 00000B5E 486F77206D616E7920- <1> g_szNfoCfgStealSize:	db	"How many kiB's to steal from Conventional memory for XTIDE Universal BIOS variables.",NULL
 18917 00000B67 6B6942277320746F20- <1>
 18918 00000B70 737465616C2066726F- <1>
 18919 00000B79 6D20436F6E76656E74- <1>
 18920 00000B82 696F6E616C206D656D- <1>
 18921 00000B8B 6F727920666F722058- <1>
 18922 00000B94 5449444520556E6976- <1>
 18923 00000B9D 657273616C2042494F- <1>
 18924 00000BA6 53207661726961626C- <1>
 18925 00000BAF 65732E00            <1>
 18926 00000BB3 4E756D626572206F66- <1> g_szNfoCfgIdeCnt:		db	"Number of IDE controllers to manage.",NULL
 18927 00000BBC 2049444520636F6E74- <1>
 18928 00000BC5 726F6C6C6572732074- <1>
 18929 00000BCE 6F206D616E6167652E- <1>
 18930 00000BD7 00                  <1>
 18931 00000BD8 456E61626C6520506F- <1> g_szNfoCfgIdleTimeout:	db	"Enable Power Management to set the harddrive(s) to spin down after idling a certain amount of time.",NULL
 18932 00000BE1 776572204D616E6167- <1>
 18933 00000BEA 656D656E7420746F20- <1>
 18934 00000BF3 736574207468652068- <1>
 18935 00000BFC 617264647269766528- <1>
 18936 00000C05 732920746F20737069- <1>
 18937 00000C0E 6E20646F776E206166- <1>
 18938 00000C17 7465722069646C696E- <1>
 18939 00000C20 672061206365727461- <1>
 18940 00000C29 696E20616D6F756E74- <1>
 18941 00000C32 206F662074696D652E- <1>
 18942 00000C3B 00                  <1>
 18943                              <1> 
 18944 00000C3C 412053657269616C20- <1> g_szSerialMoved:		db  "A Serial Controller has been moved to the end of the Controller list."
 18945 00000C45 436F6E74726F6C6C65- <1>
 18946 00000C4E 722068617320626565- <1>
 18947 00000C57 6E206D6F7665642074- <1>
 18948 00000C60 6F2074686520656E64- <1>
 18949 00000C69 206F66207468652043- <1>
 18950 00000C72 6F6E74726F6C6C6572- <1>
 18951 00000C7B 206C6973742E        <1>
 18952 00000C81 204E6F206675727468- <1> 						db	" No further action is required. Serial Controllers must be placed at the end of the list.",NULL
 18953 00000C8A 657220616374696F6E- <1>
 18954 00000C93 206973207265717569- <1>
 18955 00000C9C 7265642E2053657269- <1>
 18956 00000CA5 616C20436F6E74726F- <1>
 18957 00000CAE 6C6C657273206D7573- <1>
 18958 00000CB7 7420626520706C6163- <1>
 18959 00000CC0 656420617420746865- <1>
 18960 00000CC9 20656E64206F662074- <1>
 18961 00000CD2 6865206C6973742E00  <1>
 18962                              <1> 
 18963 00000CDB <incbin>            <1> g_szHelpCfgFullMode:	incbin	"Configuration_FullMode.txt"
 18964 000010F0 00                  <1> 						db	NULL
 18965 000010F1 <incbin>            <1> g_szHelpCfgStealSize:	incbin	"Configuration_StealSize.txt"
 18966 000011DD 00                  <1> 						db	NULL
 18967 000011DE 54686973206F707469- <1> g_szHelpCfgIdleTimeout:	db	"This option enables the standby timer for all harddrives handled by XTIDE Universal BIOS,"
 18968 000011E7 6F6E20656E61626C65- <1>
 18969 000011F0 732074686520737461- <1>
 18970 000011F9 6E6462792074696D65- <1>
 18971 00001202 7220666F7220616C6C- <1>
 18972 0000120B 206861726464726976- <1>
 18973 00001214 65732068616E646C65- <1>
 18974 0000121D 642062792058544944- <1>
 18975 00001226 4520556E6976657273- <1>
 18976 0000122F 616C2042494F532C    <1>
 18977 00001237 20616C6C6F77696E67- <1> 						db	" allowing the drives to spin down after idling the selected amount of time."
 18978 00001240 207468652064726976- <1>
 18979 00001249 657320746F20737069- <1>
 18980 00001252 6E20646F776E206166- <1>
 18981 0000125B 7465722069646C696E- <1>
 18982 00001264 67207468652073656C- <1>
 18983 0000126D 656374656420616D6F- <1>
 18984 00001276 756E74206F66207469- <1>
 18985 0000127F 6D652E              <1>
 18986 00001282 204E6F746520746861- <1> 						db	" Note that this does not work with old drives that lack the Power Management feature set."
 18987 0000128B 74207468697320646F- <1>
 18988 00001294 6573206E6F7420776F- <1>
 18989 0000129D 726B2077697468206F- <1>
 18990 000012A6 6C6420647269766573- <1>
 18991 000012AF 2074686174206C6163- <1>
 18992 000012B8 6B2074686520506F77- <1>
 18993 000012C1 6572204D616E616765- <1>
 18994 000012CA 6D656E742066656174- <1>
 18995 000012D3 757265207365742E    <1>
 18996 000012DB 20416C736F206E6F74- <1> 						db	" Also note that timeouts less than 5 minutes may cause unnecessary wear on the drives and is not recommended"
 18997 000012E4 652074686174207469- <1>
 18998 000012ED 6D656F757473206C65- <1>
 18999 000012F6 7373207468616E2035- <1>
 19000 000012FF 206D696E7574657320- <1>
 19001 00001308 6D6179206361757365- <1>
 19002 00001311 20756E6E6563657373- <1>
 19003 0000131A 617279207765617220- <1>
 19004 00001323 6F6E20746865206472- <1>
 19005 0000132C 6976657320616E6420- <1>
 19006 00001335 6973206E6F74207265- <1>
 19007 0000133E 636F6D6D656E646564  <1>
 19008 00001347 202875736520666F72- <1> 						db	" (use for compatibility testing only).",NULL
 19009 00001350 20636F6D7061746962- <1>
 19010 00001359 696C69747920746573- <1>
 19011 00001362 74696E67206F6E6C79- <1>
 19012 0000136B 292E00              <1>
 19013                              <1> g_szMultichoiceIdleTimeout:
 19014 0000136E 44697361626C65640A  <1> 							db	"Disabled",LF
 19015 00001377 31206D0A            <1> 							db	"1 m",LF
 19016 0000137B 32206D0A            <1> 							db	"2 m",LF
 19017 0000137F 33206D0A            <1> 							db	"3 m",LF
 19018 00001383 34206D0A            <1> 							db	"4 m",LF
 19019 00001387 35206D0A            <1> 							db	"5 m",LF
 19020 0000138B 36206D0A            <1> 							db	"6 m",LF
 19021 0000138F 37206D0A            <1> 							db	"7 m",LF
 19022 00001393 38206D0A            <1> 							db	"8 m",LF
 19023 00001397 39206D0A            <1> 							db	"9 m",LF
 19024 0000139B 3130206D0A          <1> 							db	"10 m",LF
 19025 000013A0 3131206D0A          <1> 							db	"11 m",LF
 19026 000013A5 3132206D0A          <1> 							db	"12 m",LF
 19027 000013AA 3133206D0A          <1> 							db	"13 m",LF
 19028 000013AF 3134206D0A          <1> 							db	"14 m",LF
 19029 000013B4 3135206D0A          <1> 							db	"15 m",LF
 19030 000013B9 3136206D0A          <1> 							db	"16 m",LF
 19031 000013BE 3137206D0A          <1> 							db	"17 m",LF
 19032 000013C3 3138206D0A          <1> 							db	"18 m",LF
 19033 000013C8 3139206D0A          <1> 							db	"19 m",LF
 19034 000013CD 3230206D0A          <1> 							db	"20 m",LF
 19035 000013D2 3330206D0A          <1> 							db	"30 m",LF
 19036 000013D7 3120680A            <1> 							db	"1 h",LF
 19037 000013DB 312068203330206D0A  <1> 							db	"1 h 30 m",LF
 19038 000013E4 32206800            <1> g_szIdleTimeoutChoice24:	db	"2 h",NULL
 19039                              <1> 
 19040 000013E8 44697361626C656400  <1> g_szIdleTimeoutChoice0:		db	"Disabled",NULL
 19041 000013F1 31206D00            <1> g_szIdleTimeoutChoice1:		db	"1 m",NULL
 19042 000013F5 32206D00            <1> g_szIdleTimeoutChoice2:		db	"2 m",NULL
 19043 000013F9 33206D00            <1> g_szIdleTimeoutChoice3:		db	"3 m",NULL
 19044 000013FD 34206D00            <1> g_szIdleTimeoutChoice4:		db	"4 m",NULL
 19045 00001401 35206D00            <1> g_szIdleTimeoutChoice5:		db	"5 m",NULL
 19046 00001405 36206D00            <1> g_szIdleTimeoutChoice6:		db	"6 m",NULL
 19047 00001409 37206D00            <1> g_szIdleTimeoutChoice7:		db	"7 m",NULL
 19048 0000140D 38206D00            <1> g_szIdleTimeoutChoice8:		db	"8 m",NULL
 19049 00001411 39206D00            <1> g_szIdleTimeoutChoice9:		db	"9 m",NULL
 19050 00001415 3130206D00          <1> g_szIdleTimeoutChoice10:	db	"10 m",NULL
 19051 0000141A 3131206D00          <1> g_szIdleTimeoutChoice11:	db	"11 m",NULL
 19052 0000141F 3132206D00          <1> g_szIdleTimeoutChoice12:	db	"12 m",NULL
 19053 00001424 3133206D00          <1> g_szIdleTimeoutChoice13:	db	"13 m",NULL
 19054 00001429 3134206D00          <1> g_szIdleTimeoutChoice14:	db	"14 m",NULL
 19055 0000142E 3135206D00          <1> g_szIdleTimeoutChoice15:	db	"15 m",NULL
 19056 00001433 3136206D00          <1> g_szIdleTimeoutChoice16:	db	"16 m",NULL
 19057 00001438 3137206D00          <1> g_szIdleTimeoutChoice17:	db	"17 m",NULL
 19058 0000143D 3138206D00          <1> g_szIdleTimeoutChoice18:	db	"18 m",NULL
 19059 00001442 3139206D00          <1> g_szIdleTimeoutChoice19:	db	"19 m",NULL
 19060 00001447 3230206D00          <1> g_szIdleTimeoutChoice20:	db	"20 m",NULL
 19061 0000144C 3330206D00          <1> g_szIdleTimeoutChoice21:	db	"30 m",NULL
 19062 00001451 31206800            <1> g_szIdleTimeoutChoice22:	db	"1 h",NULL
 19063 00001455 312068203330206D00  <1> g_szIdleTimeoutChoice23:	db	"1 h 30 m",NULL
 19064                              <1> 
 19065                              <1> ; Strings for IDE Controller menu
 19066 0000145E 4261636B20746F2043- <1> g_szItemBackToCfgMenu:	db	"Back to Configuration Menu",NULL
 19067 00001467 6F6E66696775726174- <1>
 19068 00001470 696F6E204D656E7500  <1>
 19069 00001479 4D6173746572204472- <1> g_szItemIdeMaster:		db	"Master Drive",NULL
 19070 00001482 69766500            <1>
 19071 00001486 536C61766520447269- <1> g_szItemIdeSlave:		db	"Slave Drive",NULL
 19072 0000148F 766500              <1>
 19073 00001492 446576696365207479- <1> g_szItemIdeDevice:		db	"Device type",NULL
 19074 0000149B 706500              <1>
 19075 0000149E 426173652028636D64- <1> g_szItemIdeCmdPort:		db	"Base (cmd block) address",NULL
 19076 000014A7 20626C6F636B292061- <1>
 19077 000014B0 64647265737300      <1>
 19078 000014B7 436F6E74726F6C2062- <1> g_szItemIdeCtrlPort:	db	"Control block address",NULL
 19079 000014C0 6C6F636B2061646472- <1>
 19080 000014C9 65737300            <1>
 19081 000014CD 456E61626C6520696E- <1> g_szItemIdeEnIRQ:		db	"Enable interrupt",NULL
 19082 000014D6 7465727275707400    <1>
 19083 000014DE 49525100            <1> g_szItemIdeIRQ:			db	"IRQ",NULL
 19084 000014E2 434F4D20506F727400  <1> g_szItemSerialCOM:		db	"COM Port",NULL
 19085 000014EB 426175642052617465- <1> g_szItemSerialBaud:		db	"Baud Rate",NULL
 19086 000014F4 00                  <1>
 19087 000014F5 434F4D20506F727420- <1> g_szItemSerialPort:		db	"COM Port I/O address",NULL
 19088 000014FE 492F4F206164647265- <1>
 19089 00001507 737300              <1>
 19090 0000150A 434F4D20706F727400  <1> g_szItemIdeSerialComPort:	db	"COM port",NULL
 19091 00001513 426175642072617465- <1> g_szItemIdeSerialBaudRate:	db	"Baud rate",NULL
 19092 0000151C 00                  <1>
 19093                              <1> 
 19094 0000151D 53656C65637420636F- <1> g_szDlgDevice:			db	"Select controller type.",NULL
 19095 00001526 6E74726F6C6C657220- <1>
 19096 0000152F 747970652E00        <1>
 19097 00001535 456E74657220494445- <1> g_szDlgIdeCmdPort:		db	"Enter IDE command block (base port) address.",NULL
 19098 0000153E 20636F6D6D616E6420- <1>
 19099 00001547 626C6F636B20286261- <1>
 19100 00001550 736520706F72742920- <1>
 19101 00001559 616464726573732E00  <1>
 19102 00001562 456E74657220494445- <1> g_szDlgIdeCtrlPort:		db	"Enter IDE control block address (usually command block + 200h).",NULL
 19103 0000156B 20636F6E74726F6C20- <1>
 19104 00001574 626C6F636B20616464- <1>
 19105 0000157D 726573732028757375- <1>
 19106 00001586 616C6C7920636F6D6D- <1>
 19107 0000158F 616E6420626C6F636B- <1>
 19108 00001598 202B2032303068292E- <1>
 19109 000015A1 00                  <1>
 19110 000015A2 456E61626C6520696E- <1> g_szDlgIdeEnIRQ:		db	"Enable interrupt?",NULL
 19111 000015AB 746572727570743F00  <1>
 19112 000015B4 456E74657220495251- <1> g_szDlgIdeIRQ:			db	"Enter IRQ channel (2...7 for 8-bit controllers, 2...15 for any other controller).",NULL
 19113 000015BD 206368616E6E656C20- <1>
 19114 000015C6 28322E2E2E3720666F- <1>
 19115 000015CF 7220382D6269742063- <1>
 19116 000015D8 6F6E74726F6C6C6572- <1>
 19117 000015E1 732C20322E2E2E3135- <1>
 19118 000015EA 20666F7220616E7920- <1>
 19119 000015F3 6F7468657220636F6E- <1>
 19120 000015FC 74726F6C6C6572292E- <1>
 19121 00001605 00                  <1>
 19122                              <1> 
 19123 00001606 4261636B20746F2058- <1> g_szNfoIdeBackToCfgMenu:db	"Back to XTIDE Universal BIOS Configuration Menu.",NULL
 19124 0000160F 5449444520556E6976- <1>
 19125 00001618 657273616C2042494F- <1>
 19126 00001621 5320436F6E66696775- <1>
 19127 0000162A 726174696F6E204D65- <1>
 19128 00001633 6E752E00            <1>
 19129 00001637 53657474696E677320- <1> g_szNfoIdeMaster:		db	"Settings for Master Drive.",NULL
 19130 00001640 666F72204D61737465- <1>
 19131 00001649 722044726976652E00  <1>
 19132 00001652 53657474696E677320- <1> g_szNfoIdeSlave:		db	"Settings for Slave Drive.",NULL
 19133 0000165B 666F7220536C617665- <1>
 19134 00001664 2044726976652E00    <1>
 19135 0000166C 53656C65637420636F- <1> g_szNfoIdeDevice:		db	"Select controller device type.",NULL
 19136 00001675 6E74726F6C6C657220- <1>
 19137 0000167E 646576696365207479- <1>
 19138 00001687 70652E00            <1>
 19139 0000168B 49444520436F6E7472- <1> g_szNfoIdeCmdPort:		db	"IDE Controller Command Block (base port) address or segment address for JR-IDE/ISA.",NULL
 19140 00001694 6F6C6C657220436F6D- <1>
 19141 0000169D 6D616E6420426C6F63- <1>
 19142 000016A6 6B2028626173652070- <1>
 19143 000016AF 6F7274292061646472- <1>
 19144 000016B8 657373206F72207365- <1>
 19145 000016C1 676D656E7420616464- <1>
 19146 000016CA 7265737320666F7220- <1>
 19147 000016D3 4A522D4944452F4953- <1>
 19148 000016DC 412E00              <1>
 19149 000016DF 49444520436F6E7472- <1> g_szNfoIdeCtrlPort:		db	"IDE Controller Control Block address. Usually Cmd Block + 8 for XTIDE, and Cmd Block + 200h for ATA.",NULL
 19150 000016E8 6F6C6C657220436F6E- <1>
 19151 000016F1 74726F6C20426C6F63- <1>
 19152 000016FA 6B2061646472657373- <1>
 19153 00001703 2E20557375616C6C79- <1>
 19154 0000170C 20436D6420426C6F63- <1>
 19155 00001715 6B202B203820666F72- <1>
 19156 0000171E 2058544944452C2061- <1>
 19157 00001727 6E6420436D6420426C- <1>
 19158 00001730 6F636B202B20323030- <1>
 19159 00001739 6820666F7220415441- <1>
 19160 00001742 2E00                <1>
 19161 00001744 496E74657272757074- <1> g_szNfoIdeEnIRQ:		db	"Interrupt or polling mode.",NULL
 19162 0000174D 206F7220706F6C6C69- <1>
 19163 00001756 6E67206D6F64652E00  <1>
 19164 0000175F 495251206368616E6E- <1> g_szNfoIdeIRQ:			db	"IRQ channel to use.",NULL
 19165 00001768 656C20746F20757365- <1>
 19166 00001771 2E00                <1>
 19167 00001773 53656C656374206120- <1> g_szNfoIdeSerialCOM:	db	"Select a COM port by number.",NULL
 19168 0000177C 434F4D20706F727420- <1>
 19169 00001785 6279206E756D626572- <1>
 19170 0000178E 2E00                <1>
 19171 00001790 53656C656374207468- <1> g_szNfoIdeSerialBaud:	db	"Select the COM port's Baud Rate. The server must match this speed."
 19172 00001799 6520434F4D20706F72- <1>
 19173 000017A2 742773204261756420- <1>
 19174 000017AB 526174652E20546865- <1>
 19175 000017B4 20736572766572206D- <1>
 19176 000017BD 757374206D61746368- <1>
 19177 000017C6 207468697320737065- <1>
 19178 000017CF 65642E              <1>
 19179 000017D2 204E6F746520746861- <1> 						db	" Note that UART clock multipliers may impact the actual speed.",NULL
 19180 000017DB 74205541525420636C- <1>
 19181 000017E4 6F636B206D756C7469- <1>
 19182 000017ED 706C69657273206D61- <1>
 19183 000017F6 7920696D7061637420- <1>
 19184 000017FF 746865206163747561- <1>
 19185 00001808 6C2073706565642E00  <1>
 19186 00001811 53656C656374206120- <1> g_szNfoIdeSerialPort:	db	"Select a COM port by custom I/O port address. Any address is valid up to 3f8h, but must be on an 8-byte boundary.",NULL
 19187 0000181A 434F4D20706F727420- <1>
 19188 00001823 627920637573746F6D- <1>
 19189 0000182C 20492F4F20706F7274- <1>
 19190 00001835 20616464726573732E- <1>
 19191 0000183E 20416E792061646472- <1>
 19192 00001847 657373206973207661- <1>
 19193 00001850 6C696420757020746F- <1>
 19194 00001859 20336638682C206275- <1>
 19195 00001862 74206D757374206265- <1>
 19196 0000186B 206F6E20616E20382D- <1>
 19197 00001874 6279746520626F756E- <1>
 19198 0000187D 646172792E00        <1>
 19199                              <1> 
 19200 00001883 <incbin>            <1> g_szHelpIdeCmdPort:		incbin	"IDE_CommandPort.txt"
 19201 000019B9 00                  <1> 						db	NULL
 19202 000019BA <incbin>            <1> g_szHelpIdeCtrlPort:	incbin	"IDE_ControlPort.txt"
 19203 00001A94 00                  <1> 						db	NULL
 19204 00001A95 <incbin>            <1> g_szHelpIdeEnIRQ:		incbin	"IDE_EnableInterrupt.txt"
 19205 00001C8F 00                  <1> 						db	NULL
 19206 00001C90 <incbin>            <1> g_szHelpIdeIRQ:			incbin	"IDE_IRQ.txt"
 19207 00001D55 00                  <1> 						db	NULL
 19208 00001D56 <incbin>            <1> g_szHelpIdeSerialCOM:	incbin  "IDE_SerialCOM.txt"
 19209 00001E7C 00                  <1> 						db	NULL
 19210 00001E7D <incbin>            <1> g_szHelpIdeSerialPort:	incbin  "IDE_SerialPort.txt"
 19211 00001FA9 00                  <1> 						db  NULL
 19212 00001FAA <incbin>            <1> g_szHelpIdeSerialBaud:	incbin  "IDE_SerialBaud.txt"
 19213 000022AA 00                  <1> 						db  NULL
 19214                              <1> 
 19215                              <1> g_szMultichoiceCfgDevice:
 19216 000022AB 31362D626974204953- <1> 						db	"16-bit ISA/VLB/PCI IDE",LF
 19217 000022B4 412F564C422F504349- <1>
 19218 000022BD 204944450A          <1>
 19219 000022C2 33322D62697420564C- <1> 						db	"32-bit VLB/PCI IDE",LF
 19220 000022CB 422F50434920494445- <1>
 19221 000022D4 0A                  <1>
 19222 000022D5 31362D626974204953- <1> 						db	"16-bit ISA IDE in 8-bit mode",LF
 19223 000022DE 412049444520696E20- <1>
 19224 000022E7 382D626974206D6F64- <1>
 19225 000022F0 650A                <1>
 19226 000022F2 585449444520726576- <1> 						db	"XTIDE rev 1",LF
 19227 000022FB 20310A              <1>
 19228 000022FE 585449444520726576- <1> 						db	"XTIDE rev 2 or modded rev 1",LF
 19229 00002307 2032206F72206D6F64- <1>
 19230 00002310 646564207265762031- <1>
 19231 00002319 0A                  <1>
 19232 0000231A 58542D434620285049- <1> 						db	"XT-CF (PIO)",LF
 19233 00002323 4F290A              <1>
 19234 00002326 58542D434620285049- <1> 						db	"XT-CF (PIO w/BIU offload)",LF
 19235 0000232F 4F20772F424955206F- <1>
 19236 00002338 66666C6F6164290A    <1>
 19237 00002340 58542D434620444D41- <1> 						db	"XT-CF DMA (v3 only)",LF
 19238 00002349 20287633206F6E6C79- <1>
 19239 00002352 290A                <1>
 19240 00002354 4A522D4944452F4953- <1> 						db	"JR-IDE/ISA",LF
 19241 0000235D 410A                <1>
 19242 0000235F 53657269616C20706F- <1> 						db	"Serial port virtual device",NULL
 19243 00002368 727420766972747561- <1>
 19244 00002371 6C2064657669636500  <1>
 19245                              <1> 
 19246 0000237A 31362D62697400      <1> g_szValueCfgDevice16b:				db	"16-bit",NULL
 19247 00002381 33322D62697400      <1> g_szValueCfgDevice32b:				db	"32-bit",NULL
 19248 00002388 382D62697400        <1> g_szValueCfgDevice8b:				db	"8-bit",NULL
 19249 0000238E 585449444520723100  <1> g_szValueCfgDeviceRev1:				db	"XTIDE r1",NULL
 19250 00002397 585449444520723200  <1> g_szValueCfgDeviceRev2:				db	"XTIDE r2",NULL
 19251 000023A0 585443462050494F00  <1> g_szValueCfgDeviceXTCFPio8:			db	"XTCF PIO",NULL
 19252 000023A9 585443462042495500  <1> g_szValueCfgDeviceXTCFPio8WithBIUOffload:	db	"XTCF BIU",NULL
 19253 000023B2 5854434620444D4100  <1> g_szValueCfgDeviceXTCFDMA:			db	"XTCF DMA",NULL
 19254 000023BB 4A522D49534100      <1> g_szValueCfgDeviceJrIdeIsa:			db	"JR-ISA",NULL
 19255 000023C2 53657269616C00      <1> g_szValueCfgDeviceSerial:			db	"Serial",NULL
 19256                              <1> 
 19257                              <1> g_szSerialCOMChoice:
 19258 000023C9 434F4D31202D206164- <1> 						db 	"COM1 - address 3f8h",LF
 19259 000023D2 647265737320336638- <1>
 19260 000023DB 680A                <1>
 19261 000023DD 434F4D32202D206164- <1> 						db	"COM2 - address 2f8h",LF
 19262 000023E6 647265737320326638- <1>
 19263 000023EF 680A                <1>
 19264 000023F1 434F4D33202D206164- <1> 						db  	"COM3 - address 3e8h",LF
 19265 000023FA 647265737320336538- <1>
 19266 00002403 680A                <1>
 19267 00002405 434F4D34202D206164- <1> 						db  	"COM4 - address 2e8h",LF
 19268 0000240E 647265737320326538- <1>
 19269 00002417 680A                <1>
 19270 00002419 434F4D35202D206164- <1> 						db  	"COM5 - address 2f0h",LF
 19271 00002422 647265737320326630- <1>
 19272 0000242B 680A                <1>
 19273 0000242D 434F4D36202D206164- <1> 						db  	"COM6 - address 3e0h",LF
 19274 00002436 647265737320336530- <1>
 19275 0000243F 680A                <1>
 19276 00002441 434F4D37202D206164- <1> 						db	"COM7 - address 2e0h",LF
 19277 0000244A 647265737320326530- <1>
 19278 00002453 680A                <1>
 19279 00002455 434F4D38202D206164- <1> 						db	"COM8 - address 260h",LF
 19280 0000245E 647265737320323630- <1>
 19281 00002467 680A                <1>
 19282 00002469 434F4D39202D206164- <1> 						db	"COM9 - address 368h",LF
 19283 00002472 647265737320333638- <1>
 19284 0000247B 680A                <1>
 19285 0000247D 434F4D41202D206164- <1> 						db	"COMA - address 268h",LF
 19286 00002486 647265737320323638- <1>
 19287 0000248F 680A                <1>
 19288 00002491 434F4D42202D206164- <1> 						db	"COMB - address 360h",LF
 19289 0000249A 647265737320333630- <1>
 19290 000024A3 680A                <1>
 19291 000024A5 434F4D43202D206164- <1> 						db	"COMC - address 270h",LF
 19292 000024AE 647265737320323730- <1>
 19293 000024B7 680A                <1>
 19294 000024B9 434F4D78202D204375- <1> 						db  	"COMx - Custom address",NULL
 19295 000024C2 73746F6D2061646472- <1>
 19296 000024CB 65737300            <1>
 19297                              <1> 
 19298 000024CF 434F4D3100          <1> g_szValueCfgCOM1:		db		"COM1",NULL
 19299 000024D4 434F4D3200          <1> g_szValueCfgCOM2:		db		"COM2",NULL
 19300 000024D9 434F4D3300          <1> g_szValueCfgCOM3:		db		"COM3",NULL
 19301 000024DE 434F4D3400          <1> g_szValueCfgCOM4:		db		"COM4",NULL
 19302 000024E3 434F4D3500          <1> g_szValueCfgCOM5:		db		"COM5",NULL
 19303 000024E8 434F4D3600          <1> g_szValueCfgCOM6:		db		"COM6",NULL
 19304 000024ED 434F4D3700          <1> g_szValueCfgCOM7:		db		"COM7",NULL
 19305 000024F2 434F4D3800          <1> g_szValueCfgCOM8:		db		"COM8",NULL
 19306 000024F7 434F4D3900          <1> g_szValueCfgCOM9:		db		"COM9",NULL
 19307 000024FC 434F4D4100          <1> g_szValueCfgCOMA:		db		"COMA",NULL
 19308 00002501 434F4D4200          <1> g_szValueCfgCOMB:		db		"COMB",NULL
 19309 00002506 434F4D4300          <1> g_szValueCfgCOMC:		db		"COMC",NULL
 19310 0000250B 437573746F6D00      <1> g_szValueCfgCOMx:		db		"Custom",NULL
 19311                              <1> 
 19312                              <1> g_szSerialBaudChoice:
 19313 00002512 3131352E324B206261- <1> 						db  "115.2K baud",LF
 19314 0000251B 75640A              <1>
 19315 0000251E 35372E364B20626175- <1> 						db  "57.6K baud",LF
 19316 00002527 640A                <1>
 19317 00002529 33382E344B20626175- <1> 						db	"38.4K baud",LF
 19318 00002532 640A                <1>
 19319 00002534 32382E384B20626175- <1> 						db  "28.8K baud",LF
 19320 0000253D 640A                <1>
 19321 0000253F 31392E324B20626175- <1> 						db  "19.2K baud",LF
 19322 00002548 640A                <1>
 19323 0000254A 393630302062617564- <1> 						db	"9600 baud",LF
 19324 00002553 0A                  <1>
 19325 00002554 343830302062617564- <1> 						db  "4800 baud",LF
 19326 0000255D 0A                  <1>
 19327 0000255E 323430302062617564- <1> 						db  "2400 baud",NULL
 19328 00002567 00                  <1>
 19329                              <1> 
 19330 00002568 3131352E324B00      <1> g_szValueCfgBaud115_2:	db		"115.2K",NULL
 19331 0000256F 35372E364B00        <1> g_szValueCfgBaud57_6:	db		"57.6K",NULL
 19332 00002575 33382E344B00        <1> g_szValueCfgBaud38_4:	db		"38.4K",NULL
 19333 0000257B 32382E384B00        <1> g_szValueCfgBaud28_8:	db		"28.8K",NULL
 19334 00002581 31392E324B00        <1> g_szValueCfgBaud19_2:	db		"19.2K",NULL
 19335 00002587 3936303000          <1> g_szValueCfgBaud9600:	db		"9600",NULL
 19336 0000258C 3438303000          <1> g_szValueCfgBaud4800:	db		"4800",NULL
 19337 00002591 3234303000          <1> g_szValueCfgBaud2400:	db		"2400",NULL
 19338                              <1> 
 19339                              <1> 
 19340                              <1> 
 19341                              <1> ; Strings for DRVPARAMS menu
 19342 00002596 4261636B20746F2049- <1> g_szItemDrvBackToIde:	db	"Back to IDE Controller Menu",NULL
 19343 0000259F 444520436F6E74726F- <1>
 19344 000025A8 6C6C6572204D656E75- <1>
 19345 000025B1 00                  <1>
 19346 000025B2 426C6F636B204D6F64- <1> g_szItemDrvBlockMode:	db	"Block Mode Transfers",NULL
 19347 000025BB 65205472616E736665- <1>
 19348 000025C4 727300              <1>
 19349 000025C7 434853207472616E73- <1> g_szItemDrvXlateMode:	db	"CHS translation method",NULL
 19350 000025D0 6C6174696F6E206D65- <1>
 19351 000025D9 74686F6400          <1>
 19352 000025DE 496E7465726E616C20- <1> g_szItemDrvWriteCache:	db	"Internal Write Cache",NULL
 19353 000025E7 577269746520436163- <1>
 19354 000025F0 686500              <1>
 19355 000025F3 557365722073706563- <1> g_szItemDrvUserCHS:		db	"User specified CHS",NULL
 19356 000025FC 696669656420434853- <1>
 19357 00002605 00                  <1>
 19358 00002606 43796C696E64657273- <1> g_szItemDrvCyls:		db	"Cylinders",NULL
 19359 0000260F 00                  <1>
 19360 00002610 486561647300        <1> g_szItemDrvHeads:		db	"Heads",NULL
 19361 00002616 536563746F72732070- <1> g_szItemDrvSect:		db	"Sectors per track",NULL
 19362 0000261F 657220747261636B00  <1>
 19363 00002628 557365722073706563- <1> g_szItemDrvUserLBA:		db	"User specified LBA",NULL
 19364 00002631 6966696564204C4241- <1>
 19365 0000263A 00                  <1>
 19366 0000263B 4D696C6C696F6E7320- <1> g_szItemDrvLbaSectors:	db	"Millions of sectors",NULL
 19367 00002644 6F6620736563746F72- <1>
 19368 0000264D 7300                <1>
 19369                              <1> 
 19370 0000264F 456E61626C6520426C- <1> g_szDlgDrvBlockMode:	db	"Enable Block Mode Transfers?",NULL
 19371 00002658 6F636B204D6F646520- <1>
 19372 00002661 5472616E7366657273- <1>
 19373 0000266A 3F00                <1>
 19374 0000266C 53656C65637420502D- <1> g_szDlgDrvXlateMode:	db	"Select P-CHS to L-CHS translation method.",NULL
 19375 00002675 43485320746F204C2D- <1>
 19376 0000267E 434853207472616E73- <1>
 19377 00002687 6C6174696F6E206D65- <1>
 19378 00002690 74686F642E00        <1>
 19379 00002696 53656C656374206861- <1> g_szDlgDrvWriteCache:	db	"Select hard drive internal write cache settings.",NULL
 19380 0000269F 726420647269766520- <1>
 19381 000026A8 696E7465726E616C20- <1>
 19382 000026B1 777269746520636163- <1>
 19383 000026BA 68652073657474696E- <1>
 19384 000026C3 67732E00            <1>
 19385 000026C7 537065636966792028- <1> g_szDlgDrvUserCHS:		db	"Specify (P-)CHS parameters manually?",NULL
 19386 000026D0 502D29434853207061- <1>
 19387 000026D9 72616D657465727320- <1>
 19388 000026E2 6D616E75616C6C793F- <1>
 19389 000026EB 00                  <1>
 19390 000026EC 456E746572206E756D- <1> g_szDlgDrvCyls:			db	"Enter number of P-CHS cylinders (1...16383).",NULL
 19391 000026F5 626572206F6620502D- <1>
 19392 000026FE 4348532063796C696E- <1>
 19393 00002707 646572732028312E2E- <1>
 19394 00002710 2E3136333833292E00  <1>
 19395 00002719 456E746572206E756D- <1> g_szDlgDrvHeads:		db	"Enter number of P-CHS heads (1...16).",NULL
 19396 00002722 626572206F6620502D- <1>
 19397 0000272B 434853206865616473- <1>
 19398 00002734 2028312E2E2E313629- <1>
 19399 0000273D 2E00                <1>
 19400 0000273F 456E746572206E756D- <1> g_szDlgDrvSect:			db	"Enter number of sectors per track (1...63).",NULL
 19401 00002748 626572206F66207365- <1>
 19402 00002751 63746F727320706572- <1>
 19403 0000275A 20747261636B202831- <1>
 19404 00002763 2E2E2E3633292E00    <1>
 19405 0000276B 4C696D697420647269- <1> g_szDlgDrvUserLBA:		db	"Limit drive capacity?",NULL
 19406 00002774 766520636170616369- <1>
 19407 0000277D 74793F00            <1>
 19408 00002781 456E746572206D6178- <1> g_szDlgDrvLbaSectors:	db	"Enter maximum capacity in millions of sectors (16...256).",NULL
 19409 0000278A 696D756D2063617061- <1>
 19410 00002793 6369747920696E206D- <1>
 19411 0000279C 696C6C696F6E73206F- <1>
 19412 000027A5 6620736563746F7273- <1>
 19413 000027AE 202831362E2E2E3235- <1>
 19414 000027B7 36292E00            <1>
 19415                              <1> 
 19416 000027BB 5472616E7366657220- <1> g_szNfoDrvBlockMode:	db	"Transfer multiple sectors per data request.",NULL
 19417 000027C4 6D756C7469706C6520- <1>
 19418 000027CD 736563746F72732070- <1>
 19419 000027D6 657220646174612072- <1>
 19420 000027DF 6571756573742E00    <1>
 19421 000027E7 502D43485320746F20- <1> g_szNfoDrvXlateMode:	db	"P-CHS to L-CHS translation method.",NULL
 19422 000027F0 4C2D43485320747261- <1>
 19423 000027F9 6E736C6174696F6E20- <1>
 19424 00002802 6D6574686F642E00    <1>
 19425 0000280A 486172642044726976- <1> g_szNfoDrvWriteCache:	db	"Hard Drive Internal Write Cache settings (WARNING!).",NULL
 19426 00002813 6520496E7465726E61- <1>
 19427 0000281C 6C2057726974652043- <1>
 19428 00002825 616368652073657474- <1>
 19429 0000282E 696E67732028574152- <1>
 19430 00002837 4E494E4721292E00    <1>
 19431 0000283F 537065636966792028- <1> g_szNfoDrvUserCHS:		db	"Specify (P-)CHS parameters manually instead of autodetecting them.",NULL
 19432 00002848 502D29434853207061- <1>
 19433 00002851 72616D657465727320- <1>
 19434 0000285A 6D616E75616C6C7920- <1>
 19435 00002863 696E7374656164206F- <1>
 19436 0000286C 66206175746F646574- <1>
 19437 00002875 656374696E67207468- <1>
 19438 0000287E 656D2E00            <1>
 19439 00002882 4E756D626572206F66- <1> g_szNfoDrvCyls:			db	"Number of user specified P-CHS cylinders.",NULL
 19440 0000288B 207573657220737065- <1>
 19441 00002894 63696669656420502D- <1>
 19442 0000289D 4348532063796C696E- <1>
 19443 000028A6 646572732E00        <1>
 19444 000028AC 4E756D626572206F66- <1> g_szNfoDrvHeads:		db	"Number of user specified P-CHS heads.",NULL
 19445 000028B5 207573657220737065- <1>
 19446 000028BE 63696669656420502D- <1>
 19447 000028C7 434853206865616473- <1>
 19448 000028D0 2E00                <1>
 19449 000028D2 4E756D626572206F66- <1> g_szNfoDrvSect:			db	"Number of user specified P-CHS sectors per track.",NULL
 19450 000028DB 207573657220737065- <1>
 19451 000028E4 63696669656420502D- <1>
 19452 000028ED 43485320736563746F- <1>
 19453 000028F6 727320706572207472- <1>
 19454 000028FF 61636B2E00          <1>
 19455 00002904 4C696D697420647269- <1> g_szNfoDrvUserLBA:		db	"Limit drive capacity to X million sectors.",NULL
 19456 0000290D 766520636170616369- <1>
 19457 00002916 747920746F2058206D- <1>
 19458 0000291F 696C6C696F6E207365- <1>
 19459 00002928 63746F72732E00      <1>
 19460 0000292F 4D696C6C696F6E7320- <1> g_szNfoDrvLbaSectors:	db	"Millions of sectors (1024*1024). 1M sectors = 512 MiB.",NULL
 19461 00002938 6F6620736563746F72- <1>
 19462 00002941 732028313032342A31- <1>
 19463 0000294A 303234292E20314D20- <1>
 19464 00002953 736563746F7273203D- <1>
 19465 0000295C 20353132204D69422E- <1>
 19466 00002965 00                  <1>
 19467                              <1> 
 19468 00002966 <incbin>            <1> g_szHelpDrvBlockMode:	incbin	"Drive_BlockMode.txt"
 19469 00002A4C 00                  <1> 						db	NULL
 19470 00002A4D <incbin>            <1> g_szHelpDrvWriteCache:	incbin	"Drive_WriteCache.txt"
 19471 00002C79 00                  <1> 						db	NULL
 19472 00002C7A <incbin>            <1> g_szHelpDrvUserCHS:		incbin	"Drive_UserCHS.txt"
 19473 00002DEF 00                  <1> 						db	NULL
 19474 00002DF0 <incbin>            <1> g_szHelpDrvUserLBA:		incbin	"Drive_UserLBA.txt"
 19475 00002E93 00                  <1> 						db	NULL
 19476                              <1> 
 19477                              <1> g_szMultichoiseXlateMode:
 19478 00002E94 4E4F524D414C0A      <1> 						db	"NORMAL",LF
 19479 00002E9B 4C415247450A        <1> 						db	"LARGE",LF
 19480 00002EA1 417373697374656420- <1> 						db	"Assisted LBA",LF
 19481 00002EAA 4C42410A            <1>
 19482 00002EAE 4175746F6465746563- <1> 						db	"Autodetect",NULL
 19483 00002EB7 7400                <1>
 19484                              <1> 
 19485 00002EB9 4E4F524D414C00      <1> g_szValueDrvXlateNormal:db	"NORMAL",NULL
 19486 00002EC0 4C4152474500        <1> g_szValueDrvXlateLarge:	db	"LARGE",NULL
 19487 00002EC6 4C424100            <1> g_szValueDrvXlateLBA:	db	"LBA",NULL
 19488 00002ECA 4175746F00          <1> g_szValueDrvXlateAuto:	db	"Auto",NULL
 19489                              <1> 
 19490 00002ECF 447269766520446566- <1> g_szMultichoiseWrCache:	db	"Drive Default",LF
 19491 00002ED8 61756C740A          <1>
 19492 00002EDD 44697361626C652057- <1> 						db	"Disable Write Cache",LF
 19493 00002EE6 726974652043616368- <1>
 19494 00002EEF 650A                <1>
 19495 00002EF1 456E61626C65205772- <1> 						db	"Enable Write Cache",NULL
 19496 00002EFA 697465204361636865- <1>
 19497 00002F03 00                  <1>
 19498                              <1> 
 19499 00002F04 44697361626C656400  <1> g_szValueDrvWrCaDis:	db	"Disabled",NULL
 19500 00002F0D 456E61626C656400    <1> g_szValueDrvWrCaEn:		db	"Enabled",NULL
 19501                              <1> 
 19502                              <1> 
 19503                              <1> ; Strings for boot settings menu
 19504 00002F15 53656C656374696F6E- <1> g_szItemBootTimeout:	db	"Selection timeout",NULL
 19505 00002F1E 2074696D656F757400  <1>
 19506 00002F27 44656661756C742062- <1> g_szItemBootDrive:		db	"Default boot drive",NULL
 19507 00002F30 6F6F74206472697665- <1>
 19508 00002F39 00                  <1>
 19509 00002F3A 446973706C6179204D- <1> g_szItemBootDispMode:	db	"Display Mode",NULL
 19510 00002F43 6F646500            <1>
 19511 00002F47 4E756D626572206F66- <1> g_szItemBootFloppyDrvs:	db	"Number of Floppy Drives",NULL
 19512 00002F50 20466C6F7070792044- <1>
 19513 00002F59 726976657300        <1>
 19514 00002F5F 5363616E20666F7220- <1> g_szItemSerialDetect:	db	"Scan for Serial Drives",NULL
 19515 00002F68 53657269616C204472- <1>
 19516 00002F71 6976657300          <1>
 19517                              <1> 
 19518 00002F76 456E74657220426F6F- <1> g_szDlgBootTimeout:		db	"Enter Boot Menu selection timeout in BIOS timer ticks (2...1092).",NULL
 19519 00002F7F 74204D656E75207365- <1>
 19520 00002F88 6C656374696F6E2074- <1>
 19521 00002F91 696D656F757420696E- <1>
 19522 00002F9A 2042494F532074696D- <1>
 19523 00002FA3 6572207469636B7320- <1>
 19524 00002FAC 28322E2E2E31303932- <1>
 19525 00002FB5 292E00              <1>
 19526 00002FB8 456E74657220646566- <1> g_szDlgBootDrive:		db	"Enter default drive number (0xh for Floppy Drives, 8xh for Hard Disks).",NULL
 19527 00002FC1 61756C742064726976- <1>
 19528 00002FCA 65206E756D62657220- <1>
 19529 00002FD3 2830786820666F7220- <1>
 19530 00002FDC 466C6F707079204472- <1>
 19531 00002FE5 697665732C20387868- <1>
 19532 00002FEE 20666F722048617264- <1>
 19533 00002FF7 204469736B73292E00  <1>
 19534 00003000 53656C656374206469- <1> g_szDlgBootDispMode:	db	"Select display mode.",NULL
 19535 00003009 73706C6179206D6F64- <1>
 19536 00003012 652E00              <1>
 19537 00003015 53656C656374206E75- <1> g_szDlgBootFloppyDrvs:	db	"Select number of Floppy Drives in system.",NULL
 19538 0000301E 6D626572206F662046- <1>
 19539 00003027 6C6F70707920447269- <1>
 19540 00003030 76657320696E207379- <1>
 19541 00003039 7374656D2E00        <1>
 19542 0000303F 5363616E20666F7220- <1> g_szDlgSerialDetect:	db	"Scan for serial drives?",NULL
 19543 00003048 73657269616C206472- <1>
 19544 00003051 697665733F00        <1>
 19545                              <1> 
 19546 00003057 4D656E75206974656D- <1> g_szNfoBootTimeout:		db	"Menu item selection timeout in BIOS timer ticks. 1 tick = 54.9 ms.",NULL
 19547 00003060 2073656C656374696F- <1>
 19548 00003069 6E2074696D656F7574- <1>
 19549 00003072 20696E2042494F5320- <1>
 19550 0000307B 74696D657220746963- <1>
 19551 00003084 6B732E203120746963- <1>
 19552 0000308D 6B203D2035342E3920- <1>
 19553 00003096 6D732E00            <1>
 19554 0000309A 44656661756C742062- <1> g_szNfoBootDrive:		db	"Default boot drive.",NULL
 19555 000030A3 6F6F74206472697665- <1>
 19556 000030AC 2E00                <1>
 19557 000030AE 446973706C6179206D- <1> g_szNfoDispMode:		db	"Display mode to set when booting.",NULL
 19558 000030B7 6F646520746F207365- <1>
 19559 000030C0 74207768656E20626F- <1>
 19560 000030C9 6F74696E672E00      <1>
 19561 000030D0 4E756D626572206F66- <1> g_szNfoBootFloppyDrvs:	db	"Number of Floppy Drives in system.",NULL
 19562 000030D9 20466C6F7070792044- <1>
 19563 000030E2 726976657320696E20- <1>
 19564 000030EB 73797374656D2E00    <1>
 19565 000030F3 5363616E7320616C6C- <1> g_szNfoSerialDetect:	db	"Scans all standard COM ports for serial drives."
 19566 000030FC 207374616E64617264- <1>
 19567 00003105 20434F4D20706F7274- <1>
 19568 0000310E 7320666F7220736572- <1>
 19569 00003117 69616C206472697665- <1>
 19570 00003120 732E                <1>
 19571 00003122 20546869732063616E- <1> 						db	" This can also be invoked by holding down ALT at the end of normal drive detection.",NULL
 19572 0000312B 20616C736F20626520- <1>
 19573 00003134 696E766F6B65642062- <1>
 19574 0000313D 7920686F6C64696E67- <1>
 19575 00003146 20646F776E20414C54- <1>
 19576 0000314F 206174207468652065- <1>
 19577 00003158 6E64206F66206E6F72- <1>
 19578 00003161 6D616C206472697665- <1>
 19579 0000316A 20646574656374696F- <1>
 19580 00003173 6E2E00              <1>
 19581                              <1> 
 19582 00003176 <incbin>            <1> g_szHelpBootTimeout:	incbin	"Bootmenu_Timeout.txt"
 19583 0000323B 00                  <1> 						db	NULL
 19584 0000323C <incbin>            <1> g_szHelpBootDrive:		incbin	"Bootmenu_DefaultDrive.txt"
 19585 0000327C 00                  <1> 						db	NULL
 19586 0000327D <incbin>            <1> g_szHelpBootFloppyDrvs:	incbin	"Bootmenu_FloppyDrives.txt"
 19587 00003348 00                  <1> 						db	NULL
 19588 00003349 <incbin>            <1> g_szHelpSerialDetect:	incbin  "Bootmenu_SerialDetect.txt"
 19589 00003597 00                  <1> 						db  NULL
 19590                              <1> 
 19591                              <1> g_szMultichoiceBootDispMode:
 19592 00003598 44656661756C740A    <1> 						db	"Default",LF
 19593 000035A0 343078323520426C61- <1> 						db	"40x25 Black & White",LF
 19594 000035A9 636B20262057686974- <1>
 19595 000035B2 650A                <1>
 19596 000035B4 343078323520436F6C- <1> 						db	"40x25 Color",LF
 19597 000035BD 6F720A              <1>
 19598 000035C0 383078323520426C61- <1> 						db	"80x25 Black & White",LF
 19599 000035C9 636B20262057686974- <1>
 19600 000035D2 650A                <1>
 19601 000035D4 383078323520436F6C- <1> 						db	"80x25 Color",LF
 19602 000035DD 6F720A              <1>
 19603 000035E0 3830783235204D6F6E- <1> 						db	"80x25 Monochrome",NULL
 19604 000035E9 6F6368726F6D6500    <1>
 19605                              <1> 
 19606                              <1> g_szMultichoiceBootFloppyDrvs:
 19607 000035F1 4175746F6465746563- <1> 						db	"Autodetect",LF
 19608 000035FA 740A                <1>
 19609 000035FC 310A                <1> 						db	"1",LF
 19610 000035FE 320A                <1> 						db	"2",LF
 19611 00003600 330A                <1> 						db	"3",LF
 19612 00003602 3400                <1> 						db	"4",NULL
 19613                              <1> 
 19614 00003604 44656661756C7400    <1> g_szValueBootDispModeDefault:	db	"Default",NULL
 19615 0000360C 4257343000          <1> g_szValueBootDispModeBW40:		db	"BW40",NULL
 19616 00003611 434F343000          <1> g_szValueBootDispModeCO40:		db	"CO40",NULL
 19617 00003616 4257383000          <1> g_szValueBootDispModeBW80:		db	"BW80",NULL
 19618 0000361B 434F383000          <1> g_szValueBootDispModeCO80:		db	"CO80",NULL
 19619 00003620 4D6F6E6F00          <1> g_szValueBootDispModeMono:		db	"Mono",NULL
 19620                              <1> 
 19621 00003625 4175746F00          <1> g_szValueBootFloppyDrvsAuto:	db	"Auto",NULL
 19622 0000362A 3100                <1> g_szValueBootFloppyDrvs1:		db	"1",NULL
 19623 0000362C 3200                <1> g_szValueBootFloppyDrvs2:		db	"2",NULL
 19624 0000362E 3300                <1> g_szValueBootFloppyDrvs3:		db	"3",NULL
 19625 00003630 3400                <1> g_szValueBootFloppyDrvs4:		db	"4",NULL
 19626                              <1> 
 19627                              <1> 
 19628                              <1> ; Strings for Flash menu
 19629 00003632 537461727420666C61- <1> g_szItemFlashStart:		db	"Start flashing",NULL
 19630 0000363B 7368696E6700        <1>
 19631 00003641 454550524F4D207479- <1> g_szItemFlashEepromType:db	"EEPROM type",NULL
 19632 0000364A 706500              <1>
 19633 0000364D 53445020636F6D6D61- <1> g_szItemFlashSDP:		db	"SDP command",NULL
 19634 00003656 6E6400              <1>
 19635 00003659 454550524F4D206164- <1> g_szItemFlashAddr:		db	"EEPROM address",NULL
 19636 00003662 647265737300        <1>
 19637 00003668 506167652073697A65- <1> g_szItemFlashPageSize:	db	"Page size",NULL
 19638 00003671 00                  <1>
 19639 00003672 47656E657261746520- <1> g_szItemFlashChecksum:	db	"Generate checksum byte",NULL
 19640 0000367B 636865636B73756D20- <1>
 19641 00003684 6279746500          <1>
 19642                              <1> 
 19643 00003689 53656C656374204545- <1> g_szDlgFlashEepromType:	db	"Select EEPROM type.",NULL
 19644 00003692 50524F4D2074797065- <1>
 19645 0000369B 2E00                <1>
 19646 0000369D 53656C65637420536F- <1> g_szDlgFlashSDP:		db	"Select Software Data Protection command.",NULL
 19647 000036A6 667477617265204461- <1>
 19648 000036AF 74612050726F746563- <1>
 19649 000036B8 74696F6E20636F6D6D- <1>
 19650 000036C1 616E642E00          <1>
 19651 000036C6 456E74657220736567- <1> g_szDlgFlashAddr:		db	"Enter segment address where EEPROM is located.",NULL
 19652 000036CF 6D656E742061646472- <1>
 19653 000036D8 657373207768657265- <1>
 19654 000036E1 20454550524F4D2069- <1>
 19655 000036EA 73206C6F6361746564- <1>
 19656 000036F3 2E00                <1>
 19657 000036F5 53656C656374207772- <1> g_szDlgFlashPageSize:	db	"Select write page size.",NULL
 19658 000036FE 697465207061676520- <1>
 19659 00003707 73697A652E00        <1>
 19660 0000370D 47656E657261746520- <1> g_szDlgFlashChecksum:	db	"Generate checksum byte to the end of BIOS image?",NULL
 19661 00003716 636865636B73756D20- <1>
 19662 0000371F 6279746520746F2074- <1>
 19663 00003728 686520656E64206F66- <1>
 19664 00003731 2042494F5320696D61- <1>
 19665 0000373A 67653F00            <1>
 19666                              <1> 
 19667 0000373E 454550524F4D207479- <1> g_szNfoFlashEepromType:	db	"EEPROM type.",NULL
 19668 00003747 70652E00            <1>
 19669 0000374B 577269746573204249- <1> g_szNfoFlashStart:		db	"Writes BIOS to EEPROM.",NULL
 19670 00003754 4F5320746F20454550- <1>
 19671 0000375D 524F4D2E00          <1>
 19672 00003762 536F66747761726520- <1> g_szNfoFlashSDP:		db	"Software Data Protection command.",NULL
 19673 0000376B 446174612050726F74- <1>
 19674 00003774 656374696F6E20636F- <1>
 19675 0000377D 6D6D616E642E00      <1>
 19676 00003784 416464726573732028- <1> g_szNfoFlashAddr:		db	"Address (segment) where EEPROM is located.",NULL
 19677 0000378D 7365676D656E742920- <1>
 19678 00003796 776865726520454550- <1>
 19679 0000379F 524F4D206973206C6F- <1>
 19680 000037A8 63617465642E00      <1>
 19681 000037AF 4E756D626572206F66- <1> g_szNfoFlashPageSize:	db	"Number of bytes to write before delay.",NULL
 19682 000037B8 20627974657320746F- <1>
 19683 000037C1 207772697465206265- <1>
 19684 000037CA 666F72652064656C61- <1>
 19685 000037D3 792E00              <1>
 19686 000037D6 47656E657261746520- <1> g_szNfoFlashChecksum:	db	"Generate checksum byte to the end of BIOS image.",NULL
 19687 000037DF 636865636B73756D20- <1>
 19688 000037E8 6279746520746F2074- <1>
 19689 000037F1 686520656E64206F66- <1>
 19690 000037FA 2042494F5320696D61- <1>
 19691 00003803 67652E00            <1>
 19692                              <1> 
 19693 00003807 <incbin>            <1> g_szHelpFlashSDP:		incbin	"Flash_SdpCommand.txt"
 19694 00003942 00                  <1> 						db	NULL
 19695 00003943 <incbin>            <1> g_szHelpFlashPageSize:	incbin	"Flash_PageSize.txt"
 19696 00003A4B 00                  <1> 						db	NULL
 19697 00003A4C <incbin>            <1> g_szHelpFlashChecksum:	incbin	"Flash_Checksum.txt"
 19698 00003AFB 00                  <1> 						db	NULL
 19699                              <1> 
 19700                              <1> g_szMultichoiceEepromType:
 19701 00003AFC 32383136202832206B- <1> 						db	"2816 (2 kiB)",LF
 19702 00003B05 6942290A            <1>
 19703 00003B09 32383634202838206B- <1> 						db	"2864 (8 kiB)",LF
 19704 00003B12 6942290A            <1>
 19705 00003B16 32383634206D6F6420- <1> 						db	"2864 mod (8 kiB)",LF
 19706 00003B1F 2838206B6942290A    <1>
 19707 00003B27 323832353620283332- <1> 						db	"28256 (32 kiB)",LF
 19708 00003B30 206B6942290A        <1>
 19709 00003B36 323835313220283634- <1> 						db	"28512 (64 kiB)",NULL
 19710 00003B3F 206B69422900        <1>
 19711 00003B45 3238313600          <1> g_szValueFlash2816:		db	"2816",NULL
 19712 00003B4A 3238363400          <1> g_szValueFlash2864:		db	"2864",NULL
 19713 00003B4F 323836346D6F6400    <1> g_szValueFlash2864Mod:	db	"2864mod",NULL
 19714 00003B57 323832353600        <1> g_szValueFlash28256:	db	"28256",NULL
 19715 00003B5D 323835313200        <1> g_szValueFlash28512:	db	"28512",NULL
 19716                              <1> 
 19717                              <1> g_szMultichoiceSdpCommand:
 19718 00003B63 4E6F6E650A          <1> 						db	"None",LF
 19719 00003B68 456E61626C650A      <1> 						db	"Enable",LF
 19720 00003B6F 44697361626C6500    <1> g_szValueFlashDisable:	db	"Disable",NULL
 19721 00003B77 4E6F6E6500          <1> g_szValueFlashNone:		db	"None",NULL
 19722 00003B7C 456E61626C6500      <1> g_szValueFlashEnable:	db	"Enable",NULL
 19723                              <1> 
 19724                              <1> g_szMultichoicePageSize:
 19725 00003B83 3120627974650A      <1> 						db	"1 byte",LF
 19726 00003B8A 322062797465730A    <1> 						db	"2 bytes",LF
 19727 00003B92 342062797465730A    <1> 						db	"4 bytes",LF
 19728 00003B9A 382062797465730A    <1> 						db	"8 bytes",LF
 19729 00003BA2 31362062797465730A  <1> 						db	"16 bytes",LF
 19730 00003BAB 33322062797465730A  <1> 						db	"32 bytes",LF
 19731 00003BB4 363420627974657300  <1> g_szValueFlash64bytes:	db	"64 bytes",NULL
 19732 00003BBD 31206279746500      <1> g_szValueFlash1byte:	db	"1 byte",NULL
 19733 00003BC4 3220627974657300    <1> g_szValueFlash2bytes:	db	"2 bytes",NULL
 19734 00003BCC 3420627974657300    <1> g_szValueFlash4bytes:	db	"4 bytes",NULL
 19735 00003BD4 3820627974657300    <1> g_szValueFlash8bytes:	db	"8 bytes",NULL
 19736 00003BDC 313620627974657300  <1> g_szValueFlash16bytes:	db	"16 bytes",NULL
 19737 00003BE5 333220627974657300  <1> g_szValueFlash32bytes:	db	"32 bytes",NULL
 19738                              <1> 
 19739 00003BEE C8B5254153656C6563- <1> g_szSelectionTimeout:	db	DOUBLE_BOTTOM_LEFT_CORNER,DOUBLE_LEFT_HORIZONTAL_TO_SINGLE_VERTICAL,"%ASelection in %2u s",NULL
 19740 00003BF7 74696F6E20696E2025- <1>
 19741 00003C00 3275207300          <1>
 19742                              <1> 
 19743 00003C05 2D2000              <1> g_szDashForZero:		db	"- ",NULL
 19744                              <1> 
 19745 00003C08 4572726F722100      <1> g_szValueUnknownError:	db	"Error!",NULL
 19746                              <1> 
 19747                                  
 19748                                  %include "BootMenuSettingsMenu.asm"
 19749                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 19750                              <1> ; Description	:	"Boot Menu Settings" menu structs and functions.
 19751                              <1> 
 19752                              <1> ;
 19753                              <1> ; XTIDE Universal BIOS and Associated Tools
 19754                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 19755                              <1> ;
 19756                              <1> ; This program is free software; you can redistribute it and/or modify
 19757                              <1> ; it under the terms of the GNU General Public License as published by
 19758                              <1> ; the Free Software Foundation; either version 2 of the License, or
 19759                              <1> ; (at your option) any later version.
 19760                              <1> ;
 19761                              <1> ; This program is distributed in the hope that it will be useful,
 19762                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 19763                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 19764                              <1> ; GNU General Public License for more details.
 19765                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 19766                              <1> ;
 19767                              <1> 
 19768                              <1> ; Section containing initialized data
 19769                              <1> SECTION .data
 19770                              <1> 
 19771                              <1> ALIGN WORD_ALIGN
 19772                              <1> g_MenupageForBootMenuSettingsMenu:
 19773                              <1> istruc MENUPAGE
 19774 00003C0F [5F21]              <1> 	at	MENUPAGE.fnEnter,			dw	BootMenuSettingsMenu_EnterMenuOrModifyItemVisibility
 19775 00003C11 [A421]              <1> 	at	MENUPAGE.fnBack,			dw	ConfigurationMenu_EnterMenuOrModifyItemVisibility
 19776 00003C13 0600                <1> 	at	MENUPAGE.wMenuitems,		dw	6
 19777                              <1> iend
 19778                              <1> 
 19779                              <1> g_MenuitemBootMnuStngsBackToConfigurationMenu:
 19780                              <1> istruc MENUITEM
 19781 00003C15 [A421]              <1> 	at	MENUITEM.fnActivate,		dw	ConfigurationMenu_EnterMenuOrModifyItemVisibility
 19782 00003C17 00<rept>[5E14]      <1> 	at	MENUITEM.szName,			dw	g_szItemBackToCfgMenu
 19783 00003C1B [0616]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeBackToCfgMenu
 19784 00003C1D [0616]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoIdeBackToCfgMenu
 19785 00003C1F 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 19786 00003C20 00                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGEBACK
 19787 00003C21 00<rept>            <1> iend
 19788                              <1> 
 19789                              <1> g_MenuitemBootMnuStngsDisplayMode:
 19790                              <1> istruc MENUITEM
 19791 00003C32 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 19792 00003C34 [8E20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromUnshiftedItemInDSSI
 19793 00003C36 [3A2F]              <1> 	at	MENUITEM.szName,			dw	g_szItemBootDispMode
 19794 00003C38 [AE30]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDispMode
 19795 00003C3A [AE30]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoDispMode
 19796 00003C3C 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 19797 00003C3D 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 19798 00003C3E 4800                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.wDisplayMode
 19799 00003C40 [0030]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgBootDispMode
 19800 00003C42 [9835]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBootDispMode
 19801 00003C44 [C73C]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForDisplayModes
 19802 00003C46 [D33C]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForDisplayModes
 19803 00003C48 00<rept>            <1> iend
 19804                              <1> 
 19805                              <1> g_MenuitemBootMnuStngsFloppyDrives:
 19806                              <1> istruc MENUITEM
 19807 00003C4F [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 19808 00003C51 [8E20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromUnshiftedItemInDSSI
 19809 00003C53 [472F]              <1> 	at	MENUITEM.szName,			dw	g_szItemBootFloppyDrvs
 19810 00003C55 [D030]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoBootFloppyDrvs
 19811 00003C57 [7D32]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpBootFloppyDrvs
 19812 00003C59 09                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_BYTEVALUE
 19813 00003C5A 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 19814 00003C5B 4E00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.bMinFddCnt
 19815 00003C5D [1530]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgBootFloppyDrvs
 19816 00003C5F [F135]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBootFloppyDrvs
 19817 00003C61 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	NULL
 19818 00003C63 [E33C]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFloppyDrives
 19819 00003C65 00<rept>            <1> iend
 19820                              <1> 
 19821                              <1> g_MenuitemBootMenuSerialScanDetect:
 19822                              <1> istruc MENUITEM
 19823 00003C6C [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 19824 00003C6E [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 19825 00003C70 [5F2F]              <1> 	at	MENUITEM.szName,			dw	g_szItemSerialDetect
 19826 00003C72 [F330]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoSerialDetect
 19827 00003C74 [4933]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpSerialDetect
 19828 00003C76 04                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_FLAGVALUE
 19829 00003C77 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 19830 00003C78 4600                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.wFlags
 19831 00003C7A [3F30]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgSerialDetect
 19832 00003C7C [B400]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBooleanFlag
 19833 00003C7E 00<rept>[1800]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFlagBooleans
 19834 00003C82 0800                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	FLG_ROMVARS_SERIAL_SCANDETECT
 19835 00003C84 00<rept>            <1> iend
 19836                              <1> 
 19837                              <1> g_MenuitemBootMnuStngsDefaultBootDrive:
 19838                              <1> istruc MENUITEM
 19839 00003C89 [B31E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateHexInputForMenuitemInDSSI
 19840 00003C8B [DB20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteHexValueStringToBufferInESDIfromItemInDSSI
 19841 00003C8D [272F]              <1> 	at	MENUITEM.szName,			dw	g_szItemBootDrive
 19842 00003C8F [9A30]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoBootDrive
 19843 00003C91 [3C32]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpBootDrive
 19844 00003C93 08                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_BYTEVALUE
 19845 00003C94 0A                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_HEX
 19846 00003C95 4D00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.bBootDrv
 19847 00003C97 [B82F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgBootDrive
 19848 00003C99 00<rept>0000        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	0
 19849 00003C9F FF00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	0FFh
 19850 00003CA1 00<rept>            <1> iend
 19851                              <1> 
 19852                              <1> g_MenuitemBootMnuStngsSelectionTimeout:
 19853                              <1> istruc MENUITEM
 19854 00003CA6 [C51E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 19855 00003CA8 [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 19856 00003CAA [152F]              <1> 	at	MENUITEM.szName,			dw	g_szItemBootTimeout
 19857 00003CAC [5730]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoBootTimeout
 19858 00003CAE [7631]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpBootTimeout
 19859 00003CB0 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 19860 00003CB1 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 19861 00003CB2 4A00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.wBootTimeout
 19862 00003CB4 [762F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgBootTimeout
 19863 00003CB6 00<rept>0200        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	2
 19864 00003CBC 4404                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	1092
 19865 00003CBE 00<rept>            <1> iend
 19866                              <1> 
 19867                              <1> 
 19868                              <1> g_rgwChoiceToValueLookupForEnableBootMenu:
 19869 00003CC3 0000                <1> 	dw	FALSE
 19870 00003CC5 1C02                <1> 	dw	BOOT_MENU_DEFAULT_TIMEOUT
 19871                              <1> 
 19872                              <1> g_rgwChoiceToValueLookupForDisplayModes:
 19873 00003CC7 0400                <1> 	dw	DEFAULT_TEXT_MODE
 19874 00003CC9 0000                <1> 	dw	CGA_TEXT_MODE_BW40
 19875 00003CCB 0100                <1> 	dw	CGA_TEXT_MODE_CO40
 19876 00003CCD 0200                <1> 	dw	CGA_TEXT_MODE_BW80
 19877 00003CCF 0300                <1> 	dw	CGA_TEXT_MODE_CO80
 19878 00003CD1 0700                <1> 	dw	MDA_TEXT_MODE
 19879                              <1> g_rgszValueToStringLookupForDisplayModes:
 19880 00003CD3 [0C36]              <1> 	dw	g_szValueBootDispModeBW40
 19881 00003CD5 [1136]              <1> 	dw	g_szValueBootDispModeCO40
 19882 00003CD7 [1636]              <1> 	dw	g_szValueBootDispModeBW80
 19883 00003CD9 [1B36]              <1> 	dw	g_szValueBootDispModeCO80
 19884 00003CDB [0436]              <1> 	dw	g_szValueBootDispModeDefault
 19885 00003CDD 0000                <1> 	dw	NULL
 19886 00003CDF 0000                <1> 	dw	NULL
 19887 00003CE1 [2036]              <1> 	dw	g_szValueBootDispModeMono
 19888                              <1> 
 19889                              <1> g_rgszValueToStringLookupForFloppyDrives:
 19890 00003CE3 [2536]              <1> 	dw	g_szValueBootFloppyDrvsAuto
 19891 00003CE5 [2A36]              <1> 	dw	g_szValueBootFloppyDrvs1
 19892 00003CE7 [2C36]              <1> 	dw	g_szValueBootFloppyDrvs2
 19893 00003CE9 [2E36]              <1> 	dw	g_szValueBootFloppyDrvs3
 19894 00003CEB [3036]              <1> 	dw	g_szValueBootFloppyDrvs4
 19895                              <1> 
 19896                              <1> 
 19897                              <1> ; Section containing code
 19898                              <1> SECTION .text
 19899                              <1> 
 19900                              <1> ;--------------------------------------------------------------------
 19901                              <1> ; BootMenuSettingsMenu_EnterMenuOrModifyItemVisibility
 19902                              <1> ;	Parameters:
 19903                              <1> ;		SS:BP:	Menu handle
 19904                              <1> ;	Returns:
 19905                              <1> ;		Nothing
 19906                              <1> ;	Corrupts registers:
 19907                              <1> ;		All, except BP
 19908                              <1> ;--------------------------------------------------------------------
 19909                              <1> ALIGN JUMP_ALIGN
 19910                              <1> BootMenuSettingsMenu_EnterMenuOrModifyItemVisibility:
 19911 0000215F 0E                  <1> 	push	cs
 19912 00002160 1F                  <1> 	pop		ds
 19913 00002161 E80B00              <1> 	call	.EnableOrDisableScanForSerialDrives
 19914 00002164 E81300              <1> 	call	.EnableOrDisableDefaultBootDrive
 19915 00002167 E81B00              <1> 	call	.EnableOrDisableBootMenuSelectionTimeout
 19916 0000216A BE[0F3C]            <1> 	mov		si, g_MenupageForBootMenuSettingsMenu
 19917 0000216D EB98                <1> 	jmp		Menupage_ChangeToNewMenupageInDSSI
 19918                              <1> 
 19919                              <1> 
 19920                              <1> ;--------------------------------------------------------------------
 19921                              <1> ; .EnableOrDisableScanForSerialDrives
 19922                              <1> ;	Parameters:
 19923                              <1> ;		SS:BP:	Menu handle
 19924                              <1> ;	Returns:
 19925                              <1> ;		Nothing
 19926                              <1> ;	Corrupts registers:
 19927                              <1> ;		AX, BX
 19928                              <1> ;--------------------------------------------------------------------
 19929                              <1> ALIGN JUMP_ALIGN
 19930                              <1> .EnableOrDisableScanForSerialDrives:
 19931 0000216F E895F7              <1> 	call	Buffers_GetRomvarsFlagsToAX
 19932 00002172 BB[6C3C]            <1> 	mov		bx, g_MenuitemBootMenuSerialScanDetect
 19933 00002175 A90020              <1> 	test	ax, FLG_ROMVARS_MODULE_SERIAL
 19934 00002178 EB14                <1> 	jmp		SHORT .DisableMenuitemFromCSBXifZFset
 19935                              <1> 
 19936                              <1> 
 19937                              <1> ;--------------------------------------------------------------------
 19938                              <1> ; .EnableOrDisableDefaultBootDrive
 19939                              <1> ;	Parameters:
 19940                              <1> ;		SS:BP:	Menu handle
 19941                              <1> ;	Returns:
 19942                              <1> ;		Nothing
 19943                              <1> ;	Corrupts registers:
 19944                              <1> ;		AX, BX
 19945                              <1> ;--------------------------------------------------------------------
 19946                              <1> ALIGN JUMP_ALIGN
 19947                              <1> .EnableOrDisableDefaultBootDrive:
 19948 0000217A E88AF7              <1> 	call	Buffers_GetRomvarsFlagsToAX
 19949 0000217D BB[893C]            <1> 	mov		bx, g_MenuitemBootMnuStngsDefaultBootDrive
 19950 00002180 A90008              <1> 	test	ax, FLG_ROMVARS_MODULE_HOTKEYS
 19951 00002183 EB09                <1> 	jmp		SHORT .DisableMenuitemFromCSBXifZFset
 19952                              <1> 
 19953                              <1> 
 19954                              <1> ;--------------------------------------------------------------------
 19955                              <1> ; .EnableOrDisableBootMenuSelectionTimeout
 19956                              <1> ;	Parameters:
 19957                              <1> ;		SS:BP:	Menu handle
 19958                              <1> ;	Returns:
 19959                              <1> ;		Nothing
 19960                              <1> ;	Corrupts registers:
 19961                              <1> ;		AX, BX
 19962                              <1> ;--------------------------------------------------------------------
 19963                              <1> ALIGN JUMP_ALIGN
 19964                              <1> .EnableOrDisableBootMenuSelectionTimeout:
 19965 00002185 E87FF7              <1> 	call	Buffers_GetRomvarsFlagsToAX
 19966 00002188 BB[A63C]            <1> 	mov		bx, g_MenuitemBootMnuStngsSelectionTimeout
 19967 0000218B A90002              <1> 	test	ax, FLG_ROMVARS_MODULE_BOOT_MENU
 19968                              <1> .DisableMenuitemFromCSBXifZFset:
 19969 0000218E 7406                <1> 	jz		SHORT .DisableMenuitemFromCSBX
 19970                              <1> 	; Fall to .EnableMenuitemFromCSBX
 19971                              <1> 
 19972                              <1> 
 19973                              <1> ;--------------------------------------------------------------------
 19974                              <1> ; .EnableMenuitemFromCSBX
 19975                              <1> ; .DisableMenuitemFromCSBX
 19976                              <1> ;	Parameters:
 19977                              <1> ;		CS:BX:	Ptr to MENUITEM
 19978                              <1> ;	Returns:
 19979                              <1> ;		Nothing
 19980                              <1> ;	Corrupts registers:
 19981                              <1> ;		Nothing
 19982                              <1> ;--------------------------------------------------------------------
 19983                              <1> ALIGN JUMP_ALIGN
 19984                              <1> .EnableMenuitemFromCSBX:
 19985 00002190 2E804F0A01          <1> 	or		BYTE [cs:bx+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 19986 00002195 C3                  <1> 	ret
 19987                              <1> 
 19988                              <1> ALIGN JUMP_ALIGN
 19989                              <1> .DisableMenuitemFromCSBX:
 19990 00002196 2E80670AFE          <1> 	and		BYTE [cs:bx+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 19991 0000219B C3                  <1> 	ret
 19992                              <1> 
 19993                              <1> 
 19994                              <1> ;--------------------------------------------------------------------
 19995                              <1> ; MENUITEM value reader functions
 19996                              <1> ;	Parameters:
 19997                              <1> ;		AX:		Value from MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset
 19998                              <1> ;		DS:SI:	Ptr to MENUITEM
 19999                              <1> ;		ES:DI:	Ptr to value variable
 20000                              <1> ;	Returns:
 20001                              <1> ;		AX:		Value with possible modifications
 20002                              <1> ;	Corrupts registers:
 20003                              <1> ;		Nothing
 20004                              <1> ;--------------------------------------------------------------------
 20005                              <1> ALIGN JUMP_ALIGN
 20006                              <1> ValueReaderForEnableBootMenu:
 20007 0000219C 85C0                <1> 	test	ax, ax
 20008 0000219E 7403                <1> 	jz		SHORT .NoNeedToModify
 20009 000021A0 B80200              <1> 	mov		ax, TRUE<<1
 20010                              <1> .NoNeedToModify:
 20011 000021A3 C3                  <1> 	ret
 20012                                  %include "ConfigurationMenu.asm"
 20013                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 20014                              <1> ; Description	:	"Configure XTIDE Universal BIOS" menu structs and functions.
 20015                              <1> 
 20016                              <1> ;
 20017                              <1> ; XTIDE Universal BIOS and Associated Tools
 20018                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 20019                              <1> ;
 20020                              <1> ; This program is free software; you can redistribute it and/or modify
 20021                              <1> ; it under the terms of the GNU General Public License as published by
 20022                              <1> ; the Free Software Foundation; either version 2 of the License, or
 20023                              <1> ; (at your option) any later version.
 20024                              <1> ;
 20025                              <1> ; This program is distributed in the hope that it will be useful,
 20026                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 20027                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 20028                              <1> ; GNU General Public License for more details.
 20029                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 20030                              <1> ;
 20031                              <1> 
 20032                              <1> ; Section containing initialized data
 20033                              <1> SECTION .data
 20034                              <1> 
 20035                              <1> ALIGN WORD_ALIGN
 20036                              <1> g_MenupageForConfigurationMenu:
 20037                              <1> istruc MENUPAGE
 20038 00003CED [A421]              <1> 	at	MENUPAGE.fnEnter,			dw	ConfigurationMenu_EnterMenuOrModifyItemVisibility
 20039 00003CEF [5725]              <1> 	at	MENUPAGE.fnBack,			dw	MainMenu_EnterMenuOrModifyItemVisibility
 20040 00003CF1 0B00                <1> 	at	MENUPAGE.wMenuitems,		dw	11
 20041                              <1> iend
 20042                              <1> 
 20043                              <1> g_MenuitemConfigurationBackToMainMenu:
 20044                              <1> istruc MENUITEM
 20045 00003CF3 [5725]              <1> 	at	MENUITEM.fnActivate,		dw	MainMenu_EnterMenuOrModifyItemVisibility
 20046 00003CF5 00<rept>[CF08]      <1> 	at	MENUITEM.szName,			dw	g_szItemCfgBackToMain
 20047 00003CF9 [CF08]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szItemCfgBackToMain
 20048 00003CFB [CF08]              <1> 	at	MENUITEM.szHelp,			dw	g_szItemCfgBackToMain
 20049 00003CFD 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 20050 00003CFE 00                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGEBACK
 20051 00003CFF 00<rept>            <1> iend
 20052                              <1> 
 20053                              <1> g_MenuitemConfigurationPrimaryIdeController:
 20054                              <1> istruc MENUITEM
 20055 00003D10 [0D22]              <1> 	at	MENUITEM.fnActivate,		dw	PrimaryIdeController
 20056 00003D12 00<rept>[E108]      <1> 	at	MENUITEM.szName,			dw	g_szItemCfgIde1
 20057 00003D16 [A50A]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgIde
 20058 00003D18 [A50A]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoCfgIde
 20059 00003D1A 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 20060 00003D1B 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 20061 00003D1C 00<rept>            <1> iend
 20062                              <1> 
 20063                              <1> g_MenuitemConfigurationSecondaryIdeController:
 20064                              <1> istruc MENUITEM
 20065 00003D2D [1222]              <1> 	at	MENUITEM.fnActivate,		dw	SecondaryIdeController
 20066 00003D2F 00<rept>[F808]      <1> 	at	MENUITEM.szName,			dw	g_szItemCfgIde2
 20067 00003D33 [A50A]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgIde
 20068 00003D35 [A50A]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoCfgIde
 20069 00003D37 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 20070 00003D38 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 20071 00003D39 00<rept>            <1> iend
 20072                              <1> 
 20073                              <1> g_MenuitemConfigurationTertiaryIdeController:
 20074                              <1> istruc MENUITEM
 20075 00003D4A [1722]              <1> 	at	MENUITEM.fnActivate,		dw	TertiaryIdeController
 20076 00003D4C 00<rept>[1109]      <1> 	at	MENUITEM.szName,			dw	g_szItemCfgIde3
 20077 00003D50 [A50A]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgIde
 20078 00003D52 [A50A]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoCfgIde
 20079 00003D54 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 20080 00003D55 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 20081 00003D56 00<rept>            <1> iend
 20082                              <1> 
 20083                              <1> g_MenuitemConfigurationQuaternaryIdeController:
 20084                              <1> istruc MENUITEM
 20085 00003D67 [1C22]              <1> 	at	MENUITEM.fnActivate,		dw	QuaternaryIdeController
 20086 00003D69 00<rept>[2909]      <1> 	at	MENUITEM.szName,			dw	g_szItemCfgIde4
 20087 00003D6D [A50A]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgIde
 20088 00003D6F [A50A]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoCfgIde
 20089 00003D71 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 20090 00003D72 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 20091 00003D73 00<rept>            <1> iend
 20092                              <1> 
 20093                              <1> g_MenuitemConfigurationBootMenuSettings:
 20094                              <1> istruc MENUITEM
 20095 00003D84 [5F21]              <1> 	at	MENUITEM.fnActivate,		dw	BootMenuSettingsMenu_EnterMenuOrModifyItemVisibility
 20096 00003D86 00<rept>[4309]      <1> 	at	MENUITEM.szName,			dw	g_szItemCfgBootMenu
 20097 00003D8A [CD0A]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgBootMenu
 20098 00003D8C [CD0A]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoCfgBootMenu
 20099 00003D8E 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 20100 00003D8F 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 20101 00003D90 00<rept>            <1> iend
 20102                              <1> 
 20103                              <1> g_MenuitemAutoConfigure:
 20104                              <1> istruc MENUITEM
 20105 00003DA1 [E916]              <1> 	at	MENUITEM.fnActivate,		dw	AutoConfigure_ForThisSystem
 20106 00003DA3 00<rept>[5109]      <1> 	at	MENUITEM.szName,			dw	g_szItemAutoConfigure
 20107 00003DA7 [E10A]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoAutoConfigure
 20108 00003DA9 [E10A]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoAutoConfigure
 20109 00003DAB 03                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_MODIFY_MENU
 20110 00003DAC 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 20111 00003DAD 00<rept>            <1> iend
 20112                              <1> 
 20113                              <1> g_MenuitemConfigurationFullOperatingMode:
 20114                              <1> istruc MENUITEM
 20115 00003DBE [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 20116 00003DC0 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 20117 00003DC2 [6009]              <1> 	at	MENUITEM.szName,			dw	g_szItemCfgFullMode
 20118 00003DC4 [1F0B]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgFullMode
 20119 00003DC6 [DB0C]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpCfgFullMode
 20120 00003DC8 06                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_MODIFY_MENU | FLG_MENUITEM_FLAGVALUE
 20121 00003DC9 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 20122 00003DCA 4600                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.wFlags
 20123 00003DCC [C009]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgCfgFullMode
 20124 00003DCE [B400]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBooleanFlag
 20125 00003DD0 00<rept>[1800]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFlagBooleans
 20126 00003DD4 0100                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	FLG_ROMVARS_FULLMODE
 20127 00003DD6 00<rept>            <1> iend
 20128                              <1> 
 20129                              <1> g_MenuitemConfigurationKiBtoStealFromRAM:
 20130                              <1> istruc MENUITEM
 20131 00003DDB [C51E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 20132 00003DDD [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 20133 00003DDF [7409]              <1> 	at	MENUITEM.szName,			dw	g_szItemCfgStealSize
 20134 00003DE1 [5E0B]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgStealSize
 20135 00003DE3 [F110]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpCfgStealSize
 20136 00003DE5 09                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_BYTEVALUE
 20137 00003DE6 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 20138 00003DE7 4F00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.bStealSize
 20139 00003DE9 [DC09]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgCfgStealSize
 20140 00003DEB 00<rept>0100        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	1
 20141 00003DF1 FF00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	255
 20142 00003DF3 00<rept>            <1> iend
 20143                              <1> 
 20144                              <1> g_MenuitemConfigurationIdeControllers:
 20145                              <1> istruc MENUITEM
 20146 00003DF8 [2522]              <1> 	at	MENUITEM.fnActivate,		dw	ActivateInputForNumberOfIdeControllersMenuitemInDSSI
 20147 00003DFA [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 20148 00003DFC [8A09]              <1> 	at	MENUITEM.szName,			dw	g_szItemCfgIdeCnt
 20149 00003DFE [B30B]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgIdeCnt
 20150 00003E00 [B30B]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoCfgIdeCnt
 20151 00003E02 0B                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_MODIFY_MENU | FLG_MENUITEM_BYTEVALUE
 20152 00003E03 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 20153 00003E04 4C00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.bIdeCnt
 20154 00003E06 [2F0A]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgCfgIdeCnt
 20155 00003E08 00<rept>0100        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	1
 20156 00003E0E 0400                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	MAX_ALLOWED_IDE_CONTROLLERS
 20157 00003E10 00<rept>            <1> iend
 20158                              <1> 
 20159                              <1> g_MenuitemConfigurationIdleTimeout:
 20160                              <1> istruc MENUITEM
 20161 00003E15 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 20162 00003E17 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromRawItemInDSSI
 20163 00003E19 [9A09]              <1> 	at	MENUITEM.szName,			dw	g_szItemCfgIdleTimeout
 20164 00003E1B [D80B]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoCfgIdleTimeout
 20165 00003E1D [DE11]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpCfgIdleTimeout
 20166 00003E1F 28                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_BYTEVALUE | FLG_MENUITEM_CHOICESTRINGS
 20167 00003E20 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 20168 00003E21 5000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	ROMVARS.bIdleTimeout
 20169 00003E23 [5B0A]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgCfgIdleTimeout
 20170 00003E25 [6E13]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceIdleTimeout
 20171 00003E27 [323E]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForIdleTimeout
 20172 00003E29 [643E]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszChoiceToStringLookup,	dw	g_rgszChoiceToStringLookupForIdleTimeout
 20173 00003E2B 00<rept>            <1> iend
 20174                              <1> 
 20175                              <1> g_rgwChoiceToValueLookupForIdleTimeout:
 20176                              <1> 	%assign i -12
 20177                              <1> 	%rep 21
 20178                              <1> 		%assign i i+12
 20179                              <1> 		dw	i		; i / 12 = 0 (disabled) or 1...20 minutes
 20180                              <1> 	%endrep
 20181                              <2>  %assign i i+12
 20182 00003E32 0000                <2>  dw i
 20183                              <2>  %assign i i+12
 20184 00003E34 0C00                <2>  dw i
 20185                              <2>  %assign i i+12
 20186 00003E36 1800                <2>  dw i
 20187                              <2>  %assign i i+12
 20188 00003E38 2400                <2>  dw i
 20189                              <2>  %assign i i+12
 20190 00003E3A 3000                <2>  dw i
 20191                              <2>  %assign i i+12
 20192 00003E3C 3C00                <2>  dw i
 20193                              <2>  %assign i i+12
 20194 00003E3E 4800                <2>  dw i
 20195                              <2>  %assign i i+12
 20196 00003E40 5400                <2>  dw i
 20197                              <2>  %assign i i+12
 20198 00003E42 6000                <2>  dw i
 20199                              <2>  %assign i i+12
 20200 00003E44 6C00                <2>  dw i
 20201                              <2>  %assign i i+12
 20202 00003E46 7800                <2>  dw i
 20203                              <2>  %assign i i+12
 20204 00003E48 8400                <2>  dw i
 20205                              <2>  %assign i i+12
 20206 00003E4A 9000                <2>  dw i
 20207                              <2>  %assign i i+12
 20208 00003E4C 9C00                <2>  dw i
 20209                              <2>  %assign i i+12
 20210 00003E4E A800                <2>  dw i
 20211                              <2>  %assign i i+12
 20212 00003E50 B400                <2>  dw i
 20213                              <2>  %assign i i+12
 20214 00003E52 C000                <2>  dw i
 20215                              <2>  %assign i i+12
 20216 00003E54 CC00                <2>  dw i
 20217                              <2>  %assign i i+12
 20218 00003E56 D800                <2>  dw i
 20219                              <2>  %assign i i+12
 20220 00003E58 E400                <2>  dw i
 20221                              <2>  %assign i i+12
 20222 00003E5A F000                <2>  dw i
 20223                              <1> 	%rep 4
 20224                              <1> 		%assign i i+1
 20225                              <1> 		dw	i		; 241...244 = (i - 240) * 30 minutes
 20226                              <1> 	%endrep
 20227                              <2>  %assign i i+1
 20228 00003E5C F100                <2>  dw i
 20229                              <2>  %assign i i+1
 20230 00003E5E F200                <2>  dw i
 20231                              <2>  %assign i i+1
 20232 00003E60 F300                <2>  dw i
 20233                              <2>  %assign i i+1
 20234 00003E62 F400                <2>  dw i
 20235                              <1> g_rgszChoiceToStringLookupForIdleTimeout:
 20236                              <1> 	%assign i 0
 20237                              <1> 	%rep 25
 20238                              <1> 		dw	g_szIdleTimeoutChoice%[i]
 20239                              <1> 		%assign i i+1
 20240                              <1> 	%endrep
 20241 00003E64 [E813]              <2>  dw g_szIdleTimeoutChoicei
 20242                              <2>  %assign i i+1
 20243 00003E66 [F113]              <2>  dw g_szIdleTimeoutChoicei
 20244                              <2>  %assign i i+1
 20245 00003E68 [F513]              <2>  dw g_szIdleTimeoutChoicei
 20246                              <2>  %assign i i+1
 20247 00003E6A [F913]              <2>  dw g_szIdleTimeoutChoicei
 20248                              <2>  %assign i i+1
 20249 00003E6C [FD13]              <2>  dw g_szIdleTimeoutChoicei
 20250                              <2>  %assign i i+1
 20251 00003E6E [0114]              <2>  dw g_szIdleTimeoutChoicei
 20252                              <2>  %assign i i+1
 20253 00003E70 [0514]              <2>  dw g_szIdleTimeoutChoicei
 20254                              <2>  %assign i i+1
 20255 00003E72 [0914]              <2>  dw g_szIdleTimeoutChoicei
 20256                              <2>  %assign i i+1
 20257 00003E74 [0D14]              <2>  dw g_szIdleTimeoutChoicei
 20258                              <2>  %assign i i+1
 20259 00003E76 [1114]              <2>  dw g_szIdleTimeoutChoicei
 20260                              <2>  %assign i i+1
 20261 00003E78 [1514]              <2>  dw g_szIdleTimeoutChoicei
 20262                              <2>  %assign i i+1
 20263 00003E7A [1A14]              <2>  dw g_szIdleTimeoutChoicei
 20264                              <2>  %assign i i+1
 20265 00003E7C [1F14]              <2>  dw g_szIdleTimeoutChoicei
 20266                              <2>  %assign i i+1
 20267 00003E7E [2414]              <2>  dw g_szIdleTimeoutChoicei
 20268                              <2>  %assign i i+1
 20269 00003E80 [2914]              <2>  dw g_szIdleTimeoutChoicei
 20270                              <2>  %assign i i+1
 20271 00003E82 [2E14]              <2>  dw g_szIdleTimeoutChoicei
 20272                              <2>  %assign i i+1
 20273 00003E84 [3314]              <2>  dw g_szIdleTimeoutChoicei
 20274                              <2>  %assign i i+1
 20275 00003E86 [3814]              <2>  dw g_szIdleTimeoutChoicei
 20276                              <2>  %assign i i+1
 20277 00003E88 [3D14]              <2>  dw g_szIdleTimeoutChoicei
 20278                              <2>  %assign i i+1
 20279 00003E8A [4214]              <2>  dw g_szIdleTimeoutChoicei
 20280                              <2>  %assign i i+1
 20281 00003E8C [4714]              <2>  dw g_szIdleTimeoutChoicei
 20282                              <2>  %assign i i+1
 20283 00003E8E [4C14]              <2>  dw g_szIdleTimeoutChoicei
 20284                              <2>  %assign i i+1
 20285 00003E90 [5114]              <2>  dw g_szIdleTimeoutChoicei
 20286                              <2>  %assign i i+1
 20287 00003E92 [5514]              <2>  dw g_szIdleTimeoutChoicei
 20288                              <2>  %assign i i+1
 20289 00003E94 [E413]              <2>  dw g_szIdleTimeoutChoicei
 20290                              <2>  %assign i i+1
 20291                              <1> 	;	dw	NULL	; Is this needed? *FIXME*
 20292                              <1> 
 20293                              <1> ; Section containing code
 20294                              <1> SECTION .text
 20295                              <1> 
 20296                              <1> ;--------------------------------------------------------------------
 20297                              <1> ; MainMenu_EnterMenuOrModifyItemVisibility
 20298                              <1> ;	Parameters:
 20299                              <1> ;		SS:BP:	Menu handle
 20300                              <1> ;	Returns:
 20301                              <1> ;		Nothing
 20302                              <1> ;	Corrupts registers:
 20303                              <1> ;		All, except BP
 20304                              <1> ;--------------------------------------------------------------------
 20305                              <1> ALIGN JUMP_ALIGN
 20306                              <1> ConfigurationMenu_EnterMenuOrModifyItemVisibility:
 20307 000021A4 0E                  <1> 	push	cs
 20308 000021A5 1F                  <1> 	pop		ds
 20309 000021A6 E81500              <1> 	call	.DisableAllIdeControllerMenuitems
 20310 000021A9 E82100              <1> 	call	.EnableIdeControllerMenuitemsBasedOnConfiguration
 20311 000021AC E83000              <1> 	call	.EnableOrDisableOperatingModeSelection
 20312 000021AF E83700              <1> 	call	.EnableOrDisableKiBtoStealFromRAM
 20313 000021B2 E84100              <1> 	call	.EnableOrDisableIdleTimeout
 20314 000021B5 E87000              <1> 	call	LimitIdeControllersForLiteMode
 20315 000021B8 BE[ED3C]            <1> 	mov		si, g_MenupageForConfigurationMenu
 20316 000021BB E949FF              <1> 	jmp		Menupage_ChangeToNewMenupageInDSSI
 20317                              <1> 
 20318                              <1> ;--------------------------------------------------------------------
 20319                              <1> ; .DisableAllIdeControllerMenuitems
 20320                              <1> ; .EnableIdeControllerMenuitemsBasedOnConfiguration
 20321                              <1> ;	Parameters:
 20322                              <1> ;		SS:BP:	Menu handle
 20323                              <1> ;	Returns:
 20324                              <1> ;		Nothing
 20325                              <1> ;	Corrupts registers:
 20326                              <1> ;		AX, BX, CX, DI, ES
 20327                              <1> ;--------------------------------------------------------------------
 20328                              <1> ALIGN JUMP_ALIGN
 20329                              <1> .DisableAllIdeControllerMenuitems:
 20330 000021BE B90300              <1> 	mov		cx, MAX_ALLOWED_IDE_CONTROLLERS-1
 20331 000021C1 BB[2D3D]            <1> 	mov		bx, g_MenuitemConfigurationSecondaryIdeController
 20332                              <1> ALIGN JUMP_ALIGN
 20333                              <1> .DisableNextIdeControllerMenuitem:
 20334 000021C4 E84000              <1> 	call	.DisableMenuitemFromCSBX
 20335 000021C7 83C31D              <1> 	add		bx, BYTE MENUITEM_size
 20336 000021CA E2F8                <1> 	loop	.DisableNextIdeControllerMenuitem
 20337 000021CC C3                  <1> 	ret
 20338                              <1> 
 20339                              <1> ALIGN JUMP_ALIGN
 20340                              <1> .EnableIdeControllerMenuitemsBasedOnConfiguration:
 20341 000021CD E845F7              <1> 	call	Buffers_GetIdeControllerCountToCX
 20342 000021D0 49                  <1> 	dec		cx			; Primary always enabled
 20343 000021D1 740B                <1> 	jz		SHORT .PrimaryControllerAlreadyEnabled
 20344 000021D3 BB[2D3D]            <1> 	mov		bx, g_MenuitemConfigurationSecondaryIdeController
 20345                              <1> ALIGN JUMP_ALIGN
 20346                              <1> .EnableNextIdeControllerMenuitem:
 20347 000021D6 E82800              <1> 	call	.EnableMenuitemFromCSBX
 20348 000021D9 83C31D              <1> 	add		bx, BYTE MENUITEM_size
 20349 000021DC E2F8                <1> 	loop	.EnableNextIdeControllerMenuitem
 20350                              <1> .PrimaryControllerAlreadyEnabled:
 20351 000021DE C3                  <1> 	ret
 20352                              <1> 
 20353                              <1> 
 20354                              <1> ;--------------------------------------------------------------------
 20355                              <1> ; .EnableOrDisableOperatingModeSelection
 20356                              <1> ;	Parameters:
 20357                              <1> ;		SS:BP:	Menu handle
 20358                              <1> ;	Returns:
 20359                              <1> ;		Nothing
 20360                              <1> ;	Corrupts registers:
 20361                              <1> ;		BX, DI, ES
 20362                              <1> ;--------------------------------------------------------------------
 20363                              <1> ALIGN JUMP_ALIGN
 20364                              <1> .EnableOrDisableOperatingModeSelection:
 20365 000021DF BB[BE3D]            <1> 	mov		bx, g_MenuitemConfigurationFullOperatingMode
 20366 000021E2 E89CF6              <1> 	call	Buffers_IsXTbuildLoaded
 20367 000021E5 741A                <1> 	je		SHORT .EnableMenuitemFromCSBX
 20368 000021E7 EB1E                <1> 	jmp		SHORT .DisableMenuitemFromCSBX
 20369                              <1> 
 20370                              <1> 
 20371                              <1> ;--------------------------------------------------------------------
 20372                              <1> ; .EnableOrDisableKiBtoStealFromRAM
 20373                              <1> ;	Parameters:
 20374                              <1> ;		SS:BP:	Menu handle
 20375                              <1> ;	Returns:
 20376                              <1> ;		Nothing
 20377                              <1> ;	Corrupts registers:
 20378                              <1> ;		AX, BX, CX
 20379                              <1> ;--------------------------------------------------------------------
 20380                              <1> ALIGN JUMP_ALIGN
 20381                              <1> .EnableOrDisableKiBtoStealFromRAM:
 20382 000021E9 E81BF7              <1> 	call	Buffers_GetRomvarsFlagsToAX
 20383 000021EC BB[DB3D]            <1> 	mov		bx, g_MenuitemConfigurationKiBtoStealFromRAM
 20384 000021EF A90100              <1> 	test	ax, FLG_ROMVARS_FULLMODE
 20385 000021F2 7413                <1> 	jz		SHORT .DisableMenuitemFromCSBX
 20386 000021F4 EB0B                <1> 	jmp		SHORT .EnableMenuitemFromCSBX
 20387                              <1> 
 20388                              <1> 
 20389                              <1> ;--------------------------------------------------------------------
 20390                              <1> ; .EnableOrDisableIdleTimeout
 20391                              <1> ;	Parameters:
 20392                              <1> ;		SS:BP:	Menu handle
 20393                              <1> ;	Returns:
 20394                              <1> ;		Nothing
 20395                              <1> ;	Corrupts registers:
 20396                              <1> ;		AX, BX
 20397                              <1> ;--------------------------------------------------------------------
 20398                              <1> ALIGN JUMP_ALIGN
 20399                              <1> .EnableOrDisableIdleTimeout:
 20400 000021F6 E80EF7              <1> 	call	Buffers_GetRomvarsFlagsToAX
 20401 000021F9 BB[153E]            <1> 	mov		bx, g_MenuitemConfigurationIdleTimeout
 20402 000021FC A92000              <1> 	test	ax, FLG_ROMVARS_MODULE_FEATURE_SETS
 20403 000021FF 7406                <1> 	jz		SHORT .DisableMenuitemFromCSBX
 20404                              <1> 	; Fall to .EnableMenuitemFromCSBX
 20405                              <1> 
 20406                              <1> 
 20407                              <1> ;--------------------------------------------------------------------
 20408                              <1> ; .EnableMenuitemFromCSBX
 20409                              <1> ; .DisableMenuitemFromCSBX
 20410                              <1> ;	Parameters:
 20411                              <1> ;		CS:BX:	Ptr to MENUITEM
 20412                              <1> ;	Returns:
 20413                              <1> ;		Nothing
 20414                              <1> ;	Corrupts registers:
 20415                              <1> ;		Nothing
 20416                              <1> ;--------------------------------------------------------------------
 20417                              <1> ALIGN JUMP_ALIGN
 20418                              <1> .EnableMenuitemFromCSBX:
 20419 00002201 2E804F0A01          <1> 	or		BYTE [cs:bx+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 20420 00002206 C3                  <1> 	ret
 20421                              <1> 
 20422                              <1> ALIGN JUMP_ALIGN
 20423                              <1> .DisableMenuitemFromCSBX:
 20424 00002207 2E80670AFE          <1> 	and		BYTE [cs:bx+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 20425 0000220C C3                  <1> 	ret
 20426                              <1> 
 20427                              <1> 
 20428                              <1> 
 20429                              <1> ;--------------------------------------------------------------------
 20430                              <1> ; MENUITEM activation functions (.fnActivate)
 20431                              <1> ;	Parameters:
 20432                              <1> ;		SS:BP:	Ptr to MENU
 20433                              <1> ;	Returns:
 20434                              <1> ;		Nothing
 20435                              <1> ;	Corrupts registers:
 20436                              <1> ;		All, except segments
 20437                              <1> ;--------------------------------------------------------------------
 20438                              <1> ALIGN JUMP_ALIGN
 20439                              <1> PrimaryIdeController:
 20440 0000220D BB5100              <1> 	mov		bx, ROMVARS.ideVars0
 20441 00002210 EB0D                <1> 	jmp		SHORT DisplayIdeControllerMenu
 20442                              <1> 
 20443                              <1> ALIGN JUMP_ALIGN
 20444                              <1> SecondaryIdeController:
 20445 00002212 BB6300              <1> 	mov		bx, ROMVARS.ideVars1
 20446 00002215 EB08                <1> 	jmp		SHORT DisplayIdeControllerMenu
 20447                              <1> 
 20448                              <1> ALIGN JUMP_ALIGN
 20449                              <1> TertiaryIdeController:
 20450 00002217 BB7500              <1> 	mov		bx, ROMVARS.ideVars2
 20451 0000221A EB03                <1> 	jmp		SHORT DisplayIdeControllerMenu
 20452                              <1> 
 20453                              <1> ALIGN JUMP_ALIGN
 20454                              <1> QuaternaryIdeController:
 20455 0000221C BB8700              <1> 	mov		bx, ROMVARS.ideVars3
 20456                              <1> 	; Fall to DisplayIdeControllerMenu
 20457                              <1> 
 20458                              <1> ALIGN JUMP_ALIGN
 20459                              <1> DisplayIdeControllerMenu:
 20460 0000221F E88F01              <1> 	call	IdeControllerMenu_InitializeToIdevarsOffsetInBX
 20461 00002222 E9CE01              <1> 	jmp		IdeControllerMenu_EnterMenuOrModifyItemVisibility
 20462                              <1> 
 20463                              <1> 
 20464                              <1> ALIGN JUMP_ALIGN
 20465                              <1> ActivateInputForNumberOfIdeControllersMenuitemInDSSI:
 20466 00002225 E89DFC              <1> 	call	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 20467                              <1> 	; Fall to LimitIdeControllersForLiteMode
 20468                              <1> 
 20469                              <1> ;--------------------------------------------------------------------
 20470                              <1> ; LimitIdeControllersForLiteMode
 20471                              <1> ;	Parameters:
 20472                              <1> ;		SS:BP:	Menu handle
 20473                              <1> ;	Returns:
 20474                              <1> ;		Nothing
 20475                              <1> ;	Corrupts registers:
 20476                              <1> ;		AX, CX, DI
 20477                              <1> ;--------------------------------------------------------------------
 20478                              <1> ALIGN JUMP_ALIGN
 20479                              <1> LimitIdeControllersForLiteMode:
 20480 00002228 06                  <1> 	push	es
 20481 00002229 E8E9F6              <1> 	call	Buffers_GetIdeControllerCountToCX
 20482 0000222C 26884D4C            <1> 	mov		[es:di+ROMVARS.bIdeCnt], cl
 20483                              <1> 	CALL_MENU_LIBRARY GetHighlightedItemToAX
 20484                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 20485                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 20486                              <2>  %elifidn %1, Close
 20487                              <2>  call MenuInit_CloseMenuWindow
 20488                              <2>  %elifidn %1, SetUserDataFromDSSI
 20489                              <2>  call MenuInit_SetUserDataFromDSSI
 20490                              <2>  %elifidn %1, GetUserDataToDSSI
 20491                              <2>  call MenuInit_GetUserDataToDSSI
 20492                              <2>  %elifidn %1, SetTitleHeightFromAL
 20493                              <2>  call MenuInit_SetTitleHeightFromAL
 20494                              <2>  %elifidn %1, GetHighlightedItemToAX
 20495 00002230 E820E7              <2>  call MenuInit_GetHighlightedItemToAX
 20496                              <2>  %elifidn %1, SetTotalItemsFromAX
 20497                              <2>  call MenuInit_SetTotalItemsFromAX
 20498                              <2>  %elifidn %1, SetInformationHeightFromAL
 20499                              <2>  call MenuInit_SetInformationHeightFromAL
 20500                              <2>  %elifidn %1, SetTimeoutValueFromAX
 20501                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 20502                              <2>  %else
 20503                              <2>  mov di, %1
 20504                              <2>  call Menu_FunctionFromDI
 20505                              <2>  %endif
 20506                              <1> 	CALL_MENU_LIBRARY RefreshItemFromAX
 20507                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 20508                              <2>  call MenuInit_CloseMenuIfExitEventAllows
 20509                              <2>  %elifidn %1, Close
 20510                              <2>  call MenuInit_CloseMenuWindow
 20511                              <2>  %elifidn %1, SetUserDataFromDSSI
 20512                              <2>  call MenuInit_SetUserDataFromDSSI
 20513                              <2>  %elifidn %1, GetUserDataToDSSI
 20514                              <2>  call MenuInit_GetUserDataToDSSI
 20515                              <2>  %elifidn %1, SetTitleHeightFromAL
 20516                              <2>  call MenuInit_SetTitleHeightFromAL
 20517                              <2>  %elifidn %1, GetHighlightedItemToAX
 20518                              <2>  call MenuInit_GetHighlightedItemToAX
 20519                              <2>  %elifidn %1, SetTotalItemsFromAX
 20520                              <2>  call MenuInit_SetTotalItemsFromAX
 20521                              <2>  %elifidn %1, SetInformationHeightFromAL
 20522                              <2>  call MenuInit_SetInformationHeightFromAL
 20523                              <2>  %elifidn %1, SetTimeoutValueFromAX
 20524                              <2>  call MenuTime_SetSelectionTimeoutValueFromAX
 20525                              <2>  %else
 20526 00002233 BF[580B]            <2>  mov di, %1
 20527 00002236 E8C6E4              <2>  call Menu_FunctionFromDI
 20528                              <2>  %endif
 20529 00002239 07                  <1> 	pop		es
 20530                              <1> 	; Fall to ConfigurationMenu_CheckAndMoveSerialDrivesToBottom
 20531                              <1> 
 20532                              <1> ;----------------------------------------------------------------------
 20533                              <1> ; ConfigurationMenu_CheckAndMoveSerialDrivesToBottom
 20534                              <1> ;
 20535                              <1> ; Checks to ensure that serial adapters are at the end of the
 20536                              <1> ; IDEVARS structures list, as serial floppies (if present) need to be
 20537                              <1> ; the last drives detected by the BIOS.  If there are other controllers
 20538                              <1> ; after a serial controller, the other controllers are moved up on the list
 20539                              <1> ; and the serial controller is placed at the end of the list.
 20540                              <1> ;
 20541                              <1> ;	Parameters:
 20542                              <1> ;		SS:BP:	Menu handle
 20543                              <1> ;	Returns:
 20544                              <1> ;		Nothing
 20545                              <1> ;	Corrupts registers:
 20546                              <1> ;		All
 20547                              <1> ;----------------------------------------------------------------------
 20548                              <1> ConfigurationMenu_CheckAndMoveSerialDrivesToBottom:
 20549 0000223A 06                  <1> 	push	es
 20550 0000223B 1E                  <1> 	push	ds
 20551 0000223C 57                  <1> 	push	di
 20552 0000223D 56                  <1> 	push	si
 20553                              <1> 
 20554 0000223E E8D4F6              <1> 	call	Buffers_GetIdeControllerCountToCX	; will also set ES:DI to point to file buffer
 20555 00002241 06                  <1> 	push	es
 20556 00002242 1F                  <1> 	pop		ds
 20557 00002243 30ED                <1> 	xor		ch, ch						; clearing high order of CX and notification flag
 20558 00002245 89CA                <1> 	mov		dx, cx						; (probably unnecessary, CX should be less than 127, but just to be sure)
 20559 00002247 E356                <1> 	jcxz	.done						; probably unnecessary, but make sure there is at least one controller
 20560                              <1> 
 20561 00002249 8D5D51              <1> 	lea		bx, [di+ROMVARS.ideVars0]	; add in offset of first idevars
 20562                              <1> 
 20563                              <1> .outerLoop:
 20564 0000224C 89DF                <1> 	mov		di, bx						; start of idevars
 20565 0000224E 31F6                <1> 	xor		si, si						; first serial found
 20566 00002250 31C0                <1> 	xor		ax, ax						; first non-serial found
 20567 00002252 88D1                <1> 	mov		cl, dl						; idevars count
 20568 00002254 30ED                <1> 	xor		ch, ch
 20569                              <1> 
 20570                              <1> .loop:
 20571 00002256 807D0412            <1> 	cmp		byte [di+IDEVARS.bDevice], DEVICE_SERIAL_PORT
 20572 0000225A 7508                <1> 	jnz		.notSerial
 20573                              <1> 
 20574 0000225C 85F6                <1> 	test	si, si						; record the first serial controller that we find
 20575 0000225E 7506                <1> 	jnz		.next
 20576 00002260 89FE                <1> 	mov		si, di
 20577 00002262 EB02                <1> 	jmp		.next
 20578                              <1> 
 20579                              <1> .notSerial:
 20580 00002264 89F8                <1> 	mov		ax, di						; record the *last* non-serial controller that we find
 20581                              <1> 
 20582                              <1> .next:
 20583 00002266 83C712              <1> 	add		di, IDEVARS_size
 20584 00002269 E2EB                <1> 	loop	.loop
 20585                              <1> 
 20586 0000226B 85F6                <1> 	test	si, si						; no serial drives, nothing to do
 20587 0000226D 7430                <1> 	jz		.done
 20588 0000226F 39C6                <1> 	cmp		si, ax						; serial port is already later on the list than any other controllers
 20589 00002271 772C                <1> 	ja		.done						; (also takes care of the case where there are no other controllers)
 20590                              <1> 
 20591                              <1> ;
 20592                              <1> ; move serial to end of list, others up
 20593                              <1> ;
 20594 00002273 FC                  <1> 	cld
 20595                              <1> 
 20596 00002274 89F8                <1> 	mov		ax, di						; save end pointer of list after scan
 20597                              <1> 
 20598 00002276 83EC12              <1> 	sub		sp, IDEVARS_size			; copy serial to temporary space on stack
 20599                              <1> 
 20600 00002279 89E7                <1> 	mov		di, sp
 20601                              <1> 
 20602 0000227B B91200              <1> 	mov		cx, IDEVARS_size
 20603 0000227E 16                  <1> 	push	ss
 20604 0000227F 07                  <1> 	pop		es
 20605                              <1> 
 20606 00002280 F3A4                <1> 	rep	movsb
 20607                              <1> 
 20608 00002282 8D7CEE              <1> 	lea		di, [si-IDEVARS_size]		; move up all the idevars below the serial, by one slot
 20609                              <1> 
 20610 00002285 89C1                <1> 	mov		cx, ax						; restore end pointer of list, subtract off end of serial idevars
 20611 00002287 29F1                <1> 	sub		cx, si
 20612                              <1> 
 20613 00002289 1E                  <1> 	push	ds
 20614 0000228A 07                  <1> 	pop		es
 20615                              <1> 
 20616 0000228B F3A4                <1> 	rep	movsb
 20617                              <1> 
 20618 0000228D 89E6                <1> 	mov		si, sp						; place serial (currently on the stack) at bottom of list
 20619 0000228F 16                  <1> 	push	ss
 20620 00002290 1F                  <1> 	pop		ds
 20621 00002291 B91200              <1> 	mov		cx, IDEVARS_size
 20622                              <1> 	; di is already at last IDEVARS position
 20623                              <1> 
 20624 00002294 F3A4                <1> 	rep	movsb
 20625                              <1> 
 20626 00002296 83C412              <1> 	add		sp, IDEVARS_size
 20627                              <1> 
 20628 00002299 06                  <1> 	push	es
 20629 0000229A 1F                  <1> 	pop		ds
 20630                              <1> 
 20631 0000229B B601                <1> 	mov		dh, 1						; set flag that we have done a relocation
 20632                              <1> 
 20633 0000229D EBAD                <1> 	jmp		.outerLoop
 20634                              <1> 
 20635                              <1> .done:
 20636 0000229F 5E                  <1> 	pop		si
 20637 000022A0 5F                  <1> 	pop		di
 20638 000022A1 1F                  <1> 	pop		ds
 20639 000022A2 07                  <1> 	pop		es
 20640                              <1> 
 20641 000022A3 84F6                <1> 	test	dh, dh
 20642 000022A5 7406                <1> 	jz		.noWorkDone
 20643                              <1> 
 20644 000022A7 BA[3C0C]            <1> 	mov		dx, g_szSerialMoved
 20645 000022AA E8A9F6              <1> 	call	Dialogs_DisplayNotificationFromCSDX
 20646                              <1> 
 20647                              <1> .noWorkDone:
 20648 000022AD C3                  <1> 	ret
 20649                                  %include "FlashMenu.asm"
 20650                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 20651                              <1> ; Description	:	"Flash EEPROM" menu structs and functions.
 20652                              <1> 
 20653                              <1> ;
 20654                              <1> ; XTIDE Universal BIOS and Associated Tools
 20655                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 20656                              <1> ;
 20657                              <1> ; This program is free software; you can redistribute it and/or modify
 20658                              <1> ; it under the terms of the GNU General Public License as published by
 20659                              <1> ; the Free Software Foundation; either version 2 of the License, or
 20660                              <1> ; (at your option) any later version.
 20661                              <1> ;
 20662                              <1> ; This program is distributed in the hope that it will be useful,
 20663                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 20664                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 20665                              <1> ; GNU General Public License for more details.
 20666                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 20667                              <1> ;
 20668                              <1> 
 20669                              <1> ; Section containing initialized data
 20670                              <1> SECTION .data
 20671                              <1> 
 20672                              <1> ALIGN WORD_ALIGN
 20673                              <1> g_MenupageForFlashMenu:
 20674                              <1> istruc MENUPAGE
 20675 00003E96 [AE22]              <1> 	at	MENUPAGE.fnEnter,			dw	FlashMenu_EnterMenuOrModifyItemVisibility
 20676 00003E98 [5725]              <1> 	at	MENUPAGE.fnBack,			dw	MainMenu_EnterMenuOrModifyItemVisibility
 20677 00003E9A 0700                <1> 	at	MENUPAGE.wMenuitems,		dw	7
 20678                              <1> iend
 20679                              <1> 
 20680                              <1> g_MenuitemFlashBackToMainMenu:
 20681                              <1> istruc MENUITEM
 20682 00003E9C [5725]              <1> 	at	MENUITEM.fnActivate,		dw	MainMenu_EnterMenuOrModifyItemVisibility
 20683 00003E9E 00<rept>[CF08]      <1> 	at	MENUITEM.szName,			dw	g_szItemCfgBackToMain
 20684 00003EA2 [CF08]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szItemCfgBackToMain
 20685 00003EA4 [CF08]              <1> 	at	MENUITEM.szHelp,			dw	g_szItemCfgBackToMain
 20686 00003EA6 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 20687 00003EA7 00                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGEBACK
 20688 00003EA8 00<rept>            <1> iend
 20689                              <1> 
 20690                              <1> g_MenuitemFlashStartFlashing:
 20691                              <1> istruc MENUITEM
 20692 00003EB9 [D022]              <1> 	at	MENUITEM.fnActivate,		dw	StartFlashing
 20693 00003EBB 00<rept>[3236]      <1> 	at	MENUITEM.szName,			dw	g_szItemFlashStart
 20694 00003EBF [4B37]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoFlashStart
 20695 00003EC1 [4B37]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoFlashStart
 20696 00003EC3 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 20697 00003EC4 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 20698 00003EC5 00<rept>            <1> iend
 20699                              <1> 
 20700                              <1> g_MenuitemFlashEepromType:
 20701                              <1> istruc MENUITEM
 20702 00003ED6 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 20703 00003ED8 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 20704 00003EDA [4136]              <1> 	at	MENUITEM.szName,			dw	g_szItemFlashEepromType
 20705 00003EDC [3E37]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoFlashEepromType
 20706 00003EDE [3E37]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoFlashEepromType
 20707 00003EE0 19                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_PROGRAMVAR | FLG_MENUITEM_BYTEVALUE | FLG_MENUITEM_VISIBLE
 20708 00003EE1 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 20709 00003EE2 0800                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	CFGVARS.bEepromType
 20710 00003EE4 [8936]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgFlashEepromType
 20711 00003EE6 [FC3A]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceEepromType
 20712 00003EE8 [673F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForEepromType
 20713 00003EEA [713F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForEepromType
 20714 00003EEC 00<rept>            <1> iend
 20715                              <1> 
 20716                              <1> g_MenuitemFlashSdpCommand:
 20717                              <1> istruc MENUITEM
 20718 00003EF3 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 20719 00003EF5 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 20720 00003EF7 [4D36]              <1> 	at	MENUITEM.szName,			dw	g_szItemFlashSDP
 20721 00003EF9 [6237]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoFlashSDP
 20722 00003EFB [0738]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpFlashSDP
 20723 00003EFD 19                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_PROGRAMVAR | FLG_MENUITEM_BYTEVALUE | FLG_MENUITEM_VISIBLE
 20724 00003EFE 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 20725 00003EFF 0A00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	CFGVARS.bSdpCommand
 20726 00003F01 [9D36]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgFlashSDP
 20727 00003F03 [633B]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceSdpCommand
 20728 00003F05 [7B3F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForSdpCommand
 20729 00003F07 [813F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForSdpCommand
 20730 00003F09 00<rept>            <1> iend
 20731                              <1> 
 20732                              <1> g_MenuitemFlashPageSize:
 20733                              <1> istruc MENUITEM
 20734 00003F10 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 20735 00003F12 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 20736 00003F14 [6836]              <1> 	at	MENUITEM.szName,			dw	g_szItemFlashPageSize
 20737 00003F16 [AF37]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoFlashPageSize
 20738 00003F18 [4339]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpFlashPageSize
 20739 00003F1A 19                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_PROGRAMVAR | FLG_MENUITEM_BYTEVALUE | FLG_MENUITEM_VISIBLE
 20740 00003F1B 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 20741 00003F1C 0900                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	CFGVARS.bEepromPage
 20742 00003F1E [F536]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgFlashPageSize
 20743 00003F20 [833B]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoicePageSize
 20744 00003F22 [873F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForPageSize
 20745 00003F24 [953F]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForPageSize
 20746 00003F26 00<rept>            <1> iend
 20747                              <1> 
 20748                              <1> g_MenuitemFlashEepromAddress:
 20749                              <1> istruc MENUITEM
 20750 00003F2D [B31E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateHexInputForMenuitemInDSSI
 20751 00003F2F [DB20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteHexValueStringToBufferInESDIfromItemInDSSI
 20752 00003F31 [5936]              <1> 	at	MENUITEM.szName,			dw	g_szItemFlashAddr
 20753 00003F33 [8437]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoFlashAddr
 20754 00003F35 [8437]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoFlashAddr
 20755 00003F37 11                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_PROGRAMVAR | FLG_MENUITEM_VISIBLE
 20756 00003F38 0A                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_HEX
 20757 00003F39 0600                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	CFGVARS.wEepromSegment
 20758 00003F3B [C636]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgFlashAddr
 20759 00003F3D 00<rept>00C0        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	0C000h
 20760 00003F43 00F8                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	0F800h
 20761 00003F45 00<rept>            <1> iend
 20762                              <1> 
 20763                              <1> g_MenuitemFlashGenerateChecksum:
 20764                              <1> istruc MENUITEM
 20765 00003F4A [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 20766 00003F4C [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 20767 00003F4E [7236]              <1> 	at	MENUITEM.szName,			dw	g_szItemFlashChecksum
 20768 00003F50 [D637]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoFlashChecksum
 20769 00003F52 [4C3A]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpFlashChecksum
 20770 00003F54 15                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_PROGRAMVAR | FLG_MENUITEM_VISIBLE | FLG_MENUITEM_FLAGVALUE
 20771 00003F55 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 20772 00003F56 0200                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	CFGVARS.wFlags
 20773 00003F58 [0D37]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgFlashChecksum
 20774 00003F5A [B400]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBooleanFlag
 20775 00003F5C 00<rept>[1800]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFlagBooleans
 20776 00003F60 0800                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	FLG_CFGVARS_CHECKSUM
 20777 00003F62 00<rept>            <1> iend
 20778                              <1> 
 20779                              <1> g_rgwChoiceToValueLookupForEepromType:
 20780 00003F67 0000                <1> 	dw	EEPROM_TYPE.2816_2kiB
 20781 00003F69 0200                <1> 	dw	EEPROM_TYPE.2864_8kiB
 20782 00003F6B 0400                <1> 	dw	EEPROM_TYPE.2864_8kiB_MOD
 20783 00003F6D 0600                <1> 	dw	EEPROM_TYPE.28256_32kiB
 20784 00003F6F 0800                <1> 	dw	EEPROM_TYPE.28512_64kiB
 20785                              <1> g_rgszValueToStringLookupForEepromType:
 20786 00003F71 [453B]              <1> 	dw	g_szValueFlash2816
 20787 00003F73 [4A3B]              <1> 	dw	g_szValueFlash2864
 20788 00003F75 [4F3B]              <1> 	dw	g_szValueFlash2864Mod
 20789 00003F77 [573B]              <1> 	dw	g_szValueFlash28256
 20790 00003F79 [5D3B]              <1> 	dw	g_szValueFlash28512
 20791                              <1> 
 20792                              <1> g_rgwChoiceToValueLookupForSdpCommand:
 20793 00003F7B 0000                <1> 	dw	SDP_COMMAND.none
 20794 00003F7D 0200                <1> 	dw	SDP_COMMAND.enable
 20795 00003F7F 0400                <1> 	dw	SDP_COMMAND.disable
 20796                              <1> g_rgszValueToStringLookupForSdpCommand:
 20797 00003F81 [773B]              <1> 	dw	g_szValueFlashNone
 20798 00003F83 [7C3B]              <1> 	dw	g_szValueFlashEnable
 20799 00003F85 [6F3B]              <1> 	dw	g_szValueFlashDisable
 20800                              <1> 
 20801                              <1> g_rgwChoiceToValueLookupForPageSize:
 20802 00003F87 0000                <1> 	dw	EEPROM_PAGE.1_byte
 20803 00003F89 0200                <1> 	dw	EEPROM_PAGE.2_bytes
 20804 00003F8B 0400                <1> 	dw	EEPROM_PAGE.4_bytes
 20805 00003F8D 0600                <1> 	dw	EEPROM_PAGE.8_bytes
 20806 00003F8F 0800                <1> 	dw	EEPROM_PAGE.16_bytes
 20807 00003F91 0A00                <1> 	dw	EEPROM_PAGE.32_bytes
 20808 00003F93 0C00                <1> 	dw	EEPROM_PAGE.64_bytes
 20809                              <1> g_rgszValueToStringLookupForPageSize:
 20810 00003F95 [BD3B]              <1> 	dw	g_szValueFlash1byte
 20811 00003F97 [C43B]              <1> 	dw	g_szValueFlash2bytes
 20812 00003F99 [CC3B]              <1> 	dw	g_szValueFlash4bytes
 20813 00003F9B [D43B]              <1> 	dw	g_szValueFlash8bytes
 20814 00003F9D [DC3B]              <1> 	dw	g_szValueFlash16bytes
 20815 00003F9F [E53B]              <1> 	dw	g_szValueFlash32bytes
 20816 00003FA1 [B43B]              <1> 	dw	g_szValueFlash64bytes
 20817                              <1> 
 20818                              <1> 
 20819                              <1> ; Section containing code
 20820                              <1> SECTION .text
 20821                              <1> 
 20822                              <1> ;--------------------------------------------------------------------
 20823                              <1> ; MainMenu_EnterMenuOrModifyItemVisibility
 20824                              <1> ;	Parameters:
 20825                              <1> ;		SS:BP:	Menu handle
 20826                              <1> ;	Returns:
 20827                              <1> ;		Nothing
 20828                              <1> ;	Corrupts registers:
 20829                              <1> ;		All, except BP
 20830                              <1> ;--------------------------------------------------------------------
 20831                              <1> ALIGN JUMP_ALIGN
 20832                              <1> FlashMenu_EnterMenuOrModifyItemVisibility:
 20833 000022AE 0E                  <1> 	push	cs
 20834 000022AF 1F                  <1> 	pop		ds
 20835                              <1> 
 20836 000022B0 2E833E[CA43]00      <1> 	cmp		word [cs:g_cfgVars+CFGVARS.wEepromSegment], 0
 20837 000022B6 7512                <1> 	jnz		.alreadySet
 20838                              <1> 
 20839 000022B8 06                  <1> 	push	es
 20840 000022B9 57                  <1> 	push	di
 20841 000022BA E8A8F7              <1> 	call	EEPROM_FindXtideUniversalBiosROMtoESDI
 20842 000022BD 06                  <1> 	push	es
 20843 000022BE 58                  <1> 	pop		ax
 20844 000022BF 5F                  <1> 	pop		di
 20845 000022C0 07                  <1> 	pop		es
 20846 000022C1 7203                <1> 	jc		.storeEepromSegment
 20847 000022C3 B800D0              <1> 	mov		ax, DEFAULT_EEPROM_SEGMENT
 20848                              <1> .storeEepromSegment:
 20849 000022C6 2EA3[CA43]          <1> 	mov		word [cs:g_cfgVars+CFGVARS.wEepromSegment], ax
 20850                              <1> 
 20851                              <1> .alreadySet:
 20852                              <1> 
 20853 000022CA BE[963E]            <1> 	mov		si, g_MenupageForFlashMenu
 20854 000022CD E937FE              <1> 	jmp		Menupage_ChangeToNewMenupageInDSSI
 20855                              <1> 
 20856                              <1> 
 20857                              <1> ;--------------------------------------------------------------------
 20858                              <1> ; MENUITEM activation functions (.fnActivate)
 20859                              <1> ;	Parameters:
 20860                              <1> ;		SS:BP:	Ptr to MENU
 20861                              <1> ;	Returns:
 20862                              <1> ;		Nothing
 20863                              <1> ;	Corrupts registers:
 20864                              <1> ;		All, except segments
 20865                              <1> ;--------------------------------------------------------------------
 20866                              <1> ALIGN JUMP_ALIGN
 20867                              <1> StartFlashing:
 20868 000022D0 E82100              <1> 	call	.MakeSureThatImageFitsInEeprom
 20869 000022D3 721E                <1> 	jc		SHORT .InvalidFlashingParameters
 20870 000022D5 06                  <1> 	push	es
 20871 000022D6 1E                  <1> 	push	ds
 20872                              <1> 
 20873 000022D7 E82C00              <1> 	call	.PrepareBuffersForFlashing
 20874 000022DA B93400              <1> 	mov		cx, FLASHVARS_size + PROGRESS_DIALOG_IO_size
 20875 000022DD E8E0F2              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 20876 000022E0 E83600              <1> 	call	.InitializeFlashvarsFromDSSI
 20877 000022E3 89F3                <1> 	mov		bx, si							; DS:BX now points to FLASHVARS
 20878 000022E5 83C61A              <1> 	add		si, BYTE FLASHVARS_size			; DS:SI now points to PROGRESS_DIALOG_IO
 20879 000022E8 E8FAF6              <1> 	call	Dialogs_DisplayProgressDialogForFlashingWithDialogIoInDSSIandFlashvarsInDSBX
 20880 000022EB E88C00              <1> 	call	.DisplayFlashingResultsFromFlashvarsInDSBX
 20881                              <1> 
 20882 000022EE 83C434              <1> 	add		sp, BYTE FLASHVARS_size + PROGRESS_DIALOG_IO_size
 20883 000022F1 1F                  <1> 	pop		ds
 20884 000022F2 07                  <1> 	pop		es
 20885                              <1> .InvalidFlashingParameters:
 20886 000022F3 C3                  <1> 	ret
 20887                              <1> 
 20888                              <1> ;--------------------------------------------------------------------
 20889                              <1> ; .MakeSureThatImageFitsInEeprom
 20890                              <1> ;	Parameters:
 20891                              <1> ;		SS:BP:	Ptr to MENU
 20892                              <1> ;	Returns:
 20893                              <1> ;		CF:		Set if EEPROM too small
 20894                              <1> ;	Corrupts registers:
 20895                              <1> ;		AX, BX, DX
 20896                              <1> ;--------------------------------------------------------------------
 20897                              <1> ALIGN JUMP_ALIGN
 20898                              <1> .MakeSureThatImageFitsInEeprom:
 20899 000022F4 E87600              <1> 	call	.GetSelectedEepromSizeInWordsToAX
 20900 000022F7 2E3B06[C843]        <1> 	cmp		ax, [cs:g_cfgVars+CFGVARS.wImageSizeInWords]
 20901 000022FC 7307                <1> 	jae		SHORT .ImageFitsInSelectedEeprom
 20902 000022FE BA[5F01]            <1> 	mov		dx, g_szErrEepromTooSmall
 20903 00002301 E865F6              <1> 	call	Dialogs_DisplayErrorFromCSDX
 20904 00002304 F9                  <1> 	stc
 20905                              <1> ALIGN JUMP_ALIGN, ret
 20906                              <1> .ImageFitsInSelectedEeprom:
 20907 00002305 C3                  <1> 	ret
 20908                              <1> 
 20909                              <1> ;--------------------------------------------------------------------
 20910                              <1> ; .PrepareBuffersForFlashing
 20911                              <1> ;	Parameters:
 20912                              <1> ;		SS:BP:	Ptr to MENU
 20913                              <1> ;	Returns:
 20914                              <1> ;		Nothing
 20915                              <1> ;	Corrupts registers:
 20916                              <1> ;		AX, BX, CX, SI, DI
 20917                              <1> ;--------------------------------------------------------------------
 20918                              <1> ALIGN JUMP_ALIGN
 20919                              <1> .PrepareBuffersForFlashing:
 20920 00002306 E876F7              <1> 	call	EEPROM_LoadFromRomToRamComparisonBuffer
 20921 00002309 E8BAF5              <1> 	call	Buffers_AppendZeroesIfNeeded
 20922 0000230C 2EF706[C643]0800    <1> 	test	WORD [cs:g_cfgVars+CFGVARS.wFlags], FLG_CFGVARS_CHECKSUM
 20923 00002313 7403                <1> 	jz		SHORT .DoNotGenerateChecksumByte
 20924 00002315 E9D6F5              <1> 	jmp		Buffers_GenerateChecksum
 20925                              <1> .DoNotGenerateChecksumByte:
 20926 00002318 C3                  <1> 	ret
 20927                              <1> 
 20928                              <1> ;--------------------------------------------------------------------
 20929                              <1> ; .InitializeFlashvarsFromDSSI
 20930                              <1> ;	Parameters:
 20931                              <1> ;		DS:SI:	Ptr to FLASHVARS to initialize
 20932                              <1> ;		SS:BP:	Ptr to MENU
 20933                              <1> ;	Returns:
 20934                              <1> ;		Nothing
 20935                              <1> ;	Corrupts registers:
 20936                              <1> ;		AX, BX, DX, DI, ES
 20937                              <1> ;--------------------------------------------------------------------
 20938                              <1> ALIGN JUMP_ALIGN
 20939                              <1> .InitializeFlashvarsFromDSSI:
 20940 00002319 E81EF6              <1> 	call	Buffers_GetFileBufferToESDI
 20941 0000231C 893C                <1> 	mov		[si+FLASHVARS.fpNextSourcePage], di
 20942 0000231E 8C4402              <1> 	mov		[si+FLASHVARS.fpNextSourcePage+2], es
 20943                              <1> 
 20944 00002321 E808F6              <1> 	call	Buffers_GetFlashComparisonBufferToESDI
 20945 00002324 897C04              <1> 	mov		[si+FLASHVARS.fpNextComparisonPage], di
 20946 00002327 8C4406              <1> 	mov		[si+FLASHVARS.fpNextComparisonPage+2], es
 20947                              <1> 
 20948 0000232A 2EA1[CA43]          <1> 	mov		ax, [cs:g_cfgVars+CFGVARS.wEepromSegment]
 20949 0000232E C744080000          <1> 	mov		WORD [si+FLASHVARS.fpNextDestinationPage], 0
 20950 00002333 89440A              <1> 	mov		[si+FLASHVARS.fpNextDestinationPage+2], ax
 20951                              <1> 
 20952 00002336 2EA0[CC43]          <1> 	mov		al, [cs:g_cfgVars+CFGVARS.bEepromType]
 20953 0000233A 884411              <1> 	mov		[si+FLASHVARS.bEepromType], al
 20954                              <1> 
 20955 0000233D 2EA0[CE43]          <1> 	mov		al, [cs:g_cfgVars+CFGVARS.bSdpCommand]
 20956 00002341 884410              <1> 	mov		[si+FLASHVARS.bEepromSdpCommand], al
 20957                              <1> 
 20958                              <1> 	eMOVZX	bx, [cs:g_cfgVars+CFGVARS.bEepromPage]
 20959                              <2> %ifndef USE_386
 20960                              <2>  %ifidni %1, ax
 20961                              <2>  mov al, %2
 20962                              <2>  xor ah, ah
 20963                              <2>  %elifidni %1, bx
 20964 00002344 2E8A1E[CD43]        <2>  mov bl, %2
 20965 00002349 30FF                <2>  xor bh, bh
 20966                              <2>  %elifidni %1, cx
 20967                              <2>  mov cl, %2
 20968                              <2>  xor ch, ch
 20969                              <2>  %elifidni %1, dx
 20970                              <2>  mov dl, %2
 20971                              <2>  xor dh, dh
 20972                              <2>  %else
 20973                              <2>  push ax
 20974                              <2>  mov al, %2
 20975                              <2>  xor ah, ah
 20976                              <2>  xchg ax, %1
 20977                              <2>  pop ax
 20978                              <2>  %endif
 20979                              <2> 
 20980                              <2> %else
 20981                              <2>  movzx %1, %2
 20982                              <2> %endif
 20983 0000234B 2E8B87[0A00]        <1> 	mov		ax, [cs:bx+g_rgwEepromPageToSizeInBytes]
 20984 00002350 89440E              <1> 	mov		[si+FLASHVARS.wEepromPageSize], ax
 20985                              <1> 
 20986 00002353 E80400              <1> 	call	.GetNumberOfPagesToFlashToAX
 20987 00002356 89440C              <1> 	mov		[si+FLASHVARS.wPagesToFlash], ax
 20988 00002359 C3                  <1> 	ret
 20989                              <1> 
 20990                              <1> ;--------------------------------------------------------------------
 20991                              <1> ; .GetNumberOfPagesToFlashToAX
 20992                              <1> ;	Parameters:
 20993                              <1> ;		DS:SI:	Ptr to FLASHVARS to initialize
 20994                              <1> ;	Returns:
 20995                              <1> ;		AX:		Number of pages to flash (0 = 65536)
 20996                              <1> ;	Corrupts registers:
 20997                              <1> ;		BX, DX
 20998                              <1> ;--------------------------------------------------------------------
 20999                              <1> ALIGN JUMP_ALIGN
 21000                              <1> .GetNumberOfPagesToFlashToAX:
 21001 0000235A E81000              <1> 	call	.GetSelectedEepromSizeInWordsToAX
 21002 0000235D 31D2                <1> 	xor		dx, dx
 21003 0000235F D1E0                <1> 	shl		ax, 1		; Size in bytes to...
 21004 00002361 D1D2                <1> 	rcl		dx, 1		; ...DX:AX
 21005                              <1> 
 21006 00002363 837C0E01            <1> 	cmp		WORD [si+FLASHVARS.wEepromPageSize], BYTE 1
 21007 00002367 7603                <1> 	jbe		SHORT .PreventDivideException
 21008 00002369 F7740E              <1> 	div		WORD [si+FLASHVARS.wEepromPageSize]
 21009                              <1> .PreventDivideException:
 21010 0000236C C3                  <1> 	ret
 21011                              <1> 
 21012                              <1> ;--------------------------------------------------------------------
 21013                              <1> ; .GetSelectedEepromSizeInWordsToAX
 21014                              <1> ;	Parameters:
 21015                              <1> ;		Nothing
 21016                              <1> ;	Returns:
 21017                              <1> ;		AX:		Selected EEPROM size in WORDs
 21018                              <1> ;	Corrupts registers:
 21019                              <1> ;		BX
 21020                              <1> ;--------------------------------------------------------------------
 21021                              <1> ALIGN JUMP_ALIGN
 21022                              <1> .GetSelectedEepromSizeInWordsToAX:
 21023                              <1> 	eMOVZX	bx, [cs:g_cfgVars+CFGVARS.bEepromType]
 21024                              <2> %ifndef USE_386
 21025                              <2>  %ifidni %1, ax
 21026                              <2>  mov al, %2
 21027                              <2>  xor ah, ah
 21028                              <2>  %elifidni %1, bx
 21029 0000236D 2E8A1E[CC43]        <2>  mov bl, %2
 21030 00002372 30FF                <2>  xor bh, bh
 21031                              <2>  %elifidni %1, cx
 21032                              <2>  mov cl, %2
 21033                              <2>  xor ch, ch
 21034                              <2>  %elifidni %1, dx
 21035                              <2>  mov dl, %2
 21036                              <2>  xor dh, dh
 21037                              <2>  %else
 21038                              <2>  push ax
 21039                              <2>  mov al, %2
 21040                              <2>  xor ah, ah
 21041                              <2>  xchg ax, %1
 21042                              <2>  pop ax
 21043                              <2>  %endif
 21044                              <2> 
 21045                              <2> %else
 21046                              <2>  movzx %1, %2
 21047                              <2> %endif
 21048 00002374 2E8B87[0000]        <1> 	mov		ax, [cs:bx+g_rgwEepromTypeToSizeInWords]
 21049 00002379 C3                  <1> 	ret
 21050                              <1> 
 21051                              <1> ;--------------------------------------------------------------------
 21052                              <1> ; .DisplayFlashingResultsFromFlashvarsInDSBX
 21053                              <1> ;	Parameters:
 21054                              <1> ;		DS:BX:	Ptr to FLASHVARS
 21055                              <1> ;		SS:BP:	Ptr to MENU
 21056                              <1> ;	Returns:
 21057                              <1> ;		Nothing
 21058                              <1> ;	Corrupts registers:
 21059                              <1> ;		AX, BX, DX
 21060                              <1> ;--------------------------------------------------------------------
 21061                              <1> ALIGN JUMP_ALIGN
 21062                              <1> .DisplayFlashingResultsFromFlashvarsInDSBX:
 21063                              <1> 	eMOVZX	bx, [bx+FLASHVARS.flashResult]
 21064                              <2> %ifndef USE_386
 21065                              <2>  %ifidni %1, ax
 21066                              <2>  mov al, %2
 21067                              <2>  xor ah, ah
 21068                              <2>  %elifidni %1, bx
 21069 0000237A 8A5F19              <2>  mov bl, %2
 21070 0000237D 30FF                <2>  xor bh, bh
 21071                              <2>  %elifidni %1, cx
 21072                              <2>  mov cl, %2
 21073                              <2>  xor ch, ch
 21074                              <2>  %elifidni %1, dx
 21075                              <2>  mov dl, %2
 21076                              <2>  xor dh, dh
 21077                              <2>  %else
 21078                              <2>  push ax
 21079                              <2>  mov al, %2
 21080                              <2>  xor ah, ah
 21081                              <2>  xchg ax, %1
 21082                              <2>  pop ax
 21083                              <2>  %endif
 21084                              <2> 
 21085                              <2> %else
 21086                              <2>  movzx %1, %2
 21087                              <2> %endif
 21088 0000237F 2EFFA7[8423]        <1> 	jmp		[cs:bx+.rgfnFlashResultMessage]
 21089                              <1> 
 21090                              <1> ALIGN WORD_ALIGN
 21091                              <1> .rgfnFlashResultMessage:
 21092 00002384 [9623]              <1> 	dw		.DisplayFlashSuccessful
 21093 00002386 [8A23]              <1> 	dw		.DisplayPollingError
 21094 00002388 [9023]              <1> 	dw		.DisplayDataVerifyError
 21095                              <1> 
 21096                              <1> 
 21097                              <1> ;--------------------------------------------------------------------
 21098                              <1> ; .DisplayPollingError
 21099                              <1> ; .DisplayDataVerifyError
 21100                              <1> ; .DisplayFlashSuccessful
 21101                              <1> ;	Parameters:
 21102                              <1> ;		SS:BP:	Ptr to MENU
 21103                              <1> ;	Returns:
 21104                              <1> ;		Nothing
 21105                              <1> ;	Corrupts registers:
 21106                              <1> ;		AX, DX, DI, ES
 21107                              <1> ;--------------------------------------------------------------------
 21108                              <1> ALIGN JUMP_ALIGN
 21109                              <1> .DisplayPollingError:
 21110 0000238A BA[8C01]            <1> 	mov		dx, g_szErrEepromPolling
 21111 0000238D E9D9F5              <1> 	jmp		Dialogs_DisplayErrorFromCSDX
 21112                              <1> 
 21113                              <1> ALIGN JUMP_ALIGN
 21114                              <1> .DisplayDataVerifyError:
 21115 00002390 BA[CA01]            <1> 	mov		dx, g_szErrEepromVerify
 21116 00002393 E9D3F5              <1> 	jmp		Dialogs_DisplayErrorFromCSDX
 21117                              <1> 
 21118                              <1> ALIGN JUMP_ALIGN
 21119                              <1> .DisplayFlashSuccessful:
 21120 00002396 E8A1F5              <1> 	call	Buffers_GetFileBufferToESDI
 21121 00002399 26813D55AA          <1> 	cmp		WORD [es:di+ROMVARS.wRomSign], 0AA55h	; PC ROM?
 21122 0000239E 7406                <1> 	je		SHORT .DisplayRebootMessageAndReboot
 21123 000023A0 BA[5B02]            <1> 	mov		dx, g_szForeignFlash
 21124 000023A3 E9B0F5              <1> 	jmp		Dialogs_DisplayNotificationFromCSDX
 21125                              <1> ALIGN JUMP_ALIGN
 21126                              <1> .DisplayRebootMessageAndReboot:
 21127 000023A6 BA[2102]            <1> 	mov		dx, g_szPCFlashSuccessful
 21128 000023A9 E8AAF5              <1> 	call	Dialogs_DisplayNotificationFromCSDX
 21129 000023AC 31C0                <1> 	xor		ax, ax			; Cold boot flag
 21130 000023AE E9C8F1              <1> 	jmp		Reboot_ComputerWithBootFlagInAX
 21131                                  %include "IdeControllerMenu.asm"
 21132                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 21133                              <1> ; Description	:	"IDE Controller" menu structs and functions.
 21134                              <1> 
 21135                              <1> ;
 21136                              <1> ; XTIDE Universal BIOS and Associated Tools
 21137                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 21138                              <1> ;
 21139                              <1> ; This program is free software; you can redistribute it and/or modify
 21140                              <1> ; it under the terms of the GNU General Public License as published by
 21141                              <1> ; the Free Software Foundation; either version 2 of the License, or
 21142                              <1> ; (at your option) any later version.
 21143                              <1> ;
 21144                              <1> ; This program is distributed in the hope that it will be useful,
 21145                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 21146                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 21147                              <1> ; GNU General Public License for more details.
 21148                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 21149                              <1> ;
 21150                              <1> 
 21151                              <1> ; Modified by JJP for XT-CFv3 support, Mar-13
 21152                              <1> 
 21153                              <1> ; Section containing initialized data
 21154                              <1> SECTION .data
 21155                              <1> 
 21156                              <1> ALIGN WORD_ALIGN
 21157                              <1> g_MenupageForIdeControllerMenu:
 21158                              <1> istruc MENUPAGE
 21159 00003FA3 [F323]              <1> 	at	MENUPAGE.fnEnter,		dw	IdeControllerMenu_EnterMenuOrModifyItemVisibility
 21160 00003FA5 [A421]              <1> 	at	MENUPAGE.fnBack,		dw	ConfigurationMenu_EnterMenuOrModifyItemVisibility
 21161 00003FA7 0B00                <1> 	at	MENUPAGE.wMenuitems,		dw	11
 21162                              <1> iend
 21163                              <1> 
 21164                              <1> g_MenuitemIdeControllerBackToConfigurationMenu:
 21165                              <1> istruc MENUITEM
 21166 00003FA9 [A421]              <1> 	at	MENUITEM.fnActivate,		dw	ConfigurationMenu_EnterMenuOrModifyItemVisibility
 21167 00003FAB 00<rept>[5E14]      <1> 	at	MENUITEM.szName,			dw	g_szItemBackToCfgMenu
 21168 00003FAF [0616]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeBackToCfgMenu
 21169 00003FB1 [0616]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoIdeBackToCfgMenu
 21170 00003FB3 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 21171 00003FB4 00                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGEBACK
 21172 00003FB5 00<rept>            <1> iend
 21173                              <1> 
 21174                              <1> g_MenuitemIdeControllerMasterDrive:
 21175                              <1> istruc MENUITEM
 21176 00003FC6 [9124]              <1> 	at	MENUITEM.fnActivate,		dw	MasterDrive
 21177 00003FC8 00<rept>[7914]      <1> 	at	MENUITEM.szName,			dw	g_szItemIdeMaster
 21178 00003FCC [3716]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeMaster
 21179 00003FCE [3716]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoIdeMaster
 21180 00003FD0 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 21181 00003FD1 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 21182 00003FD2 00<rept>            <1> iend
 21183                              <1> 
 21184                              <1> g_MenuitemIdeControllerSlaveDrive:
 21185                              <1> istruc MENUITEM
 21186 00003FE3 [9824]              <1> 	at	MENUITEM.fnActivate,		dw	SlaveDrive
 21187 00003FE5 00<rept>[8614]      <1> 	at	MENUITEM.szName,			dw	g_szItemIdeSlave
 21188 00003FE9 [5216]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeSlave
 21189 00003FEB [5216]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoIdeSlave
 21190 00003FED 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 21191 00003FEE 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 21192 00003FEF 00<rept>            <1> iend
 21193                              <1> 
 21194                              <1> g_MenuitemIdeControllerDevice:
 21195                              <1> istruc MENUITEM
 21196 00004000 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 21197 00004002 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromRawItemInDSSI
 21198 00004004 [9214]              <1> 	at	MENUITEM.szName,			dw	g_szItemIdeDevice
 21199 00004006 [6C16]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeDevice
 21200 00004008 [6C16]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoIdeDevice
 21201 0000400A 0B                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_BYTEVALUE | FLG_MENUITEM_MODIFY_MENU
 21202 0000400B 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 21203 0000400C 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21204 0000400E [1D15]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDevice
 21205 00004010 [AB22]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceCfgDevice
 21206 00004012 [E840]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForDevice
 21207 00004014 [FC40]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForDevice
 21208 00004016 00<rept>[C024]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueWriter,				dw	IdeControllerMenu_WriteDevice
 21209 0000401C 00                  <1> iend
 21210                              <1> 
 21211                              <1> g_MenuitemIdeControllerCommandBlockAddress:
 21212                              <1> istruc MENUITEM
 21213 0000401D [B31E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateHexInputForMenuitemInDSSI
 21214 0000401F [DB20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteHexValueStringToBufferInESDIfromItemInDSSI
 21215 00004021 [9E14]              <1> 	at	MENUITEM.szName,			dw	g_szItemIdeCmdPort
 21216 00004023 [8B16]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeCmdPort
 21217 00004025 [8318]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpIdeCmdPort
 21218 00004027 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 21219 00004028 0A                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_HEX
 21220 00004029 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21221 0000402B [3515]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgIdeCmdPort
 21222 0000402D 00<rept>0000        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	0
 21223 00004033 FFFF                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	-1
 21224 00004035 00<rept>            <1> iend
 21225                              <1> 
 21226                              <1> g_MenuitemIdeControllerControlBlockAddress:
 21227                              <1> istruc MENUITEM
 21228 0000403A [B31E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateHexInputForMenuitemInDSSI
 21229 0000403C [DB20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteHexValueStringToBufferInESDIfromItemInDSSI
 21230 0000403E [B714]              <1> 	at	MENUITEM.szName,			dw	g_szItemIdeCtrlPort
 21231 00004040 [DF16]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeCtrlPort
 21232 00004042 [BA19]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpIdeCtrlPort
 21233 00004044 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 21234 00004045 0A                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_HEX
 21235 00004046 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21236 00004048 [6215]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgIdeCtrlPort
 21237 0000404A 00<rept>0000        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	0
 21238 00004050 FFFF                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	-1
 21239 00004052 00<rept>            <1> iend
 21240                              <1> 
 21241                              <1> g_MenuitemIdeControllerSerialCOM:
 21242                              <1> istruc MENUITEM
 21243 00004057 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 21244 00004059 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromRawItemInDSSI
 21245 0000405B [E214]              <1> 	at	MENUITEM.szName,			dw	g_szItemSerialCOM
 21246 0000405D [7317]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeSerialCOM
 21247 0000405F [561D]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpIdeSerialCOM
 21248 00004061 2A                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_MODIFY_MENU | FLG_MENUITEM_BYTEVALUE | FLG_MENUITEM_CHOICESTRINGS
 21249 00004062 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 21250 00004063 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21251 00004065 [1D15]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDevice
 21252 00004067 [C923]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szSerialCOMChoice
 21253 00004069 [1041]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgbChoiceToValueLookupForCOM
 21254 0000406B [2A41]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszChoiceToStringLookup,	dw	g_rgszChoiceToStringLookupForCOM
 21255 0000406D 00<rept>[0825]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueWriter,				dw	IdeControllerMenu_SerialWriteCOM
 21256 00004073 00                  <1> iend
 21257                              <1> 
 21258                              <1> g_MenuitemIdeControllerSerialPort:
 21259                              <1> istruc MENUITEM
 21260 00004074 [B31E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateHexInputForMenuitemInDSSI
 21261 00004076 [DB20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteHexValueStringToBufferInESDIfromItemInDSSI
 21262 00004078 [F514]              <1> 	at	MENUITEM.szName,			dw	g_szItemSerialPort
 21263 0000407A [1118]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeSerialPort
 21264 0000407C [7D1E]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpIdeSerialPort
 21265 0000407E 0A                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_MODIFY_MENU | FLG_MENUITEM_BYTEVALUE
 21266 0000407F 0A                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_HEX
 21267 00004080 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21268 00004082 [3515]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgIdeCmdPort
 21269 00004084 00<rept>0800        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	8h
 21270 0000408A F803                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	3f8h
 21271 0000408C [2B25]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueReader,				dw	IdeControllerMenu_SerialReadPort
 21272 0000408E [3225]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueWriter,				dw	IdeControllerMenu_SerialWritePort
 21273 00004090 00                  <1> iend
 21274                              <1> 
 21275                              <1> g_MenuitemIdeControllerSerialBaud:
 21276                              <1> istruc MENUITEM
 21277 00004091 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 21278 00004093 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromRawItemInDSSI
 21279 00004095 [EB14]              <1> 	at	MENUITEM.szName,			dw	g_szItemSerialBaud
 21280 00004097 [9017]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeSerialBaud
 21281 00004099 [AA1F]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpIdeSerialBaud
 21282 0000409B 28                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_BYTEVALUE | FLG_MENUITEM_CHOICESTRINGS
 21283 0000409C 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 21284 0000409D 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21285 0000409F [1D15]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDevice
 21286 000040A1 [1225]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szSerialBaudChoice
 21287 000040A3 [5341]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgbChoiceToValueLookupForBaud
 21288 000040A5 [6341]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszChoiceToStringLookup,	dw	g_rgszChoiceToStringLookupForBaud
 21289 000040A7 00<rept>            <1> iend
 21290                              <1> 
 21291                              <1> g_MenuitemIdeControllerEnableInterrupt:
 21292                              <1> istruc MENUITEM
 21293 000040AE [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 21294 000040B0 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 21295 000040B2 [CD14]              <1> 	at	MENUITEM.szName,			dw	g_szItemIdeEnIRQ
 21296 000040B4 [4417]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeEnIRQ
 21297 000040B6 [951A]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpIdeEnIRQ
 21298 000040B8 06                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_MODIFY_MENU | FLG_MENUITEM_FLAGVALUE
 21299 000040B9 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 21300 000040BA 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21301 000040BC [A215]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgIdeEnIRQ
 21302 000040BE [B400]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBooleanFlag
 21303 000040C0 00<rept>[1800]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFlagBooleans
 21304 000040C4 0F00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	15
 21305 000040C6 00<rept>            <1> iend
 21306                              <1> 
 21307                              <1> g_MenuitemIdeControllerIdeIRQ:
 21308                              <1> istruc MENUITEM
 21309 000040CB [C51E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 21310 000040CD [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 21311 000040CF [DE14]              <1> 	at	MENUITEM.szName,			dw	g_szItemIdeIRQ
 21312 000040D1 [5F17]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoIdeIRQ
 21313 000040D3 [901C]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpIdeIRQ
 21314 000040D5 08                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_BYTEVALUE
 21315 000040D6 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 21316 000040D7 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 21317 000040D9 [B415]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgIdeIRQ
 21318 000040DB 00<rept>0200        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	2
 21319 000040E1 0F00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	15
 21320 000040E3 00<rept>            <1> iend
 21321                              <1> 
 21322                              <1> g_rgwChoiceToValueLookupForDevice:
 21323 000040E8 0000                <1> 	dw	DEVICE_16BIT_ATA
 21324 000040EA 0200                <1> 	dw	DEVICE_32BIT_ATA
 21325 000040EC 0400                <1> 	dw	DEVICE_8BIT_ATA
 21326 000040EE 0600                <1> 	dw	DEVICE_8BIT_XTIDE_REV1
 21327 000040F0 0800                <1> 	dw	DEVICE_8BIT_XTIDE_REV2
 21328 000040F2 0A00                <1> 	dw	DEVICE_8BIT_XTCF_PIO8
 21329 000040F4 0C00                <1> 	dw	DEVICE_8BIT_XTCF_PIO8_WITH_BIU_OFFLOAD
 21330 000040F6 0E00                <1> 	dw	DEVICE_8BIT_XTCF_DMA
 21331 000040F8 1000                <1> 	dw	DEVICE_8BIT_JRIDE_ISA
 21332 000040FA 1200                <1> 	dw	DEVICE_SERIAL_PORT
 21333                              <1> g_rgszValueToStringLookupForDevice:
 21334 000040FC [7A23]              <1> 	dw	g_szValueCfgDevice16b
 21335 000040FE [8123]              <1> 	dw	g_szValueCfgDevice32b
 21336 00004100 [8823]              <1> 	dw	g_szValueCfgDevice8b
 21337 00004102 [8E23]              <1> 	dw	g_szValueCfgDeviceRev1
 21338 00004104 [9723]              <1> 	dw	g_szValueCfgDeviceRev2
 21339 00004106 [A023]              <1> 	dw	g_szValueCfgDeviceXTCFPio8
 21340 00004108 [A923]              <1> 	dw	g_szValueCfgDeviceXTCFPio8WithBIUOffload
 21341 0000410A [B223]              <1> 	dw	g_szValueCfgDeviceXTCFDMA
 21342 0000410C [BB23]              <1> 	dw	g_szValueCfgDeviceJrIdeIsa
 21343 0000410E [C223]              <1> 	dw	g_szValueCfgDeviceSerial
 21344                              <1> 
 21345                              <1> g_rgbChoiceToValueLookupForCOM:
 21346 00004110 3100                <1> 	dw	'1'
 21347 00004112 3200                <1> 	dw	'2'
 21348 00004114 3300                <1> 	dw	'3'
 21349 00004116 3400                <1> 	dw	'4'
 21350 00004118 3500                <1> 	dw	'5'
 21351 0000411A 3600                <1> 	dw	'6'
 21352 0000411C 3700                <1> 	dw	'7'
 21353 0000411E 3800                <1> 	dw	'8'
 21354 00004120 3900                <1> 	dw	'9'
 21355 00004122 4100                <1> 	dw	'A'
 21356 00004124 4200                <1> 	dw	'B'
 21357 00004126 4300                <1> 	dw	'C'
 21358 00004128 7800                <1> 	dw	'x'				; must be last entry (see reader/write routines)
 21359                              <1> g_rgszChoiceToStringLookupForCOM:
 21360 0000412A [CF24]              <1> 	dw	g_szValueCfgCOM1
 21361 0000412C [D424]              <1> 	dw	g_szValueCfgCOM2
 21362 0000412E [D924]              <1> 	dw	g_szValueCfgCOM3
 21363 00004130 [DE24]              <1> 	dw	g_szValueCfgCOM4
 21364 00004132 [E324]              <1> 	dw	g_szValueCfgCOM5
 21365 00004134 [E824]              <1> 	dw	g_szValueCfgCOM6
 21366 00004136 [ED24]              <1> 	dw	g_szValueCfgCOM7
 21367 00004138 [F224]              <1> 	dw	g_szValueCfgCOM8
 21368 0000413A [F724]              <1> 	dw	g_szValueCfgCOM9
 21369 0000413C [FC24]              <1> 	dw	g_szValueCfgCOMA
 21370 0000413E [0125]              <1> 	dw	g_szValueCfgCOMB
 21371 00004140 [0625]              <1> 	dw	g_szValueCfgCOMC
 21372 00004142 [0B25]              <1> 	dw	g_szValueCfgCOMx
 21373 00004144 0000                <1> 	dw	NULL
 21374                              <1> 
 21375                              <1> SERIAL_DEFAULT_CUSTOM_PORT   EQU		300h           ; can't be any of the pre-defined COM values
 21376                              <1> 
 21377                              <1> PackedCOMPortAddresses:				; COM1 - COMC (or COM12)
 21378 00004146 FE                  <1> 	db      SERIAL_COM1_IOADDRESS >> 2
 21379 00004147 BE                  <1> 	db		SERIAL_COM2_IOADDRESS >> 2
 21380 00004148 FA                  <1> 	db		SERIAL_COM3_IOADDRESS >> 2
 21381 00004149 BA                  <1> 	db		SERIAL_COM4_IOADDRESS >> 2
 21382 0000414A BC                  <1> 	db		SERIAL_COM5_IOADDRESS >> 2
 21383 0000414B F8                  <1> 	db		SERIAL_COM6_IOADDRESS >> 2
 21384 0000414C B8                  <1> 	db		SERIAL_COM7_IOADDRESS >> 2
 21385 0000414D 98                  <1> 	db		SERIAL_COM8_IOADDRESS >> 2
 21386 0000414E DA                  <1> 	db		SERIAL_COM9_IOADDRESS >> 2
 21387 0000414F 9A                  <1> 	db		SERIAL_COMA_IOADDRESS >> 2
 21388 00004150 D8                  <1> 	db		SERIAL_COMB_IOADDRESS >> 2
 21389 00004151 9C                  <1> 	db		SERIAL_COMC_IOADDRESS >> 2
 21390 00004152 C0                  <1> 	db		SERIAL_DEFAULT_CUSTOM_PORT >> 2			; must be last entry (see reader/writer routines)
 21391                              <1> SERIAL_DEFAULT_COM			EQU		'1'
 21392                              <1> 
 21393                              <1> g_rgbChoiceToValueLookupForBaud:
 21394 00004153 0100                <1> 	dw		(115200 / 115200) & 0xff
 21395 00004155 0200                <1> 	dw		(115200 /  57600) & 0xff
 21396 00004157 0300                <1> 	dw		(115200 /  38400) & 0xff
 21397 00004159 0400                <1> 	dw		(115200 /  28800) & 0xff
 21398 0000415B 0600                <1> 	dw		(115200 /  19200) & 0xff
 21399 0000415D 0C00                <1> 	dw		(115200 /   9600) & 0xff
 21400 0000415F 1800                <1> 	dw		(115200 /   4800) & 0xff
 21401 00004161 3000                <1> 	dw		(115200 /   2400) & 0xff
 21402                              <1> g_rgszChoiceToStringLookupForBaud:
 21403 00004163 [6825]              <1> 	dw		g_szValueCfgBaud115_2
 21404 00004165 [6F25]              <1> 	dw		g_szValueCfgBaud57_6
 21405 00004167 [7525]              <1> 	dw		g_szValueCfgBaud38_4
 21406 00004169 [7B25]              <1> 	dw		g_szValueCfgBaud28_8
 21407 0000416B [8125]              <1> 	dw		g_szValueCfgBaud19_2
 21408 0000416D [8725]              <1> 	dw		g_szValueCfgBaud9600
 21409 0000416F [8C25]              <1> 	dw		g_szValueCfgBaud4800
 21410 00004171 [9125]              <1> 	dw		g_szValueCfgBaud2400
 21411 00004173 0000                <1> 	dw		NULL
 21412                              <1> SERIAL_DEFAULT_BAUD			EQU		((115200 / 9600)	& 0xff)
 21413                              <1> 
 21414                              <1> ; Section containing code
 21415                              <1> SECTION .text
 21416                              <1> 
 21417                              <1> ;--------------------------------------------------------------------
 21418                              <1> ; IdeControllerMenu_InitializeToIdevarsOffsetInBX
 21419                              <1> ;	Parameters:
 21420                              <1> ;		SS:BP:	Menu handle
 21421                              <1> ;	Returns:
 21422                              <1> ;		Nothing
 21423                              <1> ;	Corrupts registers:
 21424                              <1> ;		AX
 21425                              <1> ;--------------------------------------------------------------------
 21426                              <1> ALIGN JUMP_ALIGN
 21427                              <1> IdeControllerMenu_InitializeToIdevarsOffsetInBX:
 21428 000023B1 8D4706              <1> 	lea		ax, [bx+IDEVARS.drvParamsMaster]
 21429 000023B4 2EA3[D23F]          <1> 	mov		[cs:g_MenuitemIdeControllerMasterDrive+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21430                              <1> 
 21431 000023B8 8D470C              <1> 	lea		ax, [bx+IDEVARS.drvParamsSlave]
 21432 000023BB 2EA3[EF3F]          <1> 	mov		[cs:g_MenuitemIdeControllerSlaveDrive+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21433                              <1> 
 21434 000023BF 8D4704              <1> 	lea		ax, [bx+IDEVARS.bDevice]
 21435 000023C2 2EA3[0C40]          <1> 	mov		[cs:g_MenuitemIdeControllerDevice+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21436                              <1> 
 21437 000023C6 8D07                <1> 	lea		ax, [bx+IDEVARS.wBasePort]
 21438 000023C8 2EA3[2940]          <1> 	mov		[cs:g_MenuitemIdeControllerCommandBlockAddress+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21439                              <1> 
 21440 000023CC 8D07                <1> 	lea		ax, [bx+IDEVARS.bSerialPort]
 21441 000023CE 2EA3[8040]          <1> 	mov		[cs:g_MenuitemIdeControllerSerialPort+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21442                              <1> 
 21443 000023D2 8D4701              <1> 	lea		ax, [bx+IDEVARS.bSerialBaud]
 21444 000023D5 2EA3[9D40]          <1> 	mov		[cs:g_MenuitemIdeControllerSerialBaud+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21445                              <1> 
 21446 000023D9 8D4702              <1> 	lea		ax, [bx+IDEVARS.wControlBlockPort]
 21447 000023DC 2EA3[4640]          <1> 	mov		[cs:g_MenuitemIdeControllerControlBlockAddress+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21448                              <1> 
 21449 000023E0 8D4703              <1> 	lea		ax, [bx+IDEVARS.bSerialCOMPortChar]
 21450 000023E3 2EA3[6340]          <1> 	mov		[cs:g_MenuitemIdeControllerSerialCOM+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21451                              <1> 
 21452 000023E7 8D4705              <1> 	lea		ax, [bx+IDEVARS.bIRQ]
 21453 000023EA 2EA3[BA40]          <1> 	mov		[cs:g_MenuitemIdeControllerEnableInterrupt+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21454 000023EE 2EA3[D740]          <1> 	mov		[cs:g_MenuitemIdeControllerIdeIRQ+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 21455                              <1> 
 21456 000023F2 C3                  <1> 	ret
 21457                              <1> 
 21458                              <1> 
 21459                              <1> ;--------------------------------------------------------------------
 21460                              <1> ; IdeControllerMenu_EnterMenuOrModifyItemVisibility
 21461                              <1> ;	Parameters:
 21462                              <1> ;		SS:BP:	Menu handle
 21463                              <1> ;	Returns:
 21464                              <1> ;		Nothing
 21465                              <1> ;	Corrupts registers:
 21466                              <1> ;		All, except BP
 21467                              <1> ;--------------------------------------------------------------------
 21468                              <1> ALIGN JUMP_ALIGN
 21469                              <1> IdeControllerMenu_EnterMenuOrModifyItemVisibility:
 21470 000023F3 0E                  <1> 	push		cs
 21471 000023F4 1F                  <1> 	pop		ds
 21472 000023F5 E80F00              <1> 	call	.EnableOrDisableControlBlockPort
 21473 000023F8 E84900              <1> 	call	.DisableIRQchannelSelection
 21474 000023FB E81A00              <1> 	call	.EnableOrDisableEnableInterrupt
 21475 000023FE E85400              <1> 	call	.EnableOrDisableSerial
 21476 00002401 BE[A33F]            <1> 	mov		si, g_MenupageForIdeControllerMenu
 21477 00002404 E900FD              <1> 	jmp		Menupage_ChangeToNewMenupageInDSSI
 21478                              <1> 
 21479                              <1> 
 21480                              <1> ;--------------------------------------------------------------------
 21481                              <1> ; .EnableOrDisableControlBlockPort
 21482                              <1> ;	Parameters:
 21483                              <1> ;		SS:BP:	Menu handle
 21484                              <1> ;	Returns:
 21485                              <1> ;		Nothing
 21486                              <1> ;	Corrupts registers:
 21487                              <1> ;		AX, BX
 21488                              <1> ;--------------------------------------------------------------------
 21489                              <1> ALIGN JUMP_ALIGN
 21490                              <1> .EnableOrDisableControlBlockPort:
 21491 00002407 2E8B1E[0C40]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerDevice+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21492 0000240C E8FBF4              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 21493 0000240F BB[3A40]            <1> 	mov		bx, g_MenuitemIdeControllerControlBlockAddress
 21494 00002412 3C0A                <1> 	cmp		al, DEVICE_8BIT_XTCF_PIO8
 21495 00002414 7239                <1> 	jb		SHORT .EnableMenuitemFromCSBX	; Not needed for XT-CF and JR-IDE/ISA
 21496 00002416 EB31                <1> 	jmp		SHORT .DisableMenuitemFromCSBX
 21497                              <1> 
 21498                              <1> 
 21499                              <1> ;--------------------------------------------------------------------
 21500                              <1> ; .EnableOrDisableEnableInterrupt
 21501                              <1> ;	Parameters:
 21502                              <1> ;		SS:BP:	Menu handle
 21503                              <1> ;	Returns:
 21504                              <1> ;		Nothing
 21505                              <1> ;	Corrupts registers:
 21506                              <1> ;		AX, BX
 21507                              <1> ;--------------------------------------------------------------------
 21508                              <1> ALIGN JUMP_ALIGN
 21509                              <1> .EnableOrDisableEnableInterrupt:
 21510 00002418 E8ECF4              <1> 	call	Buffers_GetRomvarsFlagsToAX
 21511 0000241B BB[AE40]            <1> 	mov		bx, g_MenuitemIdeControllerEnableInterrupt
 21512 0000241E A90010              <1> 	test		ax, FLG_ROMVARS_MODULE_IRQ
 21513 00002421 7426                <1> 	jz		SHORT .DisableMenuitemFromCSBX
 21514                              <1> 
 21515 00002423 2E8B1E[0C40]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerDevice+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21516 00002428 E8DFF4              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 21517 0000242B BB[AE40]            <1> 	mov		bx, g_MenuitemIdeControllerEnableInterrupt
 21518 0000242E 3C08                <1> 	cmp		al, DEVICE_8BIT_XTIDE_REV2
 21519 00002430 7317                <1> 	jae		SHORT .DisableMenuitemFromCSBX
 21520                              <1> 
 21521 00002432 E81A00              <1> 	call	.EnableMenuitemFromCSBX
 21522                              <1> 	; Fall to .EnableOrDisableIRQchannelSelection
 21523                              <1> 
 21524                              <1> ;--------------------------------------------------------------------
 21525                              <1> ; .EnableOrDisableIRQchannelSelection
 21526                              <1> ;	Parameters:
 21527                              <1> ;		SS:BP:	Menu handle
 21528                              <1> ;	Returns:
 21529                              <1> ;		Nothing
 21530                              <1> ;	Corrupts registers:
 21531                              <1> ;		AX, BX
 21532                              <1> ;--------------------------------------------------------------------
 21533                              <1> ALIGN JUMP_ALIGN
 21534                              <1> .EnableOrDisableIRQchannelSelection:
 21535 00002435 2E8B1E[BA40]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerEnableInterrupt+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21536 0000243A E8CDF4              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 21537 0000243D BB[CB40]            <1> 	mov		bx, g_MenuitemIdeControllerIdeIRQ
 21538 00002440 84C0                <1> 	test		al, al
 21539 00002442 750B                <1> 	jnz		SHORT .EnableMenuitemFromCSBX
 21540                              <1> .DisableIRQchannelSelection:
 21541 00002444 BB[CB40]            <1> 	mov		bx, g_MenuitemIdeControllerIdeIRQ
 21542 00002447 EB00                <1> 	jmp		SHORT .DisableMenuitemFromCSBX
 21543                              <1> 
 21544                              <1> 
 21545                              <1> ;--------------------------------------------------------------------
 21546                              <1> ; .DisableMenuitemFromCSBX
 21547                              <1> ; .EnableMenuitemFromCSBX
 21548                              <1> ;	Parameters:
 21549                              <1> ;		CS:BX:	Ptr to MENUITEM
 21550                              <1> ;	Returns:
 21551                              <1> ;		Nothing
 21552                              <1> ;	Corrupts registers:
 21553                              <1> ;		Nothing
 21554                              <1> ;--------------------------------------------------------------------
 21555                              <1> ALIGN JUMP_ALIGN
 21556                              <1> .DisableMenuitemFromCSBX:
 21557 00002449 2E80670AFE          <1> 	and		BYTE [cs:bx+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 21558 0000244E C3                  <1> 	ret
 21559                              <1> 
 21560                              <1> ALIGN JUMP_ALIGN
 21561                              <1> .EnableMenuitemFromCSBX:
 21562 0000244F 2E804F0A01          <1> 	or		BYTE [cs:bx+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 21563 00002454 C3                  <1> 	ret
 21564                              <1> 
 21565                              <1> 
 21566                              <1> .EnableOrDisableSerial:
 21567 00002455 BB[9140]            <1> 	mov		bx, g_MenuitemIdeControllerSerialBaud
 21568 00002458 E8EEFF              <1> 	call	.DisableMenuitemFromCSBX
 21569                              <1> 
 21570 0000245B BB[5740]            <1> 	mov		bx, g_MenuitemIdeControllerSerialCOM
 21571 0000245E E8E8FF              <1> 	call	.DisableMenuitemFromCSBX
 21572                              <1> 
 21573 00002461 BB[7440]            <1> 	mov		bx, g_MenuitemIdeControllerSerialPort
 21574 00002464 E8E2FF              <1> 	call	.DisableMenuitemFromCSBX
 21575                              <1> 
 21576 00002467 2E8B1E[0C40]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerDevice+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21577 0000246C E89BF4              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 21578 0000246F 3C12                <1> 	cmp		al, DEVICE_SERIAL_PORT
 21579 00002471 751D                <1> 	jnz		.DisableAllSerial
 21580                              <1> 
 21581 00002473 BB[5740]            <1> 	mov		bx, g_MenuitemIdeControllerSerialCOM
 21582 00002476 E8D6FF              <1> 	call	.EnableMenuitemFromCSBX
 21583                              <1> 
 21584 00002479 BB[9140]            <1> 	mov		bx, g_MenuitemIdeControllerSerialBaud
 21585 0000247C E8D0FF              <1> 	call	.EnableMenuitemFromCSBX
 21586                              <1> 
 21587 0000247F 2E8B1E[6340]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerSerialCOM+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21588 00002484 E883F4              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 21589 00002487 BB[7440]            <1> 	mov		bx, g_MenuitemIdeControllerSerialPort
 21590 0000248A 3C78                <1> 	cmp		al,'x'
 21591 0000248C 74C1                <1> 	jz		.EnableMenuitemFromCSBX
 21592 0000248E EBB9                <1> 	jmp		.DisableMenuitemFromCSBX
 21593                              <1> .DisableAllSerial:
 21594 00002490 C3                  <1> 	ret
 21595                              <1> 
 21596                              <1> ;--------------------------------------------------------------------
 21597                              <1> ; MENUITEM activation functions (.fnActivate)
 21598                              <1> ;	Parameters:
 21599                              <1> ;		SS:BP:	Ptr to MENU
 21600                              <1> ;	Returns:
 21601                              <1> ;		Nothing
 21602                              <1> ;	Corrupts registers:
 21603                              <1> ;		All, except segments
 21604                              <1> ;--------------------------------------------------------------------
 21605                              <1> ALIGN JUMP_ALIGN
 21606                              <1> MasterDrive:
 21607 00002491 2E8B1E[D23F]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerMasterDrive+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21608 00002496 EB05                <1> 	jmp		SHORT DisplayMasterSlaveMenu
 21609                              <1> 
 21610                              <1> ALIGN JUMP_ALIGN
 21611                              <1> SlaveDrive:
 21612 00002498 2E8B1E[EF3F]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerSlaveDrive+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21613                              <1> 	; Fall to DisplayMasterSlaveMenu
 21614                              <1> 
 21615                              <1> ALIGN JUMP_ALIGN
 21616                              <1> DisplayMasterSlaveMenu:
 21617                              <1> ;
 21618                              <1> ; block mode is not supported on serial drives, disable/enable the option as appropriate
 21619                              <1> ;
 21620 0000249D 53                  <1> 	push		bx
 21621 0000249E 2E8B1E[0C40]        <1> 	mov		bx, [cs:g_MenuitemIdeControllerDevice+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 21622 000024A3 E864F4              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 21623 000024A6 BB[A342]            <1> 	mov		bx, g_MenuitemMasterSlaveBlockModeTransfers
 21624 000024A9 3C12                <1> 	cmp		al,DEVICE_SERIAL_PORT
 21625 000024AB 7407                <1> 	jz		.isSerial
 21626 000024AD 2E804F0A01          <1> 	or		BYTE [cs:bx+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 21627 000024B2 EB05                <1> 	jmp		.isDone
 21628                              <1> .isSerial:
 21629 000024B4 2E80670AFE          <1> 	and		BYTE [cs:bx+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 21630                              <1> .isDone:
 21631 000024B9 5B                  <1> 	pop		bx
 21632                              <1> 
 21633 000024BA E84F01              <1> 	call	MasterSlaveMenu_InitializeToDrvparamsOffsetInBX
 21634 000024BD E97F01              <1> 	jmp		MasterSlaveMenu_EnterMenuOrModifyItemVisibility
 21635                              <1> 
 21636                              <1> ;------------------------------------------------------------------------------------------
 21637                              <1> ;
 21638                              <1> ; Reader/Writer Routines
 21639                              <1> ;
 21640                              <1> ; For serial drives, we pack the port number and baud rate into a single byte, and thus
 21641                              <1> ; we need to take care to properly read/write just the bits we need.  In addition, since
 21642                              <1> ; we use the Port/PortCtrl bytes in a special way for serial drives, we need to properly
 21643                              <1> ; default the values stored in both these words when switching in and out of the Serial
 21644                              <1> ; device choice.
 21645                              <1> ;
 21646                              <1> ; Writers:
 21647                              <1> ;	Parameters:
 21648                              <1> ;       AX:     Value that the MENUITEM system was interacting with
 21649                              <1> ;	ES:DI:  ROMVARS location where the value is to be stored
 21650                              <1> ;	DS:SI:  MENUITEM pointer
 21651                              <1> ;	Returns:
 21652                              <1> ;		AX:		Value to actually write to ROMVARS
 21653                              <1> ;	Corrupts registers:
 21654                              <1> ;		AX
 21655                              <1> ;
 21656                              <1> ; Readers:
 21657                              <1> ;	Parameters:
 21658                              <1> ;       AX:     Value read from the ROMVARS location
 21659                              <1> ;	ES:DI:  ROMVARS location where the value was just read from
 21660                              <1> ;	DS:SI:  MENUITEM pointer
 21661                              <1> ;	Returns:
 21662                              <1> ;		AX:		Value that the MENUITEM system will interact with and display
 21663                              <1> ;	Corrupts registers:
 21664                              <1> ;		AX
 21665                              <1> ;
 21666                              <1> ;ALIGN JUMP_ALIGN
 21667                              <1> ;WriterForXTCFwindow:
 21668                              <1> ;	mov		al, ah
 21669                              <1> ;	xor		ah, ah
 21670                              <1> ;	ret
 21671                              <1> ;
 21672                              <1> ;ALIGN JUMP_ALIGN
 21673                              <1> ;ReaderForXTCFwindow:
 21674                              <1> ;	mov		ah, al
 21675                              <1> ;	xor		al, al
 21676                              <1> ;	ret
 21677                              <1> 
 21678                              <1> 
 21679                              <1> ;
 21680                              <1> ; No change to Device byte, but use this opportunity to change defaults stored in wPort and wPortCtrl if we are
 21681                              <1> ; changing in/out of a Serial device (since we use these bytes in radically different ways).
 21682                              <1> ;
 21683                              <1> ALIGN JUMP_ALIGN
 21684                              <1> IdeControllerMenu_WriteDevice:
 21685 000024C0 53                  <1> 		push		bx
 21686 000024C1 57                  <1> 		push		di
 21687 000024C2 57                  <1> 		push		di
 21688 000024C3 50                  <1> 		push		ax
 21689                              <1> 
 21690                              <1> 		; Note! AL is the choice index, not device code
 21691 000024C4 D1E0                <1> 		shl		ax, 1							; Selection to device code
 21692 000024C6 268A1D              <1> 		mov		bl, [es:di]						; what is the current Device we are changing from?
 21693 000024C9 83EF04              <1> 		sub		di, BYTE IDEVARS.bDevice - IDEVARS.wBasePort		; Get ready to set the Port addresses
 21694 000024CC 3C12                <1> 		cmp		al, DEVICE_SERIAL_PORT
 21695 000024CE 7420                <1> 		je		SHORT .changingToSerial
 21696 000024D0 3C10                <1> 		cmp		al, DEVICE_8BIT_JRIDE_ISA
 21697 000024D2 7415                <1> 		je		SHORT .ChangingToJrIdeIsa
 21698                              <1> 
 21699                              <1> 		; Restore ports to default values
 21700 000024D4 3C04                <1> 		cmp		al, DEVICE_8BIT_ATA					; Standard ATA controllers, including 8-bit mode
 21701 000024D6 B8F001              <1> 		mov		ax, DEVICE_ATA_PRIMARY_PORT				; Defaults for 16-bit and better ATA devices
 21702 000024D9 BBF003              <1> 		mov		bx, DEVICE_ATA_PRIMARY_PORTCTRL
 21703 000024DC 7606                <1> 		jbe		SHORT .writeNonSerial
 21704                              <1> 
 21705 000024DE B80003              <1> 		mov		ax, DEVICE_XTIDE_DEFAULT_PORT				; Defaults for 8-bit XTIDE and XT-CF devices
 21706 000024E1 BB0803              <1> 		mov		bx, DEVICE_XTIDE_DEFAULT_PORTCTRL			; 
 21707                              <1> 
 21708                              <1> .writeNonSerial:
 21709 000024E4 AB                  <1> 		stosw									; Store defaults in IDEVARS.wBasePort and IDEVARS.wBasePortCtrl
 21710 000024E5 93                  <1> 		xchg		bx, ax
 21711 000024E6 AB                  <1> 		stosw
 21712 000024E7 EB1A                <1> 		jmp		SHORT .done
 21713                              <1> 
 21714                              <1> .ChangingToJrIdeIsa:
 21715 000024E9 B800D8              <1> 		mov		ax, JRIDE_DEFAULT_SEGMENT_ADDRESS
 21716 000024EC 31DB                <1> 		xor		bx, bx
 21717 000024EE EBF4                <1> 		jmp		SHORT .writeNonSerial
 21718                              <1> 
 21719                              <1> .changingToSerial:
 21720 000024F0 80FB12              <1> 		cmp		bl, DEVICE_SERIAL_PORT
 21721 000024F3 740E                <1> 		je		SHORT .done						; if we were already serial, nothing to do
 21722                              <1> 
 21723 000024F5 26C645010C          <1> 		mov		BYTE [es:di+IDEVARS.bSerialBaud-IDEVARS.wBasePort], SERIAL_DEFAULT_BAUD
 21724                              <1> 
 21725 000024FA B031                <1> 		mov		al, SERIAL_DEFAULT_COM
 21726 000024FC 83EFFD              <1> 		sub		di, IDEVARS.wBasePort - IDEVARS.bSerialCOMPortChar
 21727 000024FF E80600              <1> 		call	IdeControllerMenu_SerialWriteCOM
 21728 00002502 AA                  <1> 		stosb
 21729                              <1> 
 21730                              <1> .done:
 21731                              <1> ;		; See if we are changing to XT-CF. If we are, store
 21732                              <1> ;		; byte for Control Register.
 21733 00002503 58                  <1> 		pop		ax
 21734 00002504 5F                  <1> 		pop		di							; IDEVARS.bDevice
 21735                              <1> ;		sub		di, BYTE IDEVARS.bDevice - IDEVARS.bXTCFcontrolRegister	; IDEVARS.bXTCFcontrolRegister
 21736                              <1> ;		cmp		al, DEVICE_8BIT_XTCF_PIO8 >> 1
 21737                              <1> ;		je		SHORT .ChangingToPioModeXTCF
 21738                              <1> ;		cmp		al, DEVICE_8BIT_XTCF_PIO8_WITH_BIU_OFFLOAD >> 1
 21739                              <1> ;		je		SHORT .ChangingToPioWithOffloadModeXTCF
 21740                              <1> ;		cmp		al, DEVICE_8BIT_XTCF_DMA >> 1
 21741                              <1> ;		jne		SHORT .NoNeedToChangeXTCFsettings
 21742                              <1> ;
 21743                              <1> ;.ChangingToDmaModeXTCF:
 21744                              <1> ;		mov		BYTE [es:di], XTCF_DMA_MODE
 21745                              <1> ;		jmp		SHORT .NoNeedToChangeXTCFsettings
 21746                              <1> ;
 21747                              <1> ;.ChangingToPioWithOffloadModeXTCF:
 21748                              <1> ;		mov		BYTE [es:di], XTCF_8BIT_PIO_MODE_WITH_BIU_OFFLOAD
 21749                              <1> ;		jmp		SHORT .NoNeedToChangeXTCFsettings
 21750                              <1> ;
 21751                              <1> ;.ChangingToPioModeXTCF:
 21752                              <1> ;		mov		BYTE [es:di], XTCF_8BIT_PIO_MODE
 21753                              <1> ;		; Fall to .NoNeedToChangeXTCFsettings
 21754                              <1> 
 21755                              <1> .NoNeedToChangeXTCFsettings:
 21756 00002505 5F                  <1> 		pop		di
 21757 00002506 5B                  <1> 		pop		bx
 21758 00002507 C3                  <1> 		ret
 21759                              <1> 
 21760                              <1> ;
 21761                              <1> ; Doesn't modify COM character (unless it is not recognized, which would be an error case),
 21762                              <1> ; But does update the port address based on COM port selection
 21763                              <1> ;
 21764                              <1> ALIGN JUMP_ALIGN
 21765                              <1> IdeControllerMenu_SerialWriteCOM:
 21766 00002508 50                  <1> 		push	ax
 21767 00002509 53                  <1> 		push	bx
 21768 0000250A 56                  <1> 		push	si
 21769                              <1> 
 21770 0000250B BE[1041]            <1> 		mov		si,g_rgbChoiceToValueLookupForCOM
 21771 0000250E BB[4641]            <1> 		mov		bx,PackedCOMPortAddresses
 21772                              <1> 
 21773                              <1> .loop:
 21774 00002511 8A27                <1> 		mov		ah,[bx]
 21775                              <1> 
 21776 00002513 80FCC0              <1> 		cmp		ah,(SERIAL_DEFAULT_CUSTOM_PORT >> 2)
 21777 00002516 7409                <1> 		jz		.notFound
 21778                              <1> 
 21779 00002518 3A04                <1> 		cmp		al,[si]
 21780 0000251A 7407                <1> 		jz		.found
 21781                              <1> 
 21782 0000251C 46                  <1> 		inc		si
 21783 0000251D 46                  <1> 		inc		si
 21784 0000251E 43                  <1> 		inc		bx
 21785                              <1> 
 21786 0000251F EBF0                <1> 		jmp		.loop
 21787                              <1> 
 21788                              <1> .notFound:
 21789 00002521 B078                <1> 		mov		al, 'x'
 21790                              <1> 
 21791                              <1> .found:
 21792 00002523 268865FD            <1> 		mov		[es:di+IDEVARS.bSerialPort-IDEVARS.bSerialCOMPortChar], ah
 21793                              <1> 
 21794 00002527 5E                  <1> 		pop		si
 21795 00002528 5B                  <1> 		pop		bx
 21796 00002529 58                  <1> 		pop		ax
 21797                              <1> 
 21798 0000252A C3                  <1> 		ret
 21799                              <1> 
 21800                              <1> 
 21801                              <1> ;
 21802                              <1> ; Packed Port (byte) -> Numeric Port (word)
 21803                              <1> ;
 21804                              <1> ALIGN JUMP_ALIGN
 21805                              <1> IdeControllerMenu_SerialReadPort:
 21806 0000252B 30E4                <1> 		xor		ah,ah
 21807                              <1> 		eSHL_IM	ax, 2
 21808                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 21809                              <2> %ifdef USE_386
 21810                              <2>  %if %2 = 1
 21811                              <2>  add %1, %1
 21812                              <2>  %else
 21813                              <2>  eSHIFT_IM %1, %2, shl
 21814                              <2>  %endif
 21815                              <2> %else
 21816                              <2>  eSHIFT_IM %1, %2, shl
 21817                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 21818                              <3> %ifndef USE_186
 21819                              <3>  %ifidni %1, cl
 21820                              <3>  times %2 %3 %1, 1
 21821                              <3>  %elifidni %1, ch
 21822                              <3>  times %2 %3 %1, 1
 21823                              <3>  %elifidni %1, cx
 21824                              <3>  times %2 %3 %1, 1
 21825                              <3>  %else
 21826                              <3>  %if %2 > 3
 21827                              <3>  push cx
 21828                              <3>  mov cl, %2
 21829                              <3>  %3 %1, cl
 21830                              <3>  pop cx
 21831                              <3>  %else
 21832 0000252D D1E0<rept>          <3>  times %2 %3 %1, 1
 21833                              <3>  %endif
 21834                              <3>  %endif
 21835                              <3> 
 21836                              <3> %else
 21837                              <3>  %3 %1, %2
 21838                              <3> %endif
 21839                              <3> %endif
 21840                              <2> %endif
 21841                              <2> %endif
 21842 00002531 C3                  <1> 		ret
 21843                              <1> 
 21844                              <1> ;
 21845                              <1> ; Numeric Port (word) -> Packed Port (byte)
 21846                              <1> ; And convert from Custom to a defined COM port if we match one of the pre-defined COM port numbers
 21847                              <1> ;
 21848                              <1> ALIGN JUMP_ALIGN
 21849                              <1> IdeControllerMenu_SerialWritePort:
 21850 00002532 53                  <1> 		push	bx
 21851 00002533 56                  <1> 		push	si
 21852                              <1> 
 21853                              <1> 		eSHR_IM	ax, 2
 21854                              <2>  eSHIFT_IM %1, %2, shr
 21855                              <3> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 21856                              <3> %ifndef USE_186
 21857                              <3>  %ifidni %1, cl
 21858                              <3>  times %2 %3 %1, 1
 21859                              <3>  %elifidni %1, ch
 21860                              <3>  times %2 %3 %1, 1
 21861                              <3>  %elifidni %1, cx
 21862                              <3>  times %2 %3 %1, 1
 21863                              <3>  %else
 21864                              <3>  %if %2 > 3
 21865                              <3>  push cx
 21866                              <3>  mov cl, %2
 21867                              <3>  %3 %1, cl
 21868                              <3>  pop cx
 21869                              <3>  %else
 21870 00002534 D1E8<rept>          <3>  times %2 %3 %1, 1
 21871                              <3>  %endif
 21872                              <3>  %endif
 21873                              <3> 
 21874                              <3> %else
 21875                              <3>  %3 %1, %2
 21876                              <3> %endif
 21877                              <3> %endif
 21878 00002538 24FE                <1> 		and		al,0feh			; force 8-byte boundary
 21879                              <1> 
 21880 0000253A BE[1041]            <1> 		mov		si,g_rgbChoiceToValueLookupForCOM
 21881 0000253D BB[4641]            <1> 		mov		bx,PackedCOMPortAddresses			; loop, looking for port address in known COM address list
 21882                              <1> 
 21883                              <1> .loop:
 21884 00002540 8A24                <1> 		mov		ah,[si]
 21885 00002542 80FC78              <1> 		cmp		ah,'x'
 21886 00002545 7409                <1> 		jz		.found
 21887                              <1> 
 21888 00002547 3A07                <1> 		cmp		al,[bx]
 21889 00002549 7405                <1> 		jz		.found
 21890                              <1> 
 21891 0000254B 46                  <1> 		inc		si
 21892 0000254C 46                  <1> 		inc		si
 21893 0000254D 43                  <1> 		inc		bx
 21894                              <1> 
 21895 0000254E EBF0                <1> 		jmp		.loop
 21896                              <1> 
 21897                              <1> .found:
 21898 00002550 26886503            <1> 		mov		[es:di+IDEVARS.bSerialCOMPortChar-IDEVARS.bSerialPort], ah
 21899                              <1> 
 21900 00002554 5E                  <1> 		pop		si
 21901 00002555 5B                  <1> 		pop		bx
 21902                              <1> 
 21903 00002556 C3                  <1> 		ret
 21904                              <1> 
 21905                                  %include "MainMenu.asm"
 21906                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 21907                              <1> ; Description	:	Main menu structs and functions.
 21908                              <1> 
 21909                              <1> ;
 21910                              <1> ; XTIDE Universal BIOS and Associated Tools
 21911                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 21912                              <1> ;
 21913                              <1> ; This program is free software; you can redistribute it and/or modify
 21914                              <1> ; it under the terms of the GNU General Public License as published by
 21915                              <1> ; the Free Software Foundation; either version 2 of the License, or
 21916                              <1> ; (at your option) any later version.
 21917                              <1> ;
 21918                              <1> ; This program is distributed in the hope that it will be useful,
 21919                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 21920                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 21921                              <1> ; GNU General Public License for more details.
 21922                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 21923                              <1> ;
 21924                              <1> 
 21925                              <1> ; Section containing initialized data
 21926                              <1> SECTION .data
 21927                              <1> 
 21928                              <1> ALIGN WORD_ALIGN
 21929                              <1> g_MenupageForMainMenu:
 21930                              <1> istruc MENUPAGE
 21931 00004175 [5725]              <1> 	at	MENUPAGE.fnEnter,			dw	MainMenu_EnterMenuOrModifyItemVisibility
 21932 00004177 [E525]              <1> 	at	MENUPAGE.fnBack,			dw	ExitToDosFromBackButton
 21933 00004179 0900                <1> 	at	MENUPAGE.wMenuitems,		dw	9
 21934                              <1> iend
 21935                              <1> 
 21936                              <1> g_MenuitemMainMenuLicense:
 21937                              <1> istruc MENUITEM
 21938 0000417B [801E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_DisplayHelpMessageFromDSSI
 21939 0000417D 00<rept>[1C03]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainLicense
 21940 00004181 [BE05]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainLicense
 21941 00004183 [F906]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpMainLicense
 21942 00004185 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 21943 00004186 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 21944 00004187 00<rept>            <1> iend
 21945                              <1> 
 21946                              <1> g_MenuitemMainMenuLoadBiosFromFile:
 21947                              <1> istruc MENUITEM
 21948 00004198 [C725]              <1> 	at	MENUITEM.fnActivate,		dw	LoadBiosFromFile
 21949 0000419A 00<rept>[8802]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainLoadFile
 21950 0000419E [A604]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainLoadFile
 21951 000041A0 [A604]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainLoadFile
 21952 000041A2 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 21953 000041A3 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 21954 000041A4 00<rept>            <1> iend
 21955                              <1> 
 21956                              <1> g_MenuitemMainMenuLoadXtideUniversalBiosFromRom:
 21957                              <1> istruc MENUITEM
 21958 000041B5 [E625]              <1> 	at	MENUITEM.fnActivate,		dw	LoadXtideUniversalBiosFromRom
 21959 000041B7 00<rept>[9C02]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainLoadROM
 21960 000041BB [D204]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainLoadROM
 21961 000041BD [D204]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainLoadROM
 21962 000041BF 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 21963 000041C0 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 21964 000041C1 00<rept>            <1> iend
 21965                              <1> 
 21966                              <1> g_MenuitemMainMenuLoadOldSettingsFromEeprom:
 21967                              <1> istruc MENUITEM
 21968 000041D2 [FB25]              <1> 	at	MENUITEM.fnActivate,		dw	LoadOldSettingsFromEeprom
 21969 000041D4 00<rept>[B202]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainLoadStngs
 21970 000041D8 [FC04]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainLoadStngs
 21971 000041DA [FC04]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainLoadStngs
 21972 000041DC 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 21973 000041DD 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 21974 000041DE 00<rept>            <1> iend
 21975                              <1> 
 21976                              <1> g_MenuitemMainMenuConfigureXtideUniversalBios:
 21977                              <1> istruc MENUITEM
 21978 000041EF [A421]              <1> 	at	MENUITEM.fnActivate,		dw	ConfigurationMenu_EnterMenuOrModifyItemVisibility
 21979 000041F1 00<rept>[D002]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainConfigure
 21980 000041F5 [3005]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainConfigure
 21981 000041F7 [3005]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainConfigure
 21982 000041F9 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 21983 000041FA 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 21984 000041FB 00<rept>            <1> iend
 21985                              <1> 
 21986                              <1> g_MenuitemMainMenuFlashEeprom:
 21987                              <1> istruc MENUITEM
 21988 0000420C [AE22]              <1> 	at	MENUITEM.fnActivate,		dw	FlashMenu_EnterMenuOrModifyItemVisibility
 21989 0000420E 00<rept>[EF02]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainFlash
 21990 00004212 [5905]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainFlash
 21991 00004214 [5905]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainFlash
 21992 00004216 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 21993 00004217 02                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGENEXT
 21994 00004218 00<rept>            <1> iend
 21995                              <1> 
 21996                              <1> g_MenuitemMainMenuSaveFile:
 21997                              <1> istruc MENUITEM
 21998 00004229 [FB17]              <1> 	at	MENUITEM.fnActivate,		dw	BiosFile_SaveUnsavedChanges
 21999 0000422B 00<rept>[FC02]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainSave
 22000 0000422F [7C05]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainSave
 22001 00004231 [7C05]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainSave
 22002 00004233 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 22003 00004234 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 22004 00004235 00<rept>            <1> iend
 22005                              <1> 
 22006                              <1> g_MenuitemMainMenuExitToDos:
 22007                              <1> istruc MENUITEM
 22008 00004246 [C425]              <1> 	at	MENUITEM.fnActivate,		dw	ExitToDosSelectedFromMenu
 22009 00004248 00<rept>[7C02]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainExitToDOS
 22010 0000424C [7D04]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainExitToDOS
 22011 0000424E [7D04]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainExitToDOS
 22012 00004250 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 22013 00004251 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 22014 00004252 00<rept>            <1> iend
 22015                              <1> 
 22016                              <1> g_MenuitemMainMenuHomePage:
 22017                              <1> istruc MENUITEM
 22018 00004263 [801E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_DisplayHelpMessageFromDSSI
 22019 00004265 00<rept>[3E03]      <1> 	at	MENUITEM.szName,			dw	g_szItemMainHomePage
 22020 00004269 [8706]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoMainHomePage
 22021 0000426B [8706]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoMainHomePage
 22022 0000426D 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 22023 0000426E 04                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_ACTION
 22024 0000426F 00<rept>            <1> iend
 22025                              <1> 
 22026                              <1> 
 22027                              <1> ; Section containing code
 22028                              <1> SECTION .text
 22029                              <1> 
 22030                              <1> ;--------------------------------------------------------------------
 22031                              <1> ; MainMenu_EnterMenuOrModifyItemVisibility
 22032                              <1> ;	Parameters:
 22033                              <1> ;		SS:BP:	Menu handle
 22034                              <1> ;	Returns:
 22035                              <1> ;		Nothing
 22036                              <1> ;	Corrupts registers:
 22037                              <1> ;		All, except BP
 22038                              <1> ;--------------------------------------------------------------------
 22039                              <1> ALIGN JUMP_ALIGN
 22040                              <1> MainMenu_EnterMenuOrModifyItemVisibility:
 22041 00002557 0E                  <1> 	push	cs
 22042 00002558 1F                  <1> 	pop		ds
 22043 00002559 E80F00              <1> 	call	.EnableOrDisableXtideRomItems
 22044 0000255C E82C00              <1> 	call	.EnableOrDisableConfigureXtideUniversalBios
 22045 0000255F E83A00              <1> 	call	.EnableOrDisableFlashEeprom
 22046 00002562 E84B00              <1> 	call	.EnableOrDisableSave
 22047 00002565 BE[7541]            <1> 	mov		si, g_MenupageForMainMenu
 22048 00002568 E99CFB              <1> 	jmp		Menupage_ChangeToNewMenupageInDSSI
 22049                              <1> 
 22050                              <1> ;--------------------------------------------------------------------
 22051                              <1> ; .EnableOrDisableXtideRomItems
 22052                              <1> ;	Parameters:
 22053                              <1> ;		DS:		CFGVARS segment
 22054                              <1> ;	Returns:
 22055                              <1> ;		Nothing
 22056                              <1> ;	Corrupts registers:
 22057                              <1> ;		AX, BX, CX, SI, DI, ES
 22058                              <1> ;--------------------------------------------------------------------
 22059                              <1> ALIGN JUMP_ALIGN
 22060                              <1> .EnableOrDisableXtideRomItems:
 22061 0000256B E8F7F4              <1> 	call	EEPROM_FindXtideUniversalBiosROMtoESDI
 22062 0000256E 7310                <1> 	jnc		SHORT .DisableAllRomItems
 22063 00002570 800E[BF41]01        <1> 	or		BYTE [g_MenuitemMainMenuLoadXtideUniversalBiosFromRom+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 22064 00002575 E8E3F2              <1> 	call	Buffers_IsXtideUniversalBiosLoaded
 22065 00002578 750B                <1> 	jne		SHORT .DisableLoadSettingFromRom
 22066 0000257A 800E[DC41]01        <1> 	or		BYTE [g_MenuitemMainMenuLoadOldSettingsFromEeprom+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 22067 0000257F C3                  <1> 	ret
 22068                              <1> 
 22069                              <1> ALIGN JUMP_ALIGN
 22070                              <1> .DisableAllRomItems:
 22071 00002580 8026[BF41]FE        <1> 	and		BYTE [g_MenuitemMainMenuLoadXtideUniversalBiosFromRom+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 22072                              <1> .DisableLoadSettingFromRom:
 22073 00002585 8026[DC41]FE        <1> 	and		BYTE [g_MenuitemMainMenuLoadOldSettingsFromEeprom+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 22074 0000258A C3                  <1> 	ret
 22075                              <1> 
 22076                              <1> ;--------------------------------------------------------------------
 22077                              <1> ; .EnableOrDisableConfigureXtideUniversalBios
 22078                              <1> ;	Parameters:
 22079                              <1> ;		DS:		CFGVARS segment
 22080                              <1> ;	Returns:
 22081                              <1> ;		Nothing
 22082                              <1> ;	Corrupts registers:
 22083                              <1> ;		CX, SI, DI, ES
 22084                              <1> ;--------------------------------------------------------------------
 22085                              <1> ALIGN JUMP_ALIGN
 22086                              <1> .EnableOrDisableConfigureXtideUniversalBios:
 22087 0000258B E8CDF2              <1> 	call	Buffers_IsXtideUniversalBiosLoaded
 22088 0000258E 7506                <1> 	jne		SHORT .DisableConfigureXtideUniversalBios
 22089 00002590 800E[F941]01        <1> 	or		BYTE [g_MenuitemMainMenuConfigureXtideUniversalBios+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 22090 00002595 C3                  <1> 	ret
 22091                              <1> 
 22092                              <1> ALIGN JUMP_ALIGN
 22093                              <1> .DisableConfigureXtideUniversalBios:
 22094 00002596 8026[F941]FE        <1> 	and		BYTE [g_MenuitemMainMenuConfigureXtideUniversalBios+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 22095 0000259B C3                  <1> 	ret
 22096                              <1> 
 22097                              <1> ;--------------------------------------------------------------------
 22098                              <1> ; .EnableOrDisableFlashEeprom
 22099                              <1> ;	Parameters:
 22100                              <1> ;		DS:		CFGVARS segment
 22101                              <1> ;	Returns:
 22102                              <1> ;		Nothing
 22103                              <1> ;	Corrupts registers:
 22104                              <1> ;		Nothing
 22105                              <1> ;--------------------------------------------------------------------
 22106                              <1> ALIGN JUMP_ALIGN
 22107                              <1> .EnableOrDisableFlashEeprom:
 22108 0000259C F706[C643]0300      <1> 	test	WORD [g_cfgVars+CFGVARS.wFlags], FLG_CFGVARS_FILELOADED | FLG_CFGVARS_ROMLOADED
 22109 000025A2 7406                <1> 	jz		SHORT .DisableFlashEeprom
 22110 000025A4 800E[1642]01        <1> 	or		BYTE [g_MenuitemMainMenuFlashEeprom+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 22111 000025A9 C3                  <1> 	ret
 22112                              <1> 
 22113                              <1> ALIGN JUMP_ALIGN
 22114                              <1> .DisableFlashEeprom:
 22115 000025AA 8026[1642]FE        <1> 	and		BYTE [g_MenuitemMainMenuFlashEeprom+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 22116 000025AF C3                  <1> 	ret
 22117                              <1> 
 22118                              <1> ;--------------------------------------------------------------------
 22119                              <1> ; .EnableOrDisableSave
 22120                              <1> ;	Parameters:
 22121                              <1> ;		DS:		CFGVARS segment
 22122                              <1> ;	Returns:
 22123                              <1> ;		Nothing
 22124                              <1> ;	Corrupts registers:
 22125                              <1> ;		Nothing
 22126                              <1> ;--------------------------------------------------------------------
 22127                              <1> ALIGN JUMP_ALIGN
 22128                              <1> .EnableOrDisableSave:
 22129 000025B0 F706[C643]0100      <1> 	test	WORD [g_cfgVars+CFGVARS.wFlags], FLG_CFGVARS_FILELOADED
 22130 000025B6 7406                <1> 	jz		SHORT .DisableSave
 22131 000025B8 800E[3342]01        <1> 	or		BYTE [g_MenuitemMainMenuSaveFile+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 22132 000025BD C3                  <1> 	ret
 22133                              <1> 
 22134                              <1> ALIGN JUMP_ALIGN
 22135                              <1> .DisableSave:
 22136 000025BE 8026[3342]FE        <1> 	and		BYTE [g_MenuitemMainMenuSaveFile+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 22137 000025C3 C3                  <1> 	ret
 22138                              <1> 
 22139                              <1> ;--------------------------------------------------------------------
 22140                              <1> ; MENUITEM activation functions (.fnActivate)
 22141                              <1> ;	Parameters:
 22142                              <1> ;		SS:BP:	Ptr to MENU
 22143                              <1> ;	Returns:
 22144                              <1> ;		Nothing
 22145                              <1> ;	Corrupts registers:
 22146                              <1> ;		All, except segments
 22147                              <1> ;--------------------------------------------------------------------
 22148                              <1> ALIGN JUMP_ALIGN
 22149                              <1> ExitToDosSelectedFromMenu:
 22150                              <1> 	JMP_MENU_LIBRARY CloseMenuIfExitEventAllows
 22151                              <2>  %ifidn %1, CloseMenuIfExitEventAllows
 22152 000025C4 E97BE3              <2>  jmp MenuInit_CloseMenuIfExitEventAllows
 22153                              <2>  %elifidn %1, Close
 22154                              <2>  jmp MenuInit_CloseMenuWindow
 22155                              <2>  %elifidn %1, SetUserDataFromDSSI
 22156                              <2>  jmp MenuInit_SetUserDataFromDSSI
 22157                              <2>  %elifidn %1, GetUserDataToDSSI
 22158                              <2>  jmp MenuInit_GetUserDataToDSSI
 22159                              <2>  %elifidn %1, SetTitleHeightFromAL
 22160                              <2>  jmp MenuInit_SetTitleHeightFromAL
 22161                              <2>  %elifidn %1, GetHighlightedItemToAX
 22162                              <2>  jmp MenuInit_GetHighlightedItemToAX
 22163                              <2>  %elifidn %1, SetTotalItemsFromAX
 22164                              <2>  jmp MenuInit_SetTotalItemsFromAX
 22165                              <2>  %elifidn %1, SetInformationHeightFromAL
 22166                              <2>  jmp MenuInit_SetInformationHeightFromAL
 22167                              <2>  %elifidn %1, SetTimeoutValueFromAX
 22168                              <2>  jmp MenuTime_SetSelectionTimeoutValueFromAX
 22169                              <2>  %else
 22170                              <2>  mov di, %1
 22171                              <2>  jmp Menu_FunctionFromDI
 22172                              <2>  %endif
 22173                              <1> 
 22174                              <1> 
 22175                              <1> ALIGN JUMP_ALIGN
 22176                              <1> LoadBiosFromFile:
 22177 000025C7 E8E7F2              <1> 	call	Buffers_SaveChangesIfFileLoaded
 22178 000025CA B92000              <1> 	mov		cx, FILE_DIALOG_IO_size
 22179 000025CD E8F0EF              <1> 	call	Memory_ReserveCXbytesFromStackToDSSI
 22180 000025D0 E8B8F3              <1> 	call	Dialogs_DisplayFileDialogWithDialogIoInDSSI
 22181 000025D3 807C0C01            <1> 	cmp		BYTE [si+FILE_DIALOG_IO.bUserCancellation], TRUE
 22182 000025D7 7409                <1> 	je		SHORT .CancelFileLoading
 22183                              <1> 
 22184 000025D9 83C612              <1> 	add		si, BYTE FILE_DIALOG_IO.szFile
 22185 000025DC E8BEF1              <1> 	call	BiosFile_LoadFileFromDSSItoRamBuffer
 22186 000025DF E875FF              <1> 	call	MainMenu_EnterMenuOrModifyItemVisibility
 22187                              <1> .CancelFileLoading:
 22188 000025E2 83C420              <1> 	add		sp, BYTE FILE_DIALOG_IO_size
 22189                              <1> ExitToDosFromBackButton:
 22190 000025E5 C3                  <1> 	ret
 22191                              <1> 
 22192                              <1> 
 22193                              <1> ALIGN JUMP_ALIGN
 22194                              <1> LoadXtideUniversalBiosFromRom:
 22195 000025E6 E8C8F2              <1> 	call	Buffers_SaveChangesIfFileLoaded
 22196 000025E9 E82FF4              <1> 	call	EEPROM_LoadXtideUniversalBiosFromRomToRamBufferAndReturnSizeInDXCX
 22197 000025EC B80200              <1> 	mov		ax, FLG_CFGVARS_ROMLOADED
 22198 000025EF E899F2              <1> 	call	Buffers_NewBiosWithSizeInDXCXandSourceInAXhasBeenLoadedForConfiguration
 22199 000025F2 BA[4803]            <1> 	mov		dx, g_szDlgMainLoadROM
 22200 000025F5 E85EF3              <1> 	call	Dialogs_DisplayNotificationFromCSDX
 22201 000025F8 E95CFF              <1> 	jmp		MainMenu_EnterMenuOrModifyItemVisibility
 22202                              <1> 
 22203                              <1> 
 22204                              <1> ALIGN JUMP_ALIGN
 22205                              <1> LoadOldSettingsFromEeprom:
 22206 000025FB E8B3F2              <1> 	call	Buffers_SaveChangesIfFileLoaded
 22207 000025FE E846F4              <1> 	call	EEPROM_LoadOldSettingsFromRomToRamBuffer
 22208 00002601 8326[C643]FB        <1> 	and		WORD [g_cfgVars+CFGVARS.wFlags], ~FLG_CFGVARS_UNSAVED
 22209 00002606 BA[7E03]            <1> 	mov		dx, g_szDlgMainLoadStngs
 22210 00002609 E94AF3              <1> 	jmp		Dialogs_DisplayNotificationFromCSDX
 22211                              <1> 
 22212                                  %include "MasterSlaveMenu.asm"
 22213                              <1> ; Project name	:	XTIDE Universal BIOS Configurator v2
 22214                              <1> ; Description	:	"Master/Slave Drive" menu structs and functions.
 22215                              <1> 
 22216                              <1> ;
 22217                              <1> ; XTIDE Universal BIOS and Associated Tools
 22218                              <1> ; Copyright (C) 2009-2010 by Tomi Tilli, 2011-2013 by XTIDE Universal BIOS Team.
 22219                              <1> ;
 22220                              <1> ; This program is free software; you can redistribute it and/or modify
 22221                              <1> ; it under the terms of the GNU General Public License as published by
 22222                              <1> ; the Free Software Foundation; either version 2 of the License, or
 22223                              <1> ; (at your option) any later version.
 22224                              <1> ;
 22225                              <1> ; This program is distributed in the hope that it will be useful,
 22226                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
 22227                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 22228                              <1> ; GNU General Public License for more details.
 22229                              <1> ; Visit http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 22230                              <1> ;
 22231                              <1> 
 22232                              <1> ; Section containing initialized data
 22233                              <1> SECTION .data
 22234                              <1> 
 22235                              <1> ALIGN WORD_ALIGN
 22236                              <1> g_MenupageForMasterSlaveMenu:
 22237                              <1> istruc MENUPAGE
 22238 00004280 [3F26]              <1> 	at	MENUPAGE.fnEnter,			dw	MasterSlaveMenu_EnterMenuOrModifyItemVisibility
 22239 00004282 [F323]              <1> 	at	MENUPAGE.fnBack,			dw	IdeControllerMenu_EnterMenuOrModifyItemVisibility
 22240 00004284 0A00                <1> 	at	MENUPAGE.wMenuitems,		dw	10
 22241                              <1> iend
 22242                              <1> 
 22243                              <1> g_MenuitemMasterSlaveBackToIdeControllerMenu:
 22244                              <1> istruc MENUITEM
 22245 00004286 [F323]              <1> 	at	MENUITEM.fnActivate,		dw	IdeControllerMenu_EnterMenuOrModifyItemVisibility
 22246 00004288 00<rept>[9625]      <1> 	at	MENUITEM.szName,			dw	g_szItemDrvBackToIde
 22247 0000428C [9625]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szItemDrvBackToIde
 22248 0000428E [9625]              <1> 	at	MENUITEM.szHelp,			dw	g_szItemDrvBackToIde
 22249 00004290 01                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE
 22250 00004291 00                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_PAGEBACK
 22251 00004292 00<rept>            <1> iend
 22252                              <1> 
 22253                              <1> g_MenuitemMasterSlaveBlockModeTransfers:
 22254                              <1> istruc MENUITEM
 22255 000042A3 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 22256 000042A5 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 22257 000042A7 [B225]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvBlockMode
 22258 000042A9 [BB27]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvBlockMode
 22259 000042AB [6629]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpDrvBlockMode
 22260 000042AD 05                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_FLAGVALUE
 22261 000042AE 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 22262 000042AF 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22263 000042B1 [4F26]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvBlockMode
 22264 000042B3 [B400]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBooleanFlag
 22265 000042B5 00<rept>[1800]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFlagBooleans
 22266 000042B9 1000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	FLG_DRVPARAMS_BLOCKMODE
 22267 000042BB 00<rept>            <1> iend
 22268                              <1> 
 22269                              <1> g_MenuitemMasterSlaveChsTranslateMode:
 22270                              <1> istruc MENUITEM
 22271 000042C0 [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 22272 000042C2 [8E20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromUnshiftedItemInDSSI
 22273 000042C4 [C725]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvXlateMode
 22274 000042C6 [E727]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvXlateMode
 22275 000042C8 [E727]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoDrvXlateMode
 22276 000042CA 41                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_MASKVALUE
 22277 000042CB 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 22278 000042CC 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22279 000042CE [6C26]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvXlateMode
 22280 000042D0 [942E]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiseXlateMode
 22281 000042D2 [B443]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForXlateMode
 22282 000042D4 [BC43]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszChoiceToStringLookup,	dw	g_rgszChoiceToStringLookupForXlateMode
 22283 000042D6 0C00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	MASK_DRVPARAMS_TRANSLATEMODE
 22284 000042D8 00<rept>02          <1> 	at	MENUITEM.itemValue + ITEM_VALUE.bFieldPosition,				db	TRANSLATEMODE_FIELD_POSITION
 22285                              <1> iend
 22286                              <1> 
 22287                              <1> g_MenuitemMasterSlaveWriteCache:
 22288                              <1> istruc MENUITEM
 22289 000042DD [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 22290 000042DF [8E20]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromUnshiftedItemInDSSI
 22291 000042E1 [DE25]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvWriteCache
 22292 000042E3 [0A28]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvWriteCache
 22293 000042E5 [4D2A]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpDrvWriteCache
 22294 000042E7 41                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_MASKVALUE
 22295 000042E8 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 22296 000042E9 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22297 000042EB [9626]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvWriteCache
 22298 000042ED [CF2E]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiseWrCache
 22299 000042EF [A843]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgwChoiceToValueLookup,		dw	g_rgwChoiceToValueLookupForWriteCache
 22300 000042F1 [AE43]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszChoiceToStringLookup,	dw	g_rgszChoiceToStringLookupForWriteCache
 22301 000042F3 0300                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	MASK_DRVPARAMS_WRITECACHE
 22302 000042F5 00<rept>00          <1> 	at	MENUITEM.itemValue + ITEM_VALUE.bFieldPosition,				db	0
 22303                              <1> iend
 22304                              <1> 
 22305                              <1> g_MenuitemMasterSlaveUserCHS:
 22306                              <1> istruc MENUITEM
 22307 000042FA [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 22308 000042FC [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 22309 000042FE [F325]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvUserCHS
 22310 00004300 [3F28]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvUserCHS
 22311 00004302 [7A2C]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpDrvUserCHS
 22312 00004304 07                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_MODIFY_MENU | FLG_MENUITEM_FLAGVALUE
 22313 00004305 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 22314 00004306 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22315 00004308 [C726]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvUserCHS
 22316 0000430A [B400]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBooleanFlag
 22317 0000430C 00<rept>[1800]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFlagBooleans
 22318 00004310 2000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	FLG_DRVPARAMS_USERCHS
 22319 00004312 00<rept>[0427]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueWriter,				dw	MasterSlaveMenu_WriteCHSFlag
 22320 00004316 00                  <1> iend
 22321                              <1> 
 22322                              <1> g_MenuitemMasterSlaveCylinders:
 22323                              <1> istruc MENUITEM
 22324 00004317 [C51E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 22325 00004319 [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 22326 0000431B [0626]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvCyls
 22327 0000431D [8228]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvCyls
 22328 0000431F [8228]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoDrvCyls
 22329 00004321 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 22330 00004322 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 22331 00004323 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22332 00004325 [EC26]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvCyls
 22333 00004327 00<rept>0100        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	1
 22334 0000432D FF3F                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	MAX_USER_CYLINDERS
 22335                              <1> %define					MASTERSLAVE_CYLINDERS_DEFAULT					65
 22336 0000432F 00<rept>            <1> iend
 22337                              <1> 
 22338                              <1> g_MenuitemMasterSlaveHeads:
 22339                              <1> istruc MENUITEM
 22340 00004334 [C51E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 22341 00004336 [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 22342 00004338 [1026]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvHeads
 22343 0000433A [AC28]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvHeads
 22344 0000433C [AC28]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoDrvHeads
 22345 0000433E 08                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_BYTEVALUE
 22346 0000433F 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 22347 00004340 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22348 00004342 [1927]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvHeads
 22349 00004344 00<rept>0100        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	1
 22350 0000434A 1000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	MAX_USER_HEADS
 22351                              <1> %define					MASTERSLAVE_HEADS_DEFAULT						MAX_USER_HEADS
 22352 0000434C 00<rept>            <1> iend
 22353                              <1> 
 22354                              <1> g_MenuitemMasterSlaveSectors:
 22355                              <1> istruc MENUITEM
 22356 00004351 [C51E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 22357 00004353 [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 22358 00004355 [1626]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvSect
 22359 00004357 [D228]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvSect
 22360 00004359 [D228]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoDrvSect
 22361 0000435B 08                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_BYTEVALUE
 22362 0000435C 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 22363 0000435D 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22364 0000435F [3F27]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvSect
 22365 00004361 00<rept>0100        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	1
 22366 00004367 3F00                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	MAX_USER_SECTORS_PER_TRACK
 22367                              <1> %define					MASTERSLAVE_SECTORS_DEFAULT						MAX_USER_SECTORS_PER_TRACK
 22368 00004369 00<rept>            <1> iend
 22369                              <1> 
 22370                              <1> g_MenuitemMasterSlaveUserLBA:
 22371                              <1> istruc MENUITEM
 22372 0000436E [891E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateMultichoiceSelectionForMenuitemInDSSI
 22373 00004370 [9520]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteLookupValueStringToBufferInESDIfromShiftedItemInDSSI
 22374 00004372 [2826]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvUserLBA
 22375 00004374 [0429]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvUserLBA
 22376 00004376 [F02D]              <1> 	at	MENUITEM.szHelp,			dw	g_szHelpDrvUserLBA
 22377 00004378 07                  <1> 	at	MENUITEM.bFlags,			db	FLG_MENUITEM_VISIBLE | FLG_MENUITEM_MODIFY_MENU | FLG_MENUITEM_FLAGVALUE
 22378 00004379 06                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_MULTICHOICE
 22379 0000437A 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22380 0000437C [6B27]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvUserLBA
 22381 0000437E [B400]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szMultichoice,				dw	g_szMultichoiceBooleanFlag
 22382 00004380 00<rept>[1800]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.rgszValueToStringLookup,	dw	g_rgszValueToStringLookupForFlagBooleans
 22383 00004384 4000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wValueBitmask,				dw	FLG_DRVPARAMS_USERLBA
 22384 00004386 00<rept>[2D27]      <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueWriter,				dw	MasterSlaveMenu_WriteLBAFlag
 22385 0000438A 00                  <1> iend
 22386                              <1> 
 22387                              <1> g_MenuitemMasterSlaveUserLbaValue:
 22388                              <1> istruc MENUITEM
 22389 0000438B [C51E]              <1> 	at	MENUITEM.fnActivate,		dw	Menuitem_ActivateUnsignedInputForMenuitemInDSSI
 22390 0000438D [C220]              <1> 	at	MENUITEM.fnFormatValue,		dw	MenuitemPrint_WriteUnsignedValueStringToBufferInESDIfromItemInDSSI
 22391 0000438F [3B26]              <1> 	at	MENUITEM.szName,			dw	g_szItemDrvLbaSectors
 22392 00004391 [2F29]              <1> 	at	MENUITEM.szQuickInfo,		dw	g_szNfoDrvLbaSectors
 22393 00004393 [2F29]              <1> 	at	MENUITEM.szHelp,			dw	g_szNfoDrvLbaSectors
 22394 00004395 00                  <1> 	at	MENUITEM.bFlags,			db	NULL
 22395 00004396 08                  <1> 	at	MENUITEM.bType,				db	TYPE_MENUITEM_UNSIGNED
 22396 00004397 0000                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wRomvarsValueOffset,		dw	NULL
 22397 00004399 [8127]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.szDialogTitle,				dw	g_szDlgDrvLbaSectors
 22398 0000439B 00<rept>1000        <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMinValue,					dw	16							; 8 GiB
 22399 000043A1 0001                <1> 	at	MENUITEM.itemValue + ITEM_VALUE.wMaxValue,					dw	10000000h / (1024 * 1024)	; Limit to 28-bit LBA
 22400 000043A3 [D726]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueReader,				dw	ValueReaderForUserLbaValue
 22401 000043A5 [EE26]              <1> 	at	MENUITEM.itemValue + ITEM_VALUE.fnValueWriter,				dw	ValueWriterForUserLbaValue
 22402                              <1> %define				MASTERSLAVE_USERLBA_DEFAULT						64
 22403 000043A7 00                  <1> iend
 22404                              <1> 
 22405                              <1> 
 22406                              <1> g_rgwChoiceToValueLookupForWriteCache:
 22407 000043A8 0000                <1> 	dw	DEFAULT_WRITE_CACHE
 22408 000043AA 0100                <1> 	dw	DISABLE_WRITE_CACHE
 22409 000043AC 0200                <1> 	dw	ENABLE_WRITE_CACHE
 22410                              <1> 
 22411                              <1> g_rgszChoiceToStringLookupForWriteCache:
 22412 000043AE [0436]              <1> 	dw	g_szValueBootDispModeDefault
 22413 000043B0 [042F]              <1> 	dw	g_szValueDrvWrCaDis
 22414 000043B2 [0D2F]              <1> 	dw	g_szValueDrvWrCaEn
 22415                              <1> 
 22416                              <1> g_rgwChoiceToValueLookupForXlateMode:
 22417 000043B4 0000                <1> 	dw	TRANSLATEMODE_NORMAL
 22418 000043B6 0100                <1> 	dw	TRANSLATEMODE_LARGE
 22419 000043B8 0200                <1> 	dw	TRANSLATEMODE_ASSISTED_LBA
 22420 000043BA 0300                <1> 	dw	TRANSLATEMODE_AUTO
 22421                              <1> 
 22422                              <1> g_rgszChoiceToStringLookupForXlateMode:
 22423 000043BC [B92E]              <1> 	dw	g_szValueDrvXlateNormal
 22424 000043BE [C02E]              <1> 	dw	g_szValueDrvXlateLarge
 22425 000043C0 [C62E]              <1> 	dw	g_szValueDrvXlateLBA
 22426 000043C2 [CA2E]              <1> 	dw	g_szValueDrvXlateAuto
 22427                              <1> 
 22428                              <1> 
 22429                              <1> ; Section containing code
 22430                              <1> SECTION .text
 22431                              <1> 
 22432                              <1> ;--------------------------------------------------------------------
 22433                              <1> ; MasterSlaveMenu_InitializeToDrvparamsOffsetInBX
 22434                              <1> ;	Parameters:
 22435                              <1> ;		SS:BP:	Menu handle
 22436                              <1> ;	Returns:
 22437                              <1> ;		Nothing
 22438                              <1> ;	Corrupts registers:
 22439                              <1> ;		AX
 22440                              <1> ;--------------------------------------------------------------------
 22441                              <1> ALIGN JUMP_ALIGN
 22442                              <1> MasterSlaveMenu_InitializeToDrvparamsOffsetInBX:
 22443 0000260C 8D07                <1> 	lea		ax, [bx+DRVPARAMS.wFlags]
 22444 0000260E 2EA3[AF42]          <1> 	mov		[cs:g_MenuitemMasterSlaveBlockModeTransfers+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22445 00002612 2EA3[CC42]          <1> 	mov		[cs:g_MenuitemMasterSlaveChsTranslateMode+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22446 00002616 2EA3[E942]          <1> 	mov		[cs:g_MenuitemMasterSlaveWriteCache+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22447 0000261A 2EA3[0643]          <1> 	mov		[cs:g_MenuitemMasterSlaveUserCHS+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22448 0000261E 2EA3[7A43]          <1> 	mov		[cs:g_MenuitemMasterSlaveUserLBA+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22449                              <1> 
 22450 00002622 8D4702              <1> 	lea		ax, [bx+DRVPARAMS.wCylinders]
 22451 00002625 2EA3[2343]          <1> 	mov		[cs:g_MenuitemMasterSlaveCylinders+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22452                              <1> 
 22453 00002629 8D4704              <1> 	lea		ax, [bx+DRVPARAMS.bHeads]
 22454 0000262C 2EA3[4043]          <1> 	mov		[cs:g_MenuitemMasterSlaveHeads+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22455                              <1> 
 22456 00002630 8D4705              <1> 	lea		ax, [bx+DRVPARAMS.bSect]
 22457 00002633 2EA3[5D43]          <1> 	mov		[cs:g_MenuitemMasterSlaveSectors+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22458                              <1> 
 22459 00002637 8D4702              <1> 	lea		ax, [bx+DRVPARAMS.dwMaximumLBA]
 22460 0000263A 2EA3[9743]          <1> 	mov		[cs:g_MenuitemMasterSlaveUserLbaValue+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset], ax
 22461 0000263E C3                  <1> 	ret
 22462                              <1> 
 22463                              <1> 
 22464                              <1> ;--------------------------------------------------------------------
 22465                              <1> ; MasterSlaveMenu_EnterMenuOrModifyItemVisibility
 22466                              <1> ;	Parameters:
 22467                              <1> ;		SS:BP:	Menu handle
 22468                              <1> ;	Returns:
 22469                              <1> ;		Nothing
 22470                              <1> ;	Corrupts registers:
 22471                              <1> ;		All, except BP
 22472                              <1> ;--------------------------------------------------------------------
 22473                              <1> ALIGN JUMP_ALIGN
 22474                              <1> MasterSlaveMenu_EnterMenuOrModifyItemVisibility:
 22475 0000263F 0E                  <1> 	push	cs
 22476 00002640 1F                  <1> 	pop		ds
 22477 00002641 E80C00              <1> 	call	.EnableOrDisableUserCHSandLBA
 22478 00002644 E83B00              <1> 	call	.EnableOrDisableCHandS
 22479 00002647 E86C00              <1> 	call	.EnableOrDisableUserLbaValue
 22480 0000264A BE[8042]            <1> 	mov		si, g_MenupageForMasterSlaveMenu
 22481 0000264D E9B7FA              <1> 	jmp		Menupage_ChangeToNewMenupageInDSSI
 22482                              <1> 
 22483                              <1> 
 22484                              <1> ;--------------------------------------------------------------------
 22485                              <1> ; .EnableOrDisableUserCHSandLBA
 22486                              <1> ;	Parameters:
 22487                              <1> ;		SS:BP:	Menu handle
 22488                              <1> ;	Returns:
 22489                              <1> ;		Nothing
 22490                              <1> ;	Corrupts registers:
 22491                              <1> ;		AX, BX
 22492                              <1> ;--------------------------------------------------------------------
 22493                              <1> ALIGN JUMP_ALIGN
 22494                              <1> .EnableOrDisableUserCHSandLBA:
 22495 00002650 8B1E[7A43]          <1> 	mov		bx, [g_MenuitemMasterSlaveUserLBA+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 22496 00002654 E8B3F2              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 22497 00002657 A94000              <1> 	test	ax, FLG_DRVPARAMS_USERLBA
 22498 0000265A 751B                <1> 	jnz		SHORT .DisableCHSandEnableLBA
 22499 0000265C A92000              <1> 	test	ax, FLG_DRVPARAMS_USERCHS
 22500 0000265F 750B                <1> 	jnz		SHORT .EnableCHSandDisableLBA
 22501                              <1> 
 22502                              <1> 	; Enable both
 22503 00002661 BB[FA42]            <1> 	mov		bx, g_MenuitemMasterSlaveUserCHS
 22504 00002664 E86400              <1> 	call	.EnableMenuitemFromCSBX
 22505 00002667 BB[6E43]            <1> 	mov		bx, g_MenuitemMasterSlaveUserLBA
 22506 0000266A EB5F                <1> 	jmp		.EnableMenuitemFromCSBX
 22507                              <1> 
 22508                              <1> ALIGN JUMP_ALIGN
 22509                              <1> .EnableCHSandDisableLBA:
 22510 0000266C BB[FA42]            <1> 	mov		bx, g_MenuitemMasterSlaveUserCHS
 22511 0000266F E85900              <1> 	call	.EnableMenuitemFromCSBX
 22512 00002672 BB[6E43]            <1> 	mov		bx, g_MenuitemMasterSlaveUserLBA
 22513 00002675 EB5A                <1> 	jmp		.DisableMenuitemFromCSBX
 22514                              <1> 
 22515                              <1> ALIGN JUMP_ALIGN
 22516                              <1> .DisableCHSandEnableLBA:
 22517 00002677 BB[6E43]            <1> 	mov		bx, g_MenuitemMasterSlaveUserLBA
 22518 0000267A E84E00              <1> 	call	.EnableMenuitemFromCSBX
 22519 0000267D BB[FA42]            <1> 	mov		bx, g_MenuitemMasterSlaveUserCHS
 22520 00002680 EB4F                <1> 	jmp		.DisableMenuitemFromCSBX
 22521                              <1> 
 22522                              <1> 
 22523                              <1> ;--------------------------------------------------------------------
 22524                              <1> ; .EnableOrDisableCHandS
 22525                              <1> ;	Parameters:
 22526                              <1> ;		SS:BP:	Menu handle
 22527                              <1> ;	Returns:
 22528                              <1> ;		Nothing
 22529                              <1> ;	Corrupts registers:
 22530                              <1> ;		AX, BX
 22531                              <1> ;--------------------------------------------------------------------
 22532                              <1> ALIGN JUMP_ALIGN
 22533                              <1> .EnableOrDisableCHandS:
 22534 00002682 2E8B1E[0643]        <1> 	mov		bx, [cs:g_MenuitemMasterSlaveUserCHS+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 22535 00002687 E880F2              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 22536 0000268A A92000              <1> 	test	ax, FLG_DRVPARAMS_USERCHS
 22537 0000268D 7416                <1> 	jz		SHORT .DisableCHandS
 22538 0000268F A94000              <1> 	test	ax, FLG_DRVPARAMS_USERLBA
 22539 00002692 7511                <1> 	jnz		SHORT .DisableCHandS
 22540                              <1> 
 22541 00002694 BB[1743]            <1> 	mov		bx, g_MenuitemMasterSlaveCylinders
 22542 00002697 E83100              <1> 	call	.EnableMenuitemFromCSBX
 22543 0000269A BB[3443]            <1> 	mov		bx, g_MenuitemMasterSlaveHeads
 22544 0000269D E82B00              <1> 	call	.EnableMenuitemFromCSBX
 22545 000026A0 BB[5143]            <1> 	mov		bx, g_MenuitemMasterSlaveSectors
 22546 000026A3 EB26                <1> 	jmp		SHORT .EnableMenuitemFromCSBX
 22547                              <1> 
 22548                              <1> ALIGN JUMP_ALIGN
 22549                              <1> .DisableCHandS:
 22550 000026A5 BB[1743]            <1> 	mov		bx, g_MenuitemMasterSlaveCylinders
 22551 000026A8 E82600              <1> 	call	.DisableMenuitemFromCSBX
 22552 000026AB BB[3443]            <1> 	mov		bx, g_MenuitemMasterSlaveHeads
 22553 000026AE E82000              <1> 	call	.DisableMenuitemFromCSBX
 22554 000026B1 BB[5143]            <1> 	mov		bx, g_MenuitemMasterSlaveSectors
 22555 000026B4 EB1B                <1> 	jmp		SHORT .DisableMenuitemFromCSBX
 22556                              <1> 
 22557                              <1> 
 22558                              <1> ;--------------------------------------------------------------------
 22559                              <1> ; .EnableOrDisableUserLbaValue
 22560                              <1> ;	Parameters:
 22561                              <1> ;		SS:BP:	Menu handle
 22562                              <1> ;	Returns:
 22563                              <1> ;		Nothing
 22564                              <1> ;	Corrupts registers:
 22565                              <1> ;		AX, BX
 22566                              <1> ;--------------------------------------------------------------------
 22567                              <1> ALIGN JUMP_ALIGN
 22568                              <1> .EnableOrDisableUserLbaValue:
 22569 000026B6 2E8B1E[7A43]        <1> 	mov		bx, [cs:g_MenuitemMasterSlaveUserLBA+MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset]
 22570 000026BB E84CF2              <1> 	call	Buffers_GetRomvarsValueToAXfromOffsetInBX
 22571 000026BE BB[8B43]            <1> 	mov		bx, g_MenuitemMasterSlaveUserLbaValue
 22572 000026C1 A92000              <1> 	test	ax, FLG_DRVPARAMS_USERCHS
 22573 000026C4 750B                <1> 	jnz		SHORT .DisableMenuitemFromCSBX
 22574 000026C6 A94000              <1> 	test	ax, FLG_DRVPARAMS_USERLBA
 22575 000026C9 7406                <1> 	jz		SHORT .DisableMenuitemFromCSBX
 22576                              <1> 	; Fall to .EnableMenuitemFromCSBX
 22577                              <1> 
 22578                              <1> 
 22579                              <1> ;--------------------------------------------------------------------
 22580                              <1> ; .EnableMenuitemFromCSBX
 22581                              <1> ; .DisableMenuitemFromCSBX
 22582                              <1> ;	Parameters:
 22583                              <1> ;		CS:BX:	Ptr to MENUITEM
 22584                              <1> ;	Returns:
 22585                              <1> ;		Nothing
 22586                              <1> ;	Corrupts registers:
 22587                              <1> ;		Nothing
 22588                              <1> ;--------------------------------------------------------------------
 22589                              <1> ALIGN JUMP_ALIGN
 22590                              <1> .EnableMenuitemFromCSBX:
 22591 000026CB 2E804F0A01          <1> 	or		BYTE [cs:bx+MENUITEM.bFlags], FLG_MENUITEM_VISIBLE
 22592 000026D0 C3                  <1> 	ret
 22593                              <1> 
 22594                              <1> ALIGN JUMP_ALIGN
 22595                              <1> .DisableMenuitemFromCSBX:
 22596 000026D1 2E80670AFE          <1> 	and		BYTE [cs:bx+MENUITEM.bFlags], ~FLG_MENUITEM_VISIBLE
 22597 000026D6 C3                  <1> 	ret
 22598                              <1> 
 22599                              <1> 
 22600                              <1> ;--------------------------------------------------------------------
 22601                              <1> ; MENUITEM value reader functions
 22602                              <1> ;	Parameters:
 22603                              <1> ;		AX:		Value from MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset
 22604                              <1> ;		DS:SI:	Ptr to MENUITEM
 22605                              <1> ;		ES:DI:	Ptr to value variable
 22606                              <1> ;	Returns:
 22607                              <1> ;		AX:		Value with possible modifications
 22608                              <1> ;	Corrupts registers:
 22609                              <1> ;		Nothing
 22610                              <1> ;--------------------------------------------------------------------
 22611                              <1> ALIGN JUMP_ALIGN
 22612                              <1> ValueReaderForUserLbaValue:
 22613 000026D7 52                  <1> 	push	dx
 22614                              <1> 
 22615 000026D8 268B05              <1> 	mov		ax, [es:di]
 22616 000026DB 268B5502            <1> 	mov		dx, [es:di+2]		; DX:AX now holds user defined LBA28 limit
 22617 000026DF 83C001              <1> 	add		ax, BYTE 1			; Increment by one
 22618 000026E2 83D200              <1> 	adc		dx, BYTE 0
 22619                              <1> 
 22620 000026E5 92                  <1> 	xchg	ax, dx				; SHR 16
 22621                              <1> 	eSHIFT_IM ax, 4, shr		; SHR 4 => AX = DX:AX / (1024*1024)
 22622                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 22623                              <2> %ifndef USE_186
 22624                              <2>  %ifidni %1, cl
 22625                              <2>  times %2 %3 %1, 1
 22626                              <2>  %elifidni %1, ch
 22627                              <2>  times %2 %3 %1, 1
 22628                              <2>  %elifidni %1, cx
 22629                              <2>  times %2 %3 %1, 1
 22630                              <2>  %else
 22631                              <2>  %if %2 > 3
 22632 000026E6 51                  <2>  push cx
 22633 000026E7 B104                <2>  mov cl, %2
 22634 000026E9 D3E8                <2>  %3 %1, cl
 22635 000026EB 59                  <2>  pop cx
 22636                              <2>  %else
 22637                              <2>  times %2 %3 %1, 1
 22638                              <2>  %endif
 22639                              <2>  %endif
 22640                              <2> 
 22641                              <2> %else
 22642                              <2>  %3 %1, %2
 22643                              <2> %endif
 22644                              <2> %endif
 22645                              <1> 
 22646 000026EC 5A                  <1> 	pop		dx
 22647 000026ED C3                  <1> 	ret
 22648                              <1> 
 22649                              <1> 
 22650                              <1> ;--------------------------------------------------------------------
 22651                              <1> ; MENUITEM value writer functions
 22652                              <1> ;	Parameters:
 22653                              <1> ;		AX:		Value to be written to MENUITEM.itemValue+ITEM_VALUE.wRomvarsValueOffset
 22654                              <1> ;		DS:SI:	Ptr to MENUITEM
 22655                              <1> ;		ES:DI:	Ptr to value variable
 22656                              <1> ;	Returns:
 22657                              <1> ;		AX:		Value to be stored
 22658                              <1> ;	Corrupts registers:
 22659                              <1> ;		Nothing
 22660                              <1> ;--------------------------------------------------------------------
 22661                              <1> ALIGN JUMP_ALIGN
 22662                              <1> ValueWriterForUserLbaValue:
 22663 000026EE 52                  <1> 	push	dx
 22664                              <1> 
 22665 000026EF 31D2                <1> 	xor		dx, dx
 22666                              <1> 	eSHIFT_IM ax, 4, shl
 22667                              <2> %ifndef CHECK_FOR_UNUSED_ENTRYPOINTS
 22668                              <2> %ifndef USE_186
 22669                              <2>  %ifidni %1, cl
 22670                              <2>  times %2 %3 %1, 1
 22671                              <2>  %elifidni %1, ch
 22672                              <2>  times %2 %3 %1, 1
 22673                              <2>  %elifidni %1, cx
 22674                              <2>  times %2 %3 %1, 1
 22675                              <2>  %else
 22676                              <2>  %if %2 > 3
 22677 000026F1 51                  <2>  push cx
 22678 000026F2 B104                <2>  mov cl, %2
 22679 000026F4 D3E0                <2>  %3 %1, cl
 22680 000026F6 59                  <2>  pop cx
 22681                              <2>  %else
 22682                              <2>  times %2 %3 %1, 1
 22683                              <2>  %endif
 22684                              <2>  %endif
 22685                              <2> 
 22686                              <2> %else
 22687                              <2>  %3 %1, %2
 22688                              <2> %endif
 22689                              <2> %endif
 22690 000026F7 92                  <1> 	xchg	dx, ax			; DX:AX now holds AX * 1024 * 1024
 22691                              <1> 
 22692 000026F8 83E801              <1> 	sub		ax, BYTE 1		; Decrement DX:AX by one
 22693 000026FB 83DA00              <1> 	sbb		dx, BYTE 0		; (necessary since maximum LBA28 sector count is 0FFF FFFFh)
 22694                              <1> 
 22695 000026FE 26895502            <1> 	mov		[es:di+2], dx	; Store DX by ourselves
 22696 00002702 5A                  <1> 	pop		dx
 22697 00002703 C3                  <1> 	ret						; AX will be stored by our menu system
 22698                              <1> 
 22699                              <1> ;
 22700                              <1> ; No change to CHS flag, but we use this opportunity to change defaults stored in the CHS values if we are
 22701                              <1> ; changing in/out of user CHS settings (since we use these bytes in different ways with the LBA setting).
 22702                              <1> ;
 22703                              <1> ALIGN JUMP_ALIGN
 22704                              <1> MasterSlaveMenu_WriteCHSFlag:
 22705 00002704 26F7052000          <1> 		test	word [es:di], FLG_DRVPARAMS_USERCHS
 22706 00002709 7521                <1> 		jnz		.alreadySet
 22707                              <1> 
 22708 0000270B 50                  <1> 		push	ax
 22709 0000270C 57                  <1> 		push	di
 22710 0000270D 56                  <1> 		push	si
 22711                              <1> 
 22712 0000270E B84100              <1> 		mov		ax, MASTERSLAVE_CYLINDERS_DEFAULT
 22713 00002711 BE[1743]            <1> 		mov		si, g_MenuitemMasterSlaveCylinders
 22714 00002714 E802F8              <1> 		call	Menuitem_StoreValueFromAXtoMenuitemInDSSI
 22715                              <1> 
 22716 00002717 B81000              <1> 		mov		ax, MASTERSLAVE_HEADS_DEFAULT
 22717 0000271A BE[3443]            <1> 		mov		si, g_MenuitemMasterSlaveHeads
 22718 0000271D E8F9F7              <1> 		call	Menuitem_StoreValueFromAXtoMenuitemInDSSI
 22719                              <1> 
 22720 00002720 B83F00              <1> 		mov		ax, MASTERSLAVE_SECTORS_DEFAULT
 22721 00002723 BE[5143]            <1> 		mov		si, g_MenuitemMasterSlaveSectors
 22722 00002726 E8F0F7              <1> 		call	Menuitem_StoreValueFromAXtoMenuitemInDSSI
 22723                              <1> 
 22724 00002729 5E                  <1> 		pop		si
 22725 0000272A 5F                  <1> 		pop		di
 22726 0000272B 58                  <1> 		pop		ax
 22727                              <1> 
 22728                              <1> .alreadySet:
 22729 0000272C C3                  <1> 		ret
 22730                              <1> 
 22731                              <1> ;
 22732                              <1> ; No change to LBA flag, but we use this opportunity to change defaults stored in the LBA value if we are
 22733                              <1> ; changing in/out of user LBA settings (since we use these bytes in different ways with the CHS setting).
 22734                              <1> ;
 22735                              <1> ALIGN JUMP_ALIGN
 22736                              <1> MasterSlaveMenu_WriteLBAFlag:
 22737 0000272D 26F7054000          <1> 		test	word [es:di], FLG_DRVPARAMS_USERLBA
 22738 00002732 750F                <1> 		jnz		.alreadySet
 22739                              <1> 
 22740 00002734 50                  <1> 		push	ax
 22741 00002735 57                  <1> 		push	di
 22742 00002736 56                  <1> 		push	si
 22743                              <1> 
 22744 00002737 B84000              <1> 		mov		ax, MASTERSLAVE_USERLBA_DEFAULT
 22745 0000273A BE[8B43]            <1> 		mov		si, g_MenuitemMasterSlaveUserLbaValue
 22746 0000273D E8D9F7              <1> 		call	Menuitem_StoreValueFromAXtoMenuitemInDSSI
 22747                              <1> 
 22748 00002740 5E                  <1> 		pop		si
 22749 00002741 5F                  <1> 		pop		di
 22750 00002742 58                  <1> 		pop		ax
 22751                              <1> 
 22752                              <1> .alreadySet:
 22753 00002743 C3                  <1> 		ret
 22754                                  
 22755                                  
 22756                                  
 22757                                  ;--------------------------------------------------------------------
 22758                                  ; Program start
 22759                                  ;--------------------------------------------------------------------
 22760                                  ALIGN JUMP_ALIGN
 22761                                  Main_Start:
 22762 00002744 B8B007                  	mov		ax, SCREEN_BACKGROUND_CHARACTER_AND_ATTRIBUTE
 22763 00002747 E81100                  	call	InitializeScreenWithBackgroudCharAndAttrInAX
 22764                                  
 22765 0000274A E81C00                  	call	Main_InitializeCfgVars
 22766 0000274D E805F6                  	call	MenuEvents_DisplayMenu
 22767 00002750 B82007                  	mov		ax, DOS_BACKGROUND_CHARACTER_AND_ATTRIBUTE
 22768 00002753 E80500                  	call	InitializeScreenWithBackgroudCharAndAttrInAX
 22769                                  
 22770                                  	; Exit to DOS
 22771 00002756 B8004C                  	mov 	ax, 4C00h			; Exit to DOS
 22772 00002759 CD21                    	int 	21h
 22773                                  
 22774                                  
 22775                                  ;--------------------------------------------------------------------
 22776                                  ; InitializeScreenWithBackgroudCharAndAttrInAX
 22777                                  ;	Parameters:
 22778                                  ;		AL:		Background character
 22779                                  ;		AH:		Background attribute
 22780                                  ;	Returns:
 22781                                  ;		Nothing
 22782                                  ;	Corrupts registers:
 22783                                  ;		AX, DX, DI
 22784                                  ;--------------------------------------------------------------------
 22785                                  ALIGN JUMP_ALIGN
 22786                                  InitializeScreenWithBackgroudCharAndAttrInAX:
 22787 0000275B 92                      	xchg	dx, ax
 22788                                  	CALL_DISPLAY_LIBRARY InitializeDisplayContext	; Reset cursor etc
 22789                              <1>  %ifidn %1, PushDisplayContext
 22790                              <1>  call DisplayContext_Push
 22791                              <1>  %elifidn %1, PopDisplayContext
 22792                              <1>  call DisplayContext_Pop
 22793                              <1>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 22794                              <1>  call DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 22795                              <1>  %else
 22796 0000275C BF[D300]            <1>  mov di, %1
 22797 0000275F E80BD9              <1>  call Display_FunctionFromDI
 22798                              <1>  %endif
 22799 00002762 92                      	xchg	ax, dx
 22800                                  	JMP_DISPLAY_LIBRARY ClearScreenWithCharInALandAttrInAH
 22801                              <1>  %ifidn %1, PushDisplayContext
 22802                              <1>  jmp DisplayContext_Push
 22803                              <1>  %elifidn %1, PopDisplayContext
 22804                              <1>  call DisplayContext_Pop
 22805                              <1>  ret
 22806                              <1>  %elifidn %1, PrepareOffScreenBufferInESBXwithLengthInCX
 22807                              <1>  jmp DisplayContext_PrepareOffScreenBufferInESBXwithLengthInCX
 22808                              <1>  %elifidn %1, FormatNullTerminatedStringFromCSSI
 22809                              <1>  mov di, %1
 22810                              <1>  call Display_FunctionFromDI
 22811                              <1>  ret
 22812                              <1>  %else
 22813 00002763 BF[9B02]            <1>  mov di, %1
 22814 00002766 E904D9              <1>  jmp Display_FunctionFromDI
 22815                              <1>  %endif
 22816                                  
 22817                                  
 22818                                  ;--------------------------------------------------------------------
 22819                                  ; Main_InitializeCfgVars
 22820                                  ;	Parameters:
 22821                                  ;		DS:		Segment to CFGVARS
 22822                                  ;	Returns:
 22823                                  ;		Nothing
 22824                                  ;	Corrupts registers:
 22825                                  ;		AX, BX, CX, DI
 22826                                  ;--------------------------------------------------------------------
 22827                                  ALIGN JUMP_ALIGN
 22828                                  Main_InitializeCfgVars:
 22829 00002769 06                      	push	es
 22830                                  
 22831 0000276A E8E5F0                  	call	Buffers_Clear
 22832 0000276D E8F5F2                  	call	EEPROM_FindXtideUniversalBiosROMtoESDI
 22833 00002770 7304                    	jnc		SHORT .InitializationCompleted
 22834 00002772 8C060600                	mov		[CFGVARS.wEepromSegment], es
 22835                                  .InitializationCompleted:
 22836 00002776 07                      	pop		es
 22837 00002777 C3                      	ret
 22838                                  
 22839                                  
 22840                                  ; Section containing initialized data
 22841                                  SECTION .data
 22842                                  
 22843                                  ALIGN WORD_ALIGN
 22844                                  g_cfgVars:
 22845                                  istruc CFGVARS
 22846 000043C4 [7541]                  	at	CFGVARS.pMenupage,			dw	g_MenupageForMainMenu
 22847 000043C6 0800                    	at	CFGVARS.wFlags,				dw	DEFAULT_CFGVARS_FLAGS
 22848 000043C8 00<rept>0000            	at	CFGVARS.wEepromSegment,		dw	0
 22849 000043CC 02                      	at	CFGVARS.bEepromType,		db	DEFAULT_EEPROM_TYPE
 22850 000043CD 00                      	at	CFGVARS.bEepromPage,		db	DEFAULT_PAGE_SIZE
 22851 000043CE 02                      	at	CFGVARS.bSdpCommand,		db	DEFAULT_SDP_COMMAND
 22852 000043CF 00<rept>                iend
 22853                                  
 22854                                  
 22855                                  ; Section containing uninitialized data
 22856                                  SECTION .bss
